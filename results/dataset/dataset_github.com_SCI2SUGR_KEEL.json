[
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/SVM/SMO/core/Utils.java",
        "code": "  private static void quickSort(/*@non_null@*/ double[] array, /*@non_null@*/ int[] index, \n                                int left, int right) {\n\n    if (left < right) {\n      int middle = partition(array, index, left, right);\n      quickSort(array, index, left, middle);\n      quickSort(array, index, middle + 1, right);\n    }\n  }\n",
        "methodStartingLine": 1707,
        "methodEndingLine": 1715,
        "jml": "//@ requires 0 <= first && first <= right && right < array.length;\n//@ requires (\\forall int i; 0 <= i && i < index.length; 0 <= index[i] && index[i] < array.length);\n//@ requires array != index;"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/SVM/SMO/core/Utils.java",
        "code": "  private static void quickSort(/*@non_null@*/ int[] array, /*@non_null@*/  int[] index, \n                                int left, int right) {\n\n    if (left < right) {\n      int middle = partition(array, index, left, right);\n      quickSort(array, index, left, middle);\n      quickSort(array, index, middle + 1, right);\n    }\n  }\n",
        "methodStartingLine": 1730,
        "methodEndingLine": 1738,
        "jml": "//@ requires 0 <= first && first <= right && right < array.length;\n//@ requires (\\forall int i; 0 <= i && i < index.length; 0 <= index[i] && index[i] < array.length);\n//@ requires array != index;"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/SVM/SMO/core/Utils.java",
        "code": "  private static int select(/*@non_null@*/ double[] array, /*@non_null@*/ int[] index, \n                            int left, int right, int k) {\n    \n    if (left == right) {\n      return left;\n    } else {\n      int middle = partition(array, index, left, right);\n      if ((middle - left + 1) >= k) {\n        return select(array, index, left, middle, k);\n      } else {\n        return select(array, index, middle + 1, right, k - (middle - left + 1));\n      }\n    }\n  }\n",
        "methodStartingLine": 1753,
        "methodEndingLine": 1766,
        "jml": "//@ requires 0 <= first && first <= right && right < array.length;"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/SVM/SMO/core/Utils.java",
        "code": "  private static int select(/*@non_null@*/ int[] array, /*@non_null@*/ int[] index, \n                            int left, int right, int k) {\n    \n    if (left == right) {\n      return left;\n    } else {\n      int middle = partition(array, index, left, right);\n      if ((middle - left + 1) >= k) {\n        return select(array, index, left, middle, k);\n      } else {\n        return select(array, index, middle + 1, right, k - (middle - left + 1));\n      }\n    }\n  }\n",
        "methodStartingLine": 1781,
        "methodEndingLine": 1794,
        "jml": "//@ requires 0 <= first && first <= right && right < array.length;"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/SVM/SMO/core/Queue.java",
        "code": "    public QueueNode next(QueueNode next) {\n      return m_Next = next;\n    } //@ nowarn Invariant; // Because it stupidly checks the Queue invariant!\n",
        "methodStartingLine": 116,
        "methodEndingLine": 118,
        "jml": "//@ requires contents != null;\n//@ ensures m_Contents == contents;\n//@ ensures m_Next == null;"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/SVM/SMO/core/Queue.java",
        "code": "  public final synchronized void removeAllElements() {\n    m_Size = 0;\n    m_Head = null;\n    m_Tail = null;\n  }\n",
        "methodStartingLine": 177,
        "methodEndingLine": 181,
        "jml": "//@ ensures m_Size == 0;\n//@ ensures m_Head == null;\n//@ ensures m_Tail == null;"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/SVM/SMO/core/Queue.java",
        "code": "  public synchronized Object push(Object item) {\n    QueueNode newNode = new QueueNode(item);\n    \n    if (m_Head == null) {\n      m_Head = m_Tail = newNode;\n    } else {\n      m_Tail = m_Tail.next(newNode);\n    }\n    m_Size++;\n    return item;\n  }\n",
        "methodStartingLine": 198,
        "methodEndingLine": 208,
        "jml": "//@ requires item != null;\n//@ ensures m_Head != null;\n//@ ensures m_Tail != \\old(m_Tail);\n//@ ensures m_Size == \\old(m_Size) + 1;\n//@ ensures \\old(m_Size) == 0 ==> m_Head == m_Tail; \n//@ ensures \\old(m_Size) != 0 ==> m_Head == \\old(m_Head);\n//@ ensures m_Tail.contents() == \\old(item);\n//@ ensures \\result == item;"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/SVM/SMO/core/Queue.java",
        "code": "  public synchronized Object pop() \n      throws RuntimeException   // REDUNDANT, BUT ESCJAVA REQUIRES THIS\n  {\n    if (m_Head == null) {\n\tthrow new RuntimeException(\"Queue is empty\");\n    }\n    Object retval = m_Head.contents();\n    m_Size--;\n    m_Head = m_Head.next();\n    // Here we need to either tell ESC/Java some facts about\n    // the contents of the list after popping off the head,\n    // or turn off the 'invariant' warnings.\n    //\n    //@ assume m_Size == 0 <==> m_Head == null;\n    //@ assume m_Size == 1 <==> m_Head == m_Tail;\n    if (m_Head == null) {\n      m_Tail = null;\n    }\n    return retval;\n  }\n",
        "methodStartingLine": 222,
        "methodEndingLine": 241,
        "jml": "//@ ensures m_Size == \\old(m_Size) - 1;\n//@ ensures m_Head == \\old(m_Head.m_Next);\n//@ ensures m_Head != null ==> m_Tail == \\old(m_Tail);\n//@ ensures \\result == \\old(m_Head.m_Contents);"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/SVM/SMO/core/Queue.java",
        "code": "  public /*@ pure @*/ synchronized Object peek() \n    throws RuntimeException\n  { \n    if (m_Head == null) {\n      throw new RuntimeException(\"Queue is empty\");\n    }\n    return m_Head.contents();\n  }\n",
        "methodStartingLine": 251,
        "methodEndingLine": 258,
        "jml": "//@ ensures \\result == \\old(m_Head.m_Contents);"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/SVM/SMO/core/Queue.java",
        "code": "  public /*@ pure @*/ boolean empty() {\n    return m_Head == null;\n  }\n",
        "methodStartingLine": 266,
        "methodEndingLine": 268,
        "jml": "//@ ensures \\result <==> m_Head == null;"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/SVM/SMO/core/Queue.java",
        "code": "  public /*@ pure @*/ int size() {\n    return m_Size;\n  }\n",
        "methodStartingLine": 276,
        "methodEndingLine": 278,
        "jml": "//@ ensures \\result == m_Size;"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/SVM/SMO/core/Queue.java",
        "code": "  public  /*@ pure @*/ String toString() {\n\n    String retval = \"Queue Contents \"+m_Size+\" elements\\n\";\n    QueueNode current = m_Head;\n    if (current == null) {\n      return retval + \"Empty\\n\";\n    } else {\n      while (current != null) {\n        retval += current.contents().toString()+\"\\n\"; //@nowarn Modifies;\n\tcurrent = current.next();\n      }\n    }\n    return retval;\n  } //@ nowarn Post;\n",
        "methodStartingLine": 288,
        "methodEndingLine": 301,
        "jml": "//@ ensures \\result != null;\n//@ ensures (* \\result == textual description of the queue *);"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/SVM/SMO/core/Queue.java",
        "code": "  public static void main(String [] argv) {\n\n    try {\n      Queue queue = new Queue();\n      for(int i = 0; i < argv.length; i++) {\n\tqueue.push(argv[i]);\n      }\n      System.out.println(\"After pushing command line arguments\");\n      System.out.println(queue.toString());\n      while (!queue.empty()) {\n\tSystem.out.println(\"Pop: \" + queue.pop().toString());\n      }\n      // try one more pop, to make sure we get an exception\n      try \n\t{\n\t  queue.pop();\n\t  System.out.println(\"ERROR: pop did not throw exception!\");\n\t}\n      catch (RuntimeException ex)\n        {\n\t  System.out.println(\"Pop on empty queue correctly gave exception.\");\n\t}\n    } catch (Exception ex) {\n      System.out.println(ex.getMessage());\n    }\n  }\n",
        "methodStartingLine": 311,
        "methodEndingLine": 336,
        "jml": "//@ requires argv.length >= 0;\n//@ requires argv != null;\n//@ requires (\\forall int i; 0 <= i && i < argv.length; argv[i] != null);"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/SVM/SMO/core/FastVector.java",
        "code": "    public final /*@pure@*/ boolean hasMoreElements() {\n\n      if (m_Counter < m_Vector.size()) {\n\treturn true;\n      }\n      return false;\n    }\n",
        "methodStartingLine": 129,
        "methodEndingLine": 135,
        "jml": "//@ requires 0 <= special && special < vector.size();"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/SVM/SMO/core/FastVector.java",
        "code": "  public final void addElement(Object element) {\n\n    Object[] newObjects;\n\n    if (m_Size == m_Objects.length) {\n      newObjects = new Object[m_CapacityMultiplier *\n\t\t\t     (m_Objects.length +\n\t\t\t      m_CapacityIncrement)];\n      System.arraycopy(m_Objects, 0, newObjects, 0, m_Size);\n      m_Objects = newObjects;\n    }\n    m_Objects[m_Size] = element;\n    m_Size++;\n  }\n",
        "methodStartingLine": 202,
        "methodEndingLine": 215,
        "jml": "//@ requires capacity >= 0;"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/SVM/SMO/core/FastVector.java",
        "code": "  public final /*@pure@*/ int capacity() {\n  \n    return m_Objects.length;\n  }\n",
        "methodStartingLine": 223,
        "methodEndingLine": 226,
        "jml": "//@ ensures \\result == m_Objects.length;"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/SVM/SMO/core/FastVector.java",
        "code": "  public final /*@pure@*/ Object elementAt(int index) {\n\n    return m_Objects[index];\n  }\n",
        "methodStartingLine": 271,
        "methodEndingLine": 274,
        "jml": "//@ requires 0 <= index;\n//@ requires index < m_Objects.length;"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/SVM/SMO/core/FastVector.java",
        "code": "  public final /*@pure@*/ Enumeration elements(int index) {\n  \n    return new FastVectorEnumeration(this, index);\n  }\n",
        "methodStartingLine": 294,
        "methodEndingLine": 297,
        "jml": "//@ requires 0 <= index && index < size();"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/SVM/SMO/core/FastVector.java",
        "code": "  public final /*@pure@*/ Object firstElement() {\n\n    return m_Objects[0];\n  }\n",
        "methodStartingLine": 322,
        "methodEndingLine": 325,
        "jml": "//@ requires m_Size > 0;"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/SVM/SMO/core/FastVector.java",
        "code": "  public final /*@pure@*/ Object lastElement() {\n\n    return m_Objects[m_Size - 1];\n  }\n",
        "methodStartingLine": 378,
        "methodEndingLine": 381,
        "jml": "//@ requires m_Size > 0;"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/SVM/SMO/core/FastVector.java",
        "code": "  public final void removeElementAt(int index) {\n\n    System.arraycopy(m_Objects, index + 1, m_Objects, index, \n                     m_Size - index - 1);\n    m_Size--;\n  }\n",
        "methodStartingLine": 389,
        "methodEndingLine": 394,
        "jml": "//@ requires 0 <= index && index < m_Size;"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/SVM/SMO/core/FastVector.java",
        "code": "  public final void setElementAt(Object element, int index) {\n\n    m_Objects[index] = element;\n  }\n",
        "methodStartingLine": 452,
        "methodEndingLine": 455,
        "jml": "//@ requires 0 <= index && index < size();"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/SVM/SMO/core/FastVector.java",
        "code": "  public final /*@pure@*/ int size() {\n\n    return m_Size;\n  }\n",
        "methodStartingLine": 463,
        "methodEndingLine": 466,
        "jml": "//@ ensures \\result == m_Size;"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/SVM/SMO/core/FastVector.java",
        "code": "  public final void swap(int first, int second) {\n\n    Object help = m_Objects[first];\n\n    m_Objects[first] = m_Objects[second];\n    m_Objects[second] = help;\n  }\n",
        "methodStartingLine": 476,
        "methodEndingLine": 482,
        "jml": "//@ requires 0 <= first && first < size();\n//@ requires 0 <= second && second < size();"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/Semi_Supervised_Learning/CLCC/Utils.java",
        "code": "  private static void quickSort(/*@non_null@*/ double[] array, /*@non_null@*/ int[] index, \n                                int left, int right) {\n\n    if (left < right) {\n      int middle = partition(array, index, left, right);\n      quickSort(array, index, left, middle);\n      quickSort(array, index, middle + 1, right);\n    }\n  }\n",
        "methodStartingLine": 1787,
        "methodEndingLine": 1795,
        "jml": "//@ requires 0 <= first && first <= right && right < array.length;\n//@ requires (\\forall int i; 0 <= i && i < index.length; 0 <= index[i] && index[i] < array.length);\n//@ requires array != index;"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/Semi_Supervised_Learning/CLCC/Utils.java",
        "code": "  private static void quickSort(/*@non_null@*/ int[] array, /*@non_null@*/  int[] index, \n                                int left, int right) {\n\n    if (left < right) {\n      int middle = partition(array, index, left, right);\n      quickSort(array, index, left, middle);\n      quickSort(array, index, middle + 1, right);\n    }\n  }\n",
        "methodStartingLine": 1810,
        "methodEndingLine": 1818,
        "jml": "//@ requires 0 <= first && first <= right && right < array.length;\n//@ requires (\\forall int i; 0 <= i && i < index.length; 0 <= index[i] && index[i] < array.length);\n//@ requires array != index;"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/Semi_Supervised_Learning/CLCC/Utils.java",
        "code": "  private static int select(/*@non_null@*/ double[] array, /*@non_null@*/ int[] index, \n                            int left, int right, int k) {\n    \n    if (left == right) {\n      return left;\n    } else {\n      int middle = partition(array, index, left, right);\n      if ((middle - left + 1) >= k) {\n        return select(array, index, left, middle, k);\n      } else {\n        return select(array, index, middle + 1, right, k - (middle - left + 1));\n      }\n    }\n  }\n",
        "methodStartingLine": 1833,
        "methodEndingLine": 1846,
        "jml": "//@ requires 0 <= first && first <= right && right < array.length;"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/Semi_Supervised_Learning/CLCC/Utils.java",
        "code": "  private static int select(/*@non_null@*/ int[] array, /*@non_null@*/ int[] index, \n                            int left, int right, int k) {\n    \n    if (left == right) {\n      return left;\n    } else {\n      int middle = partition(array, index, left, right);\n      if ((middle - left + 1) >= k) {\n        return select(array, index, left, middle, k);\n      } else {\n        return select(array, index, middle + 1, right, k - (middle - left + 1));\n      }\n    }\n  }\n",
        "methodStartingLine": 1969,
        "methodEndingLine": 1982,
        "jml": "//@ requires 0 <= first && first <= right && right < array.length;"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/Semi_Supervised_Learning/CoForest/Utils.java",
        "code": "  private static void quickSort(/*@non_null@*/ double[] array, /*@non_null@*/ int[] index, \n                                int left, int right) {\n\n    if (left < right) {\n      int middle = partition(array, index, left, right);\n      quickSort(array, index, left, middle);\n      quickSort(array, index, middle + 1, right);\n    }\n  }\n",
        "methodStartingLine": 1785,
        "methodEndingLine": 1793,
        "jml": "//@ requires 0 <= first && first <= right && right < array.length;\n//@ requires (\\forall int i; 0 <= i && i < index.length; 0 <= index[i] && index[i] < array.length);\n//@ requires array != index;"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/Semi_Supervised_Learning/CoForest/Utils.java",
        "code": "  private static void quickSort(/*@non_null@*/ int[] array, /*@non_null@*/  int[] index, \n                                int left, int right) {\n\n    if (left < right) {\n      int middle = partition(array, index, left, right);\n      quickSort(array, index, left, middle);\n      quickSort(array, index, middle + 1, right);\n    }\n  }\n",
        "methodStartingLine": 1808,
        "methodEndingLine": 1816,
        "jml": "//@ requires 0 <= first && first <= right && right < array.length;\n//@ requires (\\forall int i; 0 <= i && i < index.length; 0 <= index[i] && index[i] < array.length);\n//@ requires array != index;"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/Semi_Supervised_Learning/CoForest/Utils.java",
        "code": "  private static int select(/*@non_null@*/ double[] array, /*@non_null@*/ int[] index, \n                            int left, int right, int k) {\n    \n    if (left == right) {\n      return left;\n    } else {\n      int middle = partition(array, index, left, right);\n      if ((middle - left + 1) >= k) {\n        return select(array, index, left, middle, k);\n      } else {\n        return select(array, index, middle + 1, right, k - (middle - left + 1));\n      }\n    }\n  }\n",
        "methodStartingLine": 1831,
        "methodEndingLine": 1844,
        "jml": "//@ requires 0 <= first && first <= right && right < array.length;"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/Semi_Supervised_Learning/CoForest/Utils.java",
        "code": "  private static int select(/*@non_null@*/ int[] array, /*@non_null@*/ int[] index, \n                            int left, int right, int k) {\n    \n    if (left == right) {\n      return left;\n    } else {\n      int middle = partition(array, index, left, right);\n      if ((middle - left + 1) >= k) {\n        return select(array, index, left, middle, k);\n      } else {\n        return select(array, index, middle + 1, right, k - (middle - left + 1));\n      }\n    }\n  }\n",
        "methodStartingLine": 1967,
        "methodEndingLine": 1980,
        "jml": "//@ requires 0 <= first && first <= right && right < array.length;"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/Semi_Supervised_Learning/Basic/PrototypeSet.java",
        "code": "   public PrototypeSet trainCV(int numFolds, int numFold) {\n\n     int numInstForFold, first, offset;\n     PrototypeSet train;\n  \n\n     numInstForFold = size() / numFolds;\n     if (numFold < size() % numFolds) {\n       numInstForFold++;\n       offset = numFold;\n     }else\n       offset = size() % numFolds;\n     train = new PrototypeSet(); //this, numInstances() - numInstForFold);\n     first = numFold * (size() / numFolds) + offset;\n     //copyInstances(0, train, first);\n     for(int i=0; i<first; i++){\n    \t train.add(this.get(i));\n     }\n     \n     //copyInstances(first + numInstForFold, train,  size() - first - numInstForFold);\n     for(int i=first + numInstForFold; i< (size() - first - numInstForFold); i++){\n    \t train.add(this.get(i));\n     }\n     \n\n     train.randomize();\n     return train;\n   }\n",
        "methodStartingLine": 2553,
        "methodEndingLine": 2580,
        "jml": "//@ requires 2 <= numFolds && numFolds < numInstances();\n//@ requires 0 <= numFold && numFold < numFolds;"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/Semi_Supervised_Learning/Basic/PrototypeSet.java",
        "code": "   public  PrototypeSet testCV(int numFolds, int numFold) {\n\n     int numInstForFold, first, offset;\n     PrototypeSet test;\n     \n\n     numInstForFold = size() / numFolds;\n     if (numFold < size() % numFolds){\n       numInstForFold++;\n       offset = numFold;\n     }else\n       offset = size() % numFolds;\n     test = new PrototypeSet(); //Instances(this, numInstForFold);\n     first = numFold * (size() / numFolds) + offset;\n     \n     //copyInstances(first, test, numInstForFold);\n     for(int i=first; i<numInstForFold; i++){\n    \t test.add(this.get(i));\n     }\n\n     return test;\n   }\n",
        "methodStartingLine": 2597,
        "methodEndingLine": 2618,
        "jml": "//@ requires 2 <= numFolds && numFolds < numInstances();\n//@ requires 0 <= numFold && numFold < numFolds;"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/Semi_Supervised_Learning/Basic/PrototypeSet.java",
        "code": "   protected int partition(int attIndex, int l, int r) {\n     \n     double pivot = get((l + r) / 2).getInput(attIndex);\n\n     while (l < r) {\n       while ((get(l).getInput(attIndex) < pivot) && (l < r)) {\n         l++;\n       }\n       while ((get(r).getInput(attIndex) > pivot) && (l < r)) {\n         r--;\n       }\n       if (l < r) {\n         swap(l, r);\n         l++;\n         r--;\n       }\n     }\n     if ((l == r) && (get(r).getInput(attIndex) > pivot)) {\n       r--;\n     } \n\n     return r;\n   }\n",
        "methodStartingLine": 2666,
        "methodEndingLine": 2688,
        "jml": "//@ requires 0 <= attIndex && attIndex < numAttributes();\n//@ requires 0 <= left && left <= right && right < numInstances();"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/Semi_Supervised_Learning/Basic/PrototypeSet.java",
        "code": "   protected void quickSort(int attIndex, int left, int right) {\n\n     if (left < right) {\n       int middle = partition(attIndex, left, right);\n       quickSort(attIndex, left, middle);\n       quickSort(attIndex, middle + 1, right);\n     }\n   }\n",
        "methodStartingLine": 2701,
        "methodEndingLine": 2708,
        "jml": "//@ requires 0 <= attIndex && attIndex < numAttributes();\n//@ requires 0 <= first && first <= right && right < numInstances();"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/Semi_Supervised_Learning/ADE_CoForest/Utils.java",
        "code": "  private static void quickSort(/*@non_null@*/ double[] array, /*@non_null@*/ int[] index, \n                                int left, int right) {\n\n    if (left < right) {\n      int middle = partition(array, index, left, right);\n      quickSort(array, index, left, middle);\n      quickSort(array, index, middle + 1, right);\n    }\n  }\n",
        "methodStartingLine": 1785,
        "methodEndingLine": 1793,
        "jml": "//@ requires 0 <= first && first <= right && right < array.length;\n//@ requires (\\forall int i; 0 <= i && i < index.length; 0 <= index[i] && index[i] < array.length);\n//@ requires array != index;"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/Semi_Supervised_Learning/ADE_CoForest/Utils.java",
        "code": "  private static void quickSort(/*@non_null@*/ int[] array, /*@non_null@*/  int[] index, \n                                int left, int right) {\n\n    if (left < right) {\n      int middle = partition(array, index, left, right);\n      quickSort(array, index, left, middle);\n      quickSort(array, index, middle + 1, right);\n    }\n  }\n",
        "methodStartingLine": 1808,
        "methodEndingLine": 1816,
        "jml": "//@ requires 0 <= first && first <= right && right < array.length;\n//@ requires (\\forall int i; 0 <= i && i < index.length; 0 <= index[i] && index[i] < array.length);\n//@ requires array != index;"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/Semi_Supervised_Learning/ADE_CoForest/Utils.java",
        "code": "  private static int select(/*@non_null@*/ double[] array, /*@non_null@*/ int[] index, \n                            int left, int right, int k) {\n    \n    if (left == right) {\n      return left;\n    } else {\n      int middle = partition(array, index, left, right);\n      if ((middle - left + 1) >= k) {\n        return select(array, index, left, middle, k);\n      } else {\n        return select(array, index, middle + 1, right, k - (middle - left + 1));\n      }\n    }\n  }\n",
        "methodStartingLine": 1831,
        "methodEndingLine": 1844,
        "jml": "//@ requires 0 <= first && first <= right && right < array.length;"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/Semi_Supervised_Learning/ADE_CoForest/Utils.java",
        "code": "  private static int select(/*@non_null@*/ int[] array, /*@non_null@*/ int[] index, \n                            int left, int right, int k) {\n    \n    if (left == right) {\n      return left;\n    } else {\n      int middle = partition(array, index, left, right);\n      if ((middle - left + 1) >= k) {\n        return select(array, index, left, middle, k);\n      } else {\n        return select(array, index, middle + 1, right, k - (middle - left + 1));\n      }\n    }\n  }\n",
        "methodStartingLine": 1967,
        "methodEndingLine": 1980,
        "jml": "//@ requires 0 <= first && first <= right && right < array.length;"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/Fuzzy_Rule_Learning/Hybrid/FURIA/core/Utils.java",
        "code": "  private static void quickSort(/*@non_null@*/ double[] array, /*@non_null@*/ int[] index,\n                                int left, int right) {\n\n    if (left < right) {\n      int middle = partition(array, index, left, right);\n      quickSort(array, index, left, middle);\n      quickSort(array, index, middle + 1, right);\n    }\n  }\n",
        "methodStartingLine": 1708,
        "methodEndingLine": 1716,
        "jml": "//@ requires 0 <= first && first <= right && right < array.length;\n//@ requires (\\forall int i; 0 <= i && i < index.length; 0 <= index[i] && index[i] < array.length);\n//@ requires array != index;"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/Fuzzy_Rule_Learning/Hybrid/FURIA/core/Utils.java",
        "code": "  private static void quickSort(/*@non_null@*/ int[] array, /*@non_null@*/  int[] index,\n                                int left, int right) {\n\n    if (left < right) {\n      int middle = partition(array, index, left, right);\n      quickSort(array, index, left, middle);\n      quickSort(array, index, middle + 1, right);\n    }\n  }\n",
        "methodStartingLine": 1731,
        "methodEndingLine": 1739,
        "jml": "//@ requires 0 <= first && first <= right && right < array.length;\n//@ requires (\\forall int i; 0 <= i && i < index.length; 0 <= index[i] && index[i] < array.length);\n//@ requires array != index;"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/Fuzzy_Rule_Learning/Hybrid/FURIA/core/Utils.java",
        "code": "  private static int select(/*@non_null@*/ double[] array, /*@non_null@*/ int[] index,\n                            int left, int right, int k) {\n\n    if (left == right) {\n      return left;\n    } else {\n      int middle = partition(array, index, left, right);\n      if ((middle - left + 1) >= k) {\n        return select(array, index, left, middle, k);\n      } else {\n        return select(array, index, middle + 1, right, k - (middle - left + 1));\n      }\n    }\n  }\n",
        "methodStartingLine": 1754,
        "methodEndingLine": 1767,
        "jml": "//@ requires 0 <= first && first <= right && right < array.length;"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/Fuzzy_Rule_Learning/Hybrid/FURIA/core/Utils.java",
        "code": "  private static int select(/*@non_null@*/ int[] array, /*@non_null@*/ int[] index,\n                            int left, int right, int k) {\n\n    if (left == right) {\n      return left;\n    } else {\n      int middle = partition(array, index, left, right);\n      if ((middle - left + 1) >= k) {\n        return select(array, index, left, middle, k);\n      } else {\n        return select(array, index, middle + 1, right, k - (middle - left + 1));\n      }\n    }\n  }\n",
        "methodStartingLine": 1890,
        "methodEndingLine": 1903,
        "jml": "//@ requires 0 <= first && first <= right && right < array.length;"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/Statistical_Classifiers/Logistic/core/Utils.java",
        "code": "  private static void quickSort(/*@non_null@*/ double[] array, /*@non_null@*/ int[] index, \n                                int left, int right) {\n\n    if (left < right) {\n      int middle = partition(array, index, left, right);\n      quickSort(array, index, left, middle);\n      quickSort(array, index, middle + 1, right);\n    }\n  }\n",
        "methodStartingLine": 1707,
        "methodEndingLine": 1715,
        "jml": "//@ requires 0 <= first && first <= right && right < array.length;\n//@ requires (\\forall int i; 0 <= i && i < index.length; 0 <= index[i] && index[i] < array.length);\n//@ requires array != index;"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/Statistical_Classifiers/Logistic/core/Utils.java",
        "code": "  private static void quickSort(/*@non_null@*/ int[] array, /*@non_null@*/  int[] index, \n                                int left, int right) {\n\n    if (left < right) {\n      int middle = partition(array, index, left, right);\n      quickSort(array, index, left, middle);\n      quickSort(array, index, middle + 1, right);\n    }\n  }\n",
        "methodStartingLine": 1730,
        "methodEndingLine": 1738,
        "jml": "//@ requires 0 <= first && first <= right && right < array.length;\n//@ requires (\\forall int i; 0 <= i && i < index.length; 0 <= index[i] && index[i] < array.length);\n//@ requires array != index;"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/Statistical_Classifiers/Logistic/core/Utils.java",
        "code": "  private static int select(/*@non_null@*/ double[] array, /*@non_null@*/ int[] index, \n                            int left, int right, int k) {\n    \n    if (left == right) {\n      return left;\n    } else {\n      int middle = partition(array, index, left, right);\n      if ((middle - left + 1) >= k) {\n        return select(array, index, left, middle, k);\n      } else {\n        return select(array, index, middle + 1, right, k - (middle - left + 1));\n      }\n    }\n  }\n",
        "methodStartingLine": 1753,
        "methodEndingLine": 1766,
        "jml": "//@ requires 0 <= first && first <= right && right < array.length;"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/Statistical_Classifiers/Logistic/core/Utils.java",
        "code": "  private static int select(/*@non_null@*/ int[] array, /*@non_null@*/ int[] index, \n                            int left, int right, int k) {\n    \n    if (left == right) {\n      return left;\n    } else {\n      int middle = partition(array, index, left, right);\n      if ((middle - left + 1) >= k) {\n        return select(array, index, left, middle, k);\n      } else {\n        return select(array, index, middle + 1, right, k - (middle - left + 1));\n      }\n    }\n  }\n",
        "methodStartingLine": 1781,
        "methodEndingLine": 1794,
        "jml": "//@ requires 0 <= first && first <= right && right < array.length;"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/Fuzzy_Rule_Learning/Hybrid/FURIA/core/Queue.java",
        "code": "    public QueueNode next(QueueNode next) {\n      return m_Next = next;\n    } //@ nowarn Invariant; // Because it stupidly checks the Queue invariant!\n",
        "methodStartingLine": 108,
        "methodEndingLine": 110,
        "jml": "//@ requires contents != null;\n//@ ensures m_Contents == contents;\n//@ ensures m_Next == null;\n//@ requires next != this ;\n//@ ensures m_Next==next && \\result==next;"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/Fuzzy_Rule_Learning/Hybrid/FURIA/core/Queue.java",
        "code": "    public /*@ pure @*/ QueueNode next() {\n      return m_Next;\n    }\n",
        "methodStartingLine": 117,
        "methodEndingLine": 119,
        "jml": "//@ ensures \\result == m_Next;"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/Fuzzy_Rule_Learning/Hybrid/FURIA/core/Queue.java",
        "code": "    public Object contents(Object contents) {\n      return m_Contents = contents;\n    }\n",
        "methodStartingLine": 129,
        "methodEndingLine": 131,
        "jml": "//@ requires contents != null;\n//@ ensures  m_Contents == contents && \\result == contents;"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/Fuzzy_Rule_Learning/Hybrid/FURIA/core/Queue.java",
        "code": "    public /*@ pure @*/ Object contents() {\n      return m_Contents;\n    }\n",
        "methodStartingLine": 138,
        "methodEndingLine": 140,
        "jml": "//@ ensures \\result == m_Contents;"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/Fuzzy_Rule_Learning/Hybrid/FURIA/core/Queue.java",
        "code": "  public final synchronized void removeAllElements() {\n    m_Size = 0;\n    m_Head = null;\n    m_Tail = null;\n  }\n",
        "methodStartingLine": 170,
        "methodEndingLine": 174,
        "jml": "//@ ensures m_Size == 0;\n//@ ensures m_Head == null;\n//@ ensures m_Tail == null;"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/Fuzzy_Rule_Learning/Hybrid/FURIA/core/Queue.java",
        "code": "  public synchronized Object push(Object item) {\n    QueueNode newNode = new QueueNode(item);\n\n    if (m_Head == null) {\n      m_Head = m_Tail = newNode;\n    } else {\n      m_Tail = m_Tail.next(newNode);\n    }\n    m_Size++;\n    return item;\n  }\n",
        "methodStartingLine": 191,
        "methodEndingLine": 201,
        "jml": "//@ requires item != null;\n//@ ensures m_Head != null;\n//@ ensures m_Tail != \\old(m_Tail);\n//@ ensures m_Size == \\old(m_Size) + 1;\n//@ ensures \\old(m_Size) == 0 ==> m_Head == m_Tail;\n//@ ensures \\old(m_Size) != 0 ==> m_Head == \\old(m_Head);\n//@ ensures m_Tail.contents() == \\old(item);\n//@ ensures \\result == item;"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/Fuzzy_Rule_Learning/Hybrid/FURIA/core/Queue.java",
        "code": "  public synchronized Object pop()\n      throws RuntimeException   // REDUNDANT, BUT ESCJAVA REQUIRES THIS\n  {\n    if (m_Head == null) {\n\tthrow new RuntimeException(\"Queue is empty\");\n    }\n    Object retval = m_Head.contents();\n    m_Size--;\n    m_Head = m_Head.next();\n    // Here we need to either tell ESC/Java some facts about\n    // the contents of the list after popping off the head,\n    // or turn off the 'invariant' warnings.\n    //\n    //@ assume m_Size == 0 <==> m_Head == null;\n    //@ assume m_Size == 1 <==> m_Head == m_Tail;\n    if (m_Head == null) {\n      m_Tail = null;\n    }\n    return retval;\n  }\n",
        "methodStartingLine": 215,
        "methodEndingLine": 234,
        "jml": "//@ ensures m_Size == \\old(m_Size) - 1;\n//@ ensures m_Head == \\old(m_Head.m_Next);\n//@ ensures m_Head != null ==> m_Tail == \\old(m_Tail);\n//@ ensures \\result == \\old(m_Head.m_Contents);"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/Fuzzy_Rule_Learning/Hybrid/FURIA/core/Queue.java",
        "code": "  public /*@ pure @*/ synchronized Object peek()\n    throws RuntimeException\n  {\n    if (m_Head == null) {\n      throw new RuntimeException(\"Queue is empty\");\n    }\n    return m_Head.contents();\n  }\n",
        "methodStartingLine": 244,
        "methodEndingLine": 251,
        "jml": "//@ ensures \\result == \\old(m_Head.m_Contents);"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/Fuzzy_Rule_Learning/Hybrid/FURIA/core/Queue.java",
        "code": "  public /*@ pure @*/ boolean empty() {\n    return m_Head == null;\n  }\n",
        "methodStartingLine": 259,
        "methodEndingLine": 261,
        "jml": "//@ ensures \\result <==> m_Head == null;"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/Fuzzy_Rule_Learning/Hybrid/FURIA/core/Queue.java",
        "code": "  public /*@ pure @*/ int size() {\n    return m_Size;\n  }\n",
        "methodStartingLine": 269,
        "methodEndingLine": 271,
        "jml": "//@ ensures \\result == m_Size;"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/Fuzzy_Rule_Learning/Hybrid/FURIA/core/Queue.java",
        "code": "  public  /*@ pure @*/ String toString() {\n\n    String retval = \"Queue Contents \"+m_Size+\" elements\\n\";\n    QueueNode current = m_Head;\n    if (current == null) {\n      return retval + \"Empty\\n\";\n    } else {\n      while (current != null) {\n        retval += current.contents().toString()+\"\\n\"; //@nowarn Modifies;\n\tcurrent = current.next();\n      }\n    }\n    return retval;\n  } //@ nowarn Post;\n",
        "methodStartingLine": 281,
        "methodEndingLine": 294,
        "jml": "//@ ensures \\result != null;\n//@ ensures (* \\result == textual description of the queue *);"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/Fuzzy_Rule_Learning/Hybrid/FURIA/core/Instance.java",
        "code": "  public /*@pure@*/ AttributeWeka attribute(int index) {\n\n    if (m_Dataset == null) {\n      throw new UnassignedDatasetException(\"Instance doesn't have access to a dataset!\");\n    }\n    return m_Dataset.attribute(index);\n  }\n",
        "methodStartingLine": 178,
        "methodEndingLine": 184,
        "jml": "//@ ensures m_Dataset == null;\n//@ ensures m_Dataset == null;\n//@ requires numAttributes > 0;    // Or maybe == 0 is okay too?\n//@ ensures m_Dataset == null;\n//@ requires m_Dataset != null;"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/Fuzzy_Rule_Learning/Hybrid/FURIA/core/Instance.java",
        "code": "  public /*@pure@*/ AttributeWeka attributeSparse(int indexOfIndex) {\n\n    if (m_Dataset == null) {\n      throw new UnassignedDatasetException(\"Instance doesn't have access to a dataset!\");\n    }\n    return m_Dataset.attribute(indexOfIndex);\n  }\n",
        "methodStartingLine": 196,
        "methodEndingLine": 202,
        "jml": "//@ requires m_Dataset != null;"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/Fuzzy_Rule_Learning/Hybrid/FURIA/core/Instance.java",
        "code": "  public /*@pure@*/ AttributeWeka classAttribute() {\n\n    if (m_Dataset == null) {\n      throw new UnassignedDatasetException(\"Instance doesn't have access to a dataset!\");\n    }\n    return m_Dataset.classAttribute();\n  }\n",
        "methodStartingLine": 212,
        "methodEndingLine": 218,
        "jml": "//@ requires m_Dataset != null;"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/Fuzzy_Rule_Learning/Hybrid/FURIA/core/Instance.java",
        "code": "  public /*@pure@*/ int classIndex() {\n\n    if (m_Dataset == null) {\n      throw new UnassignedDatasetException(\"Instance doesn't have access to a dataset!\");\n    }\n    return m_Dataset.classIndex();\n  }\n",
        "methodStartingLine": 228,
        "methodEndingLine": 234,
        "jml": "//@ requires m_Dataset != null;\n//@ ensures  \\result == m_Dataset.classIndex();"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/Fuzzy_Rule_Learning/Hybrid/FURIA/core/Instance.java",
        "code": "  public /*@pure@*/ boolean classIsMissing() {\n\n    if (classIndex() < 0) {\n      throw new UnassignedClassException(\"Class is not set!\");\n    }\n    return isMissing(classIndex());\n  }\n",
        "methodStartingLine": 244,
        "methodEndingLine": 250,
        "jml": "//@ requires classIndex() >= 0;"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/Fuzzy_Rule_Learning/Hybrid/FURIA/core/Instance.java",
        "code": "  public /*@pure@*/ double classValue() {\n\n    if (classIndex() < 0) {\n      throw new UnassignedClassException(\"Class is not set!\");\n    }\n    return value(classIndex());\n  }\n",
        "methodStartingLine": 263,
        "methodEndingLine": 269,
        "jml": "//@ requires classIndex() >= 0;"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/Fuzzy_Rule_Learning/Hybrid/FURIA/core/Instance.java",
        "code": "  public /*@pure@*/ Instances dataset() {\n\n    return m_Dataset;\n  }\n",
        "methodStartingLine": 297,
        "methodEndingLine": 300,
        "jml": "//@ ensures \\result == m_Dataset;"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/Fuzzy_Rule_Learning/Hybrid/FURIA/core/Instance.java",
        "code": "  public void deleteAttributeAt(int position) {\n\n    if (m_Dataset != null) {\n      throw new RuntimeException(\"Instance has access to a dataset!\");\n    }\n    forceDeleteAttributeAt(position);\n  }\n",
        "methodStartingLine": 313,
        "methodEndingLine": 319,
        "jml": "//@ requires m_Dataset != null;"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/Fuzzy_Rule_Learning/Hybrid/FURIA/core/Instance.java",
        "code": "  public /*@pure@*/ Enumeration enumerateAttributes() {\n\n    if (m_Dataset == null) {\n      throw new UnassignedDatasetException(\"Instance doesn't have access to a dataset!\");\n    }\n    return m_Dataset.enumerateAttributes();\n  }\n",
        "methodStartingLine": 329,
        "methodEndingLine": 335,
        "jml": "//@ requires m_Dataset != null;"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/Fuzzy_Rule_Learning/Hybrid/FURIA/core/Instance.java",
        "code": "  public /*@pure@*/ boolean equalHeaders(Instance inst) {\n\n    if (m_Dataset == null) {\n      throw new UnassignedDatasetException(\"Instance doesn't have access to a dataset!\");\n    }\n    return m_Dataset.equalHeaders(inst.m_Dataset);\n  }\n",
        "methodStartingLine": 347,
        "methodEndingLine": 353,
        "jml": "//@ requires m_Dataset != null;"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/Fuzzy_Rule_Learning/Hybrid/FURIA/core/Instance.java",
        "code": "  public /*@pure@*/ boolean hasMissingValue() {\n\n    if (m_Dataset == null) {\n      throw new UnassignedDatasetException(\"Instance doesn't have access to a dataset!\");\n    }\n    for (int i = 0; i < numAttributes(); i++) {\n      if (i != classIndex()) {\n\tif (isMissing(i)) {\n\t  return true;\n\t}\n      }\n    }\n    return false;\n  }\n",
        "methodStartingLine": 362,
        "methodEndingLine": 375,
        "jml": "//@ requires m_Dataset != null;"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/Fuzzy_Rule_Learning/Hybrid/FURIA/core/Instance.java",
        "code": "  public void insertAttributeAt(int position) {\n\n    if (m_Dataset != null) {\n      throw new RuntimeException(\"Instance has accesss to a dataset!\");\n    }\n    if ((position < 0) ||\n\t(position > numAttributes())) {\n      throw new IllegalArgumentException(\"Can't insert attribute: index out \"+\n                                         \"of range\");\n    }\n    forceInsertAttributeAt(position);\n  }\n",
        "methodStartingLine": 402,
        "methodEndingLine": 413,
        "jml": "//@ requires m_Dataset == null;\n//@ requires 0 <= position && position <= numAttributes();"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/Fuzzy_Rule_Learning/Hybrid/FURIA/core/Instance.java",
        "code": "  public /*@pure@*/ int numAttributes() {\n\n    return m_AttValues.length;\n  }\n",
        "methodStartingLine": 503,
        "methodEndingLine": 506,
        "jml": "//@ ensures \\result == m_AttValues.length;"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/Fuzzy_Rule_Learning/Hybrid/FURIA/core/Instance.java",
        "code": "  public /*@pure@*/ int numClasses() {\n\n    if (m_Dataset == null) {\n      throw new UnassignedDatasetException(\"Instance doesn't have access to a dataset!\");\n    }\n    return m_Dataset.numClasses();\n  }\n",
        "methodStartingLine": 517,
        "methodEndingLine": 523,
        "jml": "//@ requires m_Dataset != null;"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/Fuzzy_Rule_Learning/Hybrid/FURIA/core/Instance.java",
        "code": "  public /*@pure@*/ int numValues() {\n\n    return m_AttValues.length;\n  }\n",
        "methodStartingLine": 531,
        "methodEndingLine": 534,
        "jml": "//@ ensures \\result == m_AttValues.length;"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/Fuzzy_Rule_Learning/Hybrid/FURIA/core/Instance.java",
        "code": "  public void setClassMissing() {\n\n    if (classIndex() < 0) {\n      throw new UnassignedClassException(\"Class is not set!\");\n    }\n    setMissing(classIndex());\n  }\n",
        "methodStartingLine": 569,
        "methodEndingLine": 575,
        "jml": "//@ requires classIndex() >= 0;"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/Fuzzy_Rule_Learning/Hybrid/FURIA/core/Instance.java",
        "code": "  public void setClassValue(double value) {\n\n    if (classIndex() < 0) {\n      throw new UnassignedClassException(\"Class is not set!\");\n    }\n    setValue(classIndex(), value);\n  }\n",
        "methodStartingLine": 591,
        "methodEndingLine": 597,
        "jml": "//@ requires classIndex() >= 0;"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/Fuzzy_Rule_Learning/Hybrid/FURIA/core/Instance.java",
        "code": "  public final void setClassValue(String value) {\n\n    if (classIndex() < 0) {\n      throw new UnassignedClassException(\"Class is not set!\");\n    }\n    setValue(classIndex(), value);\n  }\n",
        "methodStartingLine": 614,
        "methodEndingLine": 620,
        "jml": "//@ requires classIndex() >= 0;"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/Fuzzy_Rule_Learning/Hybrid/FURIA/core/Instance.java",
        "code": "  public final void setValue(int attIndex, String value) {\n\n    int valIndex;\n\n    if (m_Dataset == null) {\n      throw new UnassignedDatasetException(\"Instance doesn't have access to a dataset!\");\n    }\n    if (!attribute(attIndex).isNominal() &&\n\t!attribute(attIndex).isString()) {\n      throw new IllegalArgumentException(\"AttributeWeka neither nominal nor string!\");\n    }\n    valIndex = attribute(attIndex).indexOfValue(value);\n    if (valIndex == -1) {\n      if (attribute(attIndex).isNominal()) {\n\tthrow new IllegalArgumentException(\"Value not defined for given nominal attribute!\");\n      } else {\n\tattribute(attIndex).forceAddValue(value);\n\tvalIndex = attribute(attIndex).indexOfValue(value);\n      }\n    }\n    setValue(attIndex, (double)valIndex);\n  }\n",
        "methodStartingLine": 707,
        "methodEndingLine": 728,
        "jml": "//@ requires m_Dataset != null;"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/Fuzzy_Rule_Learning/Hybrid/FURIA/core/Instance.java",
        "code": "  public final /*@pure@*/ Instances relationalValue(int attIndex) {\n\n    if (m_Dataset == null) {\n      throw new UnassignedDatasetException(\"Instance doesn't have access to a dataset!\");\n    }\n    return relationalValue(m_Dataset.attribute(attIndex));\n  }\n",
        "methodStartingLine": 818,
        "methodEndingLine": 824,
        "jml": "//@ requires m_Dataset != null;"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/Fuzzy_Rule_Learning/Hybrid/FURIA/core/Instance.java",
        "code": "  public final /*@pure@*/ String stringValue(int attIndex) {\n\n    if (m_Dataset == null) {\n      throw new UnassignedDatasetException(\"Instance doesn't have access to a dataset!\");\n    }\n    return stringValue(m_Dataset.attribute(attIndex));\n  }\n",
        "methodStartingLine": 859,
        "methodEndingLine": 865,
        "jml": "//@ requires m_Dataset != null;"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/Fuzzy_Rule_Learning/Hybrid/FURIA/core/Instances.java",
        "code": "  public Instances stringFreeStructure() {\n\n    FastVector newAtts = new FastVector();\n    for (int i = 0 ; i < m_Attributes.size(); i++) {\n      AttributeWeka att = (AttributeWeka)m_Attributes.elementAt(i);\n      if (att.type() == AttributeWeka.STRING) {\n        newAtts.addElement(new AttributeWeka(att.name(), (FastVector)null, i));\n      } else if (att.type() == AttributeWeka.RELATIONAL) {\n        newAtts.addElement(new AttributeWeka(att.name(), new Instances(att.relation(), 0), i));\n      }\n    }\n    if (newAtts.size() == 0) {\n      return new Instances(this, 0);\n    }\n    FastVector atts = (FastVector)m_Attributes.copy();\n    for (int i = 0; i < newAtts.size(); i++) {\n      atts.setElementAt(newAtts.elementAt(i), ((AttributeWeka)newAtts.elementAt(i)).index());\n    }\n    Instances result = new Instances(this, 0);\n    result.m_Attributes = atts;\n    return result;\n  }\n",
        "methodStartingLine": 240,
        "methodEndingLine": 261,
        "jml": "//@ requires 0 <= first;\n//@ requires 0 <= toCopy;\n//@ requires first + toCopy <= source.numInstances();"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/Fuzzy_Rule_Learning/Hybrid/FURIA/core/Instances.java",
        "code": "  public /*@pure@*/ AttributeWeka attribute(int index) {\n\n    return (AttributeWeka) m_Attributes.elementAt(index);\n  }\n",
        "methodStartingLine": 289,
        "methodEndingLine": 292,
        "jml": "//@ requires 0 <= index;\n//@ requires index < m_Attributes.size();\n//@ ensures \\result != null;"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/Fuzzy_Rule_Learning/Hybrid/FURIA/core/Instances.java",
        "code": "  public /*@pure@*/ AttributeWeka classAttribute() {\n\n    if (m_ClassIndex < 0) {\n      throw new UnassignedClassException(\"Class index is negative (not set)!\");\n    }\n    return attribute(m_ClassIndex);\n  }\n",
        "methodStartingLine": 379,
        "methodEndingLine": 385,
        "jml": "//@ requires classIndex() >= 0;"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/Fuzzy_Rule_Learning/Hybrid/FURIA/core/Instances.java",
        "code": "  public void delete(int index) {\n\n    m_Instances.removeElementAt(index);\n  }\n",
        "methodStartingLine": 422,
        "methodEndingLine": 425,
        "jml": "//@ requires 0 <= index && index < numInstances();"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/Fuzzy_Rule_Learning/Hybrid/FURIA/core/Instances.java",
        "code": "  public void deleteAttributeAt(int position) {\n\n    if ((position < 0) || (position >= m_Attributes.size())) {\n      throw new IllegalArgumentException(\"Index out of range\");\n    }\n    if (position == m_ClassIndex) {\n      throw new IllegalArgumentException(\"Can't delete class attribute\");\n    }\n    freshAttributeInfo();\n    if (m_ClassIndex > position) {\n      m_ClassIndex--;\n    }\n    m_Attributes.removeElementAt(position);\n    for (int i = position; i < m_Attributes.size(); i++) {\n      AttributeWeka current = (AttributeWeka)m_Attributes.elementAt(i);\n      current.setIndex(current.index() - 1);\n    }\n    for (int i = 0; i < numInstances(); i++) {\n      instance(i).forceDeleteAttributeAt(position);\n    }\n  }\n",
        "methodStartingLine": 438,
        "methodEndingLine": 458,
        "jml": "//@ requires 0 <= position && position < numAttributes();\n//@ requires position != classIndex();"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/Fuzzy_Rule_Learning/Hybrid/FURIA/core/Instances.java",
        "code": "  public void deleteWithMissing(int attIndex) {\n\n    FastVector newInstances = new FastVector(numInstances());\n\n    for (int i = 0; i < numInstances(); i++) {\n      if (!instance(i).isMissing(attIndex)) {\n\tnewInstances.addElement(instance(i));\n      }\n    }\n    m_Instances = newInstances;\n  }\n",
        "methodStartingLine": 498,
        "methodEndingLine": 508,
        "jml": "//@ requires 0 <= attIndex && attIndex < numAttributes();"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/Fuzzy_Rule_Learning/Hybrid/FURIA/core/Instances.java",
        "code": "  public /*@non_null pure@*/ Instance firstInstance() {\n\n    return (Instance)m_Instances.firstElement();\n  }\n",
        "methodStartingLine": 585,
        "methodEndingLine": 588,
        "jml": "//@ requires numInstances() > 0;"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/Fuzzy_Rule_Learning/Hybrid/FURIA/core/Instances.java",
        "code": "  public void insertAttributeAt(/*@non_null@*/ AttributeWeka att, int position) {\n\n    if ((position < 0) ||\n\t(position > m_Attributes.size())) {\n      throw new IllegalArgumentException(\"Index out of range\");\n    }\n    att = (AttributeWeka)att.copy();\n    freshAttributeInfo();\n    att.setIndex(position);\n    m_Attributes.insertElementAt(att, position);\n    for (int i = position + 1; i < m_Attributes.size(); i++) {\n      AttributeWeka current = (AttributeWeka)m_Attributes.elementAt(i);\n      current.setIndex(current.index() + 1);\n    }\n    for (int i = 0; i < numInstances(); i++) {\n      instance(i).forceInsertAttributeAt(position);\n    }\n    if (m_ClassIndex >= position) {\n      m_ClassIndex++;\n    }\n  }\n",
        "methodStartingLine": 618,
        "methodEndingLine": 638,
        "jml": "//@ requires 0 <= position;\n//@ requires position <= numAttributes();"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/Fuzzy_Rule_Learning/Hybrid/FURIA/core/Instances.java",
        "code": "  public /*@non_null pure@*/ Instance instance(int index) {\n\n    return (Instance)m_Instances.elementAt(index);\n  }\n",
        "methodStartingLine": 648,
        "methodEndingLine": 651,
        "jml": "//@ requires 0 <= index;\n//@ requires index < numInstances();"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/Fuzzy_Rule_Learning/Hybrid/FURIA/core/Instances.java",
        "code": "  public /*@non_null pure@*/ Instance lastInstance() {\n\n    return (Instance)m_Instances.lastElement();\n  }\n",
        "methodStartingLine": 712,
        "methodEndingLine": 715,
        "jml": "//@ requires numInstances() > 0;"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/Fuzzy_Rule_Learning/Hybrid/FURIA/core/Instances.java",
        "code": "  public /*@pure@*/ int numAttributes() {\n\n    return m_Attributes.size();\n  }\n",
        "methodStartingLine": 775,
        "methodEndingLine": 778,
        "jml": "//@ ensures \\result == m_Attributes.size();"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/Fuzzy_Rule_Learning/Hybrid/FURIA/core/Instances.java",
        "code": "  public /*@pure@*/ int numClasses() {\n\n    if (m_ClassIndex < 0) {\n      throw new UnassignedClassException(\"Class index is negative (not set)!\");\n    }\n    if (!classAttribute().isNominal()) {\n      return 1;\n    } else {\n      return classAttribute().numValues();\n    }\n  }\n",
        "methodStartingLine": 788,
        "methodEndingLine": 798,
        "jml": "//@ requires classIndex() >= 0;"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/Fuzzy_Rule_Learning/Hybrid/FURIA/core/Instances.java",
        "code": "  public /*@pure@*/ int numDistinctValues(int attIndex) {\n\n    if (attribute(attIndex).isNumeric()) {\n      double [] attVals = attributeToDoubleArray(attIndex);\n      int [] sorted = Utils.sort(attVals);\n      double prev = 0;\n      int counter = 0;\n      for (int i = 0; i < sorted.length; i++) {\n\tInstance current = instance(sorted[i]);\n\tif (current.isMissing(attIndex)) {\n\t  break;\n\t}\n\tif ((i == 0) ||\n\t    (current.value(attIndex) > prev)) {\n\t  prev = current.value(attIndex);\n\t  counter++;\n\t}\n      }\n      return counter;\n    } else {\n      return attribute(attIndex).numValues();\n    }\n  }\n",
        "methodStartingLine": 810,
        "methodEndingLine": 832,
        "jml": "//@ requires 0 <= attIndex;\n//@ requires attIndex < numAttributes();"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/Fuzzy_Rule_Learning/Hybrid/FURIA/core/Instances.java",
        "code": "  public /*@pure@*/ int numInstances() {\n\n    return m_Instances.size();\n  }\n",
        "methodStartingLine": 853,
        "methodEndingLine": 856,
        "jml": "//@ ensures \\result == m_Instances.size();"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/Fuzzy_Rule_Learning/Hybrid/FURIA/core/Instances.java",
        "code": "  public /*@pure@*/ String relationName() {\n\n    return m_RelationName;\n  }\n",
        "methodStartingLine": 942,
        "methodEndingLine": 945,
        "jml": "//@ ensures \\result == m_RelationName;"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/Fuzzy_Rule_Learning/Hybrid/FURIA/core/Instances.java",
        "code": "  public Instances testCV(int numFolds, int numFold) {\n\n    int numInstForFold, first, offset;\n    Instances test;\n\n    if (numFolds < 2) {\n      throw new IllegalArgumentException(\"Number of folds must be at least 2!\");\n    }\n    if (numFolds > numInstances()) {\n      throw new IllegalArgumentException(\"Can't have more folds than instances!\");\n    }\n    numInstForFold = numInstances() / numFolds;\n    if (numFold < numInstances() % numFolds){\n      numInstForFold++;\n      offset = numFold;\n    }else\n      offset = numInstances() % numFolds;\n    test = new Instances(this, numInstForFold);\n    first = numFold * (numInstances() / numFolds) + offset;\n    copyInstances(first, test, numInstForFold);\n    return test;\n  }\n",
        "methodStartingLine": 1254,
        "methodEndingLine": 1275,
        "jml": "//@ requires 2 <= numFolds && numFolds < numInstances();\n//@ requires 0 <= numFold && numFold < numFolds;"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/Fuzzy_Rule_Learning/Hybrid/FURIA/core/Instances.java",
        "code": "  public Instances trainCV(int numFolds, int numFold) {\n\n    int numInstForFold, first, offset;\n    Instances train;\n\n    if (numFolds < 2) {\n      throw new IllegalArgumentException(\"Number of folds must be at least 2!\");\n    }\n    if (numFolds > numInstances()) {\n      throw new IllegalArgumentException(\"Can't have more folds than instances!\");\n    }\n    numInstForFold = numInstances() / numFolds;\n    if (numFold < numInstances() % numFolds) {\n      numInstForFold++;\n      offset = numFold;\n    }else\n      offset = numInstances() % numFolds;\n    train = new Instances(this, numInstances() - numInstForFold);\n    first = numFold * (numInstances() / numFolds) + offset;\n    copyInstances(0, train, first);\n    copyInstances(first + numInstForFold, train,\n\t\t  numInstances() - first - numInstForFold);\n\n    return train;\n  }\n",
        "methodStartingLine": 1332,
        "methodEndingLine": 1356,
        "jml": "//@ requires 2 <= numFolds && numFolds < numInstances();\n//@ requires 0 <= numFold && numFold < numFolds;"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/Fuzzy_Rule_Learning/Hybrid/FURIA/core/Instances.java",
        "code": "  public Instances trainCV(int numFolds, int numFold, Randomize random) {\n\n    Instances train = trainCV(numFolds, numFold);\n    train.randomize(random);\n    return train;\n  }\n",
        "methodStartingLine": 1373,
        "methodEndingLine": 1378,
        "jml": "//@ requires 2 <= numFolds && numFolds < numInstances();\n//@ requires 0 <= numFold && numFold < numFolds;"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/Fuzzy_Rule_Learning/Hybrid/FURIA/core/Instances.java",
        "code": "  public /*@pure@*/ double [] attributeToDoubleArray(int index) {\n\n    double [] result = new double[numInstances()];\n    for (int i = 0; i < result.length; i++) {\n      result[i] = instance(i).value(index);\n    }\n    return result;\n  }\n",
        "methodStartingLine": 1441,
        "methodEndingLine": 1448,
        "jml": "//@ requires 0 <= index && index < numAttributes();"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/Fuzzy_Rule_Learning/Hybrid/FURIA/core/Instances.java",
        "code": "  protected void copyInstances(int from, /*@non_null@*/ Instances dest, int num) {\n\n    for (int i = 0; i < num; i++) {\n      dest.add(instance(from + i));\n    }\n  }\n",
        "methodStartingLine": 1460,
        "methodEndingLine": 1465,
        "jml": "//@ requires 0 <= from && from <= numInstances() - num;\n//@ requires 0 <= num;"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/Fuzzy_Rule_Learning/Hybrid/FURIA/core/Instances.java",
        "code": "  protected int partition(int attIndex, int l, int r) {\n\n    double pivot = instance((l + r) / 2).value(attIndex);\n\n    while (l < r) {\n      while ((instance(l).value(attIndex) < pivot) && (l < r)) {\n        l++;\n      }\n      while ((instance(r).value(attIndex) > pivot) && (l < r)) {\n        r--;\n      }\n      if (l < r) {\n        swap(l, r);\n        l++;\n        r--;\n      }\n    }\n    if ((l == r) && (instance(r).value(attIndex) > pivot)) {\n      r--;\n    }\n\n    return r;\n  }\n",
        "methodStartingLine": 1507,
        "methodEndingLine": 1529,
        "jml": "//@ requires 0 <= attIndex && attIndex < numAttributes();\n//@ requires 0 <= left && left <= right && right < numInstances();"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/Fuzzy_Rule_Learning/Hybrid/FURIA/core/Instances.java",
        "code": "  protected void quickSort(int attIndex, int left, int right) {\n\n    if (left < right) {\n      int middle = partition(attIndex, left, right);\n      quickSort(attIndex, left, middle);\n      quickSort(attIndex, middle + 1, right);\n    }\n  }\n",
        "methodStartingLine": 1541,
        "methodEndingLine": 1548,
        "jml": "//@ requires 0 <= attIndex && attIndex < numAttributes();\n//@ requires 0 <= first && first <= right && right < numInstances();"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/Fuzzy_Rule_Learning/Hybrid/FURIA/core/Instances.java",
        "code": "  protected int select(int attIndex, int left, int right, int k) {\n\n    if (left == right) {\n      return left;\n    } else {\n      int middle = partition(attIndex, left, right);\n      if ((middle - left + 1) >= k) {\n        return select(attIndex, left, middle, k);\n      } else {\n        return select(attIndex, middle + 1, right, k - (middle - left + 1));\n      }\n    }\n  }\n",
        "methodStartingLine": 1563,
        "methodEndingLine": 1575,
        "jml": "//@ requires 0 <= attIndex && attIndex < numAttributes();\n//@ requires 0 <= first && first <= right && right < numInstances();"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/Fuzzy_Rule_Learning/Hybrid/FURIA/core/Instances.java",
        "code": "  public void swap(int i, int j){\n\n    m_Instances.swap(i, j);\n  }\n",
        "methodStartingLine": 1607,
        "methodEndingLine": 1610,
        "jml": "//@ requires 0 <= i && i < numInstances();\n//@ requires 0 <= j && j < numInstances();"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/Statistical_Classifiers/Logistic/core/FastVector.java",
        "code": "    public final /*@pure@*/ boolean hasMoreElements() {\n\n      if (m_Counter < m_Vector.size()) {\n\treturn true;\n      }\n      return false;\n    }\n",
        "methodStartingLine": 129,
        "methodEndingLine": 135,
        "jml": "//@ requires 0 <= special && special < vector.size();"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/Statistical_Classifiers/Logistic/core/FastVector.java",
        "code": "  public final void addElement(Object element) {\n\n    Object[] newObjects;\n\n    if (m_Size == m_Objects.length) {\n      newObjects = new Object[m_CapacityMultiplier *\n\t\t\t     (m_Objects.length +\n\t\t\t      m_CapacityIncrement)];\n      System.arraycopy(m_Objects, 0, newObjects, 0, m_Size);\n      m_Objects = newObjects;\n    }\n    m_Objects[m_Size] = element;\n    m_Size++;\n  }\n",
        "methodStartingLine": 202,
        "methodEndingLine": 215,
        "jml": "//@ requires capacity >= 0;"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/Statistical_Classifiers/Logistic/core/FastVector.java",
        "code": "  public final /*@pure@*/ int capacity() {\n  \n    return m_Objects.length;\n  }\n",
        "methodStartingLine": 223,
        "methodEndingLine": 226,
        "jml": "//@ ensures \\result == m_Objects.length;"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/Statistical_Classifiers/Logistic/core/FastVector.java",
        "code": "  public final /*@pure@*/ Object elementAt(int index) {\n\n    return m_Objects[index];\n  }\n",
        "methodStartingLine": 271,
        "methodEndingLine": 274,
        "jml": "//@ requires 0 <= index;\n//@ requires index < m_Objects.length;"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/Statistical_Classifiers/Logistic/core/FastVector.java",
        "code": "  public final /*@pure@*/ Enumeration elements(int index) {\n  \n    return new FastVectorEnumeration(this, index);\n  }\n",
        "methodStartingLine": 294,
        "methodEndingLine": 297,
        "jml": "//@ requires 0 <= index && index < size();"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/Statistical_Classifiers/Logistic/core/FastVector.java",
        "code": "  public final /*@pure@*/ Object firstElement() {\n\n    return m_Objects[0];\n  }\n",
        "methodStartingLine": 323,
        "methodEndingLine": 326,
        "jml": "//@ requires m_Size > 0;"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/Statistical_Classifiers/Logistic/core/FastVector.java",
        "code": "  public final /*@pure@*/ Object lastElement() {\n\n    return m_Objects[m_Size - 1];\n  }\n",
        "methodStartingLine": 379,
        "methodEndingLine": 382,
        "jml": "//@ requires m_Size > 0;"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/Statistical_Classifiers/Logistic/core/FastVector.java",
        "code": "  public final void removeElementAt(int index) {\n\n    System.arraycopy(m_Objects, index + 1, m_Objects, index, \n                     m_Size - index - 1);\n    m_Size--;\n  }\n",
        "methodStartingLine": 390,
        "methodEndingLine": 395,
        "jml": "//@ requires 0 <= index && index < m_Size;"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/Statistical_Classifiers/Logistic/core/FastVector.java",
        "code": "  public final void setElementAt(Object element, int index) {\n\n    m_Objects[index] = element;\n  }\n",
        "methodStartingLine": 453,
        "methodEndingLine": 456,
        "jml": "//@ requires 0 <= index && index < size();"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/Statistical_Classifiers/Logistic/core/FastVector.java",
        "code": "  public final /*@pure@*/ int size() {\n\n    return m_Size;\n  }\n",
        "methodStartingLine": 464,
        "methodEndingLine": 467,
        "jml": "//@ ensures \\result == m_Size;"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/Statistical_Classifiers/Logistic/core/FastVector.java",
        "code": "  public final void swap(int first, int second) {\n\n    Object help = m_Objects[first];\n\n    m_Objects[first] = m_Objects[second];\n    m_Objects[second] = help;\n  }\n",
        "methodStartingLine": 477,
        "methodEndingLine": 483,
        "jml": "//@ requires 0 <= first && first < size();\n//@ requires 0 <= second && second < size();"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/Fuzzy_Rule_Learning/Hybrid/FURIA/core/FastVector.java",
        "code": "    public final /*@pure@*/ boolean hasMoreElements() {\n\n      if (m_Counter < m_Vector.size()) {\n\treturn true;\n      }\n      return false;\n    }\n",
        "methodStartingLine": 129,
        "methodEndingLine": 135,
        "jml": "//@ requires 0 <= special && special < vector.size();"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/Fuzzy_Rule_Learning/Hybrid/FURIA/core/FastVector.java",
        "code": "  public final void addElement(Object element) {\n\n    Object[] newObjects;\n\n    if (m_Size == m_Objects.length) {\n      newObjects = new Object[m_CapacityMultiplier *\n\t\t\t     (m_Objects.length +\n\t\t\t      m_CapacityIncrement)];\n      System.arraycopy(m_Objects, 0, newObjects, 0, m_Size);\n      m_Objects = newObjects;\n    }\n    m_Objects[m_Size] = element;\n    m_Size++;\n  }\n",
        "methodStartingLine": 203,
        "methodEndingLine": 216,
        "jml": "//@ requires capacity >= 0;"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/Fuzzy_Rule_Learning/Hybrid/FURIA/core/FastVector.java",
        "code": "  public final /*@pure@*/ int capacity() {\n\n    return m_Objects.length;\n  }\n",
        "methodStartingLine": 224,
        "methodEndingLine": 227,
        "jml": "//@ ensures \\result == m_Objects.length;"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/Fuzzy_Rule_Learning/Hybrid/FURIA/core/FastVector.java",
        "code": "  public final /*@pure@*/ Object elementAt(int index) {\n\n    return m_Objects[index];\n  }\n",
        "methodStartingLine": 272,
        "methodEndingLine": 275,
        "jml": "//@ requires 0 <= index;\n//@ requires index < m_Objects.length;"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/Fuzzy_Rule_Learning/Hybrid/FURIA/core/FastVector.java",
        "code": "  public final /*@pure@*/ Enumeration elements(int index) {\n\n    return new FastVectorEnumeration(this, index);\n  }\n",
        "methodStartingLine": 295,
        "methodEndingLine": 298,
        "jml": "//@ requires 0 <= index && index < size();"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/Fuzzy_Rule_Learning/Hybrid/FURIA/core/FastVector.java",
        "code": "  public final /*@pure@*/ Object firstElement() {\n\n    return m_Objects[0];\n  }\n",
        "methodStartingLine": 323,
        "methodEndingLine": 326,
        "jml": "//@ requires m_Size > 0;"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/Fuzzy_Rule_Learning/Hybrid/FURIA/core/FastVector.java",
        "code": "  public final /*@pure@*/ Object lastElement() {\n\n    return m_Objects[m_Size - 1];\n  }\n",
        "methodStartingLine": 379,
        "methodEndingLine": 382,
        "jml": "//@ requires m_Size > 0;"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/Fuzzy_Rule_Learning/Hybrid/FURIA/core/FastVector.java",
        "code": "  public final void removeElementAt(int index) {\n\n    System.arraycopy(m_Objects, index + 1, m_Objects, index,\n                     m_Size - index - 1);\n\n    // clear the last reference\n    m_Objects[m_Size - 1] = null;\n\n    m_Size--;\n  }\n",
        "methodStartingLine": 390,
        "methodEndingLine": 399,
        "jml": "//@ requires 0 <= index && index < m_Size;"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/Fuzzy_Rule_Learning/Hybrid/FURIA/core/FastVector.java",
        "code": "  public final void setElementAt(Object element, int index) {\n\n    m_Objects[index] = element;\n  }\n",
        "methodStartingLine": 457,
        "methodEndingLine": 460,
        "jml": "//@ requires 0 <= index && index < size();"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/Fuzzy_Rule_Learning/Hybrid/FURIA/core/FastVector.java",
        "code": "  public final /*@pure@*/ int size() {\n\n    return m_Size;\n  }\n",
        "methodStartingLine": 468,
        "methodEndingLine": 471,
        "jml": "//@ ensures \\result == m_Size;"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/Fuzzy_Rule_Learning/Hybrid/FURIA/core/FastVector.java",
        "code": "  public final void swap(int first, int second) {\n\n    Object help = m_Objects[first];\n\n    m_Objects[first] = m_Objects[second];\n    m_Objects[second] = help;\n  }\n",
        "methodStartingLine": 481,
        "methodEndingLine": 487,
        "jml": "//@ requires 0 <= first && first < size();\n//@ requires 0 <= second && second < size();"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/Fuzzy_Rule_Learning/Hybrid/FURIA/core/SingleIndex.java",
        "code": "  public void setUpper(int newUpper) {\n\n    if (newUpper >= 0) {\n      m_Upper = newUpper;\n      setValue();\n    }\n  }\n",
        "methodStartingLine": 120,
        "methodEndingLine": 126,
        "jml": "//@ ensures m_SelectedIndex == -1;\n//@ ensures m_Upper == -1;\n//@ ensures m_IndexString == index;\n//@ ensures m_SelectedIndex == -1;\n//@ ensures m_Upper == -1;\n//@ ensures newUpper < 0 ==> m_Upper == \\old(m_Upper);\n//@ ensures newUpper >= 0 ==> m_Upper == newUpper;"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/Fuzzy_Rule_Learning/Hybrid/FURIA/core/SingleIndex.java",
        "code": "  public /*@pure@*/ String getSingleIndex() {\n\n    return m_IndexString;\n  }\n",
        "methodStartingLine": 134,
        "methodEndingLine": 137,
        "jml": "//@ ensures \\result == m_IndexString;"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/Fuzzy_Rule_Learning/Hybrid/FURIA/core/SingleIndex.java",
        "code": "  public void setSingleIndex(/*@non_null@*/ String index) {\n\n    m_IndexString = index;\n    m_SelectedIndex = -1;\n  }\n",
        "methodStartingLine": 149,
        "methodEndingLine": 153,
        "jml": "//@ ensures m_IndexString == index;\n//@ ensures m_SelectedIndex == -1;"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/Fuzzy_Rule_Learning/Hybrid/FURIA/core/SingleIndex.java",
        "code": "  public /*@pure@*/ String toString() {\n\n    if (m_IndexString.equals(\"\")) {\n      return \"No index set\";\n    }\n    if (m_Upper == -1) {\n      throw new RuntimeException(\"Upper limit has not been specified\");\n    }\n    return m_IndexString;\n  }\n",
        "methodStartingLine": 163,
        "methodEndingLine": 172,
        "jml": "//@ ensures \\result != null;"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/Fuzzy_Rule_Learning/Hybrid/FURIA/core/SingleIndex.java",
        "code": "  public /*@pure@*/ int getIndex() {\n\n    if (m_IndexString.equals(\"\")) {\n      throw new RuntimeException(\"No index set\");\n    }\n    if (m_Upper == -1) {\n      throw new RuntimeException(\"No upper limit has been specified for index\");\n    }\n    return m_SelectedIndex;\n  }\n",
        "methodStartingLine": 183,
        "methodEndingLine": 192,
        "jml": "//@ requires m_Upper >= 0;\n//@ requires m_IndexString.length() > 0;\n//@ ensures \\result == m_SelectedIndex;"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/Fuzzy_Rule_Learning/Hybrid/FURIA/core/SingleIndex.java",
        "code": "  public static /*@pure non_null@*/ String indexToString(int index) {\n\n    return \"\" + (index + 1);\n  }\n",
        "methodStartingLine": 203,
        "methodEndingLine": 206,
        "jml": "//@ requires index >= 0;"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/Fuzzy_Rule_Learning/Hybrid/FURIA/core/AttributeWeka.java",
        "code": "  public /*@ pure non_null @*/ Object copy() {\n\n    AttributeWeka copy = new AttributeWeka(m_Name);\n\n    copy.m_Index = m_Index;\n    copy.m_Type = m_Type;\n    copy.m_Values = m_Values;\n    copy.m_Hashtable = m_Hashtable;\n    copy.m_DateFormat = m_DateFormat;\n    copy.m_Header = m_Header;\n    copy.setMetadata(m_Metadata);\n\n    return copy;\n  }\n",
        "methodStartingLine": 433,
        "methodEndingLine": 446,
        "jml": "//@ requires attributeName != null;\n//@ ensures  m_Name == attributeName;\n//@ requires attributeName != null;\n//@ requires metadata != null;\n//@ ensures  m_Name == attributeName;\n//@ requires attributeName != null;\n//@ requires dateFormat != null;\n//@ ensures  m_Name == attributeName;\n//@ requires attributeName != null;\n//@ requires dateFormat != null;\n//@ requires metadata != null;\n//@ ensures  m_Name == attributeName;\n//@ requires attributeName != null;\n//@ ensures  m_Name == attributeName;\n//@ requires attributeName != null;\n//@ requires metadata != null;"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/Fuzzy_Rule_Learning/Hybrid/FURIA/core/AttributeWeka.java",
        "code": "  public final /*@ pure @*/ int index() {\n\n    return m_Index;\n  }\n",
        "methodStartingLine": 516,
        "methodEndingLine": 519,
        "jml": "//@ ensures \\result == m_Index;"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/Fuzzy_Rule_Learning/Hybrid/FURIA/core/AttributeWeka.java",
        "code": "  public final /*@ pure @*/ boolean isNominal() {\n\n    return (m_Type == NOMINAL);\n  }\n",
        "methodStartingLine": 554,
        "methodEndingLine": 557,
        "jml": "//@ ensures \\result <==> (m_Type == NOMINAL);"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/Fuzzy_Rule_Learning/Hybrid/FURIA/core/AttributeWeka.java",
        "code": "  public final /*@ pure @*/ boolean isNumeric() {\n\n    return ((m_Type == NUMERIC) || (m_Type == DATE));\n  }\n",
        "methodStartingLine": 565,
        "methodEndingLine": 568,
        "jml": "//@ ensures \\result <==> ((m_Type == NUMERIC) || (m_Type == DATE));"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/Fuzzy_Rule_Learning/Hybrid/FURIA/core/AttributeWeka.java",
        "code": "  public final /*@ pure @*/ boolean isRelationValued() {\n\n    return (m_Type == RELATIONAL);\n  }\n",
        "methodStartingLine": 576,
        "methodEndingLine": 579,
        "jml": "//@ ensures \\result <==> (m_Type == RELATIONAL);"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/Fuzzy_Rule_Learning/Hybrid/FURIA/core/AttributeWeka.java",
        "code": "  public final /*@ pure @*/ boolean isString() {\n\n    return (m_Type == STRING);\n  }\n",
        "methodStartingLine": 587,
        "methodEndingLine": 590,
        "jml": "//@ ensures \\result <==> (m_Type == STRING);"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/Fuzzy_Rule_Learning/Hybrid/FURIA/core/AttributeWeka.java",
        "code": "  public final /*@ pure @*/ boolean isDate() {\n\n    return (m_Type == DATE);\n  }\n",
        "methodStartingLine": 598,
        "methodEndingLine": 601,
        "jml": "//@ ensures \\result <==> (m_Type == DATE);"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/Fuzzy_Rule_Learning/Hybrid/FURIA/core/AttributeWeka.java",
        "code": "  public final /*@ pure @*/ String name() {\n\n    return m_Name;\n  }\n",
        "methodStartingLine": 609,
        "methodEndingLine": 612,
        "jml": "//@ ensures \\result == m_Name;"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/Fuzzy_Rule_Learning/Hybrid/FURIA/core/AttributeWeka.java",
        "code": "  public final /*@ pure @*/ int type() {\n\n    return m_Type;\n  }\n",
        "methodStartingLine": 683,
        "methodEndingLine": 686,
        "jml": "//@ ensures \\result == m_Type;"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/Fuzzy_Rule_Learning/Hybrid/FURIA/core/AttributeWeka.java",
        "code": "  public int addStringValue(String value) {\n\n    if (!isString()) {\n      return -1;\n    }\n    Object store = value;\n\n    if (value.length() > STRING_COMPRESS_THRESHOLD) {\n      try {\n        store = new SerializedObject(value, true);\n      } catch (Exception ex) {\n        System.err.println(\"Couldn't compress string attribute value -\"\n                           + \" storing uncompressed.\");\n      }\n    }\n    Integer index = (Integer)m_Hashtable.get(store);\n    if (index != null) {\n      return index.intValue();\n    } else {\n      int intIndex = m_Values.size();\n      m_Values.addElement(store);\n      m_Hashtable.put(store, new Integer(intIndex));\n      return intIndex;\n    }\n  }\n",
        "methodStartingLine": 844,
        "methodEndingLine": 868,
        "jml": "//@ requires attributeName != null;\n//@ requires index >= 0;\n//@ ensures  m_Name == attributeName;\n//@ ensures  m_Index == index;\n//@ requires attributeName != null;\n//@ requires index >= 0;\n//@ ensures  m_Name == attributeName;\n//@ ensures  m_Index == index;\n//@ requires attributeName != null;\n//@ requires index >= 0;\n//@ ensures  m_Name == attributeName;\n//@ ensures  m_Index == index;\n//@ requires attributeName != null;\n//@ requires index >= 0;\n//@ ensures  m_Name == attributeName;\n//@ ensures  m_Index == index;"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/Fuzzy_Rule_Learning/Hybrid/FURIA/core/AttributeWeka.java",
        "code": "  public final /*@ pure non_null @*/ AttributeWeka copy(String newName) {\n\n    AttributeWeka copy = new AttributeWeka(newName);\n\n    copy.m_Index = m_Index;\n    copy.m_DateFormat = m_DateFormat;\n    copy.m_Type = m_Type;\n    copy.m_Values = m_Values;\n    copy.m_Hashtable = m_Hashtable;\n    copy.m_Header = m_Header;\n    copy.setMetadata(m_Metadata);\n\n    return copy;\n  }\n",
        "methodStartingLine": 952,
        "methodEndingLine": 965,
        "jml": "//@ requires newName != null;\n//@ ensures \\result.m_Name  == newName;\n//@ ensures \\result.m_Index == m_Index;\n//@ ensures \\result.m_Type  == m_Type;"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/Fuzzy_Rule_Learning/Hybrid/FURIA/core/AttributeWeka.java",
        "code": "  final void delete(int index) {\n\n    if (!isNominal() && !isString() && !isRelationValued())\n      throw new IllegalArgumentException(\"Can only remove value of \" +\n                                         \"nominal, string or relation-\" +\n                                         \" valued attribute!\");\n    else {\n      m_Values = (FastVector)m_Values.copy();\n      m_Values.removeElementAt(index);\n      if (!isRelationValued()) {\n        Hashtable hash = new Hashtable(m_Hashtable.size());\n        Enumeration enu = m_Hashtable.keys();\n        while (enu.hasMoreElements()) {\n          Object string = enu.nextElement();\n          Integer valIndexObject = (Integer)m_Hashtable.get(string);\n          int valIndex = valIndexObject.intValue();\n          if (valIndex > index) {\n            hash.put(string, new Integer(valIndex - 1));\n          } else if (valIndex < index) {\n            hash.put(string, valIndexObject);\n          }\n        }\n        m_Hashtable = hash;\n      }\n    }\n  }\n",
        "methodStartingLine": 978,
        "methodEndingLine": 1003,
        "jml": "//@ requires isNominal() || isString() || isRelationValued();\n//@ requires 0 <= index && index < m_Values.size();"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/Fuzzy_Rule_Learning/Hybrid/FURIA/core/AttributeWeka.java",
        "code": "  final void forceAddValue(String value) {\n\n    Object store = value;\n    if (value.length() > STRING_COMPRESS_THRESHOLD) {\n      try {\n        store = new SerializedObject(value, true);\n      } catch (Exception ex) {\n        System.err.println(\"Couldn't compress string attribute value -\"\n                           + \" storing uncompressed.\");\n      }\n    }\n    m_Values.addElement(store);\n    m_Hashtable.put(store, new Integer(m_Values.size() - 1));\n  }\n",
        "methodStartingLine": 1012,
        "methodEndingLine": 1025,
        "jml": "//@ requires value != null;\n//@ ensures  m_Values.size() == \\old(m_Values.size()) + 1;"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/Fuzzy_Rule_Learning/Hybrid/FURIA/core/AttributeWeka.java",
        "code": "  final void setIndex(int index) {\n\n    m_Index = index;\n  }\n",
        "methodStartingLine": 1035,
        "methodEndingLine": 1038,
        "jml": "//@ requires 0 <= index;\n//@ ensures m_Index == index;"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/Fuzzy_Rule_Learning/Hybrid/FURIA/core/AttributeWeka.java",
        "code": "  final void setValue(int index, String string) {\n\n    switch (m_Type) {\n    case NOMINAL:\n    case STRING:\n      m_Values = (FastVector)m_Values.copy();\n      m_Hashtable = (Hashtable)m_Hashtable.clone();\n      Object store = string;\n      if (string.length() > STRING_COMPRESS_THRESHOLD) {\n        try {\n          store = new SerializedObject(string, true);\n        } catch (Exception ex) {\n          System.err.println(\"Couldn't compress string attribute value -\"\n                             + \" storing uncompressed.\");\n        }\n      }\n      m_Hashtable.remove(m_Values.elementAt(index));\n      m_Values.setElementAt(store, index);\n      m_Hashtable.put(store, new Integer(index));\n      break;\n    default:\n      throw new IllegalArgumentException(\"Can only set values for nominal\"\n                                         + \" or string attributes!\");\n    }\n  }\n",
        "methodStartingLine": 1052,
        "methodEndingLine": 1076,
        "jml": "//@ requires string != null;\n//@ requires isNominal() || isString();\n//@ requires 0 <= index && index < m_Values.size();"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/Fuzzy_Rule_Learning/Hybrid/FURIA/core/AttributeWeka.java",
        "code": "  public /*@pure@*/ String formatDate(double date) {\n    switch (m_Type) {\n    case DATE:\n      return m_DateFormat.format(new Date((long)date));\n    default:\n      throw new IllegalArgumentException(\"Can only format date values for date\"\n                                         + \" attributes!\");\n    }\n  }\n",
        "methodStartingLine": 1111,
        "methodEndingLine": 1119,
        "jml": "//@ requires isDate();"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/Fuzzy_Rule_Learning/Hybrid/FURIA/core/AttributeWeka.java",
        "code": "  public double parseDate(String string) throws ParseException {\n    switch (m_Type) {\n    case DATE:\n      long time = m_DateFormat.parse(string).getTime();\n      // TODO put in a safety check here if we can't store the value in a double.\n      return (double)time;\n    default:\n      throw new IllegalArgumentException(\"Can only parse date values for date\"\n                                         + \" attributes!\");\n    }\n  }\n",
        "methodStartingLine": 1131,
        "methodEndingLine": 1141,
        "jml": "//@ requires isDate();\n//@ requires string != null;"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/Fuzzy_Rule_Learning/Hybrid/FURIA/core/AttributeWeka.java",
        "code": "  private void setMetadata(ProtectedProperties metadata) {\n\n    m_Metadata = metadata;\n\n    if (m_Type == DATE) {\n      m_Ordering = ORDERING_ORDERED;\n      m_IsRegular = true;\n      m_IsAveragable = false;\n      m_HasZeropoint = false;\n    } else {\n\n      // get ordering\n      String orderString = m_Metadata.getProperty(\"ordering\",\"\");\n\n      // numeric ordered attributes are averagable and zeropoint by default\n      String def;\n      if (m_Type == NUMERIC\n\t  && orderString.compareTo(\"modulo\") != 0\n\t  && orderString.compareTo(\"symbolic\") != 0)\n\tdef = \"true\";\n      else def = \"false\";\n\n      // determine boolean states\n      m_IsAveragable =\n\t(m_Metadata.getProperty(\"averageable\",def).compareTo(\"true\") == 0);\n      m_HasZeropoint =\n\t(m_Metadata.getProperty(\"zeropoint\",def).compareTo(\"true\") == 0);\n      // averagable or zeropoint implies regular\n      if (m_IsAveragable || m_HasZeropoint) def = \"true\";\n      m_IsRegular =\n\t(m_Metadata.getProperty(\"regular\",def).compareTo(\"true\") == 0);\n\n      // determine ordering\n      if (orderString.compareTo(\"symbolic\") == 0)\n\tm_Ordering = ORDERING_SYMBOLIC;\n      else if (orderString.compareTo(\"ordered\") == 0)\n\tm_Ordering = ORDERING_ORDERED;\n      else if (orderString.compareTo(\"modulo\") == 0)\n\tm_Ordering = ORDERING_MODULO;\n      else {\n\tif (m_Type == NUMERIC || m_IsAveragable || m_HasZeropoint)\n\t  m_Ordering = ORDERING_ORDERED;\n\telse m_Ordering = ORDERING_SYMBOLIC;\n      }\n    }\n\n    // consistency checks\n    if (m_IsAveragable && !m_IsRegular)\n      throw new IllegalArgumentException(\"An averagable attribute must be\"\n\t\t\t\t\t + \" regular\");\n    if (m_HasZeropoint && !m_IsRegular)\n      throw new IllegalArgumentException(\"A zeropoint attribute must be\"\n\t\t\t\t\t + \" regular\");\n    if (m_IsRegular && m_Ordering == ORDERING_SYMBOLIC)\n      throw new IllegalArgumentException(\"A symbolic attribute cannot be\"\n\t\t\t\t\t + \" regular\");\n    if (m_IsAveragable && m_Ordering != ORDERING_ORDERED)\n      throw new IllegalArgumentException(\"An averagable attribute must be\"\n\t\t\t\t\t + \" ordered\");\n    if (m_HasZeropoint && m_Ordering != ORDERING_ORDERED)\n      throw new IllegalArgumentException(\"A zeropoint attribute must be\"\n\t\t\t\t\t + \" ordered\");\n\n    // determine weight\n    m_Weight = 1.0;\n    String weightString = m_Metadata.getProperty(\"weight\");\n    if (weightString != null) {\n      try{\n\tm_Weight = Double.valueOf(weightString).doubleValue();\n      } catch (NumberFormatException e) {\n\t// Check if value is really a number\n\tthrow new IllegalArgumentException(\"Not a valid attribute weight: '\"\n\t\t\t\t\t   + weightString + \"'\");\n      }\n    }\n\n    // determine numeric range\n    if (m_Type == NUMERIC) setNumericRange(m_Metadata.getProperty(\"range\"));\n  }\n",
        "methodStartingLine": 1318,
        "methodEndingLine": 1396,
        "jml": "//@ requires metadata != null;"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/Fuzzy_Rule_Learning/Hybrid/FURIA/core/AttributeWeka.java",
        "code": "  public void setNumericRange(String rangeString)\n  {\n    // set defaults\n    m_LowerBound = Double.NEGATIVE_INFINITY;\n    m_LowerBoundIsOpen = false;\n    m_UpperBound = Double.POSITIVE_INFINITY;\n    m_UpperBoundIsOpen = false;\n\n    if (rangeString == null) return;\n\n    // set up a tokenzier to parse the string\n    StreamTokenizer tokenizer =\n      new StreamTokenizer(new StringReader(rangeString));\n    tokenizer.resetSyntax();\n    tokenizer.whitespaceChars(0, ' ');\n    tokenizer.wordChars(' '+1,'\\u00FF');\n    tokenizer.ordinaryChar('[');\n    tokenizer.ordinaryChar('(');\n    tokenizer.ordinaryChar(',');\n    tokenizer.ordinaryChar(']');\n    tokenizer.ordinaryChar(')');\n\n    try {\n\n      // get opening brace\n      tokenizer.nextToken();\n\n      if (tokenizer.ttype == '[') m_LowerBoundIsOpen = false;\n      else if (tokenizer.ttype == '(') m_LowerBoundIsOpen = true;\n      else throw new IllegalArgumentException(\"Expected opening brace on range,\"\n\t\t\t\t\t      + \" found: \"\n\t\t\t\t\t      + tokenizer.toString());\n\n      // get lower bound\n      tokenizer.nextToken();\n      if (tokenizer.ttype != tokenizer.TT_WORD)\n\tthrow new IllegalArgumentException(\"Expected lower bound in range,\"\n\t\t\t\t\t   + \" found: \"\n\t\t\t\t\t   + tokenizer.toString());\n      if (tokenizer.sval.compareToIgnoreCase(\"-inf\") == 0)\n\tm_LowerBound = Double.NEGATIVE_INFINITY;\n      else if (tokenizer.sval.compareToIgnoreCase(\"+inf\") == 0)\n\tm_LowerBound = Double.POSITIVE_INFINITY;\n      else if (tokenizer.sval.compareToIgnoreCase(\"inf\") == 0)\n\tm_LowerBound = Double.NEGATIVE_INFINITY;\n      else try {\n\tm_LowerBound = Double.valueOf(tokenizer.sval).doubleValue();\n      } catch (NumberFormatException e) {\n\tthrow new IllegalArgumentException(\"Expected lower bound in range,\"\n\t\t\t\t\t   + \" found: '\" + tokenizer.sval + \"'\");\n      }\n\n      // get separating comma\n      if (tokenizer.nextToken() != ',')\n\tthrow new IllegalArgumentException(\"Expected comma in range,\"\n\t\t\t\t\t   + \" found: \"\n\t\t\t\t\t   + tokenizer.toString());\n\n      // get upper bound\n      tokenizer.nextToken();\n      if (tokenizer.ttype != tokenizer.TT_WORD)\n\tthrow new IllegalArgumentException(\"Expected upper bound in range,\"\n\t\t\t\t\t   + \" found: \"\n\t\t\t\t\t   + tokenizer.toString());\n      if (tokenizer.sval.compareToIgnoreCase(\"-inf\") == 0)\n\tm_UpperBound = Double.NEGATIVE_INFINITY;\n      else if (tokenizer.sval.compareToIgnoreCase(\"+inf\") == 0)\n\tm_UpperBound = Double.POSITIVE_INFINITY;\n      else if (tokenizer.sval.compareToIgnoreCase(\"inf\") == 0)\n\tm_UpperBound = Double.POSITIVE_INFINITY;\n      else try {\n\tm_UpperBound = Double.valueOf(tokenizer.sval).doubleValue();\n      } catch (NumberFormatException e) {\n\tthrow new IllegalArgumentException(\"Expected upper bound in range,\"\n\t\t\t\t\t   + \" found: '\" + tokenizer.sval + \"'\");\n      }\n\n      // get closing brace\n      tokenizer.nextToken();\n\n      if (tokenizer.ttype == ']') m_UpperBoundIsOpen = false;\n      else if (tokenizer.ttype == ')') m_UpperBoundIsOpen = true;\n      else throw new IllegalArgumentException(\"Expected closing brace on range,\"\n\t\t\t\t\t      + \" found: \"\n\t\t\t\t\t      + tokenizer.toString());\n\n      // check for rubbish on end\n      if (tokenizer.nextToken() != tokenizer.TT_EOF)\n\tthrow new IllegalArgumentException(\"Expected end of range string,\"\n\t\t\t\t\t   + \" found: \"\n\t\t\t\t\t   + tokenizer.toString());\n\n    } catch (IOException e) {\n      throw new IllegalArgumentException(\"IOException reading attribute range\"\n\t\t\t\t\t + \" string: \" + e.getMessage());\n    }\n\n    if (m_UpperBound < m_LowerBound)\n      throw new IllegalArgumentException(\"Upper bound (\" + m_UpperBound\n\t\t\t\t\t + \") on numeric range is\"\n\t\t\t\t\t + \" less than lower bound (\"\n\t\t\t\t\t + m_LowerBound + \")!\");\n  }\n",
        "methodStartingLine": 1408,
        "methodEndingLine": 1510,
        "jml": "//@ requires rangeString != null;"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/ImbalancedClassification/Resampling/SMOTE_RSB/Rough_Sets/Utils.java",
        "code": "  private static void quickSort(/*@non_null@*/ double[] array, /*@non_null@*/ int[] index, \n                                int left, int right) {\n\n    if (left < right) {\n      int middle = partition(array, index, left, right);\n      quickSort(array, index, left, middle);\n      quickSort(array, index, middle + 1, right);\n    }\n  }\n",
        "methodStartingLine": 1527,
        "methodEndingLine": 1535,
        "jml": "//@ requires 0 <= first && first <= right && right < array.length;\n//@ requires (\\forall int i; 0 <= i && i < index.length; 0 <= index[i] && index[i] < array.length);\n//@ requires array != index;"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/ImbalancedClassification/Resampling/SMOTE_RSB/Rough_Sets/Utils.java",
        "code": "  private static void quickSort(/*@non_null@*/ int[] array, /*@non_null@*/  int[] index, \n                                int left, int right) {\n\n    if (left < right) {\n      int middle = partition(array, index, left, right);\n      quickSort(array, index, left, middle);\n      quickSort(array, index, middle + 1, right);\n    }\n  }\n",
        "methodStartingLine": 1550,
        "methodEndingLine": 1558,
        "jml": "//@ requires 0 <= first && first <= right && right < array.length;\n//@ requires (\\forall int i; 0 <= i && i < index.length; 0 <= index[i] && index[i] < array.length);\n//@ requires array != index;"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/ImbalancedClassification/Resampling/SMOTE_RSB/Rough_Sets/Utils.java",
        "code": "  private static int select(/*@non_null@*/ double[] array, /*@non_null@*/ int[] index, \n                            int left, int right, int k) {\n    \n    if (left == right) {\n      return left;\n    } else {\n      int middle = partition(array, index, left, right);\n      if ((middle - left + 1) >= k) {\n        return select(array, index, left, middle, k);\n      } else {\n        return select(array, index, middle + 1, right, k - (middle - left + 1));\n      }\n    }\n  }\n",
        "methodStartingLine": 1573,
        "methodEndingLine": 1586,
        "jml": "//@ requires 0 <= first && first <= right && right < array.length;"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/ImbalancedClassification/Resampling/SMOTE_RSB/Rough_Sets/Utils.java",
        "code": "  private static int select(/*@non_null@*/ int[] array, /*@non_null@*/ int[] index, \n                            int left, int right, int k) {\n    \n    if (left == right) {\n      return left;\n    } else {\n      int middle = partition(array, index, left, right);\n      if ((middle - left + 1) >= k) {\n        return select(array, index, left, middle, k);\n      } else {\n        return select(array, index, middle + 1, right, k - (middle - left + 1));\n      }\n    }\n  }\n",
        "methodStartingLine": 1601,
        "methodEndingLine": 1614,
        "jml": "//@ requires 0 <= first && first <= right && right < array.length;"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/ImbalancedClassification/Resampling/SMOTE_RSB/Rough_Sets/Instance.java",
        "code": "  public /*@pure@*/ Attribute attribute(int index) {\n   \n    if (m_Dataset == null) {\n      throw new UnassignedDatasetException(\"Instance doesn't have access to a dataset!\");\n    }\n    return m_Dataset.attribute(index);\n  }\n",
        "methodStartingLine": 125,
        "methodEndingLine": 131,
        "jml": "//@ ensures m_Dataset == null;\n//@ ensures m_Dataset == null;\n//@ requires numAttributes > 0;    // Or maybe == 0 is okay too?\n//@ ensures m_Dataset == null;\n//@ requires m_Dataset != null;"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/ImbalancedClassification/Resampling/SMOTE_RSB/Rough_Sets/Instance.java",
        "code": "  public /*@pure@*/ Attribute attributeSparse(int indexOfIndex) {\n   \n    if (m_Dataset == null) {\n      throw new UnassignedDatasetException(\"Instance doesn't have access to a dataset!\");\n    }\n    return m_Dataset.attribute(indexOfIndex);\n  }\n",
        "methodStartingLine": 143,
        "methodEndingLine": 149,
        "jml": "//@ requires m_Dataset != null;"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/ImbalancedClassification/Resampling/SMOTE_RSB/Rough_Sets/Instance.java",
        "code": "  public /*@pure@*/ Attribute classAttribute() {\n\n    if (m_Dataset == null) {\n      throw new UnassignedDatasetException(\"Instance doesn't have access to a dataset!\");\n    }\n    return m_Dataset.classAttribute();\n  }\n",
        "methodStartingLine": 159,
        "methodEndingLine": 165,
        "jml": "//@ requires m_Dataset != null;"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/ImbalancedClassification/Resampling/SMOTE_RSB/Rough_Sets/Instance.java",
        "code": "  public /*@pure@*/ int classIndex() {\n    \n    if (m_Dataset == null) {\n      throw new UnassignedDatasetException(\"Instance doesn't have access to a dataset!\");\n    }\n    return m_Dataset.classIndex();\n  }\n",
        "methodStartingLine": 175,
        "methodEndingLine": 181,
        "jml": "//@ requires m_Dataset != null;\n//@ ensures  \\result == m_Dataset.classIndex();"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/ImbalancedClassification/Resampling/SMOTE_RSB/Rough_Sets/Instance.java",
        "code": "  public /*@pure@*/ boolean classIsMissing() {\n\n    if (classIndex() < 0) {\n      throw new UnassignedClassException(\"Class is not set!\");\n    }\n    return isMissing(classIndex());\n  }\n",
        "methodStartingLine": 191,
        "methodEndingLine": 197,
        "jml": "//@ requires classIndex() >= 0;"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/ImbalancedClassification/Resampling/SMOTE_RSB/Rough_Sets/Instance.java",
        "code": "  public /*@pure@*/ double classValue() {\n    \n    if (classIndex() < 0) {\n      throw new UnassignedClassException(\"Class is not set!\");\n    }\n    return value(classIndex());\n  }\n",
        "methodStartingLine": 210,
        "methodEndingLine": 216,
        "jml": "//@ requires classIndex() >= 0;"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/ImbalancedClassification/Resampling/SMOTE_RSB/Rough_Sets/Instance.java",
        "code": "  public /*@pure@*/ Instances dataset() {\n\n    return m_Dataset;\n  }\n",
        "methodStartingLine": 244,
        "methodEndingLine": 247,
        "jml": "//@ ensures \\result == m_Dataset;"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/ImbalancedClassification/Resampling/SMOTE_RSB/Rough_Sets/Instance.java",
        "code": "  public void deleteAttributeAt(int position) {\n\n    if (m_Dataset != null) {\n      throw new RuntimeException(\"Instance has access to a dataset!\");\n    }\n    forceDeleteAttributeAt(position);\n  }\n",
        "methodStartingLine": 260,
        "methodEndingLine": 266,
        "jml": "//@ requires m_Dataset != null;"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/ImbalancedClassification/Resampling/SMOTE_RSB/Rough_Sets/Instance.java",
        "code": "  public /*@pure@*/ Enumeration enumerateAttributes() {\n\n    if (m_Dataset == null) {\n      throw new UnassignedDatasetException(\"Instance doesn't have access to a dataset!\");\n    }\n    return m_Dataset.enumerateAttributes();\n  }\n",
        "methodStartingLine": 276,
        "methodEndingLine": 282,
        "jml": "//@ requires m_Dataset != null;"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/ImbalancedClassification/Resampling/SMOTE_RSB/Rough_Sets/Instance.java",
        "code": "  public /*@pure@*/ boolean equalHeaders(Instance inst) {\n\n    if (m_Dataset == null) {\n      throw new UnassignedDatasetException(\"Instance doesn't have access to a dataset!\");\n    }\n    return m_Dataset.equalHeaders(inst.m_Dataset);\n  }\n",
        "methodStartingLine": 294,
        "methodEndingLine": 300,
        "jml": "//@ requires m_Dataset != null;"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/ImbalancedClassification/Resampling/SMOTE_RSB/Rough_Sets/Instance.java",
        "code": "  public /*@pure@*/ boolean hasMissingValue() {\n    \n    if (m_Dataset == null) {\n      throw new UnassignedDatasetException(\"Instance doesn't have access to a dataset!\");\n    }\n    for (int i = 0; i < numAttributes(); i++) {\n      if (i != classIndex()) {\n\tif (isMissing(i)) {\n\t  return true;\n\t}\n      }\n    }\n    return false;\n  }\n",
        "methodStartingLine": 309,
        "methodEndingLine": 322,
        "jml": "//@ requires m_Dataset != null;"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/ImbalancedClassification/Resampling/SMOTE_RSB/Rough_Sets/Instance.java",
        "code": "  public void insertAttributeAt(int position) {\n\n    if (m_Dataset != null) {\n      throw new RuntimeException(\"Instance has accesss to a dataset!\");\n    }\n    if ((position < 0) ||\n\t(position > numAttributes())) {\n      throw new IllegalArgumentException(\"Can't insert attribute: index out \"+\n                                         \"of range\");\n    }\n    forceInsertAttributeAt(position);\n  }\n",
        "methodStartingLine": 338,
        "methodEndingLine": 349,
        "jml": "//@ requires m_Dataset == null;\n//@ requires 0 <= position && position <= numAttributes();"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/ImbalancedClassification/Resampling/SMOTE_RSB/Rough_Sets/Instance.java",
        "code": "  public /*@pure@*/ int numAttributes() {\n\n    return m_AttValues.length;\n  }\n",
        "methodStartingLine": 439,
        "methodEndingLine": 442,
        "jml": "//@ ensures \\result == m_AttValues.length;"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/ImbalancedClassification/Resampling/SMOTE_RSB/Rough_Sets/Instance.java",
        "code": "  public /*@pure@*/ int numClasses() {\n    \n    if (m_Dataset == null) {\n      throw new UnassignedDatasetException(\"Instance doesn't have access to a dataset!\");\n    }\n    return m_Dataset.numClasses();\n  }\n",
        "methodStartingLine": 453,
        "methodEndingLine": 459,
        "jml": "//@ requires m_Dataset != null;"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/ImbalancedClassification/Resampling/SMOTE_RSB/Rough_Sets/Instance.java",
        "code": "  public /*@pure@*/ int numValues() {\n\n    return m_AttValues.length;\n  }\n",
        "methodStartingLine": 467,
        "methodEndingLine": 470,
        "jml": "//@ ensures \\result == m_AttValues.length;"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/ImbalancedClassification/Resampling/SMOTE_RSB/Rough_Sets/Instance.java",
        "code": "  public void setClassMissing() {\n\n    if (classIndex() < 0) {\n      throw new UnassignedClassException(\"Class is not set!\");\n    }\n    setMissing(classIndex());\n  }\n",
        "methodStartingLine": 505,
        "methodEndingLine": 511,
        "jml": "//@ requires classIndex() >= 0;"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/ImbalancedClassification/Resampling/SMOTE_RSB/Rough_Sets/Instance.java",
        "code": "  public void setClassValue(double value) {\n\n    if (classIndex() < 0) {\n      throw new UnassignedClassException(\"Class is not set!\");\n    }\n    setValue(classIndex(), value);\n  }\n",
        "methodStartingLine": 524,
        "methodEndingLine": 530,
        "jml": "//@ requires classIndex() >= 0;"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/ImbalancedClassification/Resampling/SMOTE_RSB/Rough_Sets/Instance.java",
        "code": "  public final void setClassValue(String value) {\n\n    if (classIndex() < 0) {\n      throw new UnassignedClassException(\"Class is not set!\");\n    }\n    setValue(classIndex(), value);\n  }\n",
        "methodStartingLine": 547,
        "methodEndingLine": 553,
        "jml": "//@ requires classIndex() >= 0;"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/ImbalancedClassification/Resampling/SMOTE_RSB/Rough_Sets/Instance.java",
        "code": "  public final void setValue(int attIndex, String value) {\n    \n    int valIndex;\n\n    if (m_Dataset == null) {\n      throw new UnassignedDatasetException(\"Instance doesn't have access to a dataset!\");\n    }\n    if (!attribute(attIndex).isNominal() &&\n\t!attribute(attIndex).isString()) {\n      throw new IllegalArgumentException(\"Attribute neither nominal nor string!\");\n    }\n    valIndex = attribute(attIndex).indexOfValue(value);\n    if (valIndex == -1) {\n      if (attribute(attIndex).isNominal()) {\n\tthrow new IllegalArgumentException(\"Value not defined for given nominal attribute!\");\n      } else {\n\tattribute(attIndex).forceAddValue(value);\n\tvalIndex = attribute(attIndex).indexOfValue(value);\n      }\n    }\n    setValue(attIndex, (double)valIndex); \n  }\n",
        "methodStartingLine": 640,
        "methodEndingLine": 661,
        "jml": "//@ requires m_Dataset != null;"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/ImbalancedClassification/Resampling/SMOTE_RSB/Rough_Sets/Instance.java",
        "code": "  public final /*@pure@*/ Instances relationalValue(int attIndex) {\n\n    if (m_Dataset == null) {\n      throw new UnassignedDatasetException(\"Instance doesn't have access to a dataset!\");\n    } \n    return relationalValue(m_Dataset.attribute(attIndex));\n  }\n",
        "methodStartingLine": 735,
        "methodEndingLine": 741,
        "jml": "//@ requires m_Dataset != null;"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/ImbalancedClassification/Resampling/SMOTE_RSB/Rough_Sets/Instance.java",
        "code": "  public final /*@pure@*/ String stringValue(int attIndex) {\n\n    if (m_Dataset == null) {\n      throw new UnassignedDatasetException(\"Instance doesn't have access to a dataset!\");\n    } \n    return stringValue(m_Dataset.attribute(attIndex));\n  }\n",
        "methodStartingLine": 776,
        "methodEndingLine": 782,
        "jml": "//@ requires m_Dataset != null;"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/ImbalancedClassification/Resampling/SMOTE_RSB/Rough_Sets/Instance.java",
        "code": "  public static void main(String[] options) {\n\n    try {\n\n      // Create numeric attributes \"length\" and \"weight\"\n      Attribute length = new Attribute(\"length\");\n      Attribute weight = new Attribute(\"weight\");\n      \n      // Create vector to hold nominal values \"first\", \"second\", \"third\" \n      FastVector my_nominal_values = new FastVector(3); \n      my_nominal_values.addElement(\"first\"); \n      my_nominal_values.addElement(\"second\"); \n      my_nominal_values.addElement(\"third\"); \n      \n      // Create nominal attribute \"position\" \n      Attribute position = new Attribute(\"position\", my_nominal_values);\n      \n      // Create vector of the above attributes \n      FastVector attributes = new FastVector(3);\n      attributes.addElement(length);\n      attributes.addElement(weight);\n      attributes.addElement(position);\n      \n      // Create the empty dataset \"race\" with above attributes\n      Instances race = new Instances(\"race\", attributes, 0);\n      \n      // Make position the class attribute\n      race.setClassIndex(position.index());\n      \n      // Create empty instance with three attribute values\n      Instance inst = new Instance(3);\n      \n      // Set instance's values for the attributes \"length\", \"weight\", and \"position\"\n      inst.setValue(length, 5.3);\n      inst.setValue(weight, 300);\n      inst.setValue(position, \"first\");\n      \n      // Set instance's dataset to be the dataset \"race\"\n      inst.setDataset(race);\n      \n      // Print the instance\n      System.out.println(\"The instance: \" + inst);\n      \n      // Print the first attribute\n      System.out.println(\"First attribute: \" + inst.attribute(0));\n      \n      // Print the class attribute\n      System.out.println(\"Class attribute: \" + inst.classAttribute());\n      \n      // Print the class index\n      System.out.println(\"Class index: \" + inst.classIndex());\n      \n      // Say if class is missing\n      System.out.println(\"Class is missing: \" + inst.classIsMissing());\n      \n      // Print the instance's class value in internal format\n      System.out.println(\"Class value (internal format): \" + inst.classValue());\n      \n      // Print a shallow copy of this instance\n      Instance copy = (Instance) inst.copy();\n      System.out.println(\"Shallow copy: \" + copy);\n      \n      // Set dataset for shallow copy\n      copy.setDataset(inst.dataset());\n      System.out.println(\"Shallow copy with dataset set: \" + copy);\n      \n      // Unset dataset for copy, delete first attribute, and insert it again\n      copy.setDataset(null);\n      copy.deleteAttributeAt(0);\n      copy.insertAttributeAt(0);\n      copy.setDataset(inst.dataset());\n      System.out.println(\"Copy with first attribute deleted and inserted: \" + copy); \n      \n      // Enumerate attributes (leaving out the class attribute)\n      System.out.println(\"Enumerating attributes (leaving out class):\");\n      Enumeration enu = inst.enumerateAttributes();\n      while (enu.hasMoreElements()) {\n\tAttribute att = (Attribute) enu.nextElement();\n\tSystem.out.println(att);\n      }\n      \n      // Headers are equivalent?\n      System.out.println(\"Header of original and copy equivalent: \" +\n\t\t\t inst.equalHeaders(copy));\n\n      // Test for missing values\n      System.out.println(\"Length of copy missing: \" + copy.isMissing(length));\n      System.out.println(\"Weight of copy missing: \" + copy.isMissing(weight.index()));\n      System.out.println(\"Length of copy missing: \" + \n\t\t\t Instance.isMissingValue(copy.value(length)));\n      System.out.println(\"Missing value coded as: \" + Instance.missingValue());\n\n      // Prints number of attributes and classes\n      System.out.println(\"Number of attributes: \" + copy.numAttributes());\n      System.out.println(\"Number of classes: \" + copy.numClasses());\n\n      // Replace missing values\n      double[] meansAndModes = {2, 3, 0};\n      copy.replaceMissingValues(meansAndModes);\n      System.out.println(\"Copy with missing value replaced: \" + copy);\n\n      // Setting and getting values and weights\n      copy.setClassMissing();\n      System.out.println(\"Copy with missing class: \" + copy);\n      copy.setClassValue(0);\n      System.out.println(\"Copy with class value set to first value: \" + copy);\n      copy.setClassValue(\"third\");\n      System.out.println(\"Copy with class value set to \\\"third\\\": \" + copy);\n      copy.setMissing(1);\n      System.out.println(\"Copy with second attribute set to be missing: \" + copy);\n      copy.setMissing(length);\n      System.out.println(\"Copy with length set to be missing: \" + copy);\n      copy.setValue(0, 0);\n      System.out.println(\"Copy with first attribute set to 0: \" + copy);\n      copy.setValue(weight, 1);\n      System.out.println(\"Copy with weight attribute set to 1: \" + copy);\n      copy.setValue(position, \"second\");\n      System.out.println(\"Copy with position set to \\\"second\\\": \" + copy);\n      copy.setValue(2, \"first\");\n      System.out.println(\"Copy with last attribute set to \\\"first\\\": \" + copy);\n      System.out.println(\"Current weight of instance copy: \" + copy.weight());\n      copy.setWeight(2);\n      System.out.println(\"Current weight of instance copy (set to 2): \" + copy.weight());\n      System.out.println(\"Last value of copy: \" + copy.toString(2));\n      System.out.println(\"Value of position for copy: \" + copy.toString(position));\n      System.out.println(\"Last value of copy (internal format): \" + copy.value(2));\n      System.out.println(\"Value of position for copy (internal format): \" + \n\t\t\t copy.value(position));\n    } catch (Exception e) {\n      e.printStackTrace();\n    }\n  }\n",
        "methodStartingLine": 1007,
        "methodEndingLine": 1138,
        "jml": "//@ requires options != null;"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/ImbalancedClassification/Resampling/SMOTE_RSB/Rough_Sets/FastVector.java",
        "code": "    public final /*@pure@*/ boolean hasMoreElements() {\n\n      if (m_Counter < m_Vector.size()) {\n\treturn true;\n      }\n      return false;\n    }\n",
        "methodStartingLine": 74,
        "methodEndingLine": 80,
        "jml": "//@ requires 0 <= special && special < vector.size();"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/ImbalancedClassification/Resampling/SMOTE_RSB/Rough_Sets/FastVector.java",
        "code": "  public final void addElement(Object element) {\n\n    Object[] newObjects;\n\n    if (m_Size == m_Objects.length) {\n      newObjects = new Object[m_CapacityMultiplier *\n\t\t\t     (m_Objects.length +\n\t\t\t      m_CapacityIncrement)];\n      System.arraycopy(m_Objects, 0, newObjects, 0, m_Size);\n      m_Objects = newObjects;\n    }\n    m_Objects[m_Size] = element;\n    m_Size++;\n  }\n",
        "methodStartingLine": 147,
        "methodEndingLine": 160,
        "jml": "//@ requires capacity >= 0;"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/ImbalancedClassification/Resampling/SMOTE_RSB/Rough_Sets/FastVector.java",
        "code": "  public final /*@pure@*/ int capacity() {\n  \n    return m_Objects.length;\n  }\n",
        "methodStartingLine": 168,
        "methodEndingLine": 171,
        "jml": "//@ ensures \\result == m_Objects.length;"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/ImbalancedClassification/Resampling/SMOTE_RSB/Rough_Sets/FastVector.java",
        "code": "  public final /*@pure@*/ Object elementAt(int index) {\n\n    return m_Objects[index];\n  }\n",
        "methodStartingLine": 216,
        "methodEndingLine": 219,
        "jml": "//@ requires 0 <= index;\n//@ requires index < m_Objects.length;"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/ImbalancedClassification/Resampling/SMOTE_RSB/Rough_Sets/FastVector.java",
        "code": "  public final /*@pure@*/ Enumeration elements(int index) {\n  \n    return new FastVectorEnumeration(this, index);\n  }\n",
        "methodStartingLine": 239,
        "methodEndingLine": 242,
        "jml": "//@ requires 0 <= index && index < size();"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/ImbalancedClassification/Resampling/SMOTE_RSB/Rough_Sets/FastVector.java",
        "code": "  public final /*@pure@*/ Object firstElement() {\n\n    return m_Objects[0];\n  }\n",
        "methodStartingLine": 267,
        "methodEndingLine": 270,
        "jml": "//@ requires m_Size > 0;"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/ImbalancedClassification/Resampling/SMOTE_RSB/Rough_Sets/FastVector.java",
        "code": "  public final /*@pure@*/ Object lastElement() {\n\n    return m_Objects[m_Size - 1];\n  }\n",
        "methodStartingLine": 323,
        "methodEndingLine": 326,
        "jml": "//@ requires m_Size > 0;"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/ImbalancedClassification/Resampling/SMOTE_RSB/Rough_Sets/FastVector.java",
        "code": "  public final void removeElementAt(int index) {\n\n    System.arraycopy(m_Objects, index + 1, m_Objects, index, \n                     m_Size - index - 1);\n    m_Size--;\n  }\n",
        "methodStartingLine": 334,
        "methodEndingLine": 339,
        "jml": "//@ requires 0 <= index && index < m_Size;"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/ImbalancedClassification/Resampling/SMOTE_RSB/Rough_Sets/FastVector.java",
        "code": "  public final void setElementAt(Object element, int index) {\n\n    m_Objects[index] = element;\n  }\n",
        "methodStartingLine": 397,
        "methodEndingLine": 400,
        "jml": "//@ requires 0 <= index && index < size();"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/ImbalancedClassification/Resampling/SMOTE_RSB/Rough_Sets/FastVector.java",
        "code": "  public final /*@pure@*/ int size() {\n\n    return m_Size;\n  }\n",
        "methodStartingLine": 408,
        "methodEndingLine": 411,
        "jml": "//@ ensures \\result == m_Size;"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/ImbalancedClassification/Resampling/SMOTE_RSB/Rough_Sets/FastVector.java",
        "code": "  public final void swap(int first, int second) {\n\n    Object help = m_Objects[first];\n\n    m_Objects[first] = m_Objects[second];\n    m_Objects[second] = help;\n  }\n",
        "methodStartingLine": 421,
        "methodEndingLine": 427,
        "jml": "//@ requires 0 <= first && first < size();\n//@ requires 0 <= second && second < size();"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/SVM/SMO/core/Instance.java",
        "code": "\tpublic /*@pure@*/ Attribute attribute(int index) {\n\n\t\tif (m_Dataset == null) {\n\t\t\tthrow new UnassignedDatasetException(\"Instance doesn't have access to a dataset!\");\n\t\t}\n\t\treturn Attributes.getAttribute(index);\n\t}\n",
        "methodStartingLine": 182,
        "methodEndingLine": 188,
        "jml": "//@ ensures m_Dataset == null;\n//@ ensures m_Dataset == null;\n//@ requires numAttributes > 0;    // Or maybe == 0 is okay too?\n//@ ensures m_Dataset == null;\n//@ requires m_Dataset != null;"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/SVM/SMO/core/Instance.java",
        "code": "\tpublic /*@pure@*/ Attribute attributeSparse(int indexOfIndex) {\n\n\t\tif (m_Dataset == null) {\n\t\t\tthrow new UnassignedDatasetException(\"Instance doesn't have access to a dataset!\");\n\t\t}\n\t\treturn m_Dataset.attribute(indexOfIndex);\n\t}\n",
        "methodStartingLine": 200,
        "methodEndingLine": 206,
        "jml": "//@ requires m_Dataset != null;"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/SVM/SMO/core/Instance.java",
        "code": "\tpublic /*@pure@*/ Attribute classAttribute() {\n\n\t\tif (m_Dataset == null) {\n\t\t\tthrow new UnassignedDatasetException(\"Instance doesn't have access to a dataset!\");\n\t\t}\n\t\treturn m_Dataset.classAttribute();\n\t}\n",
        "methodStartingLine": 216,
        "methodEndingLine": 222,
        "jml": "//@ requires m_Dataset != null;"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/SVM/SMO/core/Instance.java",
        "code": "\tpublic /*@pure@*/ int classIndex() {\n\n\t\tif (m_Dataset == null) {\n\t\t\tthrow new UnassignedDatasetException(\"Instance doesn't have access to a dataset!\");\n\t\t}\n\t\treturn m_Dataset.classIndex();\n\t}\n",
        "methodStartingLine": 232,
        "methodEndingLine": 238,
        "jml": "//@ requires m_Dataset != null;\n//@ ensures  \\result == m_Dataset.classIndex();"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/SVM/SMO/core/Instance.java",
        "code": "\tpublic /*@pure@*/ boolean classIsMissing() {\n\n\t\tif (classIndex() < 0) {\n\t\t\tthrow new UnassignedClassException(\"Class is not set!\");\n\t\t}\n\t\treturn isMissing(classIndex());\n\t}\n",
        "methodStartingLine": 248,
        "methodEndingLine": 254,
        "jml": "//@ requires classIndex() >= 0;"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/SVM/SMO/core/Instance.java",
        "code": "\tpublic /*@pure@*/ double classValue() {\n\n\t\tif (classIndex() < 0) {\n\t\t\tthrow new UnassignedClassException(\"Class is not set!\");\n\t\t}\n\t\treturn value(classIndex());\n\t}\n",
        "methodStartingLine": 267,
        "methodEndingLine": 273,
        "jml": "//@ requires classIndex() >= 0;"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/SVM/SMO/core/Instance.java",
        "code": "\tpublic /*@pure@*/ Instances dataset() {\n\n\t\treturn m_Dataset;\n\t}\n",
        "methodStartingLine": 301,
        "methodEndingLine": 304,
        "jml": "//@ ensures \\result == m_Dataset;"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/SVM/SMO/core/Instance.java",
        "code": "\tpublic void deleteAttributeAt(int position) {\n\n\t\tif (m_Dataset != null) {\n\t\t\tthrow new RuntimeException(\"Instance has access to a dataset!\");\n\t\t}\n\t\tforceDeleteAttributeAt(position);\n\t}\n",
        "methodStartingLine": 317,
        "methodEndingLine": 323,
        "jml": "//@ requires m_Dataset != null;"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/SVM/SMO/core/Instance.java",
        "code": "\tpublic /*@pure@*/ Enumeration enumerateAttributes() {\n\n\t\tif (m_Dataset == null) {\n\t\t\tthrow new UnassignedDatasetException(\"Instance doesn't have access to a dataset!\");\n\t\t}\n\t\treturn m_Dataset.enumerateAttributes();\n\t}\n",
        "methodStartingLine": 333,
        "methodEndingLine": 339,
        "jml": "//@ requires m_Dataset != null;"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/SVM/SMO/core/Instance.java",
        "code": "\tpublic /*@pure@*/ boolean equalHeaders(Instance inst) {\n\n\t\tif (m_Dataset == null) {\n\t\t\tthrow new UnassignedDatasetException(\"Instance doesn't have access to a dataset!\");\n\t\t}\n\t\treturn m_Dataset.equalHeaders(inst.m_Dataset);\n\t}\n",
        "methodStartingLine": 351,
        "methodEndingLine": 357,
        "jml": "//@ requires m_Dataset != null;"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/SVM/SMO/core/Instance.java",
        "code": "\tpublic /*@pure@*/ boolean hasMissingValue() {\n\n\t\tif (m_Dataset == null) {\n\t\t\tthrow new UnassignedDatasetException(\"Instance doesn't have access to a dataset!\");\n\t\t}\n\t\tfor (int i = 0; i < numAttributes(); i++) {\n\t\t\tif (i != classIndex()) {\n\t\t\t\tif (isMissing(i)) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n",
        "methodStartingLine": 366,
        "methodEndingLine": 379,
        "jml": "//@ requires m_Dataset != null;"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/SVM/SMO/core/Instance.java",
        "code": "\tpublic void insertAttributeAt(int position) {\n\n\t\tif (m_Dataset != null) {\n\t\t\tthrow new RuntimeException(\"Instance has accesss to a dataset!\");\n\t\t}\n\t\tif ((position < 0) ||\n\t\t\t\t(position > numAttributes())) {\n\t\t\tthrow new IllegalArgumentException(\"Can't insert attribute: index out \"+\n\t\t\t\"of range\");\n\t\t}\n\t\tforceInsertAttributeAt(position);\n\t}\n",
        "methodStartingLine": 406,
        "methodEndingLine": 417,
        "jml": "//@ requires m_Dataset == null;\n//@ requires 0 <= position && position <= numAttributes();"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/SVM/SMO/core/Instance.java",
        "code": "\tpublic /*@pure@*/ int numAttributes() {\n\n\t\treturn m_AttValues.length;\n\t}\n",
        "methodStartingLine": 511,
        "methodEndingLine": 514,
        "jml": "//@ ensures \\result == m_AttValues.length;"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/SVM/SMO/core/Instance.java",
        "code": "\tpublic /*@pure@*/ int numClasses() {\n\n\t\tif (m_Dataset == null) {\n\t\t\tthrow new UnassignedDatasetException(\"Instance doesn't have access to a dataset!\");\n\t\t}\n\t\treturn m_Dataset.numClasses();\n\t}\n",
        "methodStartingLine": 525,
        "methodEndingLine": 531,
        "jml": "//@ requires m_Dataset != null;"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/SVM/SMO/core/Instance.java",
        "code": "\tpublic /*@pure@*/ int numValues() {\n\n\t\treturn m_AttValues.length;\n\t}\n",
        "methodStartingLine": 539,
        "methodEndingLine": 542,
        "jml": "//@ ensures \\result == m_AttValues.length;"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/SVM/SMO/core/Instance.java",
        "code": "\tpublic void setClassMissing() {\n\n\t\tif (classIndex() < 0) {\n\t\t\tthrow new UnassignedClassException(\"Class is not set!\");\n\t\t}\n\t\tsetMissing(classIndex());\n\t}\n",
        "methodStartingLine": 577,
        "methodEndingLine": 583,
        "jml": "//@ requires classIndex() >= 0;"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/SVM/SMO/core/Instance.java",
        "code": "\tpublic void setClassValue(double value) {\n\n\t\tif (classIndex() < 0) {\n\t\t\tthrow new UnassignedClassException(\"Class is not set!\");\n\t\t}\n\t\tsetValue(classIndex(), value);\n\t}\n",
        "methodStartingLine": 597,
        "methodEndingLine": 603,
        "jml": "//@ requires classIndex() >= 0;"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/SVM/SMO/core/Instance.java",
        "code": "\tpublic final void setClassValue(String value) {\n\n\t\tif (classIndex() < 0) {\n\t\t\tthrow new UnassignedClassException(\"Class is not set!\");\n\t\t}\n\t\tsetValue(classIndex(), value);\n\t}\n",
        "methodStartingLine": 620,
        "methodEndingLine": 626,
        "jml": "//@ requires classIndex() >= 0;"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/SVM/SMO/core/Instance.java",
        "code": "\tpublic final void setValue(int attIndex, String value) {\n\t\tAttribute a = Attributes.getAttribute(attIndex);\n\t\tint valIndex;\n\n\t\tif (m_Dataset == null) {\n\t\t\tthrow new UnassignedDatasetException(\"Instance doesn't have access to a dataset!\");\n\t\t}\n\t\tif (!(a.getType()==Attribute.NOMINAL)) {\n\t\t\tthrow new IllegalArgumentException(\"Attribute neither nominal nor string!\");\n\t\t}\n//\t\tvalIndex = attribute(attIndex).indexOfValue(value);\n//\t\tif (valIndex == -1) {\n//\t\t\tif (a.getType()==Attribute.NOMINAL) {\n//\t\t\t\tthrow new IllegalArgumentException(\"Value not defined for given nominal attribute!\");\n//\t\t\t} else {\n//\t\t\t\tattribute(attIndex).forceAddValue(value);\n//\t\t\t\tvalIndex = attribute(attIndex).indexOfValue(value);\n//\t\t\t}\n//\t\t}\n\t\tvalIndex = -1;\n\t\tfor(int i=0;i<a.getNumNominalValues();i++)\n\t\t\tif(a.getNominalValue(i).compareTo(value)==0)\n\t\t\t\tvalIndex = i;\n\t\tsetValue(attIndex, (double)valIndex); \n\t}\n",
        "methodStartingLine": 717,
        "methodEndingLine": 741,
        "jml": "//@ requires m_Dataset != null;"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/SVM/SMO/core/Instance.java",
        "code": "\tpublic final /*@pure@*/ String stringValue(int attIndex) {\n\n\t\tif (m_Dataset == null) {\n\t\t\tthrow new UnassignedDatasetException(\"Instance doesn't have access to a dataset!\");\n\t\t} \n\t\treturn stringValue(m_Dataset.attribute(attIndex));\n\t}\n",
        "methodStartingLine": 857,
        "methodEndingLine": 863,
        "jml": "//@ requires m_Dataset != null;\n//@ requires m_Dataset != null;"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/SVM/SMO/core/Instances.java",
        "code": "\tprotected void initialize(Instances dataset, int capacity) {\n\t\tif (capacity < 0)\n\t\t\tcapacity = 0;\n\n\t\t// Strings only have to be \"shallow\" copied because\n\t\t// they can't be modified.\n\t\tm_ClassIndex   = dataset.m_ClassIndex;\n\t\tm_RelationName = dataset.m_RelationName;\n\t\tm_Attributes   = dataset.m_Attributes;\n\t\tm_Instances    = new FastVector(capacity);\n\t}\n",
        "methodStartingLine": 216,
        "methodEndingLine": 226,
        "jml": "//@ requires capacity >= 0;\n//@ ensures classIndex() == -1;"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/SVM/SMO/core/Instances.java",
        "code": "\tpublic void add(/*@non_null@*/ Instance instance) {\n\n\t\tInstance newInstance = (Instance)instance.copy();\n\n\t\tnewInstance.setDataset(this);\n\t\tm_Instances.addElement(newInstance);\n\t}\n",
        "methodStartingLine": 306,
        "methodEndingLine": 312,
        "jml": "//@ requires 0 <= first;\n//@ requires 0 <= toCopy;\n//@ requires first + toCopy <= source.numInstances();"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/SVM/SMO/core/Instances.java",
        "code": "\tpublic /*@pure@*/ Attribute attribute(int index) {\n\n\t\treturn (Attribute) m_Attributes.elementAt(index);\n\t}\n",
        "methodStartingLine": 323,
        "methodEndingLine": 326,
        "jml": "//@ requires 0 <= index;\n//@ requires index < m_Attributes.size();\n//@ ensures \\result != null;"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/SVM/SMO/core/Instances.java",
        "code": "\tpublic /*@pure@*/ Attribute classAttribute() {\n\n\t\tif (m_ClassIndex < 0) {\n\t\t\tthrow new UnassignedClassException(\"Class index is negative (not set)!\");\n\t\t}\n\t\treturn attribute(m_ClassIndex);\n\t}\n",
        "methodStartingLine": 412,
        "methodEndingLine": 418,
        "jml": "//@ requires classIndex() >= 0;"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/SVM/SMO/core/Instances.java",
        "code": "\tpublic void delete(int index) {\n\n\t\tm_Instances.removeElementAt(index);\n\t}\n",
        "methodStartingLine": 455,
        "methodEndingLine": 458,
        "jml": "//@ requires 0 <= index && index < numInstances();"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/SVM/SMO/core/Instances.java",
        "code": "\tpublic void deleteAttributeAt(int position) {\n\n\t\tif ((position < 0) || (position >= m_Attributes.size())) {\n\t\t\tthrow new IllegalArgumentException(\"Index out of range\");\n\t\t}\n\t\tif (position == m_ClassIndex) {\n\t\t\tthrow new IllegalArgumentException(\"Can't delete class attribute\");\n\t\t}\n\t\tfreshAttributeInfo();\n\t\tif (m_ClassIndex > position) {\n\t\t\tm_ClassIndex--;\n\t\t}\n\t\tm_Attributes.removeElementAt(position);\n\t\tfor (int i = position; i < m_Attributes.size(); i++) {\n\t\t\tAttribute current = (Attribute)m_Attributes.elementAt(i);\n//\t\t\tcurrent.setIndex(current.index() - 1);\n\t\t}\n\t\tfor (int i = 0; i < numInstances(); i++) {\n\t\t\tinstance(i).forceDeleteAttributeAt(position); \n\t\t}\n\t}\n",
        "methodStartingLine": 471,
        "methodEndingLine": 491,
        "jml": "//@ requires 0 <= position && position < numAttributes();\n//@ requires position != classIndex();"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/SVM/SMO/core/Instances.java",
        "code": "\tpublic void deleteWithMissing(int attIndex) {\n\n\t\tFastVector newInstances = new FastVector(numInstances());\n\n\t\tfor (int i = 0; i < numInstances(); i++) {\n\t\t\tif (!instance(i).isMissing(attIndex)) {\n\t\t\t\tnewInstances.addElement(instance(i));\n\t\t\t}\n\t\t}\n\t\tm_Instances = newInstances;\n\t}\n",
        "methodStartingLine": 531,
        "methodEndingLine": 541,
        "jml": "//@ requires 0 <= attIndex && attIndex < numAttributes();"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/SVM/SMO/core/Instances.java",
        "code": "\tpublic /*@non_null pure@*/ Instance firstInstance() {\n\n\t\treturn (Instance)m_Instances.firstElement();\n\t}\n",
        "methodStartingLine": 618,
        "methodEndingLine": 621,
        "jml": "//@ requires numInstances() > 0;"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/SVM/SMO/core/Instances.java",
        "code": "\tpublic void insertAttributeAt(/*@non_null@*/ Attribute att, int position) {\n\n\t\tif ((position < 0) ||\n\t\t\t\t(position > m_Attributes.size())) {\n\t\t\tthrow new IllegalArgumentException(\"Index out of range\");\n\t\t}\n\t\tfreshAttributeInfo();\n//\t\tatt.setIndex(position);\n\t\tm_Attributes.insertElementAt(att, position);\n\t\tfor (int i = position + 1; i < m_Attributes.size(); i++) {\n\t\t\tAttribute current = (Attribute)m_Attributes.elementAt(i);\n//\t\t\tcurrent.setIndex(indexOf(current) + 1);\n\t\t}\n\t\tfor (int i = 0; i < numInstances(); i++) {\n\t\t\tinstance(i).forceInsertAttributeAt(position);\n\t\t}\n\t\tif (m_ClassIndex >= position) {\n\t\t\tm_ClassIndex++;\n\t\t}\n\t}\n",
        "methodStartingLine": 651,
        "methodEndingLine": 670,
        "jml": "//@ requires 0 <= position;\n//@ requires position <= numAttributes();"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/SVM/SMO/core/Instances.java",
        "code": "\tpublic /*@non_null pure@*/ Instance instance(int index) {\n\n\t\treturn (Instance)m_Instances.elementAt(index);\n\t}\n",
        "methodStartingLine": 680,
        "methodEndingLine": 683,
        "jml": "//@ requires 0 <= index;\n//@ requires index < numInstances();"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/SVM/SMO/core/Instances.java",
        "code": "\tpublic /*@non_null pure@*/ Instance lastInstance() {\n\n\t\treturn (Instance)m_Instances.lastElement();\n\t}\n",
        "methodStartingLine": 744,
        "methodEndingLine": 747,
        "jml": "//@ requires numInstances() > 0;"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/SVM/SMO/core/Instances.java",
        "code": "\tpublic /*@pure@*/ int numAttributes() {\n\n\t\treturn m_Attributes.size();\n\t}\n",
        "methodStartingLine": 807,
        "methodEndingLine": 810,
        "jml": "//@ ensures \\result == m_Attributes.size();"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/SVM/SMO/core/Instances.java",
        "code": "\tpublic /*@pure@*/ int numClasses() {\n\n\t\tif (m_ClassIndex < 0) {\n\t\t\tthrow new UnassignedClassException(\"Class index is negative (not set)!\");\n\t\t}\n\t\tif (!(classAttribute().getType()==Attribute.NOMINAL)) {\n\t\t\treturn 1;\n\t\t} else {\n\t\t\treturn classAttribute().getNumNominalValues();\n\t\t}\n\t}\n",
        "methodStartingLine": 820,
        "methodEndingLine": 830,
        "jml": "//@ requires classIndex() >= 0;"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/SVM/SMO/core/Instances.java",
        "code": "\tpublic /*@pure@*/ int numDistinctValues(int attIndex) {\n\n\t\tif (!(attribute(attIndex).getType()==Attribute.NOMINAL)) {\n\t\t\tdouble [] attVals = attributeToDoubleArray(attIndex);\n\t\t\tint [] sorted = Utils.sort(attVals);\n\t\t\tdouble prev = 0;\n\t\t\tint counter = 0;\n\t\t\tfor (int i = 0; i < sorted.length; i++) {\n\t\t\t\tInstance current = instance(sorted[i]);\n\t\t\t\tif (current.isMissing(attIndex)) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif ((i == 0) || \n\t\t\t\t\t\t(current.value(attIndex) > prev)) {\n\t\t\t\t\tprev = current.value(attIndex);\n\t\t\t\t\tcounter++;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn counter;\n\t\t} else {\n\t\t\treturn attribute(attIndex).getNumNominalValues();\n\t\t}\n\t}\n",
        "methodStartingLine": 842,
        "methodEndingLine": 864,
        "jml": "//@ requires 0 <= attIndex;\n//@ requires attIndex < numAttributes();"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/SVM/SMO/core/Instances.java",
        "code": "\tpublic /*@pure@*/ int numInstances() {\n\n\t\treturn m_Instances.size();\n\t}\n",
        "methodStartingLine": 885,
        "methodEndingLine": 888,
        "jml": "//@ ensures \\result == m_Instances.size();"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/SVM/SMO/core/Instances.java",
        "code": "\tpublic /*@pure@*/ String relationName() {\n\n\t\treturn m_RelationName;\n\t}\n",
        "methodStartingLine": 949,
        "methodEndingLine": 952,
        "jml": "//@ ensures \\result == m_RelationName;"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/SVM/SMO/core/Instances.java",
        "code": "\tpublic Instances testCV(int numFolds, int numFold) {\n\n\t\tint numInstForFold, first, offset;\n\t\tInstances test;\n\n\t\tif (numFolds < 2) {\n\t\t\tthrow new IllegalArgumentException(\"Number of folds must be at least 2!\");\n\t\t}\n\t\tif (numFolds > numInstances()) {\n\t\t\tthrow new IllegalArgumentException(\"Can't have more folds than instances!\");\n\t\t}\n\t\tnumInstForFold = numInstances() / numFolds;\n\t\tif (numFold < numInstances() % numFolds){\n\t\t\tnumInstForFold++;\n\t\t\toffset = numFold;\n\t\t}else\n\t\t\toffset = numInstances() % numFolds;\n\t\ttest = new Instances(this, numInstForFold);\n\t\tfirst = numFold * (numInstances() / numFolds) + offset;\n\t\tcopyInstances(first, test, numInstForFold);\n\t\treturn test;\n\t}\n",
        "methodStartingLine": 1260,
        "methodEndingLine": 1281,
        "jml": "//@ requires 2 <= numFolds && numFolds < numInstances();\n//@ requires 0 <= numFold && numFold < numFolds;"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/SVM/SMO/core/Instances.java",
        "code": "\tpublic Instances trainCV(int numFolds, int numFold) {\n\n\t\tint numInstForFold, first, offset;\n\t\tInstances train;\n\n\t\tif (numFolds < 2) {\n\t\t\tthrow new IllegalArgumentException(\"Number of folds must be at least 2!\");\n\t\t}\n\t\tif (numFolds > numInstances()) {\n\t\t\tthrow new IllegalArgumentException(\"Can't have more folds than instances!\");\n\t\t}\n\t\tnumInstForFold = numInstances() / numFolds;\n\t\tif (numFold < numInstances() % numFolds) {\n\t\t\tnumInstForFold++;\n\t\t\toffset = numFold;\n\t\t}else\n\t\t\toffset = numInstances() % numFolds;\n\t\ttrain = new Instances(this, numInstances() - numInstForFold);\n\t\tfirst = numFold * (numInstances() / numFolds) + offset;\n\t\tcopyInstances(0, train, first);\n\t\tcopyInstances(first + numInstForFold, train,\n\t\t\t\tnumInstances() - first - numInstForFold);\n\n\t\treturn train;\n\t}\n",
        "methodStartingLine": 1338,
        "methodEndingLine": 1362,
        "jml": "//@ requires 2 <= numFolds && numFolds < numInstances();\n//@ requires 0 <= numFold && numFold < numFolds;"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/SVM/SMO/core/Instances.java",
        "code": "\tpublic Instances trainCV(int numFolds, int numFold, Random random) {\n\n\t\tInstances train = trainCV(numFolds, numFold);\n\t\ttrain.randomize(random);\n\t\treturn train;\n\t}\n",
        "methodStartingLine": 1379,
        "methodEndingLine": 1384,
        "jml": "//@ requires 2 <= numFolds && numFolds < numInstances();\n//@ requires 0 <= numFold && numFold < numFolds;"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/SVM/SMO/core/Instances.java",
        "code": "\tpublic /*@pure@*/ double [] attributeToDoubleArray(int index) {\n\n\t\tdouble [] result = new double[numInstances()];\n\t\tfor (int i = 0; i < result.length; i++) {\n\t\t\tresult[i] = instance(i).value(index);\n\t\t}\n\t\treturn result;\n\t}\n",
        "methodStartingLine": 1489,
        "methodEndingLine": 1496,
        "jml": "//@ requires 0 <= index && index < numAttributes();\n//@ requires 0 <= index && index < numAttributes();"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/SVM/SMO/core/Instances.java",
        "code": "\tprotected void copyInstances(int from, /*@non_null@*/ Instances dest, int num) {\n\n\t\tfor (int i = 0; i < num; i++) {\n\t\t\tdest.add(instance(from + i));\n\t\t}\n\t}\n",
        "methodStartingLine": 1597,
        "methodEndingLine": 1602,
        "jml": "//@ requires 0 <= from && from <= numInstances() - num;\n//@ requires 0 <= num;"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/SVM/SMO/core/Instances.java",
        "code": "\tprotected int partition(int attIndex, int l, int r) {\n\n\t\tdouble pivot = instance((l + r) / 2).value(attIndex);\n\n\t\twhile (l < r) {\n\t\t\twhile ((instance(l).value(attIndex) < pivot) && (l < r)) {\n\t\t\t\tl++;\n\t\t\t}\n\t\t\twhile ((instance(r).value(attIndex) > pivot) && (l < r)) {\n\t\t\t\tr--;\n\t\t\t}\n\t\t\tif (l < r) {\n\t\t\t\tswap(l, r);\n\t\t\t\tl++;\n\t\t\t\tr--;\n\t\t\t}\n\t\t}\n\t\tif ((l == r) && (instance(r).value(attIndex) > pivot)) {\n\t\t\tr--;\n\t\t} \n\n\t\treturn r;\n\t}\n",
        "methodStartingLine": 1644,
        "methodEndingLine": 1666,
        "jml": "//@ requires 0 <= attIndex && attIndex < numAttributes();\n//@ requires 0 <= left && left <= right && right < numInstances();"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/SVM/SMO/core/Instances.java",
        "code": "\tprotected void quickSort(int attIndex, int left, int right) {\n\n\t\tif (left < right) {\n\t\t\tint middle = partition(attIndex, left, right);\n\t\t\tquickSort(attIndex, left, middle);\n\t\t\tquickSort(attIndex, middle + 1, right);\n\t\t}\n\t}\n",
        "methodStartingLine": 1678,
        "methodEndingLine": 1685,
        "jml": "//@ requires 0 <= attIndex && attIndex < numAttributes();\n//@ requires 0 <= first && first <= right && right < numInstances();"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/SVM/SMO/core/Instances.java",
        "code": "\tprotected int select(int attIndex, int left, int right, int k) {\n\n\t\tif (left == right) {\n\t\t\treturn left;\n\t\t} else {\n\t\t\tint middle = partition(attIndex, left, right);\n\t\t\tif ((middle - left + 1) >= k) {\n\t\t\t\treturn select(attIndex, left, middle, k);\n\t\t\t} else {\n\t\t\t\treturn select(attIndex, middle + 1, right, k - (middle - left + 1));\n\t\t\t}\n\t\t}\n\t}\n",
        "methodStartingLine": 1700,
        "methodEndingLine": 1712,
        "jml": "//@ requires 0 <= attIndex && attIndex < numAttributes();\n//@ requires 0 <= first && first <= right && right < numInstances();"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/SVM/SMO/core/Instances.java",
        "code": "\tpublic void swap(int i, int j){\n\n\t\tm_Instances.swap(i, j);\n\t}\n",
        "methodStartingLine": 1744,
        "methodEndingLine": 1747,
        "jml": "//@ requires 0 <= i && i < numInstances();\n//@ requires 0 <= j && j < numInstances();"
    },
    {
        "repository": "github.com/SCI2SUGR/KEEL",
        "file": "src/keel/Algorithms/SVM/SMO/core/Instances.java",
        "code": "\tprotected int indexOf(Attribute att){\n\t\tint index = -1;\n\t\tfor(int i=0;i<Attributes.getNumAttributes() && index==-1;i++){\n\t\t\tif(Attributes.getAttribute(i)==att)\n\t\t\t\tindex = i;\n\t\t}\n\t\treturn index;\n\t}\n",
        "methodStartingLine": 2098,
        "methodEndingLine": 2105,
        "jml": "//@ requires argv != null;\n//@ requires argv.length == 1;\n//@ requires argv[0] != null;"
    }
]