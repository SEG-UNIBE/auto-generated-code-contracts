[
    {
        "repository": "github.com/joana-team/joana",
        "file": "example/joana.example.many-small-progs/src/conc/daisy/Daisy.java",
        "code": "    public static void acq(long lockno) {\n        if (lockno >= plocks.size() || plocks.get((int)lockno) == null) {\n            m.acq();\n            if (lockno >= plocks.size()) {\n                plocks.setSize((int)lockno + 100);\n            }\n            if (plocks.get((int)lockno) == null) {\n                plocks.setElementAt(new Mutex((int)lockno), (int)lockno);\n            }\n            m.rel();\n        }\n        plocks.get((int)lockno).acq();\n    }\n",
        "methodStartingLine": 62,
        "methodEndingLine": 74,
        "jml": "//@ requires 0 <= lockno && lockno < SIZE"
    },
    {
        "repository": "github.com/joana-team/joana",
        "file": "example/joana.example.many-small-progs/src/conc/daisy/Daisy.java",
        "code": "    public static void rel(long lockno) {\n        plocks.get((int)lockno).rel();\n    }\n",
        "methodStartingLine": 82,
        "methodEndingLine": 84,
        "jml": "//@ requires 0 <= lockno && lockno < SIZE\n//@ requires locks[lockno] == \\tid"
    },
    {
        "repository": "github.com/joana-team/joana",
        "file": "example/joana.example.many-small-progs/src/conc/daisy/Daisy.java",
        "code": "    static void acqi(long inodenum) {\n        LockManager.acq(STARTINODELOCKAREA+inodenum);\n    } // nowarn Post\n",
        "methodStartingLine": 134,
        "methodEndingLine": 136,
        "jml": "//@ requires 0 <= inodenum && inodenum < Daisy.MAXINODE"
    },
    {
        "repository": "github.com/joana-team/joana",
        "file": "example/joana.example.many-small-progs/src/conc/daisy/Daisy.java",
        "code": "    static void reli(long inodenum) {\n        LockManager.rel(STARTINODELOCKAREA+inodenum);\n    } // nowarn Post\n",
        "methodStartingLine": 144,
        "methodEndingLine": 146,
        "jml": "//@ requires 0 <= inodenum && inodenum < Daisy.MAXINODE;\n//@ requires inodeLocks[inodenum] == \\tid"
    },
    {
        "repository": "github.com/joana-team/joana",
        "file": "example/joana.example.many-small-progs/src/conc/daisy/Daisy.java",
        "code": "    static void acqb(long blockno) {\n        LockManager.acq(STARTBLOCKLOCKAREA+blockno);\n    } // nowarn Post\n",
        "methodStartingLine": 158,
        "methodEndingLine": 160,
        "jml": "//@ requires 0 <= blockno && blockno < Daisy.MAXBLOCK"
    },
    {
        "repository": "github.com/joana-team/joana",
        "file": "example/joana.example.many-small-progs/src/conc/daisy/Daisy.java",
        "code": "    static void relb(long blockno) {\n        LockManager.rel(STARTBLOCKLOCKAREA+blockno);\n    } // nowarn Post\n",
        "methodStartingLine": 168,
        "methodEndingLine": 170,
        "jml": "//@ requires 0 <= blockno && blockno < Daisy.MAXBLOCK\n//@ requires blockLocks[blockno] == \\tid"
    },
    {
        "repository": "github.com/joana-team/joana",
        "file": "example/joana.example.many-small-progs/src/conc/daisy/Daisy.java",
        "code": "    public static void lock_file(long inodenum) {\n        LockManager.acq(STARTFILELOCKAREA+inodenum);\n    }\n",
        "methodStartingLine": 183,
        "methodEndingLine": 185,
        "jml": "//@ requires 0 <= inodenum && inodenum < Daisy.MAXINODE"
    },
    {
        "repository": "github.com/joana-team/joana",
        "file": "example/joana.example.many-small-progs/src/conc/daisy/Daisy.java",
        "code": "    public static void unlock_file(long inodenum) {\n        LockManager.rel(STARTFILELOCKAREA+inodenum);\n    }\n",
        "methodStartingLine": 193,
        "methodEndingLine": 195,
        "jml": "//@ requires 0 <= inodenum && inodenum < Daisy.MAXINODE;\n//@ requires fileLocks[inodenum] == \\tid"
    },
    {
        "repository": "github.com/joana-team/joana",
        "file": "example/joana.example.many-small-progs/src/conc/daisy/Daisy.java",
        "code": "    static void readi(long inodenum, Inode i) {\n        i.blockno = Petal.readLong(STARTINODEAREA +\n                (inodenum * Daisy.INODESIZE));\n        i.size= Petal.readLong(STARTINODEAREA +\n                (inodenum * Daisy.INODESIZE) + 8);\n        i.used = Petal.read(STARTINODEAREA +\n                (inodenum * Daisy.INODESIZE) + 16) == 1;\n        i.inodenum = inodenum;\n        // read the right bytes, put in inode\n    } //@ nowarn Post\n",
        "methodStartingLine": 226,
        "methodEndingLine": 235,
        "jml": "//@ requires 0 <= inodenum && inodenum < Daisy.MAXINODE;\n//@ requires i != null\n//@ requires DaisyLock.inodeLocks[inodenum] == \\tid\n//@ ensures i.blockno  == inodeBlocknos[inodenum]\n//@ ensures i.size     == inodeSizes[inodenum]\n//@ ensures i.used     == inodeUsed[inodenum]\n//@ ensures i.inodenum == inodenum\n//@ ensures 0 <= i.blockno && i.blockno < Daisy.MAXBLOCK"
    },
    {
        "repository": "github.com/joana-team/joana",
        "file": "example/joana.example.many-small-progs/src/conc/daisy/Daisy.java",
        "code": "    static void writei(Inode i) {\n        Petal.writeLong(STARTINODEAREA +\n                (i.inodenum * Daisy.INODESIZE), i.blockno);\n        Petal.writeLong(STARTINODEAREA +\n                (i.inodenum * Daisy.INODESIZE) + 8, i.size);\n        Petal.write(STARTINODEAREA +\n                (i.inodenum * Daisy.INODESIZE) + 16,\n                (byte)(i.used ? 1 : 0));\n    } //@ nowarn Post\n",
        "methodStartingLine": 243,
        "methodEndingLine": 251,
        "jml": "//@ requires i != null\n//@ requires DaisyLock.inodeLocks[i.inodenum] == \\tid\n//@ ensures i.blockno  == inodeBlocknos[i.inodenum]\n//@ ensures i.size     == inodeSizes[i.inodenum]\n//@ ensures i.used     == inodeUsed[i.inodenum]"
    },
    {
        "repository": "github.com/joana-team/joana",
        "file": "example/joana.example.many-small-progs/src/conc/daisy/Daisy.java",
        "code": "    static boolean readAllocBit(long blockno) {\n        return (Petal.read( STARTALLOCAREA+blockno/8 ) &  (1<<(blockno & 7))) != 0;\n    } //@ nowarn Post\n",
        "methodStartingLine": 259,
        "methodEndingLine": 261,
        "jml": "//@ requires 0 <= blockno && blockno < Daisy.MAXBLOCK\n//@ requires DaisyLock.blockLocks[blockno] == \\tid\n//@ ensures \\result == allocBit[blockno]"
    },
    {
        "repository": "github.com/joana-team/joana",
        "file": "example/joana.example.many-small-progs/src/conc/daisy/Daisy.java",
        "code": "    static void writeAllocBit(long blockno, boolean bit) {\n        byte b = Petal.read( STARTALLOCAREA+blockno/8 );\n        byte mask = (byte)(1<<(blockno & 7));\n        b = bit ? (byte)(b | mask) : (byte)(b & ~mask);\n        Petal.write( STARTALLOCAREA+blockno/8, b );\n    } //@ nowarn Post\n",
        "methodStartingLine": 267,
        "methodEndingLine": 272,
        "jml": "//@ requires 0 <= blockno && blockno < Daisy.MAXBLOCK\n//@ requires DaisyLock.blockLocks[blockno] == \\tid\n//@ ensures allocBit[blockno] == bit"
    },
    {
        "repository": "github.com/joana-team/joana",
        "file": "example/joana.example.many-small-progs/src/conc/daisy/Daisy.java",
        "code": "    static byte readBlockByte(long blockno, long offset) {\n        return Petal.read( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset );\n    } //@ nowarn Post\n",
        "methodStartingLine": 280,
        "methodEndingLine": 282,
        "jml": "//@ requires 0 <= blockno && blockno < Daisy.MAXBLOCK\n//@ requires 0 <= offset && offset < Daisy.BLOCKSIZE\n//@ requires DaisyLock.blockLocks[blockno] == \\tid\n//@ ensures \\result == blocks[blockno][offset]"
    },
    {
        "repository": "github.com/joana-team/joana",
        "file": "example/joana.example.many-small-progs/src/conc/daisy/Daisy.java",
        "code": "    static void writeBlockByte(long blockno, long offset, byte b) {\n        Petal.write( STARTBLOCKAREA + blockno * Daisy.BLOCKSIZE + offset, b );\n    } //@ nowarn Post\n",
        "methodStartingLine": 289,
        "methodEndingLine": 291,
        "jml": "//@ requires 0 <= blockno && blockno < Daisy.MAXBLOCK\n//@ requires 0 <= offset && offset < Daisy.BLOCKSIZE\n//@ requires DaisyLock.blockLocks[blockno] == \\tid\n//@ ensures b == blocks[blockno][offset]"
    },
    {
        "repository": "github.com/joana-team/joana",
        "file": "example/joana.example.many-small-progs/src/conc/daisy/Assert.java",
        "code": "    static public void notFalse(boolean b) {\n        if (!b) {\n            String s = \"assertion failed\\n\" + Debug.getStackDump();\n            if (useException) {\n                throw new RuntimeException(s);\n            } else {\n                System.err.println(s);\n                ShutDown.exit(0);\n            }\n        }\n    }\n",
        "methodStartingLine": 40,
        "methodEndingLine": 50,
        "jml": "//@ ensures b"
    },
    {
        "repository": "github.com/joana-team/joana",
        "file": "example/joana.example.many-small-progs/src/conc/daisy/Assert.java",
        "code": "    static public void notFalse(boolean b, String e) {\n        if (!b) {\n            String s = \"assertion failed: \" + e + \"\\n\" + Debug.getStackDump();\n            if (useException) {\n                throw new RuntimeException(s);\n            } else {\n                System.err.println(s);\n                ShutDown.exit(0);\n            }\n        }\n    }\n",
        "methodStartingLine": 57,
        "methodEndingLine": 67,
        "jml": "//@ ensures b"
    },
    {
        "repository": "github.com/joana-team/joana",
        "file": "example/joana.example.many-small-progs/src/conc/daisy/Assert.java",
        "code": "    static public void fail(Throwable e) {\n        System.err.println(\"fail: \" + e);\n        e.printStackTrace();\n        ShutDown.exit(0);\n    }\n",
        "methodStartingLine": 73,
        "methodEndingLine": 77,
        "jml": "//@ ensures false"
    },
    {
        "repository": "github.com/joana-team/joana",
        "file": "example/joana.example.many-small-progs/src/conc/daisy/Assert.java",
        "code": "    static public void fail(Throwable e, String s) {\n        System.err.println(\"fail: \" + s);\n        fail(e);\n    }\n",
        "methodStartingLine": 84,
        "methodEndingLine": 87,
        "jml": "//@ ensures false"
    },
    {
        "repository": "github.com/joana-team/joana",
        "file": "example/joana.example.many-small-progs/src/conc/daisy/Assert.java",
        "code": "    static public void fail(String s) {\n        fail(new Throwable(), s);\n    }\n",
        "methodStartingLine": 93,
        "methodEndingLine": 95,
        "jml": "//@ ensures false"
    },
    {
        "repository": "github.com/joana-team/joana",
        "file": "example/joana.example.many-small-progs/src/rs3/hybrid/functionalities/smt/Receiver.java",
        "code": "\tpublic void listenOn(int port) throws ConnectionError {\n\t\tboolean ok = SMTEnv.listenOn(port);\n\t\tif (!ok) throw new ConnectionError();\n\t}\n",
        "methodStartingLine": 19,
        "methodEndingLine": 22,
        "jml": "//@ ensures true;"
    }
]