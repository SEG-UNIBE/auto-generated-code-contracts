[
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJML/demos/src/demo/A.java",
        "code": "    void f() {}\n",
        "methodStartingLine": 6,
        "methodEndingLine": 6,
        "jml": "//@ ensures i == 0;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJML/demos/src/demo/Err.java",
        "code": "    void f() {}\n",
        "methodStartingLine": 7,
        "methodEndingLine": 7,
        "jml": "//@ ensures ; // Parse error here"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJML/demos/TickTockClock.java",
        "code": " public /*@ pure @*/ int getHour() { return hour; }\n",
        "methodStartingLine": 20,
        "methodEndingLine": 20,
        "jml": "//@ ensures getHour() == 12 && getMinute() == 0 && getSecond() == 0;\n//@ requires true;\n//@ ensures 0 <= \\result && \\result <= 23; \n//@ ensures \\result == hour;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJML/demos/TickTockClock.java",
        "code": " public /*@ pure @*/ int getMinute() { return minute; }\n",
        "methodStartingLine": 24,
        "methodEndingLine": 24,
        "jml": "//@ ensures 0 <= \\result && \\result <= 59; \n//@ ensures \\result == minute;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJML/demos/TickTockClock.java",
        "code": " public /*@ pure @*/ int getSecond() { return second; }\n",
        "methodStartingLine": 29,
        "methodEndingLine": 29,
        "jml": "//@ ensures 0 <= \\result;\n//@ ensures \\result <= 59; \n//@ ensures \\result == second;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJML/src/org/jmlspecs/openjml/API.java",
        "code": "    @Override\n    \n    @Pure\n    public @Nullable Context context() {\n        return main == null ? null : main.context;\n    }\n",
        "methodStartingLine": 142,
        "methodEndingLine": 147,
        "jml": "//@ ensures isOpen;\n//@ ensures isOpen;\n//@ ensures \\result == main.context;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJML/src/org/jmlspecs/openjml/API.java",
        "code": "    @Override\n    public void addOptions(String... args) {\n        main.addOptions(args);\n    }\n",
        "methodStartingLine": 192,
        "methodEndingLine": 195,
        "jml": "//@ requires isOpen;\n//@ ensures isOpen;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJML/src/org/jmlspecs/openjml/API.java",
        "code": "    @Override\n    public @Nullable ClassSymbol getClassSymbol(@NonNull String qualifiedName) {\n        Name n = Names.instance(context()).fromString(qualifiedName);\n        return Symtab.instance(context()).classes.get(n);\n    }\n",
        "methodStartingLine": 509,
        "methodEndingLine": 513,
        "jml": "//@ requires isOpen;\n//@ ensures isOpen;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJML/src/org/jmlspecs/openjml/API.java",
        "code": "    @Override\n    public @NonNull JmlClassDecl getClassDecl(@NonNull String qualifiedName) {\n        return getClassDecl(getClassSymbol(qualifiedName));\n    }\n",
        "methodStartingLine": 586,
        "methodEndingLine": 589,
        "jml": "//@ requires isOpen;\n//@ ensures isOpen;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJML/src/org/jmlspecs/openjml/API.java",
        "code": "    @Override\n    public JmlClassDecl getClassDecl(ClassSymbol csym) {\n        JCTree tree = JmlEnter.instance(context()).getClassEnv(csym).tree;\n        return (JmlClassDecl)tree;\n    }\n",
        "methodStartingLine": 596,
        "methodEndingLine": 600,
        "jml": "//@ requires isOpen;\n//@ ensures isOpen;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJML/src/org/jmlspecs/openjml/API.java",
        "code": "    @Override\n    public @Nullable JmlMethodDecl getMethodDecl(MethodSymbol msym) {\n        JmlClassDecl cdecl = getClassDecl((ClassSymbol)msym.owner);\n        for (JCTree t: cdecl.defs) {\n            if (t instanceof JmlMethodDecl && ((JmlMethodDecl)t).sym == msym) {\n                return (JmlMethodDecl)t;\n            }\n        }\n        return null;\n    }\n",
        "methodStartingLine": 607,
        "methodEndingLine": 616,
        "jml": "//@ requires isOpen;\n//@ ensures isOpen;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJML/src/org/jmlspecs/openjml/API.java",
        "code": "    @Override\n    public @Nullable JmlVariableDecl getVarDecl(VarSymbol vsym) {\n        JmlClassDecl cdecl = getClassDecl((ClassSymbol)vsym.owner);\n        for (JCTree t: cdecl.defs) {\n            if (t instanceof JmlVariableDecl && ((JmlVariableDecl)t).sym == vsym) {\n                return (JmlVariableDecl)t;\n            }\n        }\n        return null;\n    }\n",
        "methodStartingLine": 623,
        "methodEndingLine": 632,
        "jml": "//@ requires isOpen;\n//@ ensures isOpen;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJML/src/org/jmlspecs/openjml/API.java",
        "code": "    protected void collectSuperTypes(@NonNull ClassSymbol csym, java.util.List<ClassSymbol> list) {\n        Type tt = csym.getSuperclass();\n        if (tt != null && tt != Type.noType) {\n            ClassSymbol s = (ClassSymbol)tt.tsym;  // super classes are always ClassSymbols\n            collectSuperTypes(s,list);\n        }\n        for (Type t: csym.getInterfaces()) {\n            ClassSymbol c = (ClassSymbol)t.tsym; // interfaces are ClassSymbols\n            if (!list.contains(c)) {\n                collectSuperTypes(c,list);  // c and any super interfaces are added here\n            }\n        }\n        list.add(csym);\n    }\n",
        "methodStartingLine": 859,
        "methodEndingLine": 872,
        "jml": "//@ requires isOpen;\n//@ ensures isOpen;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJML/src/org/jmlspecs/openjml/API.java",
        "code": "    protected void collectSuperMethods(@NonNull MethodSymbol msym, java.util.List<MethodSymbol> list) {\n        java.util.List<ClassSymbol> clist = new ArrayList<ClassSymbol>();\n        collectSuperTypes(msym.enclClass(),clist);\n        for (ClassSymbol c: clist) {\n            // find a method matching msym in c\n            Scope.Entry e = c.members().lookup(msym.getSimpleName());\n            while (e != null) {\n                Symbol sym = e.sym;\n                e = e.sibling;\n                if (!(sym instanceof MethodSymbol)) continue;\n                MethodSymbol mmsym = (MethodSymbol)sym;\n                if (!msym.overrides(mmsym,msym.enclClass(),Types.instance(context()),false)) continue;\n                list.add(mmsym);\n                break;\n            } // FIXME - there must be a utility somewhere that does this already\n        }\n    }\n",
        "methodStartingLine": 881,
        "methodEndingLine": 897,
        "jml": "//@ requires isOpen;\n//@ ensures isOpen;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJML/src/org/jmlspecs/openjml/API.java",
        "code": "    @Override\n    public /*@ non_null */ JmlTree.Maker nodeFactory() {\n        JmlAttr.instance(context());  // Avoids circular tool registration problems\n        return JmlTree.Maker.instance(context());\n    }\n",
        "methodStartingLine": 968,
        "methodEndingLine": 972,
        "jml": "//@ requires isOpen;\n//@ ensures isOpen;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJML/src/org/jmlspecs/openjml/API.java",
        "code": "    @Override\n    public @NonNull String prettyPrint(/*@ non_null */ java.util.List<? extends JCTree> astlist, @NonNull String sep) throws java.io.IOException {\n        StringWriter s = new StringWriter();\n        boolean isFirst = true;\n        for (JCTree ast: astlist) {\n            if (!isFirst) { s.append(sep); } else { isFirst = false; }\n            JmlPretty.instance(s,true).print(ast);\n        }\n        return s.toString();\n    }\n",
        "methodStartingLine": 1004,
        "methodEndingLine": 1013,
        "jml": "//@ requires isOpen;\n//@ ensures isOpen;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJML/src/org/jmlspecs/openjml/API.java",
        "code": "    @Override\n    public void close() {\n        JmlCompiler.instance(context()).close();\n        main.context = null;\n        main = null;\n    }\n",
        "methodStartingLine": 1021,
        "methodEndingLine": 1026,
        "jml": "//@ requires isOpen;\n//@ ensures !isOpen;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJML/src/org/jmlspecs/openjml/Main.java",
        "code": "    public static void main(String[] args) throws Exception {\n        if (args.length > 0 && args[0].equals(\"-Xjdb\")) {\n            // Note: Copied directly from com.sun.tools.javac.Main and not tested\n            String[] newargs = new String[args.length + 2];\n            Class<?> c = Class.forName(\"com.sun.tools.example.debug.tty.TTY\");\n            Method method = c.getDeclaredMethod (\"main\", new Class[] {args.getClass()});\n            method.setAccessible(true);\n            System.arraycopy(args, 1, newargs, 3, args.length - 1);\n            newargs[0] = \"-connect\";\n            newargs[1] = \"com.sun.jdi.CommandLineLaunch:options=-esa -ea:com.sun.tools...\";\n            newargs[2] = \"org.jmlspecs.openjml.Main\";\n            method.invoke(null, new Object[] { newargs });\n        } else {\n            System.exit(execute(args));\n        }\n    }\n",
        "methodStartingLine": 321,
        "methodEndingLine": 336,
        "jml": "//@ requires args != null && \\nonnullelements(args);"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJML/src/org/jmlspecs/openjml/Main.java",
        "code": "    public static int execute(String[] args) {\n        if (args != null) {\n            for (String a: args) {\n                if (jmldocOption.equals(a)) {\n                    return 4; // FIXME  - org.jmlspecs.openjml.jmldoc.Main.execute(args);\n                }\n            }\n        }\n        return execute(args,false);  // The boolean: true - errors to stdErr, false - errors to stdOut\n    }\n",
        "methodStartingLine": 354,
        "methodEndingLine": 363,
        "jml": "//@ requires args != null && \\nonnullelements(args);"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJML/src/org/jmlspecs/openjml/Main.java",
        "code": "    public static int execute(String[] args, boolean useStdErr) {\n        return execute(new PrintWriter(useStdErr ? System.err : System.out, true), null, null, args);\n    }\n",
        "methodStartingLine": 374,
        "methodEndingLine": 376,
        "jml": "//@ requires args != null && \\nonnullelements(args);"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJML/src/org/jmlspecs/openjml/Main.java",
        "code": "    @Override\n    public Main.Result compile(String[] args,\n                Context context,\n                List<JavaFileObject> fileObjects,\n                Iterable<? extends Processor> processors) {\n\n        this.context = context;\n        register(context);\n        setProofResultListener(prl);\n        initializeOptions(savedOptions,null);\n        if (args.length == 0\n                && (processors == null || !processors.iterator().hasNext())\n                && fileObjects.isEmpty()) {\n            help();\n            return Result.CMDERR;\n        }\n        // Note that the Java option processing happens in compile method call below.\n        // Those options are not read at the time of the register call,\n        // but the register call has to happen before compile is called.\n        canceled = false;\n        Main.Result exit = super.compile(args,context,fileObjects,processors);\n//        if (Options.instance(context).get(helpOption) != null) {\n//            helpJML(out);\n//        }\n        if (canceled) exit = Result.CANCELLED;\n        return exit;\n    }\n",
        "methodStartingLine": 562,
        "methodEndingLine": 588,
        "jml": "//@ requires args != null && \\nonnullelements(args);\n//@ requires context != null;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJML/src/org/jmlspecs/openjml/Main.java",
        "code": "    String[] processJmlArgs(@NonNull String [] args, @NonNull Options options, ListBuffer<File> jmlfiles) {\n        java.util.List<String> newargs = new ArrayList<String>();\n        java.util.List<String> files = new ArrayList<String>();\n        int i = 0;\n        while (i<args.length) {\n            i = processJmlArg(args,i,options,newargs,files);\n        }\n        //newargs.addAll(computeDependencyClosure(files));\n        newargs.addAll(files);\n        File f;\n        Iterator<String> iter = newargs.iterator();\n        while (iter.hasNext()) {\n            String s = iter.next();\n            if (s.endsWith(Strings.specsSuffix) && (f=new File(s)).exists()) {\n                jmlfiles.add(f);\n                iter.remove();\n            }\n        }\n        return newargs.toArray(new String[newargs.size()]);\n    }\n",
        "methodStartingLine": 615,
        "methodEndingLine": 634,
        "jml": "//@ requires \\nonnullelements(args);\n//@ ensures \\result != null && \\nonnullelements(\\result);"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJML/src/org/jmlspecs/openjml/Main.java",
        "code": "    int processJmlArg(@NonNull String[] args, int i, @NonNull Options options, /*@ non_null */ java.util.List<String> remainingArgs, /*@ non_null */ java.util.List<String> files ) {\n        String res = \"\";\n        String s = args[i++];\n        if (s == null || s.isEmpty()) return i; // For convenience, allow but ignore null or empty arguments\n        \n        if (s.length() > 1 && s.charAt(0) == '\"' && s.charAt(s.length()-1) == '\"') {\n            s = s.substring(1,s.length()-1);\n        }\n        \n        boolean negate = false;\n        if (s.startsWith(\"-no-\")) {\n            negate = true;\n            s = s.substring(\"-no\".length());\n        }\n        IOption o = JmlOption.find(s);\n        while (o!=null && o.synonym()!=null) {\n            s = o.synonym();\n            if (s.startsWith(\"-no-\")) {\n                negate = !negate;\n                s = s.substring(\"-no\".length());\n            }\n            o = JmlOption.find(s);\n        }\n        if (o == null) {\n            int k = s.indexOf('=');\n            if (k != -1) {\n                res = s.substring(k+1,s.length());\n                s = s.substring(0,k);\n                o = JmlOption.find(s);\n                if (o == null) {\n                    // This is not a JML option. Might be misspelled or it might\n                    // be a JDK option with an =, which JDK does not support.\n                    log.warning(\"jml.message\", \"Ignoring command-line argument \" + args[i-1] + \" which is either misspelled or is a JDK option using = to set an argument (which JDK does not support)\");\n                } else if (res.isEmpty()) {\n                    // JML option with a naked = sign\n                    Object def = o.defaultValue();\n                    res = def == null ? null : def.toString();\n\n                } else {\n                    if (o.hasArg()) {}\n                    else if (\"false\".equals(res)) negate = true;\n                    else if (\"true\".equals(res)) res = \"\";\n                    else {\n                        res = \"\";\n                        Log.instance(context).warning(\"jml.ignoring.parameter\",s);\n                    }\n                }\n            }\n        } else if (!negate && o.hasArg()) {\n            if (o instanceof JmlOption && ((JmlOption)o).enabledDefault != null) {\n                res = ((JmlOption)o).enabledDefault;\n            } else if (i < args.length) {\n                res = args[i++];\n                if (res != null && res.length() > 1 && res.charAt(0) == '\"' && s.charAt(res.length()-1) == '\"') {\n                    res = res.substring(1,res.length()-1);\n                }\n\n            } else {\n                res = \"\";\n                Log.instance(context).warning(\"jml.expected.parameter\",s);\n            }\n        }\n        if (o == null) {\n            if (s.equals(\"-help\")) {\n                help();\n            } else {\n                remainingArgs.add(s);\n            }\n        } else if (JmlOption.DIR.optionName().equals(s) || JmlOption.DIRS.optionName().equals(s)) {\n            java.util.List<File> todo = new LinkedList<File>();\n            todo.add(new File(res));\n            if (JmlOption.DIRS.optionName().equals(s)) {\n                while (i<args.length && (res=args[i]).length() > 0 && res.charAt(0) != '-') {\n                    todo.add(new File(res));\n                    i++;\n                }\n            }\n            Utils utils = Utils.instance(context);\n            while (!todo.isEmpty()) {\n                File file = todo.remove(0);\n                if (file.isDirectory()) {\n                    File[] fileArray = file.listFiles();\n                    // Comparator is intentionally reversed, so we push items on the front of the queue in reverse order\n                    Arrays.sort(fileArray, new java.util.Comparator<File>(){ public int compare(File f, File ff) { return (f.isFile() && ff.isDirectory()) ? 1 : (ff.isFile() && f.isDirectory()) ? -1 : -f.getPath().compareToIgnoreCase(ff.getPath()); }});\n                    for (File ff: fileArray) {\n                        todo.add(0,ff);\n                    }\n                } else if (file.isFile()) {\n                    String ss = file.toString();\n                    if (utils.hasJavaSuffix(ss)) files.add(ss); // FIXME - if we allow .jml files on the command line, we have to guard against parsing them twice\n                } else {\n                    try {\n                        String glob = file.toString();\n                        final PathMatcher pathMatcher = FileSystems.getDefault().getPathMatcher(\n                                \"glob:\"+glob);\n\n                        String location = \"\"; // System.getProperty(\"user.dir\");\n                        Files.walkFileTree(Paths.get(location), new SimpleFileVisitor<Path>() {\n\n                            @Override\n                            public FileVisitResult visitFile(Path path,\n                                    BasicFileAttributes attrs) throws IOException {\n                                if (pathMatcher.matches(path)) {\n                                    todo.add(path.toFile());\n                                }\n                                return FileVisitResult.CONTINUE;\n                            }\n\n                            @Override\n                            public FileVisitResult visitFileFailed(Path file, IOException exc)\n                                    throws IOException {\n                                return FileVisitResult.CONTINUE;\n                            }\n                        });\n                    } catch (Exception e) {\n                        // FIXME - warn about exception\n                        System.out.println(e);\n                        // continue\n                    }\n\n                }\n            }\n        } else {\n            if (negate) {\n                if (o.defaultValue() instanceof Boolean) {\n                    JmlOption.setOption(context, o, false);\n                } else if (o.defaultValue() == null) {\n                    options.put(s,null);\n                } else {\n                    options.put(s,o.defaultValue().toString());\n                }\n            } else {\n                if (o.defaultValue() instanceof Boolean) {\n                    JmlOption.setOption(context, o, true);\n                } else {\n                    options.put(s,res);\n                }\n            }\n        }\n        \n        if (o != null && o.equals(JmlOption.PROPERTIES)){\n            Properties properties = System.getProperties();\n            String file = JmlOption.value(context,JmlOption.PROPERTIES);\n            if (file != null && !file.isEmpty()) {\n                try {\n                    Utils.readProps(properties,file);  \n                } catch (java.io.IOException e) {\n                    Log.instance(context).getWriter(WriterKind.NOTICE).println(\"Failed to read property file \" + file); // FIXME - review\n                }\n                setPropertiesFileOptions(options, properties);\n            }\n        }\n        return i;\n    }\n",
        "methodStartingLine": 677,
        "methodEndingLine": 830,
        "jml": "//@ requires \\nonnullelements(args);\n//@ requires (* elements of remainingArgs are non-null *);\n//@ requires 0<= i && i< args.length;\n//@ ensures \\result > i;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJML/runtime/org/jmlspecs/utils/Utils.java",
        "code": "    @Nullable public static <T> T nonNullCheck(@Nullable String message, @Nullable T v) {\n        if (v == null) assertionFailure(message);\n        return v;\n    }\n",
        "methodStartingLine": 151,
        "methodEndingLine": 154,
        "jml": "//@ ensures \\result == v;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJML/src/org/jmlspecs/openjml/JmlSpecs.java",
        "code": "    public void setSpecsPath(String[] specsPathArray) {\n        boolean verbose = utils.jmlverbose >= Utils.JMLVERBOSE ||\n            Options.instance(context).get(\"-verbose\") != null;\n        PrintWriter noticeWriter = log.getWriter(WriterKind.NOTICE);\n\n        specsDirs = new LinkedList<Dir>();\n        List<String> todo = new LinkedList<String>();\n        for (int i = 0; i<specsPathArray.length; i++) {\n            String s = specsPathArray[i];\n            if (s == null || s.length() == 0) continue;\n            todo.add(s);\n        }\n        String dir;\n        boolean checkDirectories = JmlOption.isOption(context,JmlOption.CHECKSPECSPATH);\n        if (JmlOption.isOption(context,JmlOption.INTERNALSPECS) && !Main.instance(context).initializingOptions) {\n            todo.add(\"$SY\");\n        }\n\n        boolean syIncluded = false;\n        boolean spIncluded = false;\n        boolean cpIncluded = false;\n        boolean ecpIncluded = false;\n        while (!todo.isEmpty()) {\n            dir=todo.remove(0);\n            if (dir.equals(\"$SY\")) {\n                if (syIncluded) {\n                    // If we are processing the last entry and it is a duplicate, just\n                    // ignore it.\n                    if (!todo.isEmpty()) log.warning(\"jml.bad.sp.var\",\"$SY\");\n                } else {\n                    syIncluded = true;\n                    String dirs = Options.instance(context).get(Strings.systemSpecsLocationEnvironmentPropertyName);\n                    if (dirs != null) pushback(dirs,todo);\n                    else {\n                        if (!appendInternalSpecs(verbose,getSpecsPath())) {\n                            log.warning(\"jml.no.internal.specs\");\n                        }\n                    }\n                }\n            } else if (dir.equals(\"$CP\")) {\n                if (cpIncluded) {\n                    log.warning(\"jml.bad.sp.var\",\"$CP\");\n                } else {\n                    cpIncluded = true;\n                    String dirs = Options.instance(context).get(\"-classpath\");\n                    if (dirs == null) dirs = System.getProperty(\"java.class.path\");\n                    if (dirs != null) pushback(dirs,todo);\n                }\n            } else if (dir.equals(\"$ECP\")) {\n                if (ecpIncluded) {\n                    log.warning(\"jml.bad.sp.var\",\"$ECP\");\n                } else {\n                    ecpIncluded = true;\n                    String dirs = System.getProperty(\"java.class.path\");\n                    if (dirs != null) pushback(dirs,todo);\n                }\n            } else if (dir.equals(\"$SP\")) {\n                if (spIncluded) {\n                    log.warning(\"jml.bad.sp.var\",\"$SP\");\n                } else {\n                    spIncluded = true;\n                    String dirs = Options.instance(context).get(\"-sourcepath\");\n                    if (dirs != null) pushback(dirs,todo);\n                }\n            } else if (dir.length()>0){\n                Dir d = make(dir);\n                if (d != null) {\n                    if (checkDirectories && !d.exists()) { \n                        log.warning(\"jml.specs.dir.not.exist\",d);\n                    }\n                    specsDirs.add(d);\n                } else {\n                    // At present make always returns non-null\n                    log.error(\"jml.internal.notsobad\",\"Failed to create a directory path entry from \" + dir);\n                }\n            }\n        }\n        if (verbose) {\n            noticeWriter.print(\"specspath:\");\n            for (Dir s: specsDirs) {\n                noticeWriter.print(\" \");\n                noticeWriter.print(s);\n            }\n            Options options = Options.instance(context);\n            noticeWriter.println(\"\");\n            noticeWriter.println(\"sourcepath: \" + options.get(\"-sourcepath\"));\n            noticeWriter.println(\"classpath: \" + options.get(\"-classpath\"));\n            noticeWriter.println(\"java.class.path: \" + System.getProperty(\"java.class.path\"));\n            noticeWriter.flush();\n        }\n    }\n",
        "methodStartingLine": 438,
        "methodEndingLine": 528,
        "jml": "//@ requires \\nonnullelements(specsPathArray);"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJML/src/org/jmlspecs/openjml/JmlSpecs.java",
        "code": "    public /*@non_null*/ ModifierKind defaultNullity(/*@ nullable*/ ClassSymbol csymbol) {\n        if (csymbol == null) {\n            // FIXME - this is no longer true\n            // Note: NULLABLEBYDEFAULT turns off NONNULLBYDEFAULT and vice versa.\n            // If neither one is present, then the logic here will give the\n            // default as NONNULL.\n            if (JmlOption.isOption(context,JmlOption.NULLABLEBYDEFAULT)) {\n                return Modifiers.NULLABLE;\n            } else if (JmlOption.isOption(context,JmlOption.NONNULLBYDEFAULT)) {\n                return Modifiers.NON_NULL;\n            } else {\n                return Modifiers.NON_NULL;  // The default when nothing is specified\n            }\n        }\n        {\n            Env<AttrContext> env = JmlEnter.instance(context).getEnv(csymbol);\n            if (env != null) {\n                JCTree tree = env.tree;\n                if (tree != null && tree instanceof JmlClassDecl) {\n                    JmlClassDecl decl = (JmlClassDecl)tree;\n                    return isNonNull(decl) ? Modifiers.NON_NULL : Modifiers.NULLABLE;\n                }\n            }\n        }\n        \n        TypeSpecs spec = get(csymbol); // spec is null if the TypeSpecs are in the process of being initialized\n        if (spec == null || spec.defaultNullity == null) {\n            ModifierKind t = null;\n            if (spec.refiningSpecDecls == null) {\n                if (csymbol.getAnnotationMirrors() != null) {\n                    if (csymbol.attribute(attr.nullablebydefaultAnnotationSymbol) != null) {\n                        t = Modifiers.NULLABLE;\n                    } else if (csymbol.attribute(attr.nonnullbydefaultAnnotationSymbol) != null) {\n                        t = Modifiers.NON_NULL;\n                    }\n                } \n            } else {\n                JCModifiers mods = spec.refiningSpecDecls.mods;\n                if (spec.decl.specsDecl != null) mods = spec.decl.specsDecl.mods;\n                if (utils.findMod(mods, attr.nullablebydefaultAnnotationSymbol) != null) {\n                    t = Modifiers.NULLABLE;\n                } else if (utils.findMod(mods, attr.nonnullbydefaultAnnotationSymbol) != null) {\n                    t = Modifiers.NON_NULL;\n                }\n            }\n            if (t == null) {\n                Symbol sym = csymbol.owner; // The owner might be a package - currently no annotations for packages\n                if (sym instanceof ClassSymbol) {\n                    t = defaultNullity((ClassSymbol)sym);\n                } else {\n                    t = defaultNullity(null);\n                }\n            }\n            spec.defaultNullity = t;\n        }\n        return spec.defaultNullity;\n    }\n",
        "methodStartingLine": 1411,
        "methodEndingLine": 1467,
        "jml": "//@ ensures \\result != null;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJML/runtime/org/jmlspecs/lang/JMLList.java",
        "code": "    @Pure @NonNull\n    public JMLList<E> empty() { return null; }\n",
        "methodStartingLine": 12,
        "methodEndingLine": 13,
        "jml": "//@ ensures \\result.size() == 0;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJML/runtime/org/jmlspecs/lang/JMLList.java",
        "code": "    @Pure\n    public int size() { return 0; }\n",
        "methodStartingLine": 16,
        "methodEndingLine": 17,
        "jml": "//@ ensures \\result == _size;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJML/runtime/org/jmlspecs/lang/JMLList.java",
        "code": "    @Pure @NonNull\n    public JMLList<E> add(@Nullable E item) { return null; }\n",
        "methodStartingLine": 26,
        "methodEndingLine": 27,
        "jml": "//@ ensures \\result.size() == this.size() + 1;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJML/src/org/jmlspecs/openjml/JmlOption.java",
        "code": "    static public JmlOption find(/*@ non_null */ String s) {\n        return map.get(s);\n    }\n",
        "methodStartingLine": 380,
        "methodEndingLine": 382,
        "jml": "//@ ensures \\result == null || \\result.optionName().equals(s);"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJML/src/org/jmlspecs/openjml/esc/Boogier.java",
        "code": "    @Nullable JmlClassInfo getClassInfo(@NonNull JCClassDecl cls) {\n        JmlClassInfo mi = classInfoMap.get(cls.sym);\n        if (mi == null) {\n            mi = computeClassInfo(cls.sym);\n            classInfoMap.put(cls.sym,mi);\n        }\n        return mi;\n    }\n",
        "methodStartingLine": 2127,
        "methodEndingLine": 2134,
        "jml": "//@ ensures cls.sym != null <==> \\result != null;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJML/src/org/jmlspecs/openjml/Interactive.java",
        "code": "    public static void main(String[] args) {\n        try {\n            System.exit(new Interactive().run(args));\n        } catch (Exception e) {\n            System.err.println(\"Failed with exception \" + e);\n        }\n    }\n",
        "methodStartingLine": 51,
        "methodEndingLine": 57,
        "jml": "//@ requires args != null && \\nonnullelements(args);"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJML/src/org/jmlspecs/openjml/Interactive.java",
        "code": "    public int run(String[] args) {\n        setup(args);\n        commandLoop();\n        System.out.println(\"... exiting\");\n        return 0;\n    }\n",
        "methodStartingLine": 71,
        "methodEndingLine": 76,
        "jml": "//@ requires args != null && \\nonnullelements(args);"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJML/src/org/jmlspecs/openjml/Interactive.java",
        "code": "    public int command(String command) throws Exception {\n        int e = 0;\n        if (command == null) return -1;\n        if (command.length() == 0) return 0;\n        if (command.startsWith(\"quit\")) return -1;\n        if (command.startsWith(\"help\")) return help(command);\n        if (command.startsWith(\"parse\")) return parse(command);\n        if (command.startsWith(\"check\")) return check(command);\n        if (command.startsWith(\"reset\")) return reset(command);\n        if (command.startsWith(\"cclass\")) return cclass(command);\n        if (command.startsWith(\"specs\")) return specs(command);\n        System.out.println(\"UNKNOWN COMMAND: \" + command);\n        return e;\n    }\n",
        "methodStartingLine": 130,
        "methodEndingLine": 143,
        "jml": "//@ ensures command == null ==> \\result == -1;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJML/src/org/jmlspecs/openjml/jmldoc/Main.java",
        "code": "    public static void main(@NonNull String[] args) {\n        System.exit(execute(args));\n    }\n",
        "methodStartingLine": 37,
        "methodEndingLine": 39,
        "jml": "//@ requires \\nonnullelements(args);"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJML/src/org/jmlspecs/openjml/jmldoc/Main.java",
        "code": "    public static int execute(@NonNull String[] args) {\n        int errorcode = com.sun.tools.javac.main.Main.Result.ERROR.exitCode; // 1\n        try {\n            if (args == null) {\n                Context context = new Context(); // This is a temporary context just for this error message.\n                                    // It is not the one used for the options and compilation\n                Log log = Log.instance(context);\n                JavacMessages.instance(context).add(Strings.messagesJML);\n                log.error(\"jmldoc.main.null.args\",\"org.jmlspecs.openjml.jmldoc.Main\");\n                errorcode = com.sun.tools.javac.main.Main.Result.CMDERR.exitCode; // 2\n            } else {\n                // We have to interpret the -useJavaCompiler option before we start\n                // the compiler (which does the normal option processing).\n                // Since this is rare, we'll require that it be the first\n                // option.\n                boolean useJavaCompiler = args.length > 0 &&\n                            args[0].equals(JmlOption.USEJAVACOMPILER.optionName());\n                if (useJavaCompiler) {\n                    jmlContext = null;\n                    args = processArgs(args,jmlContext); // Have to filter out all of the JML options\n                    errorcode = com.sun.tools.javadoc.Main.execute(args);\n                } else {\n                    new org.jmlspecs.openjml.jmldoc.ConfigurationJml();  // stores an instance in a static location\n                    jmlContext = new Context();\n                    jmlContext.put(IProgressListener.class,new PrintProgressReporter(jmlContext,System.out));\n                    Context c = new Context();\n                    Start jdoc = new JmlStart(\"jmldoc\",c);//,\"org.jmlspecs.openjml.jmldoc.StandardJml\");\n                    init(c);\n                    registerTools(jmlContext,new PrintWriter(System.out,true),null);\n                    Utils.instance(jmlContext).doc = true;\n                    JavacFileManager.preRegister(jmlContext); // can't create it until Log has been set up - is it? FIXME\n                    args = processArgs(args,jmlContext);\n                    errorcode = jdoc.begin(args);\n                }\n            }\n        } catch (Exception e) {\n            // Most exceptions are caught prior to this, so this will happen only for the\n            // most catastrophic kinds of failure such as failures to initialize\n            // properly.  (You can test this by programmatically throwing an exception in the try\n            // block above.)\n            Context context = new Context(); // This is a temporary context just for this error message.\n            // It is not the one used for the options and compilation\n            Log log = Log.instance(context);\n            JavacMessages.instance(context).add(Strings.messagesJML);\n            log.error(\"jmldoc.toplevel.exception\",e);\n            e.printStackTrace(System.err);\n            errorcode = com.sun.tools.javac.main.Main.Result.SYSERR.exitCode; // 3\n        }\n        return errorcode;\n    }\n",
        "methodStartingLine": 56,
        "methodEndingLine": 105,
        "jml": "//@ requires \\nonnullelements(args);"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJML/src/org/jmlspecs/openjml/jmldoc/Main.java",
        "code": "    static public @NonNull String[] processArgs(@NonNull String[] args, Context context) {\n        Options options = Options.instance(context == null ? new Context() : context);\n        JmlOption n=null;\n        LinkedList<String> newargs = new LinkedList<String>();\n        //int cpindex = -1;\n        int i = 0;\n        while (i < args.length) {\n            String a = args[i];\n            i++;\n            n = JmlOption.find(a);\n            if (n != null) {\n                if (JmlOption.DIR.optionName().equals(a) || JmlOption.DIRS.optionName().equals(a)) {\n                    java.util.List<File> todo = new LinkedList<File>();\n                    if (i < args.length) {\n                        todo.add(new File(args[i++]));\n                    } else {\n                        Log.instance(context).error(\"jml.last.option.wants.parameter\",n.optionName());\n                    }\n                    if (JmlOption.DIRS.optionName().equals(a)) {\n                        while (i<args.length && args[i].length() > 0 && args[i].charAt(0) != '-') {\n                            todo.add(new File(args[i]));\n                            i++;\n                        }\n                    }\n                    while (!todo.isEmpty()) {\n                        File file = todo.remove(0);\n                        if (file.isDirectory()) {\n                            for (File ff: file.listFiles()) {\n                                todo.add(ff);\n                            }\n                        } else if (!file.isFile()) {\n                            Log.instance(context).error(\"jml.option.is.not.a.file.or.dir\",file);\n                        } else if (file.getName().endsWith(\".java\")) { // FIXME - handle checking suffixes more generically\n                            newargs.add(file.toString());\n                        } else if (file.getName().endsWith(\".jml\")) { // FIXME - is this right for jml\n                            newargs.add(file.toString());\n                        } else {\n                            // Just skip it\n                        }\n                    }\n                } else if (JmlOption.ENDOPTIONS.optionName().equals(a)) {\n                    while (i < args.length) {\n                        newargs.add(args[i++]);\n                    }\n                } else if (n.hasArg()) {\n                    if (i < args.length) {\n                        options.put(n.optionName(),args[i++]);\n                    } else {\n                        Log.instance(context).error(\"jml.last.option.wants.parameter\",n.optionName());\n                    }\n                } else {\n                    options.put(n.optionName(),\"\");\n                }\n            } else if (a.equals(\"-classpath\")) {\n                newargs.add(a);\n                options.put(a,args[i]);\n                //cpindex = newargs.size();\n                newargs.add(args[i++]);\n            } else if (a.equals(\"-sourcepath\")) {\n                newargs.add(a);\n                options.put(a,args[i]);\n                newargs.add(args[i++]);\n            } else {\n                newargs.add(a);\n            }\n        }\n        if (context != null) {\n            // FIXME Utils.instance(context).jmlverbose = Options.instance(context).get(JmlOption.JMLDEBUG.optionName()) != null; \n            JmlSpecs.instance(context).initializeSpecsPath();\n            if (JmlOption.isOption(context,JmlOption.INTERNALRUNTIME)) {\n            \tappendRuntime(context);\n            }\n        }\n        String[] result = newargs.toArray(new String[newargs.size()]);\n        // append annotation definitions onto result[cpindex] - what if there is none - need to append it to classpath definition\n        return result;\n    }\n",
        "methodStartingLine": 121,
        "methodEndingLine": 197,
        "jml": "//@ requires \\nonnullelements(args);\n//@ ensures \\nonnullelements(\\result);"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJML/src/com/sun/tools/javac/comp/JmlResolve.java",
        "code": "    public boolean setAllowJML(boolean allowJML) {\n        boolean b = this.allowJML;\n        this.allowJML = allowJML;\n        return b;\n    }\n",
        "methodStartingLine": 103,
        "methodEndingLine": 107,
        "jml": "//@ ensures context != null;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJML/runtime/org/jmlspecs/models/JMLNullSafe.java",
        "code": "    public static /*@ pure @*/ boolean equals(/*@ nullable @*/ Object o1,\n                                              /*@ nullable @*/ Object o2) {\n        return o1 == null ? o2 == null : o1.equals(o2);\n    }\n",
        "methodStartingLine": 35,
        "methodEndingLine": 38,
        "jml": "//@ ensures \\result <==> (o1 == null ? o2 == null : o1.equals(o2));"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJML/src/com/sun/tools/javac/parser/JmlParser.java",
        "code": "    @Override\n    protected JCTree importDeclaration(JCModifiers mods) {\n        int p = pos();\n        boolean modelImport = false;\n        for (JCAnnotation a: mods.annotations) {\n            if (a.annotationType.toString().equals(\"org.jmlspecs.annotation.Model\")) { modelImport = true; }\n            else jmlerror(a.pos, \"jml.no.mods.on.import\");\n        }\n        boolean importIsInJml = S.jml();\n        if (!modelImport && importIsInJml) {\n            jmlerror(p, endPos(), \"jml.import.no.model\");\n            modelImport = true;\n        }\n        JCTree t = super.importDeclaration(mods);\n        ((JmlImport) t).isModel = modelImport;\n        if (modelImport && !importIsInJml) {\n            jmlerror(p, t.getEndPosition(endPosTable), \"jml.illformed.model.import\");\n        }\n        while (jmlTokenKind() == JmlTokenKind.ENDJMLCOMMENT) {\n            nextToken();\n        }\n        return t;\n    }\n",
        "methodStartingLine": 214,
        "methodEndingLine": 236,
        "jml": "//@ ensures \\result == null || \\result instanceof JCTree.JCImport;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJML/src/com/sun/tools/javac/parser/JmlTokenizer.java",
        "code": "    protected void getKeys() {\n        keys.addAll(Utils.instance(context).commentKeys);\n    }\n",
        "methodStartingLine": 131,
        "methodEndingLine": 133,
        "jml": "//@ requires inputLength <= input.length;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJML/runtime/org/jmlspecs/unfinished/JMLNullSafe.java",
        "code": "    public static /*@ pure @*/ boolean equals(/*@ nullable @*/ Object o1,\n                                              /*@ nullable @*/ Object o2) {\n        return o1 == null ? o2 == null : o1.equals(o2);\n    }\n",
        "methodStartingLine": 35,
        "methodEndingLine": 38,
        "jml": "//@ ensures \\result <==> (o1 == null ? o2 == null : o1.equals(o2));"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLUI/src/org/jmlspecs/openjml/eclipse/JMLNature.java",
        "code": "    @Override\n    public void setProject(@NonNull IProject project) {\n        this.project = project;\n    }\n",
        "methodStartingLine": 97,
        "methodEndingLine": 100,
        "jml": "//@ ensures getProject() == project;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJML/runtime/org/jmlspecs/genericmodels/JMLListNode.java",
        "code": "    public @Pure @NonNull JMLListNode<E> cons(@Nullable E hd, @Nullable JMLListNode<E> tl) {\n        return tl == null ? singleton(hd) : tl.prepend(hd);\n    }\n",
        "methodStartingLine": 136,
        "methodEndingLine": 138,
        "jml": "//@ ensures ( e == o ) ==> \\result;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJML/src/org/jmlspecs/openjml/jmldoc/FieldWriterJml.java",
        "code": "    public void writeJmlSpecs(@NonNull FieldDoc field) {\n        Context context = org.jmlspecs.openjml.jmldoc.Main.jmlContext;\n        Name newFieldName = Names.instance(context).fromString(field.name());\n        VarSymbol newField = (VarSymbol)currentClassSym.members().lookup(newFieldName).sym;\n        //System.out.println(\"Sym \" + newField + \" for \" + newFieldName + \" in \" + currentClassSym);\n        if (newField == null) return; // Inherited Java fxields?\n        \n        JmlSpecs.FieldSpecs fspecs = JmlSpecs.instance(context).getSpecs(newField);\n        // FIXME - if the only specs are represent clauses, this won't print them\n        String s = Utils.jmlAnnotations(newField);\n        if (fspecs != null && (!fspecs.list.isEmpty() || s.length()!=0) ){  // FIXME - what if there are JML annotations but no clauses\n            strong(\"JML Specifications: \");\n            writer.print(s);\n            writer.dl();\n            writer.preNoNewLine();\n            for (JmlTree.JmlTypeClause clause: fspecs.list) {\n                writer.print(\"    \");\n                writer.print(clause);\n                writer.println();\n            }\n            if (isModel) {\n                TypeSpecs tspecs = JmlSpecs.instance(context).get(currentClassSym);\n                for (JmlTypeClause t : tspecs.clauses) {\n                    if (!(t instanceof JmlTypeClauseRepresents)) continue;\n                    JmlTypeClauseRepresents tr = (JmlTypeClauseRepresents)t;\n                    if (!(tr.ident instanceof JCTree.JCIdent)) continue;\n                    Name n = ((JCTree.JCIdent)(tr.ident)).name;\n                    if (n == newFieldName) {\n                        writer.print(\"    \");\n                        writer.print(JmlPretty.write(t,false));\n                        writer.println();\n                    }\n                }\n\n            }\n\n            writer.preEnd();\n            writer.dlEnd();\n        }\n    }\n",
        "methodStartingLine": 83,
        "methodEndingLine": 122,
        "jml": "//@ ensures this.classdoc == classdoc;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLUI/src/org/jmlspecs/openjml/eclipse/ConsoleLogger.java",
        "code": "    public MessageConsoleStream getConsoleStream() {\n        MessageConsole console = ConsoleFactory.getJMLConsole(true);\n        if (stream == null)\n            stream = console.newMessageStream();\n        return stream;\n    }\n",
        "methodStartingLine": 74,
        "methodEndingLine": 79,
        "jml": "//@ ensures \\result != null;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJML/src/org/jmlspecs/openjml/vistors/JmlTreeTranslator.java",
        "code": "    @Override\n    public void visitJmlBinary(JmlBinary that) {\n        JmlBinary r = copy ? new JmlBinary(that) : that;\n        r.lhs = translate(that.lhs);\n        r.rhs = translate(that.rhs);\n        // Not translating: op, opcode, operator\n        result = r;\n    }\n",
        "methodStartingLine": 71,
        "methodEndingLine": 78,
        "jml": "//@ ensures \\typeof(result) <: \\type(JmlBinary);"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLUI/src/org/jmlspecs/openjml/eclipse/OpenJMLInterface.java",
        "code": "        @Override\n        @SuppressWarnings(\"restriction\")\n        public void report(@NonNull Diagnostic<? extends JavaFileObject> diagnostic) {\n            JavaFileObject javaFileObject = diagnostic.getSource();\n            String message = diagnostic.getMessage(null); // uses default locale\n            int id = 0; // TODO - we are not providing numerical ids for problems\n            Diagnostic.Kind kind = diagnostic.getKind();\n            // Here the Diagnostic.Kind is the categorization of errors from OpenJDK\n            //  We use: ERROR - compilation and JML typechecking errors\n            //          WARNING - less serious JML typechecking errors (e.g. deprecated syntax)\n            //          NOTE - informational - e.g. features not implemented and hence ignored\n            //          OTHER - used for static checking warnings\n            // The ProblemSeverities are Eclipse's categorization of errors\n            //          There are various kinds of errors, of which we only use Error (e.g. also Fatal, Abort, ...)\n            //          As you see we map  ERROR -> Error, WARNING -> Warning,\n            //                             NOTE -> Ignore, OTHER (static check warnings) -> SecondaryError\n            // Static check warnings could be mapped to Warning, but we want to \n            // distinguish them from Errors and Warnings.  This is a little problem \n            // prone.  Also, I think that some compiler options might turn off\n            // the NOTE/Ignore markers - check this - TODO\n            int severity = \n                                    kind == Diagnostic.Kind.ERROR ? ProblemSeverities.Error :\n                                        kind == Diagnostic.Kind.WARNING ? ProblemSeverities.Warning :\n                                            kind == Diagnostic.Kind.MANDATORY_WARNING ? ProblemSeverities.Error : \n                                                kind == Diagnostic.Kind.NOTE ? ProblemSeverities.Ignore : \n                                                    kind == Diagnostic.Kind.OTHER ? ProblemSeverities.SecondaryError : \n                                                        ProblemSeverities.Error; // There should not be anything else, but we'll call it an error just in case.\n\n            long pos = diagnostic.getPosition();\n            long col = diagnostic.getColumnNumber();// 1-based, from beginning of line\n            long line = diagnostic.getLineNumber(); // 1-based\n            long startPos = diagnostic.getStartPosition();  //0-based, from beginning of file\n            long endPos = diagnostic.getEndPosition();\n            if (endPos <= 0) endPos = startPos; // This is defensive - sometimes there is no end position set\n\n            int ENOPOS = -1; // Eclipse value for not having position information\n\n            long startPosition = pos == Diagnostic.NOPOS ? ENOPOS : (startPos-pos) + col; // FIXME - a hack - what if crosses lines\n            long endPosition = pos == Diagnostic.NOPOS ? ENOPOS : (endPos-pos) + col; // FIXME - a hack - what if crosses lines\n\n            long lineStart = pos == Diagnostic.NOPOS ? ENOPOS : (pos - col); // FIXME - a hack\n            long lineEnd = pos == Diagnostic.NOPOS ? ENOPOS : lineStart + 100; // FIXME - a real hack\n\n            IWorkspace workspace = ResourcesPlugin.getWorkspace();\n            IWorkspaceRoot root = workspace.getRoot();\n            IFile resource = null;\n            if (javaFileObject != null) { // if null, there is no source file\n                URI filename = javaFileObject.toUri(); // This should be the full, absolute path \n                IPath path = new Path(filename.getPath());\n                resource = root.getFileForLocation(path); // For this to be non-null, \n                // the file must be in the workspace.  This means that all\n                // source AND SPECS must be in open projects in the workspace.\n                //FIXME - linked resources will not work here I think\n            }\n\n            if (resource == null) {\n                // This can happen when the file to which the diagnostic points\n                // is not an IResource. For example, the Associated Declaration\n                // to an error may be in a system specifications file.\n                // FIXME - we should load a read-only text file, with the markers\n                // for this case.\n                if (!diagnostic.toString().contains(\"Associated declaration\")) {\n                    if (severity == ProblemSeverities.Error) Log.errorlog(diagnostic.toString(),null);\n                    else Log.log(diagnostic.toString());\n                }\n            } else {\n                String text = null;\n                // FIXME - the following does not work\n                //            \ttry {\n                //            \t\ttext = javaFileObject == null ? null : javaFileObject.getCharContent(true).toString();\n                //            \t} catch (java.io.IOException e) {\n                //            \t\t// ignore - just leave text as null;\n                //            \t}\n                JmlEclipseProblem problem = new JmlEclipseProblem(resource, message, id,  severity,\n                                        (int)startPosition, (int)endPosition, (int)line, \n                                        text,\n                                        (int)lineStart, (int)lineEnd);\n                problem.sourceSymbol = currentMethod;\n                preq.acceptProblem(problem);\n                // Log it as well\n                if (Options.uiverboseness) {\n                    if (severity == ProblemSeverities.Error) Log.errorlog(diagnostic.toString(),null);\n                    else Log.log(diagnostic.toString());\n                }\n            }\n        }\n",
        "methodStartingLine": 1154,
        "methodEndingLine": 1239,
        "jml": "//@ ensures preq == p;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLUI/src/org/jmlspecs/openjml/eclipse/OpenJMLInterface.java",
        "code": "        @Override\n        public boolean report(final int level, final String message) {\n            Display d = shell == null ? Display.getDefault() : shell.getDisplay();\n            String summary = OpenJMLView.exportProofResults(null);\n            final String message2 = summary == null ? message : (summary + Strings.eol + message);\n            // Singleton reported that with asynExec, this would hang\n            d.syncExec(new Runnable() {\n                public void run() {\n                    if (monitor != null) {\n                        if (level <= 1) monitor.subTask(message2);\n                    }\n                    Log.log(message);\n                }\n            });\n            boolean cancel = monitor != null && monitor.isCanceled();\n            //            if (cancel) {\n            //            \tcancel = true;\n            //            \t//throw new Main.JmlCanceledException(\"Operation cancelled\"); //$NON-NLS-1$\n            //            \t//throw new PropagatedException(new Main.JmlCanceledException(\"Operation cancelled\")); //$NON-NLS-1$\n            //            }\n            return cancel;\n        }\n",
        "methodStartingLine": 1277,
        "methodEndingLine": 1298,
        "jml": "//@ ensures not_assigned(this.*);"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLUI/src/org/jmlspecs/openjml/eclipse/OpenJMLInterface.java",
        "code": "        @Override\n        //@ assignable this.context;\n        \n        public void setContext(@NonNull Context context) { \n            this.context = context; \n        }\n",
        "methodStartingLine": 1306,
        "methodEndingLine": 1311,
        "jml": "//@ ensures this.context == context;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJML/src/org/jmlspecs/openjml/proverinterface/ProverResult.java",
        "code": "    public ProverResult setOtherInfo(@Nullable Object o) {\n        otherInfo = o;\n        return this;\n    }\n",
        "methodStartingLine": 99,
        "methodEndingLine": 102,
        "jml": "//@ ensures o == otherInfo();"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJML/src/org/jmlspecs/openjml/proverinterface/ProverResult.java",
        "code": "    @Override\n    public void result(@NonNull Kind r) { result = r; }\n",
        "methodStartingLine": 110,
        "methodEndingLine": 111,
        "jml": "//@ ensures result() == r;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJML/src/org/jmlspecs/openjml/proverinterface/ProverResult.java",
        "code": "    public boolean isSat() {\n        return result == SAT || result == POSSIBLY_SAT;\n    }\n",
        "methodStartingLine": 117,
        "methodEndingLine": 119,
        "jml": "//@ ensures \\result == (result() == SAT);"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJML/runtime/org/jmlspecs/models/JMLValueToValueRelationEnumerator.java",
        "code": "    public /*@ pure @*/ boolean hasMoreElements() {\n        return (imagePairEnum.hasMoreElements() || imageEnum.hasMoreElements());\n    }\n",
        "methodStartingLine": 136,
        "methodEndingLine": 138,
        "jml": "//@ requires ipEnum != null;\n//@ requires iEnum != null;\n//@ requires (ipEnum.moreElements || iEnum.moreElements) ==> k != null;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJML/runtime/org/jmlspecs/models/JMLValueToEqualsRelationEnumerator.java",
        "code": "    public /*@ pure @*/ boolean hasMoreElements() {\n        return (imagePairEnum.hasMoreElements() || imageEnum.hasMoreElements());\n    }\n",
        "methodStartingLine": 136,
        "methodEndingLine": 138,
        "jml": "//@ requires ipEnum != null;\n//@ requires iEnum != null;\n//@ requires (ipEnum.moreElements || iEnum.moreElements) ==> k != null;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJML/runtime/org/jmlspecs/models/JMLValueToObjectRelationEnumerator.java",
        "code": "    public /*@ pure @*/ boolean hasMoreElements() {\n        return (imagePairEnum.hasMoreElements() || imageEnum.hasMoreElements());\n    }\n",
        "methodStartingLine": 136,
        "methodEndingLine": 138,
        "jml": "//@ requires ipEnum != null;\n//@ requires iEnum != null;\n//@ requires (ipEnum.moreElements || iEnum.moreElements) ==> k != null;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJML/runtime/org/jmlspecs/models/JMLEqualsToValueRelationEnumerator.java",
        "code": "    public /*@ pure @*/ boolean hasMoreElements() {\n        return (imagePairEnum.hasMoreElements() || imageEnum.hasMoreElements());\n    }\n",
        "methodStartingLine": 136,
        "methodEndingLine": 138,
        "jml": "//@ requires ipEnum != null;\n//@ requires iEnum != null;\n//@ requires (ipEnum.moreElements || iEnum.moreElements) ==> k != null;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJML/runtime/org/jmlspecs/models/JMLObjectToValueRelationEnumerator.java",
        "code": "    public /*@ pure @*/ boolean hasMoreElements() {\n        return (imagePairEnum.hasMoreElements() || imageEnum.hasMoreElements());\n    }\n",
        "methodStartingLine": 136,
        "methodEndingLine": 138,
        "jml": "//@ requires ipEnum != null;\n//@ requires iEnum != null;\n//@ requires (ipEnum.moreElements || iEnum.moreElements) ==> k != null;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJML/runtime/org/jmlspecs/models/JMLObjectToObjectRelationEnumerator.java",
        "code": "    public /*@ pure @*/ boolean hasMoreElements() {\n        return (imagePairEnum.hasMoreElements() || imageEnum.hasMoreElements());\n    }\n",
        "methodStartingLine": 136,
        "methodEndingLine": 138,
        "jml": "//@ requires ipEnum != null;\n//@ requires iEnum != null;\n//@ requires (ipEnum.moreElements || iEnum.moreElements) ==> k != null;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJML/runtime/org/jmlspecs/models/JMLEqualsToEqualsRelationEnumerator.java",
        "code": "    public /*@ pure @*/ boolean hasMoreElements() {\n        return (imagePairEnum.hasMoreElements() || imageEnum.hasMoreElements());\n    }\n",
        "methodStartingLine": 136,
        "methodEndingLine": 138,
        "jml": "//@ requires ipEnum != null;\n//@ requires iEnum != null;\n//@ requires (ipEnum.moreElements || iEnum.moreElements) ==> k != null;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJML/runtime/org/jmlspecs/models/JMLEqualsToObjectRelationEnumerator.java",
        "code": "    public /*@ pure @*/ boolean hasMoreElements() {\n        return (imagePairEnum.hasMoreElements() || imageEnum.hasMoreElements());\n    }\n",
        "methodStartingLine": 136,
        "methodEndingLine": 138,
        "jml": "//@ requires ipEnum != null;\n//@ requires iEnum != null;\n//@ requires (ipEnum.moreElements || iEnum.moreElements) ==> k != null;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJML/runtime/org/jmlspecs/models/JMLObjectToEqualsRelationEnumerator.java",
        "code": "    public /*@ pure @*/ boolean hasMoreElements() {\n        return (imagePairEnum.hasMoreElements() || imageEnum.hasMoreElements());\n    }\n",
        "methodStartingLine": 136,
        "methodEndingLine": 138,
        "jml": "//@ requires ipEnum != null;\n//@ requires iEnum != null;\n//@ requires (ipEnum.moreElements || iEnum.moreElements) ==> k != null;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJML/runtime/org/jmlspecs/unfinished/JMLValueToValueRelationEnumerator.java",
        "code": "    public /*@ pure @*/ boolean hasMoreElements() {\n        return (imagePairEnum.hasMoreElements() || imageEnum.hasMoreElements());\n    }\n",
        "methodStartingLine": 136,
        "methodEndingLine": 138,
        "jml": "//@ requires ipEnum != null;\n//@ requires iEnum != null;\n//@ requires (ipEnum.moreElements || iEnum.moreElements) ==> k != null;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJML/runtime/org/jmlspecs/unfinished/JMLEqualsToValueRelationEnumerator.java",
        "code": "    public /*@ pure @*/ boolean hasMoreElements() {\n        return (imagePairEnum.hasMoreElements() || imageEnum.hasMoreElements());\n    }\n",
        "methodStartingLine": 136,
        "methodEndingLine": 138,
        "jml": "//@ requires ipEnum != null;\n//@ requires iEnum != null;\n//@ requires (ipEnum.moreElements || iEnum.moreElements) ==> k != null;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJML/runtime/org/jmlspecs/unfinished/JMLObjectToValueRelationEnumerator.java",
        "code": "    public /*@ pure @*/ boolean hasMoreElements() {\n        return (imagePairEnum.hasMoreElements() || imageEnum.hasMoreElements());\n    }\n",
        "methodStartingLine": 136,
        "methodEndingLine": 138,
        "jml": "//@ requires ipEnum != null;\n//@ requires iEnum != null;\n//@ requires (ipEnum.moreElements || iEnum.moreElements) ==> k != null;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJML/runtime/org/jmlspecs/unfinished/JMLValueToEqualsRelationEnumerator.java",
        "code": "    public /*@ pure @*/ boolean hasMoreElements() {\n        return (imagePairEnum.hasMoreElements() || imageEnum.hasMoreElements());\n    }\n",
        "methodStartingLine": 136,
        "methodEndingLine": 138,
        "jml": "//@ requires ipEnum != null;\n//@ requires iEnum != null;\n//@ requires (ipEnum.moreElements || iEnum.moreElements) ==> k != null;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJML/runtime/org/jmlspecs/unfinished/JMLValueToObjectRelationEnumerator.java",
        "code": "    public /*@ pure @*/ boolean hasMoreElements() {\n        return (imagePairEnum.hasMoreElements() || imageEnum.hasMoreElements());\n    }\n",
        "methodStartingLine": 136,
        "methodEndingLine": 138,
        "jml": "//@ requires ipEnum != null;\n//@ requires iEnum != null;\n//@ requires (ipEnum.moreElements || iEnum.moreElements) ==> k != null;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJML/runtime/org/jmlspecs/unfinished/JMLEqualsToEqualsRelationEnumerator.java",
        "code": "    public /*@ pure @*/ boolean hasMoreElements() {\n        return (imagePairEnum.hasMoreElements() || imageEnum.hasMoreElements());\n    }\n",
        "methodStartingLine": 136,
        "methodEndingLine": 138,
        "jml": "//@ requires ipEnum != null;\n//@ requires iEnum != null;\n//@ requires (ipEnum.moreElements || iEnum.moreElements) ==> k != null;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJML/runtime/org/jmlspecs/unfinished/JMLEqualsToObjectRelationEnumerator.java",
        "code": "    public /*@ pure @*/ boolean hasMoreElements() {\n        return (imagePairEnum.hasMoreElements() || imageEnum.hasMoreElements());\n    }\n",
        "methodStartingLine": 136,
        "methodEndingLine": 138,
        "jml": "//@ requires ipEnum != null;\n//@ requires iEnum != null;\n//@ requires (ipEnum.moreElements || iEnum.moreElements) ==> k != null;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJML/runtime/org/jmlspecs/unfinished/JMLObjectToEqualsRelationEnumerator.java",
        "code": "    public /*@ pure @*/ boolean hasMoreElements() {\n        return (imagePairEnum.hasMoreElements() || imageEnum.hasMoreElements());\n    }\n",
        "methodStartingLine": 136,
        "methodEndingLine": 138,
        "jml": "//@ requires ipEnum != null;\n//@ requires iEnum != null;\n//@ requires (ipEnum.moreElements || iEnum.moreElements) ==> k != null;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJML/runtime/org/jmlspecs/unfinished/JMLObjectToObjectRelationEnumerator.java",
        "code": "    public /*@ pure @*/ boolean hasMoreElements() {\n        return (imagePairEnum.hasMoreElements() || imageEnum.hasMoreElements());\n    }\n",
        "methodStartingLine": 136,
        "methodEndingLine": 138,
        "jml": "//@ requires ipEnum != null;\n//@ requires iEnum != null;\n//@ requires (ipEnum.moreElements || iEnum.moreElements) ==> k != null;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/bag/Bag.java",
        "code": "  void removeOnce(int elt) {\n    for (int i = 0; i < n; i++) {  // error in code corrected\n      if (contents[i] == elt ) {\n         n--;\n         contents[i] = contents[n];\n         return;\n      }\n    }\n  }\n",
        "methodStartingLine": 28,
        "methodEndingLine": 36,
        "jml": "//@ requires input != null;\n//@ requires b != null;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/bag/Bag.java",
        "code": "  /*@ pure @*/ int getCount(int elt) {\n    int count = 0;\n    //@ loop_invariant i>=0 && i<=n;\n    //@ loop_invariant count >= 0;\n    for (int i = 0; i < n; i++) \n      if (contents[i] == elt) count++;\n    return count;\n  }\n",
        "methodStartingLine": 50,
        "methodEndingLine": 57,
        "jml": "//@ ensures \\result >= 0;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/bag/Bag.java",
        "code": "  void add(Bag b) {\n    int[] new_contents = new int[n+b.n];\n    arraycopy(this.contents, 0, new_contents, 0, n);\n    arraycopy(b.contents, 0, new_contents, n, b.n);\n    contents = new_contents; \n  }\n",
        "methodStartingLine": 74,
        "methodEndingLine": 79,
        "jml": "//@ requires b != null;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/bag/Bag.java",
        "code": "  private static void arraycopy(int[] src,\n                                int   srcOff,\n                                int[] dest,\n                                int   destOff,\n                                int   length) {\n    /*@ loop_invariant i>=0 && i<=length; @*/\n\tfor( int i=0 ; i<length; i++) {\n       dest[destOff+i] = src[srcOff+i];\n    }\n  }\n",
        "methodStartingLine": 90,
        "methodEndingLine": 99,
        "jml": "//@ requires src != null;\n//@ requires srcOff >=0;\n//@ requires dest != null;\n//@ requires destOff >=0;\n//@ requires length >=0;\n//@ requires srcOff + length <= src.length;\n//@ requires destOff + length <= dest.length;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/Else/Else.java",
        "code": "public boolean m2() {\n    if (BB && CC) return true;\n    if (DD && EE) return true;\n    //@ unreachable;\n    return false;\n\n  }\n",
        "methodStartingLine": 26,
        "methodEndingLine": 32,
        "jml": "//@ requires m();\n//@ ensures \\result == true;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/Else/Else.java",
        "code": "public boolean mm() {\n  if (AA && BB && CC) return true;\n  if (AA && DD && EE) return true;\n  return false;\n\n}\n",
        "methodStartingLine": 49,
        "methodEndingLine": 54,
        "jml": "//@ requires AA;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/enums/Test.java",
        "code": "    public EEE m8(int i) {\n        return EEE.AA;\n    }\n",
        "methodStartingLine": 119,
        "methodEndingLine": 121,
        "jml": "//@ ensures !\\fresh(\\result);"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/escAdd/Add.java",
        "code": "  public /*@ pure @*/ int x() { return my_x; }\n",
        "methodStartingLine": 19,
        "methodEndingLine": 19,
        "jml": "//@ requires the_x + the_y > 0;\n//@ ensures x() == the_x && y() == the_y;\n//@ ensures \\result == my_x;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/escAdd/Add.java",
        "code": "  public /*@ pure @*/ int y() { return my_y; }\n",
        "methodStartingLine": 21,
        "methodEndingLine": 21,
        "jml": "//@ ensures \\result == my_y;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/escAdd/Add.java",
        "code": "  public /*@ pure @*/ int sum(final int the_operand)\n  {\n    return my_x + my_y + the_operand;\n  }\n",
        "methodStartingLine": 24,
        "methodEndingLine": 27,
        "jml": "//@ ensures \\result == x() + y() + the_operand;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/splits/Test.java",
        "code": "    public boolean mnosplit(int i) {\n        if (i > 0) {\n            return i > 0;\n        } else {\n            return i > 0; // ERROR\n        }\n    }\n",
        "methodStartingLine": 4,
        "methodEndingLine": 10,
        "jml": "//@ ensures \\result;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/splits/Test.java",
        "code": "    public boolean m1(int i) {\n        //@ split\n        if (i > 0) {\n            return i > 0;\n        } else {\n            return i > 0; // ERROR\n        }\n    }\n",
        "methodStartingLine": 13,
        "methodEndingLine": 20,
        "jml": "//@ ensures \\result;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/splits/Test.java",
        "code": "    public boolean m2(int i) {\n        //@ split;\n        if (i>0) {\n            return i < 0; // ERROR\n        } else {\n            return i <= 0;\n        }\n    }\n",
        "methodStartingLine": 23,
        "methodEndingLine": 30,
        "jml": "//@ ensures \\result;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/splits/Test.java",
        "code": "    public boolean m3(int i) {\n        //@ split\n        switch (i + 1) {\n        case 1: return i == 0;\n        case 2: return i == 10; // ERROR\n        case 3: return i == 2;\n        default: return i < 0;\n        }\n    }\n",
        "methodStartingLine": 34,
        "methodEndingLine": 42,
        "jml": "//@ requires i <= 2;\n//@ ensures \\result;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/splits/Test.java",
        "code": "    public boolean mbool(int i) {\n        //@ split i > 0;\n        return i > 0;\n    }\n",
        "methodStartingLine": 55,
        "methodEndingLine": 58,
        "jml": "//@ ensures \\result;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/splits/Test.java",
        "code": "    public boolean mcombined(int i) {\n        //@ split\n        if (i > 0) {\n            //@ split i >= 0;\n            return i >= 0; // ERROR\n        } else {\n            //@ split\n            switch (i) {\n            case 0: return true;\n            case 1: return i > 0; // Infeasible\n            default: return i < 0;\n            }\n        }\n    }\n",
        "methodStartingLine": 61,
        "methodEndingLine": 74,
        "jml": "//@ ensures \\result;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/splits/Test.java",
        "code": "    public int splitx(int i) {\n        //@ split\n        if (i > 0) {\n            return 101010;\n        }\n        return 202020;\n    }\n",
        "methodStartingLine": 79,
        "methodEndingLine": 85,
        "jml": "//@ ensures i>0 ==> \\result == 10 * 10101;\n//@ ensures i<=0 ==> \\result == 20 * 10101;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/splits/Test.java",
        "code": "    public void msw(int i) {\n        switch (i) {\n        case 0: j = 1; return;\n        case 1: j = 2; return;\n        default: j = i +1; return;\n        }\n    }\n",
        "methodStartingLine": 90,
        "methodEndingLine": 96,
        "jml": "//@ requires i < 1000;\n//@ ensures j == i + 1;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/splits/Test.java",
        "code": "    public void mswa(int i) {\n        switch (i) {\n        case 0: j = 1; return;\n        case 1: j = 3; break;\n        default: j = i + 1; return;\n        }\n    }\n",
        "methodStartingLine": 100,
        "methodEndingLine": 106,
        "jml": "//@ requires i < 1000;\n//@ ensures j == i + 1;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/splits/Test.java",
        "code": "    public void mswb(int i) {\n        //@ show i;\n        switch (i) {\n        case 0: j = 1; return;\n        case 1: j = 3; break;\n        default: j = i + 1; return;\n        }\n        j = 2;\n    }\n",
        "methodStartingLine": 110,
        "methodEndingLine": 118,
        "jml": "//@ requires i < 1000;\n//@ ensures (\\lbl J j) == i + 1;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/splits/Test.java",
        "code": "    public void mswc(int i) {\n        switch (i) {\n        case 0: j = 1; return;\n        case 1: j = 2; return;\n        }\n    }\n",
        "methodStartingLine": 122,
        "methodEndingLine": 127,
        "jml": "//@ requires i < 1000;\n//@ ensures j == i + 1;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/gitbug647/B.java",
        "code": "    public void init(C c) {\n        //@ assert c.cccc != null; // Not true when called in a constructor with c == this\n        cccc = c.cccc;\n        //@ assert this.cccc != null;\n    }\n",
        "methodStartingLine": 61,
        "methodEndingLine": 65,
        "jml": "//@ ensures this.cccc == c.cccc;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/racbug1/Add.java",
        "code": "  public /*@ pure @*/ int x() { return my_x; }\n",
        "methodStartingLine": 16,
        "methodEndingLine": 16,
        "jml": "//@ requires the_x + the_y > 0;\n//@ ensures x() == the_x && y() == the_y;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/racbug1/Add.java",
        "code": "  public /*@ pure @*/ int sum(final int the_operand)\n  {\n    return my_x + my_y + the_operand;\n  }\n",
        "methodStartingLine": 20,
        "methodEndingLine": 23,
        "jml": "//@ ensures \\result == x() + y() + the_operand;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/escAdd2/Add.java",
        "code": "  public /*@ pure helper @*/ int x() { return my_x; }\n",
        "methodStartingLine": 19,
        "methodEndingLine": 19,
        "jml": "//@ requires the_x + the_y > 0;\n//@ ensures x() == the_x && y() == the_y;\n//@ ensures \\result == my_x;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/escAdd2/Add.java",
        "code": "  public /*@ pure helper @*/ int y() { return my_y; }\n",
        "methodStartingLine": 21,
        "methodEndingLine": 21,
        "jml": "//@ ensures \\result == my_y;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/escAdd2/Add.java",
        "code": "  public /*@ pure @*/ int sum(final int the_operand)\n  {\n    return my_x + my_y + the_operand;\n  }\n",
        "methodStartingLine": 24,
        "methodEndingLine": 27,
        "jml": "//@ ensures \\result == x() + y() + the_operand;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/gitbug529/T.java",
        "code": "public double m() {\n    return a/b;\n}\n",
        "methodStartingLine": 8,
        "methodEndingLine": 10,
        "jml": "//@ ensures \\result == (a * c)/(0.06 * b);"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/gitbug637/B.java",
        "code": "    public void m() {\n    \thavocX();\n    }\n",
        "methodStartingLine": 22,
        "methodEndingLine": 24,
        "jml": "//@ ensures b == \\old(b); // This also should not be valid"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/gitbug669/A.java",
        "code": "  public int add(int a) {\n    return a + 1;\n  }\n",
        "methodStartingLine": 5,
        "methodEndingLine": 7,
        "jml": "//@ requires a >= 0 && a <= 10;\n//@ ensures \\result == a + 1;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/gitbug738/A.java",
        "code": "    public /*@ pure @*/ boolean comm(HasComm other){\n        return true;\n    }\n",
        "methodStartingLine": 5,
        "methodEndingLine": 7,
        "jml": "//@ ensures \\result;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/gitbug738/B.java",
        "code": "    public /*@ pure @*/ boolean comm(HasComm other){\n        return false;\n    }\n",
        "methodStartingLine": 5,
        "methodEndingLine": 7,
        "jml": "//@ ensures !\\result;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/testfiles/bag/Bag.java",
        "code": "  void removeOnce(int elt) {\n    for (int i = 0; i < n; i++) {  // error in code corrected\n      if (contents[i] == elt ) {\n         n--;\n         contents[i] = contents[n];\n         return;\n      }\n    }\n  }\n",
        "methodStartingLine": 28,
        "methodEndingLine": 36,
        "jml": "//@ requires input != null;\n//@ requires b != null;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/testfiles/bag/Bag.java",
        "code": "  /*@ pure @*/ int getCount(int elt) {\n    int count = 0;\n    //@ loop_invariant i>=0 && i<=n;\n    //@ loop_invariant count >= 0;\n    for (int i = 0; i < n; i++) \n      if (contents[i] == elt) count++;\n    return count;\n  }\n",
        "methodStartingLine": 50,
        "methodEndingLine": 57,
        "jml": "//@ ensures \\result >= 0;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/testfiles/bag/Bag.java",
        "code": "  void add(Bag b) {\n    int[] new_contents = new int[n+b.n];\n    arraycopy(this.contents, 0, new_contents, 0, n);\n    arraycopy(b.contents, 0, new_contents, n, b.n);\n    contents = new_contents; \n  }\n",
        "methodStartingLine": 74,
        "methodEndingLine": 79,
        "jml": "//@ requires b != null;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/testfiles/bag/Bag.java",
        "code": "  private static void arraycopy(int[] src,\n                                int   srcOff,\n                                int[] dest,\n                                int   destOff,\n                                int   length) {\n    /*@ loop_invariant i>=0 && i<=length; @*/\n\tfor( int i=0 ; i<length; i++) {\n       dest[destOff+i] = src[srcOff+i];\n    }\n  }\n",
        "methodStartingLine": 90,
        "methodEndingLine": 99,
        "jml": "//@ requires src != null;\n//@ requires srcOff >=0;\n//@ requires dest != null;\n//@ requires destOff >=0;\n//@ requires length >=0;\n//@ requires srcOff + length <= src.length;\n//@ requires destOff + length <= dest.length;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/racaddng/Add.java",
        "code": "  public /*@ pure helper @*/ int x() { return my_x; }\n",
        "methodStartingLine": 17,
        "methodEndingLine": 17,
        "jml": "//@ requires the_x + the_y > 0;\n//@ ensures x() == the_x && y() == the_y;\n//@ ensures \\result == my_x;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/racaddng/Add.java",
        "code": "  public /*@ pure helper @*/ int y() { return my_y; }\n",
        "methodStartingLine": 19,
        "methodEndingLine": 19,
        "jml": "//@ ensures \\result == my_y;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/racaddng/Add.java",
        "code": "  public /*@ pure @*/ int sum(final int the_operand)\n  {\n    return my_x + my_y + the_operand;\n  }\n",
        "methodStartingLine": 22,
        "methodEndingLine": 25,
        "jml": "//@ ensures \\result == x() + y() + the_operand;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/splits2/Test.java",
        "code": "    public void whok(int k) {\n        int i = k;\n        //@ loop_invariant 0 <= i <= k;\n        //@ loop_invariant \\index == k-i;\n        //@ split\n        while (i > 0) {\n            i --;\n        }\n        //@ assert i == 0;\n    }\n",
        "methodStartingLine": 4,
        "methodEndingLine": 13,
        "jml": "//@ requires k >= 0;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/splits2/Test.java",
        "code": "    public void whfor(int k) {\n        int j = 0;\n        //@ loop_invariant 0 <= i <= k;\n        //@ loop_invariant j == k-i;\n        //@ loop_invariant \\index == k-i;\n        //@ split\n        for (int i = k; i > 0; i--) {\n            j++;\n        }\n        //@ assert j == k;\n    }\n",
        "methodStartingLine": 52,
        "methodEndingLine": 62,
        "jml": "//@ requires k >= 0;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/escLoop/Test.java",
        "code": "    public void m1(java.util.List<Integer> list) {\n        \n        //@ loop_invariant \\forall \\bigint k; 0 <= k < \\count; list.values[k] >= 0;\n        for (Integer i: list) {\n            // @ assert 0 <= \\count < list.values.length;\n            // @ assert i == list.values[\\count];\n            if (i < 0) return;\n        }\n        //@ assert \\forall \\bigint k; 0 <= k < list.values.length; list.values[k] >= 0;\n    }\n",
        "methodStartingLine": 4,
        "methodEndingLine": 13,
        "jml": "//@ requires \\nonnullelements(list.values);"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/escLoop/Test.java",
        "code": "    public void m2(Integer[] list) {\n        \n        //@ loop_invariant \\forall \\bigint k; 0 <= k < \\count; list[k] >= 0;\n        for (Integer i: list) {\n            // @ assert 0 <= \\count < list.length;\n            // @ assert i == list[\\count];\n            if (i < 0) return;\n        }\n        //@ assert \\forall \\bigint k; 0 <= k < list.length; list[k] >= 0;\n    }\n",
        "methodStartingLine": 16,
        "methodEndingLine": 25,
        "jml": "//@ requires \\nonnullelements(list);"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/escEnum/Test.java",
        "code": "    public void m(TestEnum.EE e) {\n        //@ assert e == TestEnum.EE.AA | e == TestEnum.EE.BB;\n        //@ assert TestEnum.EE.AA != TestEnum.EE.BB;\n        //@ assert \\distinct(TestEnum.EE.AA, TestEnum.EE.BB, null);\n    }\n",
        "methodStartingLine": 4,
        "methodEndingLine": 8,
        "jml": "//@ requires e != null;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/escrmloop/LRS.java",
        "code": "   public void doLRS() {\n       int s = 0; int t = 0; int l = 0;\n\n       /*@ loop_modifies x,s,t,l;\n         @ maintaining sa != null && \\invariant_for(sa);\n         @ maintaining 0 <= s && s < sa.a.length;\n         @ maintaining 0 <= t && t < sa.a.length;\n         @ maintaining 0 <= l && l < sa.a.length;\n         @ maintaining s+l <= sa.a.length && t+l <= sa.a.length;\n         @ maintaining s != t || l == 0;\n         @ maintaining 0 < x && x <= sa.a.length;\n         @ maintaining (\\forall int j; s <= j && j <s+l; sa.a[j] == sa.a[j-s+t]);\n         @ maintaining !(\\exists int w; 0 < w && w < x\n         @               && sa.suffixes[w-1] < sa.a.length-l\n         @               && sa.suffixes[w]   < sa.a.length-l;\n         @               (\\forall int j; sa.suffixes[w-1]+0 <= j && j <= sa.suffixes[w-1]+l;\n         @                sa.a[j] == sa.a[sa.suffixes[w]+j-sa.suffixes[w-1]]));\n         @ decreasing sa.a.length-x;        \n         @*/\n       for (int x=1; x < sa.a.length; x++) {\n           int length = LCP.lcp(sa.a,sa.suffixes[x], \n                                     sa.suffixes[x-1]);\n           if (length > l) {\n               s = sa.suffixes[x];\n               t = sa.suffixes[x-1];\n               l = length;\n       }   }\n       this.s = s; this.t = t; this.l = l;\n   }\n",
        "methodStartingLine": 50,
        "methodEndingLine": 78,
        "jml": "//@ ensures sa == arr;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/preold/PreOld.java",
        "code": "    public void mtest(short i) {\n        //@ assert i - 1 == \\old(x,b);\n        //@ assert \\old(y,b) == i + 1;\n        //@ assert \\old(y,a) == i + 2;\n    }\n",
        "methodStartingLine": 9,
        "methodEndingLine": 13,
        "jml": "//@ requires x >= 0;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/gitbug659/Sum.java",
        "code": "  public static int sum(int x){\n    int r;\n    if (x==0) r = 0;\n    else {\n      r = sum(x-1);\n      //@ assert r == 2*(x-1);\n      r = r + 2;\n    } \n    return r;    \n  }\n",
        "methodStartingLine": 4,
        "methodEndingLine": 13,
        "jml": "//@ requires 0 <= x < Integer.MAX_VALUE/2;\n//@ ensures \\result == 2*x;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/jmldoc1/data/A.java",
        "code": "@Deprecated\npublic void nodocnospecs() {}\n",
        "methodStartingLine": 109,
        "methodEndingLine": 110,
        "jml": "//@ requires true;\n//@ requires i == 0;\n//@ requires i == 0.0;\n//@ requires i == null;\n//@ requires j >= 0;\n//@ requires i == 0;\n//@ requires i == 0.0;\n//@ requires i == null;\n//@ requires i == \"\";"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/jmldoc1/data/A.java",
        "code": "@Pure\npublic int m(@NonNull Object o) { return 0; }\n",
        "methodStartingLine": 120,
        "methodEndingLine": 121,
        "jml": "//@ requires true;\n//@ ensures \\result == 0;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/jmldoc1/data/A.java",
        "code": "public int mmod(@NonNull Object o) { return 57; }\n",
        "methodStartingLine": 129,
        "methodEndingLine": 129,
        "jml": "//@ requires true;\n//@ ensures \\result == 0;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/jmldoc1/data/A.java",
        "code": "@Pure\npublic int mm(Object o) { return 42; }\n",
        "methodStartingLine": 135,
        "methodEndingLine": 136,
        "jml": "//@ requires true;\n//@ ensures \\result == 0;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/jmldoc1/data/A.java",
        "code": "public int mm(Object o) { return 0; }\n",
        "methodStartingLine": 211,
        "methodEndingLine": 211,
        "jml": "//@ ensures z_public == 10;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/jmldoc1/data/A.java",
        "code": "public int mm() { return 0; }\n",
        "methodStartingLine": 214,
        "methodEndingLine": 214,
        "jml": "//@ ensures z_public == 11;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/gitbug667/Test.java",
        "code": "    public static int incp(int a) {\n        return a++;  // Should issue an overflow error\n    }\n",
        "methodStartingLine": 16,
        "methodEndingLine": 18,
        "jml": "//@ ensures \\result == a;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/gitbug667/Test.java",
        "code": "    public static int decp(int a) {\n        return a--;  // Should issue an overflow error\n    }\n",
        "methodStartingLine": 20,
        "methodEndingLine": 22,
        "jml": "//@ ensures \\result == a;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/gitbug667/Test.java",
        "code": "    public static int addarray(int[] aa) {\n        return aa[0]+1;  // Should issue an overflow error\n    }\n",
        "methodStartingLine": 25,
        "methodEndingLine": 27,
        "jml": "//@ requires aa.length > 10;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/gitbug667/Test.java",
        "code": "    public static int incarray(int[] aa) {\n        return ++aa[0];  // Should issue an overflow error\n    }\n",
        "methodStartingLine": 29,
        "methodEndingLine": 31,
        "jml": "//@ requires aa.length > 10;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/gitbug667/Test.java",
        "code": "    public static int decarray(int[] aa) {\n        return --aa[0];  // Should issue an overflow error\n    }\n",
        "methodStartingLine": 33,
        "methodEndingLine": 35,
        "jml": "//@ requires aa.length > 10;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/gitbug667/Test.java",
        "code": "    public static int incarrayx(int[] aa) {\n        return aa[0]++;  // Should issue an overflow error\n    }\n",
        "methodStartingLine": 37,
        "methodEndingLine": 39,
        "jml": "//@ requires aa.length > 10;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/gitbug667/Test.java",
        "code": "    public static int decarrayx(int[] aa) {\n        return aa[0]--;  // Should issue an overflow error\n    }\n",
        "methodStartingLine": 41,
        "methodEndingLine": 43,
        "jml": "//@ requires aa.length > 10;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/racPoint/Point.java",
        "code": "  public static /*@ pure */ boolean approxEquals(final double number_1,\n                                                 final double number_2) {\n    return Math.abs(number_1 - number_2) < ERROR_MARGIN;\n  } \n",
        "methodStartingLine": 87,
        "methodEndingLine": 90,
        "jml": "//@ requires isFinite(coord_1) & isFinite(coord_2);\n//@ ensures \\result <==> Math.abs(number_1 - number_2) < ERROR_MARGIN;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/gitbug638/Test.java",
        "code": "    public void m(int x) {}\n",
        "methodStartingLine": 16,
        "methodEndingLine": 16,
        "jml": "//@ requires x >= 0 && y > 0;\n//@ requires x >= 0;\n//@ requires this.x >= 0;\n//@ requires x >= 0 && y > 0;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/gitbug638/Test.java",
        "code": "    public void m() {}\n",
        "methodStartingLine": 19,
        "methodEndingLine": 19,
        "jml": "//@ requires x >= 0;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/gitbug638/Test.java",
        "code": "    public void m(boolean b) {}\n",
        "methodStartingLine": 22,
        "methodEndingLine": 22,
        "jml": "//@ requires this.x >= 0;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/gitbug555/Test.java",
        "code": "    public /*@ nullable */ TestA show(TestA aa) {\n        return null;\n    }\n",
        "methodStartingLine": 42,
        "methodEndingLine": 44,
        "jml": "//@ ensures \\result == null;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/escTrace/trace.java",
        "code": "    public int mmm(int k) { return 41;};\n",
        "methodStartingLine": 10,
        "methodEndingLine": 10,
        "jml": "//@ ensures \\result == 41;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/escTrace/trace.java",
        "code": "    public int m(int k) {\n        k = 7;\n        k += 7;\n        int j;\n        fxxx = k + 9;\n        j = fxxx + this.fxxx;\n        fxxx += k + 9;\n        this.fxxx = k + 9;\n        this.fxxx += k + 9;\n        mm(k+k,k==0);\n        mmm(9);\n        j = mmm(j+1) + mmm(10);\n        synchronized (this) { \n            if (k == 14) {\n                k += 0;\n            } else {\n                k += 10;\n            }\n        }\n        int m = 2;\n        switch (m) {\n            case 1: m = 1; break;\n            case 2: m = 2; break;\n            default: m = 0;\n        }\n        m++;\n        switch (m) {\n            case 1: m = 1; break;\n            case 2: m = 2; break;\n            default: m = 0;\n        }\n        m = k == 14 ? (k += 2) : -k;\n        { \n            int zz = 9;\n            boolean b = zz == 9 || zz == 0;\n            b = zz == 0 || zz == 9;\n            b = zz == 0 && zz == 9;\n            b = zz == 9 && zz == 0;\n        }\n        assert false == false: \"asd\";\n        //@ assert k != 7;\n        //@ assert (k == 7) ==> (k != 7);\n        //@ assert !((k != 7) ==> (k == 7));\n        //@ ghost int x = 9;\n        //@ set x = x + 9;\n        //@ debug x = 0;\n        //@ set x = (\\lbl AAA k+1);\n        //-ESC@ set x = (\\lbl BBB k+1);  //@ maintaining m == 14 + z && 0 <= z && z <= 4;\n        for (int z = 0; z<4; z = z + 1) {\n            m = m + 1;\n        }\n        //@ assume a.length > 10;\n        a[2] = 42;\n        m = a[1+1] - a[2];\n        a[1] = k + 1;\n        a[1] += k + 1;\n        sf = 4;\n        trace.sf = 5;\n        m = sf + trace.sf;\n        try {\n            m = 8;\n            throw new Exception();\n        } catch (RuntimeException e) {\n            m = 9;\n        } catch (Exception e) {\n            m = 10;\n        } finally {\n            m = 11;\n        }\n        return 0;\n    }\n",
        "methodStartingLine": 14,
        "methodEndingLine": 84,
        "jml": "//@ requires true;\n//@ ensures \\result != 0;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/gitbug560/Test.java",
        "code": "   public void mm(/*@{B}*/ A b) {\n       k = 1;\n       b.m();\n   }\n",
        "methodStartingLine": 6,
        "methodEndingLine": 9,
        "jml": "//@ ensures k == 1;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/gitbug518/Test.java",
        "code": "    public void mm(int e, int f) {\n    }\n",
        "methodStartingLine": 11,
        "methodEndingLine": 12,
        "jml": "//@ requires e;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/gitbug497/IVec.java",
        "code": "    public static /*@ pure @*/ int ivec_len(int ivec[]) {\n        int count = 0;\n        while (ivec[count] != 0) {\n            count++;\n        }\n        return count;\n    }\n",
        "methodStartingLine": 4,
        "methodEndingLine": 10,
        "jml": "//@ requires (\\exists int i; 0 <= i && i < ivec.length; ivec[i] == 0);"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/gitbug497/IVec.java",
        "code": "    public static int min(int i, int j) {\n        return i <= j ? i : j;\n    }\n",
        "methodStartingLine": 24,
        "methodEndingLine": 26,
        "jml": "//@ requires true;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/gitbug445/PMax.java",
        "code": "    public /*@ pure @*/ Integer getMax() { return maxSeen; }\n",
        "methodStartingLine": 13,
        "methodEndingLine": 13,
        "jml": "//@ ensures \\result == maxSeen;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/gitbug681/Test.java",
        "code": "  public static void main(String[] args) {\n    System.out.print(\"foo\");\n  }\n",
        "methodStartingLine": 6,
        "methodEndingLine": 8,
        "jml": "//@ requires System.out.outputText instanceof String; // FIXME - why is this not known\n//@ requires System.out.outputText.isEmpty(); // TODO: Could be implied by a system startup property\n//@ ensures System.out.outputText == \"foo\";"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/gitbug681/Test.java",
        "code": "  public static void m(String[] args) {\n    System.out.println(\"foo\");\n  }\n",
        "methodStartingLine": 16,
        "methodEndingLine": 18,
        "jml": "//@ requires java.io.PrintStream.eol == \"\\n\";\n//@ requires System.out.outputText instanceof String; // FIXME - why is this not known\n//@ requires System.out.outputText.isEmpty();\n//@ ensures System.out.outputText.equals(\"foo\\n\");"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/gitbug502/User.java",
        "code": "    public User setAge(int newAge) throws Exception {\n        if (newAge < 0 || newAge >= 150) {\n            throw new Exception(\"Age out of bounds.\");\n        }\n        this.age = newAge;\n        return this;\n    }\n",
        "methodStartingLine": 21,
        "methodEndingLine": 27,
        "jml": "//@ ensures age == 0;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/gitbug554/Test.java",
        "code": "    public int m(B b) {\n        return b.mm();\n    }\n",
        "methodStartingLine": 5,
        "methodEndingLine": 7,
        "jml": "//@ ensures \\result == 10;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/gitbug554/Test.java",
        "code": "    public int mm() {\n        return 10;\n    }\n",
        "methodStartingLine": 11,
        "methodEndingLine": 13,
        "jml": "//@ ensures \\result == 10;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/gitbug711/Loop.java",
        "code": "  public static void m(int i) {\n    zasd:\n        //@ loop_invariant i >= 0;\n        //@ loop_writes i;\n    for (;i>0;) {\n      i -= 1;\n      if (i != 0) continue zasd;\n    }\n  }\n",
        "methodStartingLine": 3,
        "methodEndingLine": 11,
        "jml": "//@ requires i >= 0;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/preold2/PreOld.java",
        "code": "    public void mtest(short i) {\n        //@ assert i - 1 == \\old(x,a);\n    }\n",
        "methodStartingLine": 9,
        "methodEndingLine": 11,
        "jml": "//@ requires x >= 0;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/gitbug676/Test.java",
        "code": "    public static int main(String ... args) {\n        return args.length;\n    }\n",
        "methodStartingLine": 4,
        "methodEndingLine": 6,
        "jml": "//@ ensures \\result >= 0;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/gitbug685/Test.java",
        "code": "    void f(Object[] a) {\n       Arrays.sort(a);\n       //@ assert a != null; // works\n       Arrays.sort(a, (Object o1, Object o2) -> 0);\n       //@ assert a != null; // <-- Test.java: warning: There is no feasible path to program point at program exit in method Test.f(java.lang.Object[])\n    }\n",
        "methodStartingLine": 4,
        "methodEndingLine": 9,
        "jml": "//@ requires \\forall int i; 0 <= i && i < a.length; \\typeof(a[i]) <: \\type(Comparable<Object>);"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/testquant/Test.java",
        "code": "  public int foo(int[] a) {\n     int sum = 0;\n     //@ loop_invariant 0 <= \\count && \\count <= a.length;\n     //@ loop_invariant sum == (\\sum int j; 0<=j && j<\\count; a[j]);\n     for (int k: a) {\n        sum = sum + k;\n     }\n     return sum;\n  }\n",
        "methodStartingLine": 5,
        "methodEndingLine": 13,
        "jml": "//@ ensures \\result == (\\sum int i; 0 <= i && i < a.length; a[i]);"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/racPoint2/Point.java",
        "code": "  public static /*@ pure */ boolean approxEquals(final double number_1,\n                                                 final double number_2) {\n    return Math.abs(number_1 - number_2) < ERROR_MARGIN;\n  } \n",
        "methodStartingLine": 87,
        "methodEndingLine": 90,
        "jml": "//@ requires isFinite(coord_1) & isFinite(coord_2);\n//@ ensures \\result <==> Math.abs(number_1 - number_2) < ERROR_MARGIN;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/gitbug631/TestA.java",
        "code": "    public void ma(TestA[] t) {\n        //@ assume t[0].value == 1;\n        //@ assume t[0].other == 2;\n        t[0].value = 3;\n        \n        //@ assert t[0].other == 2;\n        //@ assert t[0].value == 3;\n    }\n",
        "methodStartingLine": 42,
        "methodEndingLine": 49,
        "jml": "//@ requires t.length > 10;\n//@ requires t[0] != null;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/gitbug631/TestA.java",
        "code": "    public void msa(TestA[] t) {\n        //@ assume t[0].value == 1;\n        //@ assume t[0].other == 2;\n        t[0].set(3);\n        \n        //@ assert t[0].other == 2;\n        //@ assert t[0].value == 3;\n    }\n",
        "methodStartingLine": 53,
        "methodEndingLine": 60,
        "jml": "//@ requires t.length > 10;\n//@ requires t[0] != null;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/gitbug631/TestA.java",
        "code": "    public void maa(TestA[][] t) {\n        //@ assume t[0][0].value == 1;\n        //@ assume t[0][0].other == 2;\n        t[0][0].value = 3;\n        \n        //@ assert t[0][0].other == 2;\n        //@ assert t[0][0].value == 3;\n    }\n",
        "methodStartingLine": 67,
        "methodEndingLine": 74,
        "jml": "//@ requires t.length > 10;\n//@ requires t[0] != null;\n//@ requires t[0].length > 10;\n//@ requires t[0][0] != null;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/gitbug631/TestA.java",
        "code": "    public void msaa(TestA[][] t) {\n        //@ assume t[0][0].value == 1;\n        //@ assume t[0][0].other == 2;\n        t[0][0].set(3);\n        \n        //@ assert t[0][0].other == 2;\n        //@ assert t[0][0].value == 3;\n    }\n",
        "methodStartingLine": 80,
        "methodEndingLine": 87,
        "jml": "//@ requires t.length > 10;\n//@ requires t[0] != null;\n//@ requires t[0].length > 10;\n//@ requires t[0][0] != null;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/gitbug631/TestA.java",
        "code": "    public void mt2(TestA t) {\n        //@ assume t.value == 1;\n        //@ assume this.value == 1;\n        t.set(3);\n        \n        //@ assert this.value == 1;\n        //@ assert t.value == 3; \n    }\n",
        "methodStartingLine": 99,
        "methodEndingLine": 106,
        "jml": "//@ requires t != this;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/gitbug631/TestA.java",
        "code": "    public void max(TestA[] t) {\n        //@ assume t[0].value == 1;\n        //@ assume t[1].value == 1;\n        t[0].set(3);\n        \n        //@ assert t[1].value == 1;  // Fails\n        //@ assert t[0].value == 3;\n    }\n",
        "methodStartingLine": 111,
        "methodEndingLine": 118,
        "jml": "//@ requires t.length > 10;\n//@ requires t[0] != null;\n//@ requires t[1] != null;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/gitbug631/TestA.java",
        "code": "    public void max1(TestA[] t) {\n        //@ assume t[0].value == 1;\n        //@ assume t[1].value == 1;\n        //@ assume t[0] != t[1];\n        t[0].set(3);\n        \n        //@ assert t[1].value == 1;\n        //@ assert t[0].value == 3;\n    }\n",
        "methodStartingLine": 123,
        "methodEndingLine": 131,
        "jml": "//@ requires t.length > 10;\n//@ requires t[0] != null;\n//@ requires t[1] != null;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/gitbug631/TestA.java",
        "code": "    public void max2(TestA[] t) {\n        //@ assume t[0].value == 1;\n        //@ assume t[1].value == 2;\n        t[0].set(3);\n        \n        //@ assert t[1].value == 2;\n        //@ assert t[0].value == 3;\n    }\n",
        "methodStartingLine": 136,
        "methodEndingLine": 143,
        "jml": "//@ requires t.length > 10;\n//@ requires t[0] != null;\n//@ requires t[1] != null;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/primitives/Test.java",
        "code": "    static public testtype testtype() {\n        return zero;\n    }\n",
        "methodStartingLine": 14,
        "methodEndingLine": 16,
        "jml": "//@ ensures \\result == zero;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/primitives/Test.java",
        "code": "    public void lemma2(testtype t) { t.lemma(); }\n",
        "methodStartingLine": 41,
        "methodEndingLine": 41,
        "jml": "//@ ensures t.suc().prev() == t;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/primitives/Test.java",
        "code": "    public void lemma2a(testtype t) { }\n",
        "methodStartingLine": 46,
        "methodEndingLine": 46,
        "jml": "//@ ensures t.suc().prev() == t;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/primitives/Test.java",
        "code": "    public void lemma3(testtype t) {}\n",
        "methodStartingLine": 50,
        "methodEndingLine": 50,
        "jml": "//@ ensures testtype.testtype() == testtype.zero;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/bagModified/Bag.java",
        "code": "  void removeOnce(int elt) {\n    //@ loop_invariant 0 <= i && i <= n && n >= 0 && n <= contents.length; // added by DRC\n    for (int i = 0; i < n; i++) {  // error in code corrected\n      if (contents[i] == elt ) {\n         n--;\n         contents[i] = contents[n];\n         return;\n      }\n    }\n  }\n",
        "methodStartingLine": 34,
        "methodEndingLine": 43,
        "jml": "//@ requires input != null;\n//@ requires b != null;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/bagModified/Bag.java",
        "code": "  /*@ pure @*/ int getCount(int elt) {\n    int count = 0;\n    //@ loop_invariant i>=0 && i<=n;\n    //@ loop_invariant count >= 0;\n    for (int i = 0; i < n; i++) \n      if (contents[i] == elt) count++;\n    return count;\n  }\n",
        "methodStartingLine": 58,
        "methodEndingLine": 65,
        "jml": "//@ ensures \\result >= 0;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/bagModified/Bag.java",
        "code": "  void add(Bag b) {\n    int[] new_contents = new int[n+b.n];\n    arraycopy(this.contents, 0, new_contents, 0, n);\n    arraycopy(b.contents, 0, new_contents, n, b.n);\n    contents = new_contents;\n    n = n + b.n; // DRC added\n  }\n",
        "methodStartingLine": 80,
        "methodEndingLine": 86,
        "jml": "//@ requires b != null;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/bagModified/Bag.java",
        "code": "  private static void arraycopy(int[] src,\n                                int   srcOff,\n                                int[] dest,\n                                int   destOff,\n                                int   length) {\n    /*@ loop_invariant i>=0 && i<=length; @*/\n\tfor( int i=0 ; i<length; i++) {\n       dest[destOff+i] = src[srcOff+i];\n    }\n  }\n",
        "methodStartingLine": 97,
        "methodEndingLine": 106,
        "jml": "//@ requires src != null;\n//@ requires srcOff >=0;\n//@ requires dest != null;\n//@ requires destOff >=0;\n//@ requires length >=0;\n//@ requires srcOff + length <= src.length;\n//@ requires destOff + length <= dest.length;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/escPrivate/Test.java",
        "code": "    static private int m() {\n        return 1;\n    }\n",
        "methodStartingLine": 23,
        "methodEndingLine": 25,
        "jml": "//@ ensures \\result == 1;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/escPrivate/Test.java",
        "code": "    static private int m() {\n        return 2;\n    }\n",
        "methodStartingLine": 38,
        "methodEndingLine": 40,
        "jml": "//@ ensures \\result == 2;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/escPrivate/Test.java",
        "code": "    static private int m() {\n        return 3;\n    }\n",
        "methodStartingLine": 53,
        "methodEndingLine": 55,
        "jml": "//@ ensures \\result == 3;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/gitbug599/Prime.java",
        "code": "public void set_p(int x){\np = x;\n}\n",
        "methodStartingLine": 19,
        "methodEndingLine": 21,
        "jml": "//@ requires (* A COMPLETER *);\n//@ ensures (* A COMPLETER *);\n//@ requires (* A COMPLETER *);\n//@ ensures (* A COMPLETER *);"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/gitbug599/Prime.java",
        "code": "public /*@ pure @*/ int get_p(){\nreturn p;\n}\n",
        "methodStartingLine": 24,
        "methodEndingLine": 26,
        "jml": "//@ ensures (* A COMPLETER *);"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/escTrace4/trace.java",
        "code": "    public int mmm(int k) { return 41;};\n",
        "methodStartingLine": 10,
        "methodEndingLine": 10,
        "jml": "//@ ensures \\result == 41;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/escTrace4/trace.java",
        "code": "    public int m(int k) {\n        int j = 0;\n        mm(k+k,k==0);\n        mmm(9);\n        j = mmm(j+1) + mmm(10) + mmm(j);\n        return 0;\n    }\n",
        "methodStartingLine": 14,
        "methodEndingLine": 20,
        "jml": "//@ requires true;\n//@ ensures \\result != 0;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/testfiles/escAdd/Add.java",
        "code": "  public /*@ pure @*/ int x() { return my_x; }\n",
        "methodStartingLine": 19,
        "methodEndingLine": 19,
        "jml": "//@ requires the_x + the_y > 0;\n//@ ensures x() == the_x && y() == the_y;\n//@ ensures \\result == my_x;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/testfiles/escAdd/Add.java",
        "code": "  public /*@ pure @*/ int y() { return my_y; }\n",
        "methodStartingLine": 21,
        "methodEndingLine": 21,
        "jml": "//@ ensures \\result == my_y;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/testfiles/escAdd/Add.java",
        "code": "  public /*@ pure @*/ int sum(final int the_operand)\n  {\n    return my_x + my_y + the_operand;\n  }\n",
        "methodStartingLine": 24,
        "methodEndingLine": 27,
        "jml": "//@ ensures \\result == x() + y() + the_operand;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/escTrace6/trace.java",
        "code": "    public void m() {\n        k = 1;\n        mm();\n        k = 2;\n        return ;\n    }\n",
        "methodStartingLine": 10,
        "methodEndingLine": 15,
        "jml": "//@ requires true;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/escTrace6/trace.java",
        "code": "    public void m2() {\n        try {\n            k = 1;\n            mm();\n            k = 2;\n        } finally {}\n    }\n",
        "methodStartingLine": 21,
        "methodEndingLine": 27,
        "jml": "//@ requires true;\n//@ ensures k == 2;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/escTrace6/trace.java",
        "code": "    public void m3() {\n        try {\n            k = 1;\n            mm();\n            k = 2;\n        } catch (Exception e) {}\n    }\n",
        "methodStartingLine": 34,
        "methodEndingLine": 40,
        "jml": "//@ requires true;\n//@ ensures k == 2;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/gitbug469/Repro.java",
        "code": "    private static synchronized void getSeed(int length) {\n        int read = 0;\n        byte[] result = new byte[length];\n        try {\n    URANDOM.read(result, read, length-read);\n        } catch (final IOException ex) {\n            throw new RuntimeException(ex);\n        }\n    }\n",
        "methodStartingLine": 24,
        "methodEndingLine": 32,
        "jml": "//@ requires length > 0;\n//@ requires URANDOM.isOpen;\n//@ requires URANDOM.availableBytes > 0;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/esc2DArray/Test.java",
        "code": "    public static int[][] m(int m, int n) {\n        //@ assume m == 2 && n == 2;\n        int[][] a = new int[m][n];\n        //@ assert a != null;\n        //@ assert a.length == m;\n        //@ assert m > 0 ==> a[0] != null;  // FIXME - proof fails if the following are not assumed\n        //@ assert m > 0 ==> a[0].length == n;\n        //@ assert \\forall int i; 0 <= i < m; a[i] != null && a[i].length == n;\n        //@ assert \\forall int e; 0<=e<m; \\forall int k; 0 <= k < m; (e != k ==> a[e] != a[k]);\n        x: ;\n        \n        //@ loop_invariant 0 <= i <= m;\n        //@ loop_invariant \\forall int k; 0<=k<m; a[k] != null && a[k].length == n;\n        //@ loop_invariant \\forall int e; 0<=e<m; \\forall int k; 0 <= k < m; (e != k ==> a[e] != a[k]);\n        //@ loop_invariant \\forall int e; 0<=e<i; \\forall int k; 0 <= k < n; a[e][k] == e+k;\n        //@ loop_modifies a[*][*];\n        //@ loop_decreases m-i;\n        for (int i=0; i<m; i++) {\n            //@ loop_invariant 0 <= j <= n;\n            //@ loop_invariant \\forall int k; 0<=k<m; a[k] != null && a[k].length == n;\n            //@ loop_invariant \\forall int e; 0<=e<m; \\forall int k; 0 <= k < m; (e != k ==> a[e] != a[k]);\n            //@ loop_invariant \\forall int e; 0<=e<i; \\forall int k; 0 <= k < n; a[e][k] == e+k;\n            //@ loop_invariant \\forall int k; 0 <= k < j; a[i][k] == i+k;\n            //@ loop_modifies a[*][*];\n            //@ loop_decreases n-j;\n            for (int j=0; j<n; j++) {\n                a[i][j] = i+j;\n            }\n            //@ assert \\forall int k; 0 <= k < n; a[i][k] == i+k;\n        }\n        //@ assert \\forall int e; 0<=e<m; \\forall int k; 0 <= k < n; a[e][k] == e+k;\n        return a;\n    }\n",
        "methodStartingLine": 8,
        "methodEndingLine": 40,
        "jml": "//@ requires m >= 0 && n>= 0;  // FIXME - fails to prove if m is allowed to be 0\n//@ ensures \\fresh(\\result);\n//@ ensures \\result.length == m;\n//@ ensures \\forall int i; 0<=i<m; \\result[i] != null && \\result[i].length == n;\n//@ ensures \\forall int e; 0<=e<m; \\forall int k; 0 <= k < n; \\result[e][k] == e+k;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/gitbug445a/PMax.java",
        "code": "    public /*@ pure @*/ Integer getMax() { return maxSeen; }\n",
        "methodStartingLine": 13,
        "methodEndingLine": 13,
        "jml": "//@ ensures \\result == maxSeen;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/gitbug446/APMax.java",
        "code": "    public /*@ pure @*/ Integer getMax() { return maxSeen; }\n",
        "methodStartingLine": 15,
        "methodEndingLine": 15,
        "jml": "//@ ensures \\result == maxSeen;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/gitbug712/Alice.java",
        "code": "  public String alice() {\n    String alice=\"Alice\";\n    return alice.substring(1);\n  }\n",
        "methodStartingLine": 3,
        "methodEndingLine": 6,
        "jml": "//@ ensures \\result.equals(\"lice\");"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/gitbug712/Alice.java",
        "code": "  public String alice2() {\n    String alice=\"Alice\";\n    return alice.substring(1,5);\n  }\n",
        "methodStartingLine": 9,
        "methodEndingLine": 12,
        "jml": "//@ ensures \\result.equals(\"lice\");"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/gitbug705/MBBug.java",
        "code": "    public int zero (int n) {\n        if (n == 0) { return 0; }\n        return zero(n);\n    }\n",
        "methodStartingLine": 9,
        "methodEndingLine": 12,
        "jml": "//@ requires n >= 0;\n//@ ensures \\result == 0;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/gitbug528/Maybe.java",
        "code": "    public static int add(int a, int b){\n        return a-b;\n    }\n",
        "methodStartingLine": 9,
        "methodEndingLine": 11,
        "jml": "//@ ensures \\result == a - b;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/escTrace5/trace.java",
        "code": "    public int m(int k) {\n        Object o = new Object();\n        //@ assert \\typeof(o) == \\type(Object);\n        return 0;\n    }\n",
        "methodStartingLine": 5,
        "methodEndingLine": 9,
        "jml": "//@ requires true;\n//@ ensures \\result != 0;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/escTrace2/trace.java",
        "code": "    public int m(int k) {\n        return 0;\n    }\n",
        "methodStartingLine": 9,
        "methodEndingLine": 11,
        "jml": "//@ requires k < 0;\n//@ ensures \\result == 0;\n//@ requires true;\n//@ requires k >= 0;\n//@ ensures \\result != 0;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/binarySearch/BS.java",
        "code": "  int binarySearch(int[] values, int x) {\n  //@ assert values != null && (\\forall int i; 0 < i < values.length; values[i-1] <= values[i]);\n  //@ assume !(\\forall int i; 0 <= i < values.length; values[i] != x);\n  //@ reachable;\n        try {\n                int y =  java.util.Arrays.binarySearch(values, x);\n                return y;\n        }\n        catch(Exception e) {\n                return -1;\n        }\n  }\n",
        "methodStartingLine": 6,
        "methodEndingLine": 17,
        "jml": "//@ requires values != null;\n//@ requires (\\forall int i, j; 0 <= i && i < j && j < values.length; values[i] <= values[j]);\n//@ ensures -1 < \\result && \\result < values.length;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/gitbug687/AgeBug.java",
        "code": "   public /*@ pure @*/ int month() {\n\treturn this._month;\n   }\n",
        "methodStartingLine": 28,
        "methodEndingLine": 30,
        "jml": "//@ requires 1 <= year && year <= Integer.MAX_VALUE;\n//@ requires 1 <= month && month <= 12;\n//@ requires 1 <= day && day <= 31;\n//@ ensures this.year == year;\n//@ ensures this.month == month;\n//@ ensures this.day == day;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/escVector/Vector.java",
        "code": "  public final synchronized void add(final Object the_object) {\n    if (my_element_count >= my_element_data.length) {\n      // create a new array\n      final Object[] new_data = new Object[my_element_count + my_capacity_increment]; // ERROR - could be negative under Java math\n      //@ ghost Object[] nd = new_data;\n      //@ loop_invariant 0 <= i && i <= my_element_count && new_data == nd;\n      //@ decreases my_element_count - i;\n      for (int i = 0; i < my_element_count; i++) {\n        new_data[i] = my_element_data[i];\n      }\n      my_element_data = new_data;\n    }\n    my_element_data[my_element_count++] = the_object;\n  }\n",
        "methodStartingLine": 66,
        "methodEndingLine": 79,
        "jml": "//@ requires the_initial_capacity >= 0 && the_capacity_increment > 0;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/escVector/Vector.java",
        "code": "  public final synchronized Object elementAt(final int the_index) \n    throws ArrayIndexOutOfBoundsException {\n    if (the_index >= my_element_count) {\n      throw new ArrayIndexOutOfBoundsException(the_index + \" >= \" + my_element_count);\n    }\n    try {\n      return my_element_data[the_index];\n    } catch (final ArrayIndexOutOfBoundsException e) {\n      throw new ArrayIndexOutOfBoundsException(the_index + \" < 0\");\n    }\n  }\n",
        "methodStartingLine": 129,
        "methodEndingLine": 139,
        "jml": "//@ requires the_index >= 0;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/testfiles/racbug1/Add.java",
        "code": "  public /*@ pure @*/ int x() { return my_x; }\n",
        "methodStartingLine": 16,
        "methodEndingLine": 16,
        "jml": "//@ requires the_x + the_y > 0;\n//@ ensures x() == the_x && y() == the_y;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/testfiles/racbug1/Add.java",
        "code": "  public /*@ pure @*/ int sum(final int the_operand)\n  {\n    return my_x + my_y + the_operand;\n  }\n",
        "methodStartingLine": 20,
        "methodEndingLine": 23,
        "jml": "//@ ensures \\result == x() + y() + the_operand;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/testfiles/escAdd2/Add.java",
        "code": "  public /*@ pure helper @*/ int x() { return my_x; }\n",
        "methodStartingLine": 19,
        "methodEndingLine": 19,
        "jml": "//@ requires the_x + the_y > 0;\n//@ ensures x() == the_x && y() == the_y;\n//@ ensures \\result == my_x;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/testfiles/escAdd2/Add.java",
        "code": "  public /*@ pure helper @*/ int y() { return my_y; }\n",
        "methodStartingLine": 21,
        "methodEndingLine": 21,
        "jml": "//@ ensures \\result == my_y;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/testfiles/escAdd2/Add.java",
        "code": "  public /*@ pure @*/ int sum(final int the_operand)\n  {\n    return my_x + my_y + the_operand;\n  }\n",
        "methodStartingLine": 24,
        "methodEndingLine": 27,
        "jml": "//@ ensures \\result == x() + y() + the_operand;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/gitbug567/Amount.java",
        "code": "    public /*@ pure @*/ Amount negate(){\n        return new Amount(-euros,-cents);\n    }\n",
        "methodStartingLine": 27,
        "methodEndingLine": 29,
        "jml": "//@ requires cents >= -100;\n//@ requires cents <= 100;\n//@ requires euros > 0 ==> cents >= 0;\n//@ requires euros < 0 ==> cents <= 0;\n//@ ensures this.cents >= -100;\n//@ ensures this.cents <= 100;\n//@ ensures this.euros > 0 ==> cents >= 0;\n//@ ensures this.euros < 0 ==> cents <= 0;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/strongarm/base/D.java",
        "code": "    public static int pathing(int a){\n\tint c = a;\n\t\n\tif(c < 10){\n\t    c = 100;\n\t}\n\t\n\treturn c;\n    }\n",
        "methodStartingLine": 6,
        "methodEndingLine": 14,
        "jml": "//@ requires true;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/gitbug446/ArrOps.java",
        "code": "    public void forEach(T[] a, AProc<T> p) {\n        //@ loop_invariant 0 <= i <= a.length;\n        //@ decreasing a.length - i;\n        for (int i = 0; i < a.length; i++) {\n            p.run(a, i);\n        }\n    }\n",
        "methodStartingLine": 4,
        "methodEndingLine": 10,
        "jml": "//@ requires \\nonnullelements(a);"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/strongarm/base/A.java",
        "code": "    public int cmp(int a, int b){\n                \n        if(a < b){\n            return -1;\n        }else{\n            \n            if(a > b){\n                return 1;\n            }\n            \n            return 0;\n            \n        }\n    }\n",
        "methodStartingLine": 12,
        "methodEndingLine": 25,
        "jml": "//@ requires true;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/rise4fun/AddLoop.java",
        "code": "    public static int AddLoop(int x, int y) {\n        int sum = x;\n        if (y > 0) {\n            int n = y;\n\n            //@ maintaining sum == x + y - n && 0 <= n;\n            //@ decreases n;\n            while (n > 0) {\n                sum = sum + 1;\n                n = n - 1;\n            }\n        } else {\n            int n = -y;\n\n            //@ maintaining sum == x + y + n && 0 <= n;\n            //@ decreases n;\n            while (n > 0) {\n                sum = sum - 1;\n\n                n = n - 1;\n            }\n        }\n        return sum;\n\n    }\n",
        "methodStartingLine": 5,
        "methodEndingLine": 29,
        "jml": "//@ requires true;\n//@ ensures \\result == x + y;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/gitbug600/IntDiv.java",
        "code": "public static int IntDiv(int x, int y) {\n\tint z = 0;\n\tint signe = 1;\n\tif (x < 0) {\n\t\tsigne = -1;\n\t\tx = -x;\n\t}\n\tif (y < 0) {\n\t\tsigne = -signe;\n\t\ty = -y;\n\t}\n\tif (y == 0) {\n\t\ty=y; // Instruction factice pour voir si elle\n\t\t\t// a été couverte\n\t}\n\t// @ ghost int xpos = x;\n\t// @ loop_invariant z >= 0 && z == \\count && z <= xpos && 0 <= x && x == xpos - z * y;\n\t// while (x > y) { // Version erronée\n\t\twhile (x >= y) {\n\t\tx = x - y;\n\t\tz = z + 1;\n\t}\n\tz = signe * z;\n\treturn z;\n}\n",
        "methodStartingLine": 8,
        "methodEndingLine": 32,
        "jml": "//@ requires y != 0;\n//@ ensures Math.abs(\\result * y) <= Math.abs(x);\n//@ ensures Math.abs(x) - Math.abs(\\result * y) < Math.abs(y);\n//@ ensures \\result != 0 ==> ((\\result >= 0) <==> (x>= 0 <==> y>=0));"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/rise4fun/Inverse.java",
        "code": "    public static boolean Inverse(int[] x, int[] y) {\n        if (x.length != y.length) return false;\n        assert x.length == y.length;\n        int index = 0;\n        //@ maintaining 0 <= index && index <= x.length && x.length == y.length;\n        //@ maintaining (\\forall int i; 0 <= i && i < index; x[i] == y[x.length -1 - i]);\n        //@ decreases x.length - index;\n        while (index < x.length) {\n            if (x[index] != y[x.length - 1 - index]) {\n                return false;\n            } else {\n                index = index + 1;\n            }\n        }\n        return true;\n    }\n",
        "methodStartingLine": 6,
        "methodEndingLine": 21,
        "jml": "//@ requires true;\n//@ ensures \\result == false ==> ((x.length != y.length) || (\\exists int i; 0 <= i && i < x.length; x[i] != y[x.length - 1 -i]));\n//@ ensures \\result == true ==> x.length == y.length && (\\forall int i; 0 <= i && i < x.length; x[i] == y[x.length - 1 - i]);"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/gitbug543/Test541.java",
        "code": "    public void set1(int[] src, int s, int d, int length) { \n        System.arraycopy(src, s, buf, d, length); \n    }\n",
        "methodStartingLine": 26,
        "methodEndingLine": 28,
        "jml": "//@ requires length >= 0;\n//@ requires s >= 0;\n//@ requires s + length <= src.length;\n//@ requires d >= 0;\n//@ requires d + length <= buf.length;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/gitbug543/Test541.java",
        "code": "    public void set1x(int[] src, int s, int d, int length) { \n        System.arraycopy(src, s, buf, d, length); \n    }\n",
        "methodStartingLine": 37,
        "methodEndingLine": 39,
        "jml": "//@ requires length >= 0;\n//@ requires s >= 0;\n//@ requires s + length <= src.length;\n//@ requires d >= 0;\n//@ requires d + length <= buf.length;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/gitbug543/Test541.java",
        "code": "    public void set2(int[] src, int s, int d, int length) { \n        System.arraycopy(src, s, buf, d, length); \n    }\n",
        "methodStartingLine": 51,
        "methodEndingLine": 53,
        "jml": "//@ requires length >= 0;\n//@ requires s >= 0;\n//@ requires s + length <= src.length;\n//@ requires d >= 0;\n//@ requires d + length <= buf.length;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/gitbug543/Test541.java",
        "code": "    public void kk(int[] src, int s, int d, int length) { \n        //@ assume  (\\forall int k; 0<=k && k<length; buf[k] == src[k]);\n        //@ assert  (\\forall int k; 0<=k && k<length; buf[k] == src[k]);\n    }\n",
        "methodStartingLine": 78,
        "methodEndingLine": 81,
        "jml": "//@ requires length >= 0;\n//@ requires s >= 0;\n//@ requires s + length <= src.length;\n//@ requires d >= 0;\n//@ requires d + length <= buf.length;\n//@ requires d == 0 && s == 0;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/gitbug543/Test541.java",
        "code": "    public void kkk(int[] src, int s, int d, int length) { \n        //@ assume  (\\forall int k; d<=k && k<d+length; buf[k] == src[s-d+k]);\n        //@ assert  (\\forall int k; d<=k && k<d+length; buf[k] == src[s-d+k]);\n    }\n",
        "methodStartingLine": 89,
        "methodEndingLine": 92,
        "jml": "//@ requires length >= 0;\n//@ requires s >= 0;\n//@ requires s + length <= src.length;\n//@ requires d >= 0;\n//@ requires d + length <= buf.length;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/gitbug543/Test541.java",
        "code": "    public void kkkbad(int[] src, int s, int d, int length) { \n        //@ assume  (\\forall int k; 0<=k && k<length; buf[d+k] == src[s+k]);\n        //@ assert  (\\forall int k; 0<=k && k<length; buf[d+k] == src[s+k]);\n    }\n",
        "methodStartingLine": 102,
        "methodEndingLine": 105,
        "jml": "//@ requires length >= 0;\n//@ requires s >= 0;\n//@ requires s + length <= src.length;\n//@ requires d >= 0;\n//@ requires d + length <= buf.length;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/requiresElse/Test.java",
        "code": "    public void m3(Test o, int i) {\n        int[] a = new int[10];\n        o.f = a[i];\n    }\n",
        "methodStartingLine": 18,
        "methodEndingLine": 21,
        "jml": "//@ requires i >= 0;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/requiresElse/Test.java",
        "code": "    public int m9(Test o, Test i) {\n        return o.f + i.f;\n    }\n",
        "methodStartingLine": 57,
        "methodEndingLine": 59,
        "jml": "//@ ensures 0 <= o.f < 10 && i.f < 10 ==> \\result < 20;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/gitbug688/DayTime.java",
        "code": "   public /*@ pure @*/ int hour() {\n\treturn this.hours;\n   }\n",
        "methodStartingLine": 26,
        "methodEndingLine": 28,
        "jml": "//@ requires 0 <= hours && hours < 24;\n//@ requires 0 <= minutes && minutes < 60;\n//@ requires 0 <= seconds && seconds < 60;\n//@ ensures this.hours == hours;\n//@ ensures this.minutes == minutes;\n//@ ensures this.seconds == seconds;\n//@ ensures \\result == this.hours;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/gitbug688/DayTime.java",
        "code": "   public /*@ pure @*/ int minute() {\n\treturn this.minutes;\n   }\n",
        "methodStartingLine": 31,
        "methodEndingLine": 33,
        "jml": "//@ ensures \\result == this.minutes;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/gitbug688/DayTime.java",
        "code": "   public /*@ pure @*/ int second() {\n\treturn this.seconds;\n   }\n",
        "methodStartingLine": 36,
        "methodEndingLine": 38,
        "jml": "//@ ensures \\result == this.seconds;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/gitbug688/DayTime.java",
        "code": "    private /*@ pure spec_public@*/ int secondCalulation(DayTime a) {\n\treturn (a.hours*3600) + (a.minutes*60) + a.seconds;\n    }\n",
        "methodStartingLine": 42,
        "methodEndingLine": 44,
        "jml": "//@ ensures \\result == (a.hours*3600) + (a.minutes*60) + a.seconds;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/gitbug688/DayTime.java",
        "code": "    public /*@ pure @*/ int diffSeconds(DayTime stop){\n\tint diff = secondCalulation(this) - secondCalulation(stop);\n\tif(diff < 0)\n\t\treturn -diff;\n\telse\n\t\treturn diff;\n    }\n",
        "methodStartingLine": 50,
        "methodEndingLine": 56,
        "jml": "//@ ensures \\result == _final;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/testfiles/racaddng/Add.java",
        "code": "  public /*@ pure helper @*/ int x() { return my_x; }\n",
        "methodStartingLine": 17,
        "methodEndingLine": 17,
        "jml": "//@ requires the_x + the_y > 0;\n//@ ensures x() == the_x && y() == the_y;\n//@ ensures \\result == my_x;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/testfiles/racaddng/Add.java",
        "code": "  public /*@ pure helper @*/ int y() { return my_y; }\n",
        "methodStartingLine": 19,
        "methodEndingLine": 19,
        "jml": "//@ ensures \\result == my_y;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/testfiles/racaddng/Add.java",
        "code": "  public /*@ pure @*/ int sum(final int the_operand)\n  {\n    return my_x + my_y + the_operand;\n  }\n",
        "methodStartingLine": 22,
        "methodEndingLine": 25,
        "jml": "//@ ensures \\result == x() + y() + the_operand;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/gitbug733/Counter.java",
        "code": "  public static void main(String[] args)\n  {\n    Counter c1 = new Counter(3);\n    Counter c2= new Counter(c1);\n    //@ assert c1.value == c2.value;\n  }\n",
        "methodStartingLine": 16,
        "methodEndingLine": 21,
        "jml": "//@ ensures this.value == v;\n//@ ensures v.value == \\old(v.value) && this.value == \\old(v.value);"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/strongarm/base/A3.java",
        "code": "    public int localTest(int a, int b, A3c otherClazz){\n        \n        THE_FIELD = 999;\n\n        if(a > -1){\n            return 0;\n        }\n        \n        otherClazz.ANOTHER_FIELD = THE_FIELD*10;\n        \n        THE_FIELD = 777;\n        return -1;\n    }\n",
        "methodStartingLine": 18,
        "methodEndingLine": 30,
        "jml": "//@ requires true;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/feasible/Feasible.java",
        "code": "    public int ma(int i) {\n        \n        if (i > 10) return i;\n        //@ reachable;\n        return i - 10;\n    }\n",
        "methodStartingLine": 6,
        "methodEndingLine": 11,
        "jml": "//@ requires i >= 0;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/feasible/Feasible.java",
        "code": "    public int mb(int i) {\n        \n        if (i > 10) return i;\n        //@ reachable;\n        return i - 10;\n    }\n",
        "methodStartingLine": 17,
        "methodEndingLine": 22,
        "jml": "//@ requires i >= 0;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/feasible/Feasible.java",
        "code": "    public int mc(int i) {\n        \n        if (i > 10) return i;\n        //@ reachable;\n        return i - 10;\n    }\n",
        "methodStartingLine": 28,
        "methodEndingLine": 33,
        "jml": "//@ requires i >= 0;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/gitbug450/ArrList.java",
        "code": "    public static void main(String[] args) {\n        ArrList al = new ArrList(1);\n        // @ assert al.theList.content.owner == al.theList; // FIXME - with -minQuant, this assertion cannot be proved, though it can with -no-minQuant\n        //System.out.println(al.theList.get(0));\n    }\n",
        "methodStartingLine": 19,
        "methodEndingLine": 23,
        "jml": "//@ ensures theList != null;\n//@ ensures theList.size() == 1;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/rise4fun/MaybeAdd.java",
        "code": "    public /*@ pure */ static int add(int a, int b){\n        return a-b;\n    }\n",
        "methodStartingLine": 8,
        "methodEndingLine": 10,
        "jml": "//@ requires a > 0;\n//@ requires b > 0;\n//@ ensures \\result == a+b;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/strongarm/base/A6.java",
        "code": "    public int localTest(int a, int b){\n        \n        THE_FIELD = 999;\n\n        if(THE_FIELD > -1){\n            return 0;\n        }\n        \n        return 1;\n    }\n",
        "methodStartingLine": 14,
        "methodEndingLine": 23,
        "jml": "//@ requires true;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/strongarm/base/A5.java",
        "code": "    public int localTest(int a, int b){\n        \n        if(THE_FIELD > -1){\n            return 0;\n        }\n        \n        THE_FIELD = 100;\n        return -1;\n    }\n",
        "methodStartingLine": 14,
        "methodEndingLine": 22,
        "jml": "//@ requires true;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/strongarm/base/A7.java",
        "code": "    public int localTest(int a, int b){\n        \n        THE_FIELD = 999;\n\n        if(THE_FIELD > -1){\n            return 0;\n        }\n        \n        THE_FIELD = 777;\n        \n        return -1;\n    }\n",
        "methodStartingLine": 14,
        "methodEndingLine": 25,
        "jml": "//@ requires true;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/strongarm/base/A4.java",
        "code": "    public int localTest(int a, int b){\n        \n        int c = a;\n\n        THE_FIELD = 100;\n\n        if(c > -1){\n            return 0;\n        }\n        \n        THE_FIELD = 100;\n        return -1;\n    }\n",
        "methodStartingLine": 14,
        "methodEndingLine": 26,
        "jml": "//@ requires true;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/strongarm/base/A8.java",
        "code": "    public int localTest(int a, int b){\n        \n        THE_FIELD = 999;\n\n        if(a > -1){\n            return 0;\n        }else{\n            if(a > -2){\n                THE_FIELD = 888;\n                return 100;\n            }\n        }\n        \n        THE_FIELD = 777;\n        return -1;\n    }\n",
        "methodStartingLine": 14,
        "methodEndingLine": 29,
        "jml": "//@ requires true;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/strongarm/base/E1.java",
        "code": "    public static int m0(int a, int b){\n\t\n\tif(a < 0 || b < 0 || a + b < 10 || a - b < 10 || a * b < 10){\n\t    return a - b;\n\t}\n\n\treturn a + b;\t\n    }\n",
        "methodStartingLine": 4,
        "methodEndingLine": 11,
        "jml": "//@ requires true;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/strongarm/base/A9.java",
        "code": "    public int localTest0(){\n        \n        int a;\n        \n        a = 3;\n        a = 4;\n        a = 5;\n        \n        return -1;\n    }\n",
        "methodStartingLine": 13,
        "methodEndingLine": 22,
        "jml": "//@ requires true;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/escBodySpecs/Test.java",
        "code": "    public int m(int i) {\n        \n        int a = i + 1;\n        //@ refining normal_behavior\n        //@   assignable a;\n        //@   ensures a == i+10;\n        {\n            a += 9;\n        }\n        return a - 10;\n    }\n",
        "methodStartingLine": 5,
        "methodEndingLine": 15,
        "jml": "//@ requires i < 100;\n//@ ensures \\result == i;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/strongarm/base/A1.java",
        "code": "    public int cmp(int a, int b){\n        \n        int c = a;\n        \n        if(c < b){\n            return -1;\n        }else{\n            \n            if(c > b){\n                return 1;\n            }\n            \n            return 0;\n            \n        }\n    }\n",
        "methodStartingLine": 13,
        "methodEndingLine": 28,
        "jml": "//@ requires true;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/strongarm/base/A2.java",
        "code": "    public int cmp(int a, int b){\n        \n        int c = b++;\n        \n        if(a < b + c){\n            return -1;\n        }else{\n            \n            if(a > b){\n                return 1;\n            }\n            \n            return 0;\n            \n        }\n    }\n",
        "methodStartingLine": 13,
        "methodEndingLine": 28,
        "jml": "//@ requires true;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/gitbug574/AddLoop.java",
        "code": "    public static int AddLoop(int x, int y) {\n        int sum = x;\n        if (y > 0) {\n            int n = y;\n\n            //@ maintaining sum == x + y - n && 0 <= n;\n            //@ decreases n;\n            while (n > 0) {\n                sum = sum + 1;\n                n = n - 1;\n            }\n        } else {\n            int n = -y;\n\n            //@ maintaining sum == x + y + n && 0 <= n;\n            //@ decreases n;\n            while (n > 0) {\n                sum = sum - 1;\n\n                n = n - 1;\n            }\n        }\n        return sum;\n\n    }\n",
        "methodStartingLine": 4,
        "methodEndingLine": 28,
        "jml": "//@ requires -1000000 < x & x < 1000000 & -1000000 < y & y < 1000000;\n//@ ensures \\result == x + y;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/gitbug696/AddLoop.java",
        "code": "    public static int AddLoop(int x, int y) {\n        int sum = x;\n        if (y > 0) {\n            int n = y;\n\n            //@ maintaining sum == x + y - n && 0 <= n;\n            //@ decreases n;\n            while (n > 0) {\n                sum = sum + 1;\n                n = n - 1;\n            }\n        } else {\n            int n = -y;\n\n            //@ maintaining sum == x + y + n && 0 <= n;\n            //@ decreases n;\n            while (n > 0) {\n                sum = sum - 1;\n\n                n = n - 1;\n            }\n        }\n        return sum;\n\n    }\n",
        "methodStartingLine": 5,
        "methodEndingLine": 29,
        "jml": "//@ requires Integer.MIN_VALUE <= x + y <= Integer.MAX_VALUE;\n//@ requires Integer.MIN_VALUE < y;\n//@ ensures \\result == x + y;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/rise4fun/Smallest.java",
        "code": "    static public int Smallest(int[] a) {\n        if (a.length == 0) return -1;\n\n        int index = 0;\n        int smallest = 0;\n        //@ maintaining 0 <= index && index <= a.length;\n        //@ maintaining 0 <= smallest && smallest < a.length;\n        //@ maintaining (\\forall int i; 0 <= i && i < index; a[smallest] <= a[i]);\n        //@ decreases a.length - index;\n        while (a.length - index > 0) {\n            if (a[index] < a[smallest]) {\n                smallest = index;\n            }\n            index = index + 1;\n        }\n        return smallest;\n    }\n",
        "methodStartingLine": 5,
        "methodEndingLine": 21,
        "jml": "//@ requires true;\n//@ ensures \\result == -1 ==> a.length == 0;\n//@ ensures \\result > -1 ==> (\\forall int i; 0 <= i && i < a.length; a[\\result] <= a[i]);"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/strongarm/base/S1.java",
        "code": "    public static String switchTest(int month){\n\t\n        String monthString = null;\n\n        switch (month) {\n            case 1:  monthString = \"January\";\n                     break;\n            case 2:  monthString = \"February\";\n                     break;\n            case 3:  monthString = \"March\";\n                     break;\n            case 4:  monthString = \"April\";\n                     break;\n            case 5:  monthString = \"May\";\n                     break;\n            case 6:  monthString = \"June\";\n                     break;\n            case 7:  monthString = \"July\";\n                     break;\n            case 8:  monthString = \"August\";\n                     break;\n            case 9:  monthString = \"September\";\n                     break;\n            case 10: monthString = \"October\";\n                     break;\n            case 11: monthString = \"November\";\n                     break;\n            case 12: monthString = \"December\";\n                     break;\n            default: monthString = \"Invalid month\";\n                     break;\n        }        \n        return monthString;\t\n    }\n",
        "methodStartingLine": 4,
        "methodEndingLine": 37,
        "jml": "//@ requires true;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/gitbug499/Interval.java",
        "code": "    public /*@ pure @*/ int lower() { return lb; }\n",
        "methodStartingLine": 15,
        "methodEndingLine": 15,
        "jml": "//@ requires l <= u;\n//@ ensures lb == l && ub == u;\n//@ ensures \\result == lb;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/gitbug499/Interval.java",
        "code": "    public /*@ pure @*/ int upper() { return ub; }\n",
        "methodStartingLine": 18,
        "methodEndingLine": 18,
        "jml": "//@ ensures \\result == ub;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/gitbug575/TestJava.java",
        "code": "    public void m() {\n        x = 2;\n        a[0] = 4;\n        a[2] = 6;\n        a[3] = 7;\n        mm();\n        //@ assert a[0] == 4;\n        //@ assert a[3] == 7;\n        //@ assert  x == 3;\n        \n    }\n",
        "methodStartingLine": 7,
        "methodEndingLine": 17,
        "jml": "//@ requires a.length == 10;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/gitbug575/TestJava.java",
        "code": "    public void mm() {\n        x = 3;\n    }\n",
        "methodStartingLine": 22,
        "methodEndingLine": 24,
        "jml": "//@ requires a.length == 10;\n//@ ensures x == 3;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/gitbug575/TestJava.java",
        "code": "    public void q() {\n        x = 2;\n        a[0] = 4;\n        a[2] = 6;\n        a[3] = 7;\n        a[4] = 8;\n        qq();\n        //@ assert a[0] == 4;\n        //@ assert a[4] == 8;\n        //@ assert x == 4;\n        \n    }\n",
        "methodStartingLine": 28,
        "methodEndingLine": 39,
        "jml": "//@ requires a.length == 10;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/gitbug575/TestJava.java",
        "code": "    public void qq() {\n        x = 4;\n    }\n",
        "methodStartingLine": 44,
        "methodEndingLine": 46,
        "jml": "//@ requires a.length == 10;\n//@ ensures x == 4;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/gitbug450b/ArrList.java",
        "code": "    public static void main(String[] args) {\n        ArrList al = new ArrList(1);\n        // @ assert al.theList.content.owner == al.theList; // FIXME - with -minQuant, this assertion cannot be proved, though it can with -no-minQuant\n        System.out.println(al.theList.get(0));\n    }\n",
        "methodStartingLine": 34,
        "methodEndingLine": 38,
        "jml": "//@ ensures theList != null;\n//@ ensures theList.size() == 1;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/gitbug733a/Counter.java",
        "code": "  public static void main(String[] args)\n  {\n    Counter c1 = new Counter(3);\n    Counter c2= new Counter(c1);\n    //@ assert c1.value == c2.value;\n  }\n",
        "methodStartingLine": 17,
        "methodEndingLine": 22,
        "jml": "//@ ensures this.value == v;\n//@ ensures this != v && this.value == v.value;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/gitbug698/ListTest.java",
        "code": "    public /*@ pure @*/ ArrayList<String> getMylist() {\n        return mylist;\n    }\n",
        "methodStartingLine": 8,
        "methodEndingLine": 10,
        "jml": "//@ ensures \\result == mylist;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/gitbug698/ListTest.java",
        "code": "    public void addStringInList(String a){\n        this.mylist.add(a);\n    }\n",
        "methodStartingLine": 17,
        "methodEndingLine": 19,
        "jml": "//@ requires getMylist().size() < Integer.MAX_VALUE;\n//@ ensures  \\old(getMylist().size()) + 1 == getMylist().size()  ; "
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/requiresElseA/Test.java",
        "code": "    public void m3(Test o, int i) {\n        int[] a = new int[10];\n        o.f = a[i];\n    }\n",
        "methodStartingLine": 21,
        "methodEndingLine": 24,
        "jml": "//@ requires i >= 0;\n//@ requires i >= 0;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/strongarm/base/A13.java",
        "code": "    public int localTest(int a, int b, A13 aa){\n        \n        THE_FIELD = 0;\n        \n        aa.tricky.tricky.THE_FIELD = 100;\n        \n        return -1;\n    }\n",
        "methodStartingLine": 17,
        "methodEndingLine": 24,
        "jml": "//@ requires true;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/gitbug450c/ArrList.java",
        "code": "    public static void main(String[] args) {\n        ArrList al = new ArrList(1);\n        System.out.println(al.theList.get(0));\n    }\n",
        "methodStartingLine": 18,
        "methodEndingLine": 21,
        "jml": "//@ ensures theList != null;\n//@ ensures theList.size() == 1;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/strongarm/base/A14.java",
        "code": "    public int localTest(int a, int b){\n        \n        THE_FIELD = 999;\n\n        if(a > -1){\n            THE_FIELD = 867;\n            \n            if(a == 1){\n        \tTHE_FIELD = 111;\n        \treturn 1;\n            }\n            \n            return 0;\n        }\n        \n        THE_FIELD = 777;\n        return -1;\n    }\n",
        "methodStartingLine": 7,
        "methodEndingLine": 24,
        "jml": "//@ requires true;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/strongarm/base/A11.java",
        "code": "    public int localTest(int a, int b){\n        \n        THE_FIELD = 999;\n\n        if(a > -1){\n            return 0;\n        }\n        \n        THE_FIELD = 777;\n        return -1;\n    }\n",
        "methodStartingLine": 15,
        "methodEndingLine": 25,
        "jml": "//@ requires true;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/strongarm/base/A12.java",
        "code": "    public int localTest(int a, int b, A12 aa){\n        \n        aa.THE_FIELD = 0;\n        \n        if(THE_FIELD > -1){\n            return 0;\n        }\n        \n        THE_FIELD = 100;\n        return -1;\n    }\n",
        "methodStartingLine": 15,
        "methodEndingLine": 25,
        "jml": "//@ requires a > 100;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/strongarm/base/A10.java",
        "code": "    public int localTest1(){\n        \n        int a=0;\n       \n        \n        if(a > -1){\n            a = 3;\n            a = 4;\n        }\n        \n        a = 5;\n        \n        return -1;\n    }\n",
        "methodStartingLine": 14,
        "methodEndingLine": 27,
        "jml": "//@ requires true;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/strongarm/loops/C1.java",
        "code": "    public static int sum(int ar[]){\n\tint sum = 0;\n\t/*@ \n          @ maintaining -1 < i && i <= ar.length;\n          @ maintaining sum == i;\n          @ decreasing ar.length - i;\n          @*/\n\tfor(int i=0; i < ar.length; i++){\n\t    sum += 1;\n\t    int tmp = sum;\n\t    \n\t    for(int j=0; j < ar.length; j++){ // an extra loop, just to be tricky\n\t\tsum++;\n\t    }\n\t    \n\t    sum=tmp;\n\t}\n\t\n\t//sum = 36;\n\t\n\treturn sum;\n    }\n",
        "methodStartingLine": 6,
        "methodEndingLine": 27,
        "jml": "//@ requires ar!=null;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/rise4fun/CopyArray.java",
        "code": "    public static void CopyArray(int[] b, int iBegin, int iEnd, int[] a) {\n        int k = iBegin;\n        ;\n        //@ maintaining iBegin <= k && k <= iEnd;\n        //@ maintaining (\\forall int i; iBegin <= i && i < k; a[i] == b[i]);\n        //@ decreases iEnd  - k;\n        while (iEnd - k > 0) {\n            a[k] = b[k];\n            k = k + 1;\n        }\n    }\n",
        "methodStartingLine": 5,
        "methodEndingLine": 15,
        "jml": "//@ requires a.length == b.length;\n//@ requires 0 <= iBegin && iBegin < a.length && 0 <= iEnd && iEnd < a.length && iBegin <= iEnd;\n//@ ensures (\\forall int i; iBegin <= i && i < iEnd; a[i] == b[i]);"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/escDMZLoop/ESCTest.java",
        "code": "  public /*@ pure */ int findMax(final int[] the_array) {\n    int result = Integer.MIN_VALUE;\n    //@ assume the_array[0] >= Integer.MIN_VALUE;\n    \n    //@ loop_invariant 0 <= i;\n    //@ loop_invariant i <= the_array.length;\n    //@ loop_invariant (\\forall int j; 0 <= j && j < i; the_array[j] <= result);\n    //@ loop_invariant i > 0 ==> (\\exists int j; 0 <= j && j < i; the_array[j] == result);\n    //@ decreasing the_array.length - i;\n    for (int i = 0; i < the_array.length; i++) {\n      if (result < the_array[i]) {\n        result = the_array[i];\n      }\n    }\n    \n    return result;\n  }\n",
        "methodStartingLine": 18,
        "methodEndingLine": 34,
        "jml": "//@ requires the_array.length > 0;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/valuetypes2/Locset.java",
        "code": "    void m() {\n        //@ ghost locset s = locset.locset();\n        //@ ghost locset ss = s;\n        //@ ghost \\locset sss = s;\n        //@ assert s == ss;\n        //@ assert ss == sss;\n    }\n",
        "methodStartingLine": 39,
        "methodEndingLine": 45,
        "jml": "//@ ensures locset.locset().empty();\n//@ ensures locset.locset().add(o).size() == 1;\n//@ ensures !s.contains(o) ==> s.add(o).size() == 1 + s.size();\n//@ ensures s.contains(o) ==> s == s.add(o);\n//@ ensures s.contains(o) ==> s.add(o).size() == s.size();\n//@ ensures !s.contains(o) ==> locset.equals(s.add(o).remove(o), s);\n//@ ensures s.contains(o) ==> locset.equals(s.add(o), s);\n//@ ensures !s.contains(o) ==> locset.equals(s, s.remove(o));\n//@ ensures s.contains(o) ==> s.remove(o).size() == s.size() - 1;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/testfiles/jmldoc1/data/A.java",
        "code": "@Deprecated\npublic void nodocnospecs() {}\n",
        "methodStartingLine": 109,
        "methodEndingLine": 110,
        "jml": "//@ requires true;\n//@ requires i == 0;\n//@ requires i == 0.0;\n//@ requires i == null;\n//@ requires j >= 0;\n//@ requires i == 0;\n//@ requires i == 0.0;\n//@ requires i == null;\n//@ requires i == \"\";"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/testfiles/jmldoc1/data/A.java",
        "code": "@Pure\npublic int m(@NonNull Object o) { return 0; }\n",
        "methodStartingLine": 120,
        "methodEndingLine": 121,
        "jml": "//@ requires true;\n//@ ensures \\result == 0;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/testfiles/jmldoc1/data/A.java",
        "code": "public int mmod(@NonNull Object o) { return 57; }\n",
        "methodStartingLine": 129,
        "methodEndingLine": 129,
        "jml": "//@ requires true;\n//@ ensures \\result == 0;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/testfiles/jmldoc1/data/A.java",
        "code": "@Pure\npublic int mm(Object o) { return 42; }\n",
        "methodStartingLine": 135,
        "methodEndingLine": 136,
        "jml": "//@ requires true;\n//@ ensures \\result == 0;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/testfiles/jmldoc1/data/A.java",
        "code": "public int mm(Object o) { return 0; }\n",
        "methodStartingLine": 211,
        "methodEndingLine": 211,
        "jml": "//@ ensures z_public == 10;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/testfiles/jmldoc1/data/A.java",
        "code": "public int mm() { return 0; }\n",
        "methodStartingLine": 214,
        "methodEndingLine": 214,
        "jml": "//@ ensures z_public == 11;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/prettyprint/data/PP.java",
        "code": "    int mm() { return 3; }\n",
        "methodStartingLine": 83,
        "methodEndingLine": 83,
        "jml": "//@ ensures \\result > 0 && ! \\nonnullelements(a) && \\elemtype(\\typeof(a)) == \\type(int);\n//@ ensures \\duration(m()) > 0 && \\space(o) > 0 && \\working_space(m()) > 0;\n//@ ensures \\fresh(a) && \\fresh(a,o);\n//@ ensures \\max(\\lockset) == a;\n//@ ensures \\max(\\lockset).hashCode() != 0;\n//@ ensures \\not_modified(i,o);\n//@ ensures \\not_modified(a[1 ..*]);\n//@ ensures \\not_assigned(\\nothing) || \\only_accessed(\\nothing) || \\only_captured(\\nothing) || \\only_assigned(\\nothing);\n//@ ensures \\not_assigned(\\everything) || \\only_accessed(\\everything) || \\only_captured(\\everything) || \\only_assigned(\\everything);\n//@ ensures \\not_assigned(i) || \\only_accessed(i) || \\only_captured(i) || \\only_assigned(i);\n//@ ensures \\not_assigned(i,a[1 ..*]) || \\only_accessed(i,a[1 ..]) || \\only_captured(i,a[*]) || \\only_assigned(i,o.*);\n//@ ensures \\not_assigned(\\not_specified) || \\only_accessed(\\not_specified) || \\only_captured(\\not_specified) || \\only_assigned(\\not_specified);"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/prettyprint/data/PP.java",
        "code": "    void qq() {}\n",
        "methodStartingLine": 113,
        "methodEndingLine": 113,
        "jml": "//@ requires \\same;\n//@ requires true; pre true;\n//@ ensures false; post true;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/prettyprint/data/PP.java",
        "code": "    void sp() {}\n",
        "methodStartingLine": 134,
        "methodEndingLine": 134,
        "jml": "//@ requires \\not_specified;\n//@ ensures \\not_specified;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/prettyprint/data/PP.java",
        "code": "   public void q4(int i) {}\n",
        "methodStartingLine": 217,
        "methodEndingLine": 217,
        "jml": "//@ requires i > 0;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/prettyprint/data/PP.java",
        "code": "   public void q5(int i) {}\n",
        "methodStartingLine": 221,
        "methodEndingLine": 221,
        "jml": "//@ requires i > 0;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/prettyprint/data/PP.java",
        "code": "   public void q6(int i) {}\n",
        "methodStartingLine": 225,
        "methodEndingLine": 225,
        "jml": "//@ requires i > 0;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/prettyprint/data/PP.java",
        "code": "   public void q7(int i) {}\n",
        "methodStartingLine": 231,
        "methodEndingLine": 231,
        "jml": "//@ requires i > 0;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/testfiles/racPoint/Point.java",
        "code": "  public static /*@ pure */ boolean approxEquals(final double number_1,\n                                                 final double number_2) {\n    return Math.abs(number_1 - number_2) < ERROR_MARGIN;\n  } \n",
        "methodStartingLine": 87,
        "methodEndingLine": 90,
        "jml": "//@ requires isFinite(coord_1) & isFinite(coord_2);\n//@ ensures \\result <==> Math.abs(number_1 - number_2) < ERROR_MARGIN;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/sfbug420X/StackImpl.java",
        "code": "\tpublic int count() {\n\t\treturn stackCounter;\n\t}\n",
        "methodStartingLine": 24,
        "methodEndingLine": 26,
        "jml": "//@ ensures count == 0;\n//@ ensures stackCounter == 0;\n//@ ensures count() == 0;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/sfbug420X/StackImpl.java",
        "code": "\tpublic int itemAt(int i) {\n\t\treturn internalStack[i-1];\n\t}\n",
        "methodStartingLine": 31,
        "methodEndingLine": 33,
        "jml": "//@ ensures \\result == internalStack[i-1];"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/gitbug610/CounterPP.java",
        "code": "    public void incOK3() {\n        count++;\n    }\n",
        "methodStartingLine": 10,
        "methodEndingLine": 12,
        "jml": "//@ requires count < Integer.MAX_VALUE;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/gitbug610/CounterPP.java",
        "code": "    public void incOK4() {\n        count += 1;\n    }\n",
        "methodStartingLine": 14,
        "methodEndingLine": 16,
        "jml": "//@ requires count < Integer.MAX_VALUE;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/gitbug610/CounterPA.java",
        "code": "    public void incOK3() {\n    \ta[0]++;\n    }\n",
        "methodStartingLine": 14,
        "methodEndingLine": 16,
        "jml": "//@ requires a[0] < Integer.MAX_VALUE;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/gitbug610/CounterPA.java",
        "code": "    public void incOK4() {\n    \ta[0] += 1;\n    }\n",
        "methodStartingLine": 18,
        "methodEndingLine": 20,
        "jml": "//@ requires a[0] < Integer.MAX_VALUE;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/sfbug399/GenericBug.java",
        "code": "        public void nomutate(ReadableValue<Integer> me){\n    \n    \tint foo = me.getValue();\n        }\n",
        "methodStartingLine": 5,
        "methodEndingLine": 8,
        "jml": "//@ requires me != null;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/sfbug399/GenericBug.java",
        "code": "        public /*@ pure @*/ T getValue(){\n    \treturn value;\n        }\n",
        "methodStartingLine": 36,
        "methodEndingLine": 38,
        "jml": "//@ ensures this.value == value;\n//@ ensures this.value != null;\n//@ requires value != null;\n//@ ensures \\result == this.value;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/testfiles/escTrace/trace.java",
        "code": "    public int mmm(int k) { return 41;};\n",
        "methodStartingLine": 10,
        "methodEndingLine": 10,
        "jml": "//@ ensures \\result == 41;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/testfiles/escTrace/trace.java",
        "code": "    public int m(int k) {\n        k = 7;\n        k += 7;\n        int j;\n        fxxx = k + 9;\n        j = fxxx + this.fxxx;\n        fxxx += k + 9;\n        this.fxxx = k + 9;\n        this.fxxx += k + 9;\n        mm(k+k,k==0);\n        mmm(9);\n        j = mmm(j+1) + mmm(10);\n        synchronized (this) { \n            if (k == 14) {\n                k += 0;\n            } else {\n                k += 10;\n            }\n        }\n        int m = 2;\n        switch (m) {\n            case 1: m = 1; break;\n            case 2: m = 2; break;\n            default: m = 0;\n        }\n        m++;\n        switch (m) {\n            case 1: m = 1; break;\n            case 2: m = 2; break;\n            default: m = 0;\n        }\n        m = k == 14 ? (k += 2) : -k;\n        { \n            int zz = 9;\n            boolean b = zz == 9 || zz == 0;\n            b = zz == 0 || zz == 9;\n            b = zz == 0 && zz == 9;\n            b = zz == 9 && zz == 0;\n        }\n        assert false == false: \"asd\";\n        //@ assert k != 7;\n        //@ assert (k == 7) ==> (k != 7);\n        //@ assert !((k != 7) ==> (k == 7));\n        //@ ghost int x = 9;\n        //@ set x = x + 9;\n        //@ debug x = 0;\n        //@ set x = (\\lbl AAA k+1);\n        //-ESC@ set x = (\\lbl BBB k+1);\n        for (int z = 0; z<4; z = z + 1) {\n            m = m + 1;\n        }\n        //@ assume a.length > 10;\n        a[2] = 42;\n        m = a[1+1] - a[2];\n        a[1] = k + 1;\n        a[1] += k + 1;\n        sf = 4;\n        trace.sf = 5;\n        m = sf + trace.sf;\n        try {\n            m = 8;\n            throw new Exception();\n        } catch (RuntimeException e) {\n            m = 9;\n        } catch (Exception e) {\n            m = 10;\n        } finally {\n            m = 11;\n        }\n        return 0;\n    }\n",
        "methodStartingLine": 14,
        "methodEndingLine": 84,
        "jml": "//@ requires true;\n//@ ensures \\result != 0;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/gitbug605/LongArith.java",
        "code": "    public void use_int(int i) {\n        if (!(ib <= i)) { return; }\n        //@ assert ib <= i;\n        ib = i+1;\n        //@ assert ib == i+1;\n        //@ assert ib > i;\n    }\n",
        "methodStartingLine": 13,
        "methodEndingLine": 19,
        "jml": "//@ requires i < Integer.MAX_VALUE;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/gitbug605/LongArith.java",
        "code": "    public void use_long(long il) {\n        if (!(lb <= il)) { return; }\n        //@ assert lb <= il;\n        lb = il+1;\n        //@ assert lb == il+1;\n        //@ assert lb > il;\n    }\n",
        "methodStartingLine": 22,
        "methodEndingLine": 28,
        "jml": "//@ requires il < Integer.MAX_VALUE;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/racold/ArrayExample.java",
        "code": "    public int someMethod(){\n        return 1;\n    }\n",
        "methodStartingLine": 13,
        "methodEndingLine": 15,
        "jml": "//@ ensures \\old(someArray[\\result]) == 4;\n//@ ensures \\old(someArray[\\result] + 2) == 6;\n//@ ensures \\old(someArray[\\result])+ 2 == 6;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/gitbug596a/TestCase.java",
        "code": "    public void plus(int b) {}\n",
        "methodStartingLine": 5,
        "methodEndingLine": 5,
        "jml": "//@ requires b >= +a;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/gitbug596d/TestCase.java",
        "code": "    public void minus(int b) {}\n",
        "methodStartingLine": 5,
        "methodEndingLine": 5,
        "jml": "//@ requires b >= Math.max(0, -a);"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/gitbug596b/TestCase.java",
        "code": "    public void timesMinusOne(int b) {}\n",
        "methodStartingLine": 5,
        "methodEndingLine": 5,
        "jml": "//@ requires b >= Math.max(0, -1 * a);"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/gitbug596c/TestCase.java",
        "code": "    public void timesMinusOneFloat(int b) {}\n",
        "methodStartingLine": 5,
        "methodEndingLine": 5,
        "jml": "//@ requires b >= Math.max(0, (int)(-1.0 * a));"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/gitbug678/DoubleABS.java",
        "code": "    public /*@ pure @*/ Double DoubleAbsolute(Double num){\n        if (num >= 0)\n            return num;\n        else\n            return -num;\n    } \n",
        "methodStartingLine": 11,
        "methodEndingLine": 16,
        "jml": "//@ requires !num.isNaN() && num >= 0;\n//@ ensures \\result == num;\n//@ ensures \\result >= 0;\n//@ requires !num.isNaN() && num < 0;\n//@ ensures \\result == -num; \n//@ ensures \\result >= 0;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/escDMZLoopB/ESCTest.java",
        "code": "  public /*@ pure */ int findMax(final int[] the_array) {\n    int result = the_array[0];\n    \n    //@ loop_invariant 0 <= i;\n    //@ loop_invariant i <= the_array.length;\n    //@ loop_invariant (\\forall int j; 0 <= j && j < i; the_array[j] <= result);\n    //@ loop_invariant i > 0 ==> (\\exists int j; 0 <= j && j < i; the_array[j] == result);\n    //@ loop_invariant i == 0 ==> result == the_array[0];\n    //@ decreasing the_array.length - i;\n    for (int i = 0; i < the_array.length; i++) {\n      if (result < the_array[i]) {\n        result = the_array[i];\n      }\n    }\n    \n    return result;\n  }\n",
        "methodStartingLine": 18,
        "methodEndingLine": 34,
        "jml": "//@ requires the_array.length > 0;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/escDMZLoopA/ESCTest.java",
        "code": "  public /*@ pure */ int findMax(final int[] the_array) {\n    int result = Integer.MIN_VALUE;\n    //@ assume the_array[0] >= Integer.MIN_VALUE;\n    \n    //@ loop_invariant 0 <= i;\n    //@ loop_invariant i <= the_array.length;\n    //@ loop_invariant (\\forall int j; 0 <= j && j < i; the_array[j] <= result);\n    //@ loop_invariant i > 0 ==> (\\exists int j; 0 <= j && j < i; the_array[j] == result);\n    //@ loop_invariant i == 0 ==> result == Integer.MIN_VALUE;\n    //@ decreasing the_array.length - i;\n    for (int i = 0; i < the_array.length; i++) {\n      if (result < the_array[i]) {\n        result = the_array[i];\n      }\n    }\n    \n    return result;\n  }\n",
        "methodStartingLine": 18,
        "methodEndingLine": 35,
        "jml": "//@ requires the_array.length > 0;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/factorial/Factorial.java",
        "code": "       public long Facto(int n)\n       {\n          int c;\n          long fact = 1;\n\n       if ( n == 0) {\n          //@ assert fact == spec_factorial(n);          \n          return fact;\n       }\n       //@ assert spec_factorial(0) == 1;\n\n      //@ maintaining c >= 1 && c <= n+1;\n      //@ maintaining fact > 0;\n      //@ maintaining fact <= Long.MAX_VALUE; \n      //@ maintaining spec_factorial(c - 1) == fact;\n       //@ loop_writes c, fact;\n      //@ decreases n - c;\n      for (c = 1; c <= n; c++){\n         //@ assert spec_factorial(c-1) == fact;\n         //@ assert c <= n;\n         //@ assume fact*c <= Long.MAX_VALUE;\n         fact = fact*c;\n         //@ assert spec_factorial(c) == c * spec_factorial(c-1);\n         //@ assert spec_factorial(c) == fact;\n      }\n      //@ assert c == n+1;\n      //@ assert spec_factorial(c - 1) == fact;   \n      return fact;\n    }\n",
        "methodStartingLine": 7,
        "methodEndingLine": 35,
        "jml": "//@ requires n >= 0 && n <= 19;\n//@ ensures \\result == spec_factorial(n);"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/testfiles/racPoint2/Point.java",
        "code": "  public static /*@ pure */ boolean approxEquals(final double number_1,\n                                                 final double number_2) {\n    return Math.abs(number_1 - number_2) < ERROR_MARGIN;\n  } \n",
        "methodStartingLine": 87,
        "methodEndingLine": 90,
        "jml": "//@ requires isFinite(coord_1) & isFinite(coord_2);\n//@ ensures \\result <==> Math.abs(number_1 - number_2) < ERROR_MARGIN;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/testfiles/bagModified/Bag.java",
        "code": "  void removeOnce(int elt) {\n    //@ loop_invariant 0 <= i && i <= n && n >= 0 && n <= contents.length; // added by DRC\n    for (int i = 0; i < n; i++) {  // error in code corrected\n      if (contents[i] == elt ) {\n         n--;\n         contents[i] = contents[n];\n         return;\n      }\n    }\n  }\n",
        "methodStartingLine": 34,
        "methodEndingLine": 43,
        "jml": "//@ requires input != null;\n//@ requires b != null;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/testfiles/bagModified/Bag.java",
        "code": "  /*@ pure @*/ int getCount(int elt) {\n    int count = 0;\n    //@ loop_invariant i>=0 && i<=n;\n    //@ loop_invariant count >= 0;\n    for (int i = 0; i < n; i++) \n      if (contents[i] == elt) count++;\n    return count;\n  }\n",
        "methodStartingLine": 58,
        "methodEndingLine": 65,
        "jml": "//@ ensures \\result >= 0;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/testfiles/bagModified/Bag.java",
        "code": "  void add(Bag b) {\n    int[] new_contents = new int[n+b.n];\n    arraycopy(this.contents, 0, new_contents, 0, n);\n    arraycopy(b.contents, 0, new_contents, n, b.n);\n    contents = new_contents;\n    n = n + b.n; // DRC added\n  }\n",
        "methodStartingLine": 80,
        "methodEndingLine": 86,
        "jml": "//@ requires b != null;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/testfiles/bagModified/Bag.java",
        "code": "  private static void arraycopy(int[] src,\n                                int   srcOff,\n                                int[] dest,\n                                int   destOff,\n                                int   length) {\n    /*@ loop_invariant i>=0 && i<=length; @*/\n\tfor( int i=0 ; i<length; i++) {\n       dest[destOff+i] = src[srcOff+i];\n    }\n  }\n",
        "methodStartingLine": 97,
        "methodEndingLine": 106,
        "jml": "//@ requires src != null;\n//@ requires srcOff >=0;\n//@ requires dest != null;\n//@ requires destOff >=0;\n//@ requires length >=0;\n//@ requires srcOff + length <= src.length;\n//@ requires destOff + length <= dest.length;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/refining/TestRefines.java",
        "code": "    public int m1(int i) {\n        \n        int j = 0;\n        //@ refining\n        //@ assignable j;\n        //@ ensures j >= 11; // OK\n        //@ begin\n        j = i + 10;\n        j++;\n        //@ end\n        return j;\n    }\n",
        "methodStartingLine": 5,
        "methodEndingLine": 16,
        "jml": "//@ requires 0 <= i <= 100;\n//@ ensures \\result >= 11;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/refining/TestRefines.java",
        "code": "    public int m2(int i) {\n        \n        int j = 0;\n        //@ refining\n        //@ assignable j;\n        //@ ensures j >= 11;  // ERROR\n        {\n        j = i + 10;\n        j++;\n        }\n        return j;\n    }\n",
        "methodStartingLine": 20,
        "methodEndingLine": 31,
        "jml": "//@ requires 0 <= i <= 100;\n//@ ensures \\result >= 12;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/refining/TestRefines.java",
        "code": "    public int m3(int i) {\n        \n        //@ refining : j;\n        //@ assignable j;\n        //@ ensures j >= 11; // OK\n        //@ begin\n        int j = 0;\n        j = i + 10;\n        j++;\n        //@ end\n        return j;\n    }\n",
        "methodStartingLine": 35,
        "methodEndingLine": 46,
        "jml": "//@ requires 0 <= i <= 100;\n//@ ensures \\result >= 11;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/refining/TestRefines.java",
        "code": "    public int m4(int i) {\n        \n        //@ refining : j;\n        //@ assignable j;\n        //@ ensures j >= 11;\n        //@ begin\n        int j = 0;\n        j = i + 10;\n        j++;\n        //@ end\n        return j;\n    }\n",
        "methodStartingLine": 52,
        "methodEndingLine": 63,
        "jml": "//@ requires 0 <= i <= 100;\n//@ ensures \\result >= 11;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/testfiles/escTrace4/trace.java",
        "code": "    public int mmm(int k) { return 41;};\n",
        "methodStartingLine": 10,
        "methodEndingLine": 10,
        "jml": "//@ ensures \\result == 41;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/testfiles/escTrace4/trace.java",
        "code": "    public int m(int k) {\n        int j = 0;\n        mm(k+k,k==0);\n        mmm(9);\n        j = mmm(j+1) + mmm(10) + mmm(j);\n        return 0;\n    }\n",
        "methodStartingLine": 14,
        "methodEndingLine": 20,
        "jml": "//@ requires true;\n//@ ensures \\result != 0;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/sfbug410/BoxingTests.java",
        "code": "    public static Integer incr_test() {\n        Integer x = 0;\n        x++;\n        return x;\n    }\n",
        "methodStartingLine": 4,
        "methodEndingLine": 8,
        "jml": "//@ ensures \\result == 1;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/sfbug410/BoxingTests.java",
        "code": "    public static void incr_test2(BoxingTests b) {\n        b.i++;\n        //@ assert b.i == \\old(b.i) + 1;\n    }\n",
        "methodStartingLine": 14,
        "methodEndingLine": 17,
        "jml": "//@ requires b != null;\n//@ requires b.i != null;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/sfbug410/BoxingTests.java",
        "code": "    public static void incr_test3(Integer[] a) {\n        a[0]++;\n        //@ assert a[0] == 6;\n    }\n",
        "methodStartingLine": 22,
        "methodEndingLine": 25,
        "jml": "//@ requires a.length > 1;\n//@ requires a[0] != null;\n//@ requires a[0] == 5;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/sfbug410/BoxingTests.java",
        "code": "    public static Boolean and_test() {\n        Boolean b = Boolean.TRUE;\n        b &= false;\n        return b;\n    }\n",
        "methodStartingLine": 28,
        "methodEndingLine": 32,
        "jml": "//@ ensures \\result == false;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/gitbug606/LongArith2.java",
        "code": "    public /*@ pure @*/ long upperBound() {\n        return ub;\n    }\n",
        "methodStartingLine": 16,
        "methodEndingLine": 18,
        "jml": "//@ ensures \\result == ub;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/gitbug606/LongArith2.java",
        "code": "    public /*@ pure @*/ long size() {\n        return ub - lb - 1;\n    }\n",
        "methodStartingLine": 21,
        "methodEndingLine": 23,
        "jml": "//@ ensures \\result == ub - lb - 1;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/testfiles/escTrace6/trace.java",
        "code": "    public void m() {\n        k = 1;\n        mm();\n        k = 2;\n        return ;\n    }\n",
        "methodStartingLine": 10,
        "methodEndingLine": 15,
        "jml": "//@ requires true;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/testfiles/escTrace6/trace.java",
        "code": "    public void m2() {\n        try {\n            k = 1;\n            mm();\n            k = 2;\n        } finally {}\n    }\n",
        "methodStartingLine": 21,
        "methodEndingLine": 27,
        "jml": "//@ requires true;\n//@ ensures k == 2;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/testfiles/escTrace6/trace.java",
        "code": "    public void m3() {\n        try {\n            k = 1;\n            mm();\n            k = 2;\n        } catch (Exception e) {}\n    }\n",
        "methodStartingLine": 34,
        "methodEndingLine": 40,
        "jml": "//@ requires true;\n//@ ensures k == 2;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/exceptionCancel/Test.java",
        "code": "    public void m0(int i, RuntimeException e) {\n        A: {\n           try {\n               if (i == 0) throw e;\n           } finally {\n               if ( i == 0) i = 1;\n           }\n        }\n        //@ reachable; // ERROR\n    }\n",
        "methodStartingLine": 5,
        "methodEndingLine": 14,
        "jml": "//@ requires i == 0;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/exceptionCancel/Test.java",
        "code": "    public void m1(int i, RuntimeException e) {\n        A: {\n           try {\n               if (i == 0) throw e;\n           } finally {\n               if ( i == 0) break A;\n           }\n        }\n        //@ reachable;\n    }\n",
        "methodStartingLine": 18,
        "methodEndingLine": 27,
        "jml": "//@ requires i == 0;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/exceptionCancel/Test.java",
        "code": "    public void m2(int i, RuntimeException e) {\n        while (true) {\n           try {\n               if (i == 0) throw e;\n           } finally {\n               if ( i == 0) break;\n           }\n        }\n        //@ reachable;\n    }\n",
        "methodStartingLine": 31,
        "methodEndingLine": 40,
        "jml": "//@ requires i == 0;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/exceptionCancel/Test.java",
        "code": "    public void m3(int i, RuntimeException e) {\n        switch (i) {\n           default:\n           try {\n               if (i == 0) throw e;\n           } finally {\n               if ( i == 0) break;\n           }\n        }\n        //@ reachable;\n    }\n",
        "methodStartingLine": 44,
        "methodEndingLine": 54,
        "jml": "//@ requires i == 0;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/exceptionCancel/Test.java",
        "code": "    public void m4(int i, RuntimeException e) {\n        while (i<5) {\n           try {\n               if (i < 10) throw e;\n           } finally {\n               i++;\n               if ( i < 10) break;\n           }\n        }\n        //@ reachable;\n    }\n",
        "methodStartingLine": 59,
        "methodEndingLine": 69,
        "jml": "//@ requires i == 0;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/callstacks/CallStack.java",
        "code": "    public void m(int i) {\n        \n    }\n",
        "methodStartingLine": 8,
        "methodEndingLine": 10,
        "jml": "//@ requires x(i);"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/callstacks/CallStack.java",
        "code": "    public boolean x(int i) {\n        return i > 10;\n    }\n",
        "methodStartingLine": 15,
        "methodEndingLine": 17,
        "jml": "//@ requires pos(i);\n//@ ensures \\result == i > 10;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/callstacks/CallStack.java",
        "code": "    public boolean pos(int i) {\n        return i > 0;\n    }\n",
        "methodStartingLine": 21,
        "methodEndingLine": 23,
        "jml": "//@ ensures \\result == i > 0;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/gitbug677/CircleArea.java",
        "code": "    void calculateArea(int r)\n    {\n        //@ assert 3*r <= Integer.MAX_VALUE;\n        //@ assert r*r <= Integer.MAX_VALUE;\n        //@ show r, 3*r, 3*r*r;\n        int area = 3*r*r;\n    }\n",
        "methodStartingLine": 9,
        "methodEndingLine": 15,
        "jml": "//@ requires r > 0; \n//@ requires 3*r*r <= Integer.MAX_VALUE;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/gitbug677/CircleArea.java",
        "code": "    void calculateAreaJava(int r)\n    {\n        int area = 3*r*r;\n    }\n",
        "methodStartingLine": 20,
        "methodEndingLine": 23,
        "jml": "//@ requires r > 0; \n//@ requires 3*r*r <= Integer.MAX_VALUE;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/gitbug677/CircleArea.java",
        "code": "    void calculateAreaMath(int r)\n    {\n        int area = 3*r*r;\n    }\n",
        "methodStartingLine": 28,
        "methodEndingLine": 31,
        "jml": "//@ requires r > 0; \n//@ requires 3*r*r <= Integer.MAX_VALUE;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/escLoopModifies/Test.java",
        "code": "    public void m(int[] a) {\n        \n        a[3] = 10;\n        //@ loop_invariant 5<=i && i<=8;\n        for (int i= 5; i<8; i++) {\n            a[i] = -4;\n        }\n        //@ assert a[3] == 10; // Not proved since the default loop_modifies is a[*]\n    }\n",
        "methodStartingLine": 4,
        "methodEndingLine": 12,
        "jml": "//@ requires a != null && a.length > 10;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/escLoopModifies/Test.java",
        "code": "    public void mm(int[] a) {\n        \n        a[3] = 10;\n        //@ loop_invariant 5<=i && i<=8;\n        //@ loop_modifies i,a[4..7];\n        for (int i= 5; i<8; i++) {\n            a[i] = -4;\n        }\n        //@ assert a[3] == 10;  // OK\n    }\n",
        "methodStartingLine": 15,
        "methodEndingLine": 24,
        "jml": "//@ requires a != null && a.length > 10;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/testfiles/escTrace5/trace.java",
        "code": "    public int m(int k) {\n        Object o = new Object();\n        //@ assert \\typeof(o) == \\type(Object);\n        return 0;\n    }\n",
        "methodStartingLine": 5,
        "methodEndingLine": 9,
        "jml": "//@ requires true;\n//@ ensures \\result != 0;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/testfiles/escTrace2/trace.java",
        "code": "    public int m(int k) {\n        return 0;\n    }\n",
        "methodStartingLine": 9,
        "methodEndingLine": 11,
        "jml": "//@ requires k < 0;\n//@ ensures \\result == 0;\n//@ requires true;\n//@ requires k >= 0;\n//@ ensures \\result != 0;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/escRecursiveOld/Test.java",
        "code": "    public int m(int n) {\n        if (n == 0) return 124;\n        return m(n-1);\n    }\n",
        "methodStartingLine": 5,
        "methodEndingLine": 8,
        "jml": "//@ ensures \\result <= nnnn;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/gitbug633/Rectangular.java",
        "code": "    public double realPart() {\n        return re;\n    }\n",
        "methodStartingLine": 64,
        "methodEndingLine": 66,
        "jml": "//@ ensures realPart() == 0.0 && imaginaryPart() == 0.0;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/testfiles/escVector/Vector.java",
        "code": "  public final synchronized void add(final Object the_object) {\n    if (my_element_count >= my_element_data.length) {\n      // create a new array\n      final Object[] new_data = new Object[my_element_count + my_capacity_increment]; // ERROR - could be negative\n      //@ ghost Object[] nd = new_data;\n      //@ loop_invariant 0 <= i && i <= my_element_count && new_data == nd;\n      //@ decreases my_element_count - i;\n      for (int i = 0; i < my_element_count; i++) {\n        new_data[i] = my_element_data[i];\n      }\n      my_element_data = new_data;\n    }\n    my_element_data[my_element_count++] = the_object;\n  }\n",
        "methodStartingLine": 66,
        "methodEndingLine": 79,
        "jml": "//@ requires the_initial_capacity >= 0 && the_capacity_increment > 0;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/escJLS/TableMovieKeys.java",
        "code": "     public /*@ pure @*/ String get(){return value;} // <<< this is the line that generates the error.\n",
        "methodStartingLine": 15,
        "methodEndingLine": 15,
        "jml": "//@ requires str!=null;\n//@ ensures value == str; // should this be value.equals(str)?"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/gitbug604/AbsInterval.java",
        "code": "    public /*@ pure @*/ boolean contains(int i) {\n        return lb <= i && i <= ub;\n    }\n",
        "methodStartingLine": 16,
        "methodEndingLine": 18,
        "jml": "//@ requires l <= ((long)u)+1;\n//@ ensures lb == (long)l && ub == (long)u;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/sfbug398/StaticMethod.java",
        "code": "    public static void a(int[] src) {\n    }\n",
        "methodStartingLine": 11,
        "methodEndingLine": 12,
        "jml": "//@ requires d.length > 0;\n//@ requires src.length > 0;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/rise4fun/BinarySearch.java",
        "code": "    public static int BinarySearch(int[] arr, int key) {\n        if (arr.length == 0) {\n            return -1;\n        } else {\n            int low = 0;\n            int high = arr.length;\n            int mid = low + (high - low) / 2;\n            //@ maintaining 0 <= low && low <= high  && high <= arr.length && mid == low + (high - low) / 2;\n            //@ maintaining (\\forall int i; 0 <= i && i < low; arr[i] < key);\n            //@ maintaining (\\forall int i; high <= i && i < arr.length ==> key < arr[i]);\n            //@ decreases high - low;\n            while (low < high && arr[mid] != key) {\n                if (arr[mid] < key) {\n                    low = mid + 1;\n                } else {\n                    high = mid;\n                }\n                mid = low + (high - low) / 2;\n            }\n            if (low >= high) {\n                return -1;\n            }\n            return mid;\n        }\n\n\n    }\n",
        "methodStartingLine": 5,
        "methodEndingLine": 31,
        "jml": "//@ requires (\\forall int i, j; 0 <= i && i < j && j < arr.length; arr[i] <= arr[j]);\n//@ ensures \\result == -1 ==> (\\forall int i; 0 <= i && i < arr.length; arr[i] != key);\n//@ ensures 0 <= \\result && \\result < arr.length ==> arr[\\result] == key;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/strongarm/examples/End.java",
        "code": "    public  boolean end() {\n\treturn this.eof && !this.usePrevious;\n    }\n",
        "methodStartingLine": 19,
        "methodEndingLine": 21,
        "jml": "//@ requires true;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/rise4fun/MaybeAddFixed.java",
        "code": "    public /*@ pure */ static int add(int a, int b){\n        return a-b;\n    }\n",
        "methodStartingLine": 8,
        "methodEndingLine": 10,
        "jml": "//@ requires a > 0;\n//@ requires b > 0;\n//@ ensures \\result == a-b;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/escLoopAssignable/Test.java",
        "code": "    public void mm(int[] a) {\n        \n        a[3] = 10;\n        //@ loop_invariant 5<=i && i<=8;\n        //@ assignable i,a[4..7];\n        //@ writes i,a[4..7];\n        for (int i= 5; i<8; i++) {\n            a[i] = -4;\n        }\n        //@ assert a[3] == 10;  // OK\n    }\n",
        "methodStartingLine": 6,
        "methodEndingLine": 16,
        "jml": "//@ requires a != null && a.length > 10;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/escLoopAssignable/Test.java",
        "code": "    public void mok(int[] a) {\n        \n        a[3] = 10;\n        //@ loop_invariant 5<=i && i<=8;\n        //@ loop_assignable i,a[4..7];\n        //@ loop_writes i,a[4..7];\n        //@ loop_modifies i,a[4..7];\n        for (int i= 5; i<8; i++) {\n            a[i] = -4;\n        }\n        //@ assert a[3] == 10;  // OK\n    }\n",
        "methodStartingLine": 19,
        "methodEndingLine": 30,
        "jml": "//@ requires a != null && a.length > 10;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/testPath/data/TestPath.java",
        "code": "    public int m() { return 0; }\n",
        "methodStartingLine": 4,
        "methodEndingLine": 4,
        "jml": "//@ requires z ; // BAD"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/gitbug602/IntSetClient.java",
        "code": "    public static void test(IntSet is) {\n        int k = is.choose();\n        //@ assert is.contains(k);\n    }\n",
        "methodStartingLine": 3,
        "methodEndingLine": 6,
        "jml": "//@ requires is.size() > 0;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/rise4fun/FindFirstZero.java",
        "code": "    public static int FindFirstZero(int[] x) {\n        assert x.length >= 0;\n        if (x.length == 0) {\n            return -1;\n        } else {\n            int index = 0;\n            //@ maintaining (\\forall int i; 0 <= i && i < index; x[i] != 0);\n            //@ maintaining (0 <= index && index <= x.length);\n            //@ decreases x.length - index;\n            while (x.length - index > 0 && x[index] != 0) {\n                index = index + 1;\n            }\n            if (x.length - index == 0) {\n                index = -1;\n            }\n            return index;\n        }\n    }\n",
        "methodStartingLine": 5,
        "methodEndingLine": 22,
        "jml": "//@ requires true;\n//@ ensures \\result == -1 ==> (\\forall int i; 0 <= i && i < x.length; x[i] != 0);\n//@ ensures 0 <= \\result && \\result < x.length ==> x[\\result] == 0 && (\\forall int i; 0 <= i && i < \\result; x[i] != 0);"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/strongarm/examples/More.java",
        "code": "    public  boolean end() {\n\treturn this.eof && !this.usePrevious;\n    }\n",
        "methodStartingLine": 18,
        "methodEndingLine": 20,
        "jml": "//@ requires true;\n//@ ensures \\result == (eof && !usePrevious);"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/strongarm/examples/More.java",
        "code": "    public boolean more() throws Exception {\n        if (this.end()) {\n            return false;\n        }\n        return true;\n    }\n",
        "methodStartingLine": 25,
        "methodEndingLine": 30,
        "jml": "//@ requires this.reader != null;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/strongarm/examples/Next.java",
        "code": "    public char next() throws Exception {\n    int c = 0;\n    if (this.usePrevious) {\n        this.usePrevious = false;\n        c = this.previous;\n    } else {\n        try {\n            c = this.reader.read();\n         } catch (IOException exception) {\n           throw new Exception(exception);\n        }\n\n        if (c <= 0) { // End of stream\n            this.eof = true;\n            c = 0;\n        }\n    }\n    this.index += 1;\n    if (this.previous == '\\r') {\n        this.line += 1;\n        this.character = c == '\\n' ? 0 : 1;\n    } else if (c == '\\n') {\n        this.line += 1;\n        this.character = 0;\n    } else {\n        this.character += 1;\n    }\n    this.previous = (char) c;\n    return this.previous;\n}\n",
        "methodStartingLine": 18,
        "methodEndingLine": 47,
        "jml": "//@ requires this.reader != null;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/nullableOld/NullableOld.java",
        "code": "    public void m(/*@ nullable */ Object oo) {\n        \n    }\n",
        "methodStartingLine": 5,
        "methodEndingLine": 7,
        "jml": "//@ requires o != null;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/nullableOld/NullableOld.java",
        "code": "    public void mbad(/*@ nullable */ Object oo) {\n        \n    }\n",
        "methodStartingLine": 11,
        "methodEndingLine": 13,
        "jml": "//@ requires o != null;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/strongarm/exceptional/E.java",
        "code": "    public int exceptional() throws Exception {\n\tif(this.a > 0){\n\t    throw new Exception(\"E\");\n\t}\n\t\n\treturn this.a;\n    }\n",
        "methodStartingLine": 8,
        "methodEndingLine": 14,
        "jml": "//@ requires true;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/testfiles/escDMZLoop/ESCTest.java",
        "code": "  public /*@ pure */ int findMax(final int[] the_array) {\n    int result = Integer.MIN_VALUE;\n    //@ assume the_array[0] >= Integer.MIN_VALUE;\n    \n    //@ loop_invariant 0 <= i;\n    //@ loop_invariant i <= the_array.length;\n    //@ loop_invariant (\\forall int j; 0 <= j && j < i; the_array[j] <= result);\n    //@ loop_invariant i > 0 ==> (\\exists int j; 0 <= j && j < i; the_array[j] == result);\n    //@ decreasing the_array.length - i;\n    for (int i = 0; i < the_array.length; i++) {\n      if (result < the_array[i]) {\n        result = the_array[i];\n      }\n    }\n    \n    return result;\n  }\n",
        "methodStartingLine": 18,
        "methodEndingLine": 34,
        "jml": "//@ requires the_array.length > 0;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/gitbug717/SelectionSort.java",
        "code": "  public static void sort(int[] A, int n) {\n    //@ ghost int[] perm = new int[n];\n    //@ ghost int[] rev = new int[n];\n    //@ havoc perm[*]; assume \\forall int z; 0 <= z < n; z == perm[z];\n    //@ havoc rev[*]; assume \\forall int z; 0 <= z < n; z == rev[z];\n    //@ assert \\forall int z; 0 <= z < n; z == rev[perm[z]];\n    //@ assert \\forall int z; 0 <= z < n; z == perm[rev[z]];\n    //@ assert \\forall int z; 0 <= z < n; \\old(A[z]) == A[perm[z]];\n\n    //@ loop_invariant 0 <= i < n;\n    //@ loop_invariant \\forall int k; 0 <= k < i; A[k] >= A[k+1]; \n    //@ loop_invariant \\forall int k; 0 <= k < i; \\forall int j; i <= j < n; A[k] >= A[j]; \n    //@ decreasing n - i - 1;\n    //@ loop_invariant \\forall int z; 0 <= z < n; 0 <= perm[z] < n;\n    //@ loop_invariant \\forall int z; 0 <= z < n; 0 <= rev[z] < n;\n    //@ loop_invariant \\forall int z; 0 <= z < n; z == rev[perm[z]];\n    //@ loop_invariant \\forall int z; 0 <= z < n; z == perm[rev[z]];\n    //@ loop_invariant \\forall int z; 0 <= z < n; \\old(A[z]) == A[perm[z]];\n\n    for(int i = 0; i < n - 1; i++) {\n      int max = A[i];\n      int max_idx = i;\n\t\n      //@ loop_invariant i < j <= n; \n      //@ loop_invariant \\forall int t; i <= t < j; max >= A[t]; \n      //@ loop_invariant i <= max_idx < n; \n      //@ loop_invariant max == A[max_idx]; \n      //@ decreasing n - j; \n      for(int j = i+1; j < n ;j++) {\n        if (A[j] > max) {\n          max_idx = j;\n          max = A[j];\n        }\n      }\n      A[max_idx] = A[i];\n      A[i] = max;\n      //@ set perm[rev[max_idx]] = i;\n      //@ set perm[rev[i]] = max_idx;\n      //@ set rev[max_idx] = i;\n      //@ set rev[i] = max_idx;\n    }\n    //@ assert perm.length == n;\n    //@ assert rev.length == n;\n    //@ assert \\forall int z; 0 <= z < n; 0 <= perm[z] < n;\n    //@ assert \\forall int z; 0 <= z < n; 0 <= rev[z] < n;\n    // @ assert \\forall int z; 0 <= z < n; z == rev[perm[z]];\n    // @ assert \\forall int z; 0 <= z < n; z == perm[rev[z]];\n    //@ assert \\forall int i; 0 <= i < n; \\old(A[i]) == A[perm[i]];\n  }\n",
        "methodStartingLine": 9,
        "methodEndingLine": 57,
        "jml": "//@ requires 1 <= n <= A.length;\n//@ ensures \\forall int k; 0 <= k < n-1; A[k] >= A[k+1];"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/testfiles/prettyprint/data/PP.java",
        "code": "    int mm() { return 3; }\n",
        "methodStartingLine": 83,
        "methodEndingLine": 83,
        "jml": "//@ ensures \\result > 0 && ! \\nonnullelements(a) && \\elemtype(\\typeof(a)) == \\type(int);\n//@ ensures \\duration(m()) > 0 && \\space(o) > 0 && \\working_space(m()) > 0;\n//@ ensures \\fresh(a) && \\fresh(a,o);\n//@ ensures \\max(\\lockset) == a;\n//@ ensures \\max(\\lockset).hashCode() != 0;\n//@ ensures \\not_modified(i,o);\n//@ ensures \\not_modified(a[1 ..*]);\n//@ ensures \\not_assigned(\\nothing) || \\only_accessed(\\nothing) || \\only_captured(\\nothing) || \\only_assigned(\\nothing);\n//@ ensures \\not_assigned(\\everything) || \\only_accessed(\\everything) || \\only_captured(\\everything) || \\only_assigned(\\everything);\n//@ ensures \\not_assigned(i) || \\only_accessed(i) || \\only_captured(i) || \\only_assigned(i);\n//@ ensures \\not_assigned(i,a[1 ..*]) || \\only_accessed(i,a[1 ..]) || \\only_captured(i,a[*]) || \\only_assigned(i,o.*);\n//@ ensures \\not_assigned(\\not_specified) || \\only_accessed(\\not_specified) || \\only_captured(\\not_specified) || \\only_assigned(\\not_specified);"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/testfiles/prettyprint/data/PP.java",
        "code": "    void qq() {}\n",
        "methodStartingLine": 113,
        "methodEndingLine": 113,
        "jml": "//@ requires \\same;\n//@ requires true; pre true;\n//@ ensures false; post true;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/testfiles/prettyprint/data/PP.java",
        "code": "    void sp() {}\n",
        "methodStartingLine": 134,
        "methodEndingLine": 134,
        "jml": "//@ requires \\not_specified;\n//@ ensures \\not_specified;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/testfiles/prettyprint/data/PP.java",
        "code": "   public void q4(int i) {}\n",
        "methodStartingLine": 217,
        "methodEndingLine": 217,
        "jml": "//@ requires i > 0;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/testfiles/prettyprint/data/PP.java",
        "code": "   public void q5(int i) {}\n",
        "methodStartingLine": 221,
        "methodEndingLine": 221,
        "jml": "//@ requires i > 0;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/testfiles/prettyprint/data/PP.java",
        "code": "   public void q6(int i) {}\n",
        "methodStartingLine": 225,
        "methodEndingLine": 225,
        "jml": "//@ requires i > 0;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/testfiles/prettyprint/data/PP.java",
        "code": "   public void q7(int i) {}\n",
        "methodStartingLine": 231,
        "methodEndingLine": 231,
        "jml": "//@ requires i > 0;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/testfiles/racold/ArrayExample.java",
        "code": "    public int someMethod(){\n        return 1;\n    }\n",
        "methodStartingLine": 13,
        "methodEndingLine": 15,
        "jml": "//@ ensures \\old(someArray[\\result]) == 4;\n//@ ensures \\old(someArray[\\result] + 2) == 6;\n//@ ensures \\old(someArray[\\result])+ 2 == 6;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/testfiles/escDMZLoopB/ESCTest.java",
        "code": "  public /*@ pure */ int findMax(final int[] the_array) {\n    int result = the_array[0];\n    \n    //@ loop_invariant 0 <= i;\n    //@ loop_invariant i <= the_array.length;\n    //@ loop_invariant (\\forall int j; 0 <= j && j < i; the_array[j] <= result);\n    //@ loop_invariant i > 0 ==> (\\exists int j; 0 <= j && j < i; the_array[j] == result);\n    //@ loop_invariant i == 0 ==> result == the_array[0];\n    //@ decreasing the_array.length - i;\n    for (int i = 0; i < the_array.length; i++) {\n      if (result < the_array[i]) {\n        result = the_array[i];\n      }\n    }\n    \n    return result;\n  }\n",
        "methodStartingLine": 18,
        "methodEndingLine": 34,
        "jml": "//@ requires the_array.length > 0;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/testfiles/escDMZLoopA/ESCTest.java",
        "code": "  public /*@ pure */ int findMax(final int[] the_array) {\n    int result = Integer.MIN_VALUE;\n    //@ assume the_array[0] >= Integer.MIN_VALUE;\n    \n    //@ loop_invariant 0 <= i;\n    //@ loop_invariant i <= the_array.length;\n    //@ loop_invariant (\\forall int j; 0 <= j && j < i; the_array[j] <= result);\n    //@ loop_invariant i > 0 ==> (\\exists int j; 0 <= j && j < i; the_array[j] == result);\n    //@ loop_invariant i == 0 ==> result == Integer.MIN_VALUE;\n    //@ decreasing the_array.length - i;\n    for (int i = 0; i < the_array.length; i++) {\n      if (result < the_array[i]) {\n        result = the_array[i];\n      }\n    }\n    \n    return result;\n  }\n",
        "methodStartingLine": 18,
        "methodEndingLine": 35,
        "jml": "//@ requires the_array.length > 0;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/testfiles/escJLS/TableMovieKeys.java",
        "code": "     public /*@ pure @*/ String get(){return value;} // <<< this is the line that generates the error.\n",
        "methodStartingLine": 24,
        "methodEndingLine": 24,
        "jml": "//@ requires str!=null;\n//@ ensures value == str; // should this be value.equals(str)?"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/anonymousCaptures/Captures.java",
        "code": "            public boolean p() { return xxxx != null; } \n",
        "methodStartingLine": 28,
        "methodEndingLine": 28,
        "jml": "//@ ensures \\result == (xxxx != null);  "
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/strongarm/interprocedural/B.java",
        "code": "    public int cmp(int a, int b){\n        \n\n        if(areEqual(a,b)){\n            return 0;\n        }\n        \n        if(a < b){\n            return -1;\n        }\n        \n        return 1;\n    }\n",
        "methodStartingLine": 25,
        "methodEndingLine": 37,
        "jml": "//@ requires true;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/gcdcalculator/GCDCalculator.java",
        "code": "        public static int div(int n, int d) { return n%d; }\n",
        "methodStartingLine": 11,
        "methodEndingLine": 11,
        "jml": "//@ requires d != 0;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/gcdcalculator/GCDCalculator.java",
        "code": "\tpublic int GCD(int num1, int num2)throws IllegalArgumentException {\n\n\t\tint gcd = 1; \n\t\t\n\n\t\tif(num1 == Integer.MIN_VALUE || num2 == Integer.MIN_VALUE)\n\t\t{\n\t\t\t throw new IllegalArgumentException(\"Input values cannot be the minimum integer values.\"); \n\t\t}\n\n\t\tAbsoluteValue a = new AbsoluteValue();\n\n\t \tnum1 = a.IntAbsolute(num1);\n\t\t\n\t\tnum2 = a.IntAbsolute(num2);\n\t\n\t\t//@ assume div(num1, gcd) == 0 && div(num2, gcd) == 0;\n\n\t\tif(num1 == 0 && num2 == 0){\t\n\t\t\tthrow new IllegalArgumentException(\"GCD(0, 0) is not defined.\");\n\t\t}\n\n\t\tif(num1 == 0 || num2 == 0){ \n\t\t    //@ show \\old(num1), \\old(num2), num1, num2, num1>num2, Integer.MAX_VALUE;\n\t\t\treturn (num1 > num2) ? num1 : num2;\n\t\t}\n\n\t\t//@ maintaining gcd <= num1 && gcd <= num2;\n\t\t//@ maintaining i > 0 && i <= num1 + 1 && i<= num2 + 1; \n\t\t//@ maintaining 0 < gcd && gcd <= i;\n\t\t//@ maintaining div(num1, gcd) == 0 && div(num2, gcd) == 0;\n\t\t//@ maintaining (\\forall int j; 1 <= j &&  j<i; div(num1, j) == 0 && div(num2, j) == 0 ==> j <= gcd);\n\t\t//@ decreases num1 - i; \n\t\tfor(int i = 1; i <= num1 && i <= num2; i++){\n            \t\tif(div(num1,i) == 0 && div(num2,i) == 0){\n               \t\t\tgcd = i;\n\t\t\t}\n        \t}\n\t\treturn gcd;\n\t} \n",
        "methodStartingLine": 39,
        "methodEndingLine": 78,
        "jml": "//@ requires num1 != Integer.MAX_VALUE && num1 != Integer.MAX_VALUE && num1 > Integer.MIN_VALUE + 1 && num2 > Integer.MIN_VALUE + 1;\n//@ requires num1 != 0 && num2 != 0;\n//@ ensures \\result > 0;\n//@ ensures div(tnum1,\\result) == 0;\n//@ ensures div(tnum2,\\result) == 0;\n//@ ensures (\\forall int i; i > \\result && i <= smaller; div(smaller,i) == 0 ==> div(greater,i) != 0);\n//@ requires num1 == 0 && num2 != 0;\n//@ requires num2 != Integer.MIN_VALUE;\n//@ ensures \\result == Math.abs(num2);\n//@ requires num1 != 0 && num2 == 0;\n//@ requires num1 != Integer.MIN_VALUE;\n//@ ensures \\result == \\lbl TNUM1a tnum1a;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/testfiles/testPath/data/TestPath.java",
        "code": "    public int m() { return 0; }\n",
        "methodStartingLine": 4,
        "methodEndingLine": 4,
        "jml": "//@ requires z ; // BAD"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/sfbug407/JMLArrayListExample.java",
        "code": "public void add(String s){\n    //@ reachable;\n    elements.add(s);\n    //@ reachable;\n}\n",
        "methodStartingLine": 11,
        "methodEndingLine": 15,
        "jml": "//@ ensures (elements.contains(s));"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/strongarm/examples/Dehexchar.java",
        "code": "    public static int dehexchar(char c) {\n        if (c >= '0' && c <= '9') {\n            return c - '0';\n        }\n        if (c >= 'A' && c <= 'F') {\n            return c - ('A' - 10);\n        }\n        if (c >= 'a' && c <= 'f') {\n            return c - ('a' - 10);\n        }\n        return -1;\n    }\n",
        "methodStartingLine": 4,
        "methodEndingLine": 15,
        "jml": "//@ requires true;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/gitbug260/JMLArrayListExample.java",
        "code": "public void add(String s){\n    elements.add(s);\n\n}\n",
        "methodStartingLine": 10,
        "methodEndingLine": 13,
        "jml": "//@ ensures (elements.contains(s));"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/escModelFields/EscModelFields.java",
        "code": "    public void increase(EscModelFields other) {\n        //@ ghost boolean b = (\\lbl SAME this == other);\n        rep = rep + other.rep;\n    }\n",
        "methodStartingLine": 21,
        "methodEndingLine": 24,
        "jml": "//@ requires v >= 0;\n//@ ensures value == v;\n//@ requires this != other;\n//@ ensures value == (other.value + \\old(value));"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/escModelFields/EscModelFields.java",
        "code": "    public EscModelFields add(EscModelFields other) {\n        int r = rep + other.rep;\n        return new EscModelFields(-r);\n    }\n",
        "methodStartingLine": 28,
        "methodEndingLine": 31,
        "jml": "//@ ensures \\result.value == (other.value + value);"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/strongarm/interprocedural/A15.java",
        "code": "    public int add(int a, int b){\n\tthis.FIELD = 3;\n\treturn a+b;\n    }\n",
        "methodStartingLine": 10,
        "methodEndingLine": 13,
        "jml": "//@ requires true;\n//@ ensures this.FIELD==3;\n//@ ensures \\result == a + b;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/strongarm/interprocedural/A15.java",
        "code": "    public int localTest(int a, int b){\n\treturn add(a, b);\n    }\n",
        "methodStartingLine": 16,
        "methodEndingLine": 18,
        "jml": "//@ requires true;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/strongarm/interprocedural/A16.java",
        "code": "    public int add(int a, int b){\n\tthis.FIELD = 3;\n\treturn a+b;\n    }\n",
        "methodStartingLine": 9,
        "methodEndingLine": 12,
        "jml": "//@ requires true;\n//@ ensures this.FIELD==3;\n//@ ensures \\result == a + b;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/strongarm/interprocedural/A16.java",
        "code": "    public int localTest(int a, int b){\n\tint tmp = add(a, b);\n\t\n\treturn tmp * 100;\n    }    \n",
        "methodStartingLine": 15,
        "methodEndingLine": 19,
        "jml": "//@ requires true;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/strongarm/interprocedural/A18.java",
        "code": "    public int add(int a, int b){\n\tthis.FIELD = 3;\n\treturn a+b;\n    }\n",
        "methodStartingLine": 9,
        "methodEndingLine": 12,
        "jml": "//@ requires true;\n//@ ensures this.FIELD==3;\n//@ ensures \\result == a + b;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/strongarm/interprocedural/A18.java",
        "code": "   public int localTest2(int a, int b){\n\tint tmp = add(a, b);\n\t\n\treturn tmp * this.FIELD;\n   }\n",
        "methodStartingLine": 16,
        "methodEndingLine": 20,
        "jml": "//@ requires true; "
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/strongarm/interprocedural/A17.java",
        "code": "    public int add(int a, int b){\n\tthis.FIELD = 3;\n\treturn a+b;\n    }\n",
        "methodStartingLine": 9,
        "methodEndingLine": 12,
        "jml": "//@ requires true;\n//@ ensures this.FIELD==3;\n//@ ensures \\result == a + b;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/strongarm/interprocedural/A17.java",
        "code": "    public int localTest3(int a, int b){\n\tint tmp = add(a, b);\n\t\n\tif(tmp > 100){\n\t    return tmp * 100;\n\t}else{\n\t    return tmp * 50;\t    \n\t}\n\t\n    }\n",
        "methodStartingLine": 16,
        "methodEndingLine": 25,
        "jml": "//@ requires true;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/gitbug673/FahrenheitToCelsius.java",
        "code": "\tpublic static float Temperature(float temperature) {\n\t\n       \n     \n        Celsius = ((temperature - 32)*5)/9;\n        //@ assume Double.isFinite(Celsius);\n     \n        System.out.println(\"temperature in Celsius = \" + Celsius);\n        //@ assume Float.isFinite((float)Celsius);\n\t    return (float)Celsius;\n    }\n",
        "methodStartingLine": 12,
        "methodEndingLine": 22,
        "jml": "//@ requires Float.isFinite(temperature);\n//@ ensures Double.isFinite(Celsius) && Float.isFinite(\\result);"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/gitbug677/CircleAreaNoWarning.java",
        "code": "    void calculateAreaNoWarning(int r)\n    {\n        int area = 3*(r*r);\n    }\n",
        "methodStartingLine": 4,
        "methodEndingLine": 7,
        "jml": "//@ requires r > 0; \n//@ requires 3*r*r <= Integer.MAX_VALUE;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/verifythis-2019-2/Challenge2A.java",
        "code": "    public int[] leftNeighbors(int[] input) {\n\n        int[] left = new int[input.length];\n        int[] stack = new int[input.length];\n        int height = 0;\n\n        //@ loop_invariant 0 <= x <= input.length;\n        //@ loop_invariant 0 <= height <= x;\n        //@ loop_invariant \\forall int i; 0 <= i < x; left[i] < i;  // so far, all left-neighbors are to the left\n        //@ loop_invariant \\forall int i; 0 <= i < x; left[i] != -1 ==> input[left[i]] < input[i]; // so far, all LNs have smaller values\n        //@ loop_invariant \\forall int i; 0 <= i < x; \\forall int j; left[i] < j < i; input[j] >= input[i]; // so far, all LNs are closest smaller values\n        //@ loop_invariant \\forall int i; 0 <= i < height; 0 <= stack[i] < x; // all stack values are legitimate positions\n        //@ loop_invariant x > 0 ==> height > 0;\n        //@ loop_invariant height > 0 ==> stack[height-1] == x-1; // x is always one more than top of stack (after the first iteration)\n        //@ loop_invariant \\forall int i; 1 <= i < height; \\forall int j; stack[i-1] < j < stack[i]; input[j] >= input[stack[i]]; // items missing from stack are larger than something to their right\n        //@ loop_invariant height > 0 ==> \\forall int j; 0 <= j < stack[0]; input[j] >= input[stack[0]]; // items missing from the stack in the first segment are larger than stack[0]\n        //@ loop_decreases input.length - x;\n        for (int x=0; x<input.length; x++) {\n            //@ loop_invariant 0 <= height <= x;\n            //@ loop_invariant \\forall int i; 0 <= i < x; left[i] < i;   // so far, all left-neighbors are to the left\n            //@ loop_invariant \\forall int i; 0 <= i < height; 0 <= stack[i] < x;  // so far, all LNs have smaller values\n            //@ loop_invariant \\forall int i; 1 <= i < height; \\forall int j; stack[i-1] < j < stack[i]; input[j] >= input[stack[i]];  // so far, all LNs are closest smaller values\n            //@ loop_invariant height > 0 ==> \\forall int j; stack[height-1] < j < x; input[j] >= input[x]; // Everything between top of stack and x is larger than va\n            //@ loop_invariant height == 0 ==> \\forall int j; 0 <= j < x; input[j] >= input[x]; // If height is 0, everything to the left is smaller than value at current position\n            //@ loop_decreases height;\n            while (height > 0 && input[stack[height-1]] >= input[x]) {\n                height--;\n            }\n\n            if (height == 0) {\n                left[x] = -1;\n            } else {\n                left[x] = stack[height-1];\n            }\n            stack[height++] = x;\n        }\n        return left;\n    }\n",
        "methodStartingLine": 11,
        "methodEndingLine": 48,
        "jml": "//@ ensures \\result.length == input.length;\n//@ ensures \\forall int i; 0 <= i < \\result.length; \\result[i] < i; // left-neighbor is to the left\n//@ ensures \\forall int i; 0 <= i < \\result.length; \\result[i] != -1 ==> input[\\result[i]] < input[i]; // LN has smaller value\n//@ ensures \\forall int i; 0 <= i < \\result.length; \\forall int j; \\result[i] < j < i; input[j] >= input[i]; // LN is closest smaller value"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/verifythis-2019-1/Challenge1A.java",
        "code": "    public int[] findMonotonicCutpoints(int[] a) {\n        \n        int[] cut = new int[a.length/2+2];\n        cut[0] = 0;\n        int lengthcut = 1;\n        int x = 0;\n        int y = 1;\n        int n = a.length;\n        //@ loop_invariant 1 <= y <= (x<n?n:n+1);\n        //@ loop_invariant 0 < lengthcut < y/2+2;\n        //@ loop_invariant cut[0] == 0; // begin-to-end so far\n        //@ loop_invariant y == x+1; // initial conditions for modified variables\n        //@ loop_invariant x == cut[lengthcut-1]; // initial conditions for modified variables\n        //@ loop_invariant \\forall int i; 0 <= i < lengthcut; 0 <= cut[i] <= y; // within bounds so far\n        //@ loop_invariant \\forall int i,j; 0 <= i < lengthcut-1 && cut[i] <= j < cut[i+1] - 1; a[cut[i]] < a[cut[i]+1] <==> a[j] < a[j+1]; // monotonic so far\n        // @ loop_invariant \\forall int i; 0 <= i < lengthcut-1; cut[i+1] < a.length ==> (a[cut[i]] < a[cut[i]+1] <=!=> a[cut[i+1]-1] < a[cut[i+1]]); // maximal so far\n        // @ loop_invariant \\forall int i; 0 <= i < lengthcut-1; cut[i] > 0 ==> (a[cut[i]] < a[cut[i]+1] <=!=> a[cut[i]-1] < a[cut[i]]); // maximal so far\n        // @ loop_invariant x > 0 ==> (a[x] < a[x+1] <=!=> a[x-1] < a[x]); // last segment maximal so far\n        //@ loop_writes x, y, lengthcut, cut[*];\n        //@ loop_decreases n - y;\n        while (y<n) {\n            // @ assume \\forall int i; 0 <= i < lengthcut-1; cut[i] > 0 ==> (a[cut[i]] < a[cut[i]+1] <=!=> a[cut[i]-1] < a[cut[i]]); // maximal so far\n            // @ assume x > 0 ==> (a[x] < a[x+1] <=!=> a[x-1] < a[x]); // last segment maximal so far\n\n            boolean increasing = a[x] < a[y];\n            //@ loop_invariant x < y <= n;  // initial conditions for modified variables\n            //@ loop_invariant 0 < lengthcut < y/2+2;\n            //@ loop_invariant \\forall int i; 0 <= i < lengthcut; 0 <= cut[i] <= y; // within bounds so far\n            //@ loop_invariant \\forall int j; x <= j < y-1; (a[x] < a[x+1] <==> a[j] < a[j+1]); // last segment monotonic so far\n            //@ loop_writes y;\n            //@ loop_decreases n - y;\n            while (y < n && (a[y-1] < a[y] == increasing)) y = y + 1;\n            // @ assert \\forall int i; 0 <= i < lengthcut-1; cut[i] > 0 ==> (a[cut[i]] < a[cut[i]+1] <=!=> a[cut[i]-1] < a[cut[i]]); // maximal so far\n            cut[lengthcut++] = y;\n            //@ assert \\forall int i; 0 <= i < lengthcut; 0 <= cut[i] <= y; // within bounds so far\n            x = y;\n            y = x + 1;\n\n            // @ assert \\forall int i; 0 <= i < lengthcut-1; cut[i] > 0 ==> (a[cut[i]] < a[cut[i]+1] <=!=> a[cut[i]-1] < a[cut[i]]); // maximal so far\n        }\n        if (x < n) {\n            cut[lengthcut++] = n;\n        }\n        int[] newcut = new int[lengthcut];\n        System.arraycopy(cut, 0, newcut, 0, lengthcut);\n        return newcut;\n    }\n",
        "methodStartingLine": 20,
        "methodEndingLine": 66,
        "jml": "//@ requires a.length >= 1;\n//@ ensures \\result.length <= a.length/2 + 2; // non-empty\n//@ ensures \\result[0] == 0 && \\result[\\result.length-1] == a.length; // begin-to-end\n//@ ensures \\forall int i; 0 <= i < \\result.length; 0 <= \\result[i] <= a.length; // within-bounds"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/escAssignableBug/AssignableBug.java",
        "code": "  public void test(Position p) {\n    piece.setPosition(p);\n    //@ assert inRange(piece.position);\n  }\n",
        "methodStartingLine": 20,
        "methodEndingLine": 23,
        "jml": "//@ requires pp.position.x >= 0 && pp.position.x < xSize;\n//@ ensures piece == pp;\n//@ requires inRange(p);"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/escAssignableBug/AssignableBug.java",
        "code": "  public boolean inRange(Position p) {\n      return p.x >= 0 && p.x < xSize;\n  }\n",
        "methodStartingLine": 27,
        "methodEndingLine": 29,
        "jml": "//@ ensures \\result == ( p.x >= 0 && p.x < xSize );"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/escAssignableBug/AssignableBug.java",
        "code": "   public void setPosition(Position p) {\n      position = p;\n   }\n",
        "methodStartingLine": 44,
        "methodEndingLine": 46,
        "jml": "//@ ensures position == p;\n//@ ensures position == p;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/gitbug673/FahrenheitToCelsius2.java",
        "code": "\tpublic static double Temperature2(double temperature) {\n\t\n       \n     \n        Celsius = ((temperature - 32)*5)/9;\n     \n        System.out.println(\"temperature in Celsius = \" + Celsius);\n        return Celsius;\n    }\n",
        "methodStartingLine": 13,
        "methodEndingLine": 21,
        "jml": "//@ requires Double.isFinite(temperature);\n//@ ensures Math.abs(\\result - (((temperature - 32)*5)/9)) <= 0.1;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/buggyPrimeNumbers/PrimeNumbers.java",
        "code": "        public static boolean div(int n, int d) { return n%d == 0; }\n",
        "methodStartingLine": 9,
        "methodEndingLine": 9,
        "jml": "//@ requires d != 0;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/buggyPrimeNumbers/PrimeNumbers.java",
        "code": "        public void Prime(int n)\n       {\n          int status = 1, num = 3, count, j;\n          primeArray = new int[n];\n          \n          if (n >= 1)\n          {\n             System.out.println(\"First \"+n+\" prime numbers are:\");\n             System.out.println(2);\n             primeArray[0] = 2;\n          }\n\t //@ assert num == 3;\n\t //@ assert primeArray[0] == 2;\n\t //@ assert num != primeArray[0];\n         //@ ghost int maxnumber = Integer.MAX_VALUE;\n\t //@ ghost int count_counter = 2;\n\n         //@ maintaining (\\forall int i, k; 0 <= i && i < count-1 && 2 <= k && k <= primeArray[i]/2; !div(primeArray[i],k));\n          //@ maintaining (\\forall int i, k; 0 <= i && i < count-1 && 0 <= k && k < count-1 && i != k; primeArray[i] != primeArray[k]);\n          //@ maintaining (\\forall int i; 0 <= i && i < count-1; primeArray[i] < num); // Added this line to Amirfarhad's submission\n         //@ maintaining num >= 3;\n         //@ maintaining count >= 2 && count <= n + 1;\n\t //@ maintaining count_counter == count;\n\t //@ loop_invariant status == 1;\n         //@ decreases maxnumber - num;\n          for (count = 2; count <= n;)\n          { \n\t     \n             //@ maintaining j> 1 && j <= num/2 + 1;\n\t     //@ maintaining status == 1;\n\t     //@ maintaining (\\forall int k; 0 <= k && k < count - 1; num != primeArray[k]);\n\t     //@ maintaining (\\forall int k; 2 <= k && k < j; !div(num,k));\n             //@ decreases num - j;\n             for (j = 2; j <= num/2; j++)\n             { \n                if (div(num,j))\n                {\n                   //@ assert div(num,j);\n                   status = 0;\n                   break;\n                }\n                //@ assert !div(num,j);\n             }\n\n             if (status != 0)\n             {  \n                //@ assert status != 0;\n                primeArray[count -1] = num;\n\t\t//@ assert (\\forall int k; 0 <= k && k < count - 1; num != primeArray[k]);\n                //@ assert (\\forall int i; i >= 2 && i <= num/2; !div(num,i));\n\t\t//@ assert primeArray[count -1] == num;\n                System.out.println(\"prime is : \"+num); \n                count++;\n\t\t//@ set count_counter = count_counter + 1;\n             }\n\t    \n             status = 1;\n\t     //@ assume num < Integer.MAX_VALUE;\n             num++;\n          }  \n       }\n",
        "methodStartingLine": 17,
        "methodEndingLine": 77,
        "jml": "//@ requires 1 <= n && n < Integer.MAX_VALUE;\n//@ ensures primeArray.length == n;\n//@ ensures (\\forall int i, j; 0 <= i && i < primeArray.length && 2 <= j && j <= primeArray[i]/2; !div(primeArray[i],j));\n//@ ensures (\\forall int i,j; 0 <= i && i < primeArray.length && 0 <= j && j < primeArray.length && i != j; primeArray[i] != primeArray[j]);"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/esc2DTranspose/TransposeMatrix.java",
        "code": "       public int[][] transposeMat1(int[][] matrix)\n       {\n          int m, n, p, q;\n\n          m = matrix.length;\n          n = matrix[0].length;\n     \n          int[][] transpose = new int[n][m];\n          //@ assert \\forall int i; 0 <= i < n; transpose[i] != null && transpose[i].length == m;\n          //@ assume \\forall int e; 0<=e<n; \\forall int k; 0 <= k < n; (e != k ==> transpose[e] != transpose[k]);\n          //@ assume \\forall int e; 0<=e<n; (\\forall int k; 0 <= k < m; transpose[e] != matrix[k]);\n\n          //@ maintaining 0 <= c <= n;\n          //@ maintaining \\forall int i; 0<=i<c; (\\forall int j; 0 <= j < m ; transpose[i][j] == matrix[j][i]);\n          //@ decreases n - c;\n          for (int c = 0; c < n; c++){\n              //@ maintaining 0 <= d <= m;\n              //@ maintaining (\\forall int j; 0 <= j < d; transpose[c][j] == matrix[j][c]);\n              //@ decreases m - d;\n              for (int d = 0; d < m; d++) {\n                  transpose[c][d] = matrix[d][c];\n              }\n          }\n          return transpose;\n       }\n",
        "methodStartingLine": 11,
        "methodEndingLine": 35,
        "jml": "//@ requires matrix.length > 0;\n//@ requires matrix[0].length > 0;\n//@ requires (\\forall int k; 0 <= k < matrix.length; matrix[k] != null);\n//@ requires (\\forall int k; 0 <= k < matrix.length; matrix[0].length == matrix[k].length);\n//@ ensures (\\forall int i, j; 0 <= i < matrix.length && 0 <= j < matrix[0].length; matrix[i][j] == \\result[j][i]);\n//@ ensures matrix.length == \\result[0].length;\n//@ ensures matrix[0].length == \\result.length;\t"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/esc2DTranspose/TransposeMatrix.java",
        "code": "       public int[][] transposeMat2(int[][] matrix)\n       {\n          int m, n;\n\n          m = matrix.length;\n          n = matrix[0].length;\n     \n          int[][] transpose = new int[n][m];\n          //@ assert transpose != null && transpose.length == n;\n          //@ assert n > 0 ==> transpose[0] != null;\n          //@ assume n > 0 ==> transpose[0].length == n;\n          //@ assume \\forall int i; 0 <= i < n; transpose[i] != null && transpose[i].length == m;\n          //@ assume \\forall int e; 0<=e<n; \\forall int k; 0 <= k < n; (e != k ==> transpose[e] != transpose[k]);\n\n          //@ maintaining 0 <= d && d <= n;\n          //@ maintaining (\\forall int j, i; 0 <= j < matrix.length && 0 <= i < d; transpose[i][j] == matrix[j][i]);\n          //@ decreases n - d;\n          for (int d = 0; d < n; d++) {\n              //@ maintaining 0 <= c && c <= m;\n              //@ maintaining (\\forall int j; 0 <= j < c; transpose[d][j] == matrix[j][d]);\n              //@ decreases m - c;\n              for (int c = 0; c < m; c++){\n                  transpose[d][c] = matrix[c][d];  \n              }\n          }\n          return transpose;\n       }\n",
        "methodStartingLine": 43,
        "methodEndingLine": 69,
        "jml": "//@ requires matrix.length > 0;\n//@ requires (\\forall int k; 0 <= k && k < matrix.length; matrix[k] != null);\n//@ requires (\\forall int k; 0 <= k && k < matrix.length; matrix[0].length == matrix[k].length);\n//@ ensures matrix.length == \\result[0].length;\n//@ ensures matrix[0].length == \\result.length;  \n//@ ensures (\\forall int i, j; 0 <= i < matrix.length && 0 <= j < matrix[0].length; matrix[i][j] == \\result[j][i]);"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/strongarm/examples/RowToString.java",
        "code": "    public static String rowToString(String ja) {\n      StringBuilder sb = new StringBuilder();\n      for (int i = 0; i < ja.length(); i += 1) {\n          if (i > 0) {\n              sb.append(',');\n          }\n          Object object = null;\n          if (object != null) {\n              String string = object.toString();\n              if (string.length() > 0 && (string.indexOf(',') >= 0 ||\n                      string.indexOf('\\n') >= 0 || string.indexOf('\\r') >= 0 ||\n                      string.indexOf(0) >= 0 || string.charAt(0) == '\"')) {\n                  sb.append('\"');\n                  int length = string.length();\n                  for (int j = 0; j < length; j += 1) {\n                      char c = string.charAt(j);\n                      if (c >= ' ' && c != '\"') {\n                          sb.append(c);\n                      }\n                  }\n                  sb.append('\"');\n              } else {\n                  sb.append(string);\n              }\n          }\n      }\n      sb.append('\\n');\n      return sb.toString();\n      \n  }\n",
        "methodStartingLine": 5,
        "methodEndingLine": 34,
        "jml": "//@ requires true;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/buggyPalindrome/buggyPalindrome.java",
        "code": "   public boolean palindromeCheck(String original)\n   {\n      reverse = \"\";\n      // @ assume \\invariant_for(original);\n      int length = original.length();\n    \n      //@ ghost int i_counter;\n      //@ set i_counter = 0;\n      //@ maintaining -1 <= i < original.length(); \n      //@ maintaining \\forall int k; 0<=k<i_counter; reverse.charAt(k) == original.charAt(length-1-k);\n      //@ decreases i;\n      //@ maintaining reverse != null && reverse instanceof String && i_counter == reverse.length();\n      //@ maintaining i_counter + i + 1 == length;\n      // @ maintaining \\invariant_for(reverse);\n      for (int i = length - 1; i >= 0; i--){\n          //@ assert \\forall int k; 0<=k<i_counter; reverse.charAt(k) == original.charAt(length-1-k);\n          //@ assert reverse.length() == i_counter;\n         reverse = reverse + original.charAt(i);\n         //@ assert reverse.length() == i_counter+1;\n         //@ assert reverse.charAt(i_counter) == original.charAt(length-1-i_counter);\n         //@ assert \\forall int k; 0<=k<=i_counter; reverse.charAt(k) == original.charAt(length-1-k);\n         // @ assert reverse.charAt(i_counter) == (original.charAt(reverse.length() - 1));\n         //@ set i_counter = i_counter + 1;\n       }\n      //@ assert i_counter == length; \n\n         \n      if (reverse.equals(original)){\n         System.out.println(\"The string is a palindrome.\");\n     return true;\n    }\n      else{\n         System.out.println(\"The string isn't a palindrome.\");\n     return false;\n    }     \n   }\n",
        "methodStartingLine": 9,
        "methodEndingLine": 44,
        "jml": "//@ ensures \\result <==> reverse.equals(original);"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/buggyPalindrome/buggyPalindrome.java",
        "code": "   public boolean palindromeCheckExc(String original)\n   {\n      \n       reverse = \"\";\n       // @ assume \\invariant_for(original);\n      int length = original.length();\n    \n      //@ ghost int i_counter;\n      //@ set i_counter = 0;\n      //@ maintaining i >= -1 && i < original.length(); \n      //@ decreases i;\n      //@ maintaining i_counter + i + 1 == length;\n      for (int i = length - 1; i >= 0; i--){\n         reverse = reverse + original.charAt(i-50); // Won't fail\n         // assert original.charAt(i) == (reverse.charAt(reverse.length() - 1));\n         //@ set i_counter = i_counter + 1;\n       }\n      //@ assert i_counter == length; \n\n         \n      if (reverse.equals(original)){\n         System.out.println(\"The string is a palindrome.\");\n     return true;\n    }\n      else{\n         System.out.println(\"The string isn't a palindrome.\");\n     return false;\n    }     \n   }\n",
        "methodStartingLine": 47,
        "methodEndingLine": 75,
        "jml": "//@ ensures \\result <==> reverse.equals(original);"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/buggyPalindrome/buggyPalindrome.java",
        "code": "   public boolean palindromeCheckCatch(String original)\n   {\n      \n      int length = original.length();\n    \n      //@ ghost int i_counter;\n      //@ set i_counter = 0;\n      //@ maintaining i >= -1 && i < original.length(); \n      //@ decreases i;\n      //@ maintaining i_counter + i + 1 == length;\n      for (int i = length - 1; i >= 0; i--){\n         reverse = reverse + original.charAt(i-50); // Fails\n         //@ assume reverse instanceof String;\n     // assert original.charAt(i) == (reverse.charAt(reverse.length() - 1));\n     //@ set i_counter = i_counter + 1;\n       }\n      //@ assert i_counter == length; \n\n         \n      if (reverse.equals(original)){\n         System.out.println(\"The string is a palindrome.\");\n     return true;\n    }\n      else{\n         System.out.println(\"The string isn't a palindrome.\");\n     return false;\n    }     \n   }\n",
        "methodStartingLine": 79,
        "methodEndingLine": 106,
        "jml": "//@ ensures \\result <==> reverse.equals(original);"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/buggyCalculator/buggyCalculator.java",
        "code": "      public int calculate(int num1, int num2, char operator) {\n\n          int output;\n\n      \n          switch(operator)\n          {\n              case '+':\n                  output = num1 + num2;\n                  break;\n\n              case '-':\n                  output = num1 - num2;\n                  break;\n\n              case '*':\n                  output = num1 * num2;\n                  break;\n\n              case '/':\n                  output = num1 / num2;\n          break;\n\n          case '%':\n                  output = num1 % num2;\n                  break;\n\n//          case '&':\n//                  output = num1 & num2;\n//                  break;\n//          \n//          case '|':\n//                  output = num1 | num2;\n//                  break;\n//           \n//              case '^':\n//                  output = num1 ^ num2;\n//              break;\n\n              default:\n                  System.err.println(\"You entered a not defined operator\");\n                  return -1;\n          }\n          return output;\n      }\n",
        "methodStartingLine": 63,
        "methodEndingLine": 107,
        "jml": "//@ requires operator == '+' || operator == '*' || operator == '-' || operator == '/' || operator == '%' || operator == '&' || operator == '|' || operator == '^';\n//@ requires operator == '+';\n//@ requires num1 + num2 <= Integer.MAX_VALUE;\n//@ requires num1 + num2 >= Integer.MIN_VALUE;\n//@ ensures \\result == num1 + num2;\n//@ requires operator == '*'; \n//@ requires num1 * num2 <= Integer.MAX_VALUE;\n//@ requires num1 * num2 >= Integer.MIN_VALUE;\n//@ ensures \\result == num1 * num2;\n//@ requires operator == '-'; \n//@ requires num1 - num2 <= Integer.MAX_VALUE;\n//@ requires num1 - num2 >= Integer.MIN_VALUE;\n//@ ensures \\result == num1 - num2;\n//@ requires operator == '/'; \n//@ requires num2 != 0;\n//@ requires num1 / num2 <= Integer.MAX_VALUE;\n//@ requires num1 / num2 >= Integer.MIN_VALUE;\n//@ ensures \\result == (num1 / num2);\n//@ requires operator == '%'; \n//@ requires num2 != 0;\n//@ requires num1 % num2 <= Integer.MAX_VALUE;\n//@ requires num1 % num2 >= Integer.MIN_VALUE;\n//@ ensures \\result == (num1 % num2);\n//@ requires operator != '+' && operator != '-' && operator != '*' && operator != '/' && operator != '%' && operator != '&' && operator != '^' && operator != '|';\n//@ ensures \\result == -1;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/buggyCalculator/buggyCalculator.java",
        "code": "        public int calculateBad(int num1, int num2, char operator) {\n\n            int output;\n\n        \n            switch(operator)\n            {\n                case '+':\n                    output = num1 - num2;\n                    break;\n\n                case '-':\n                    output = num1 - num2;\n                    break;\n\n                case '*':\n                    output = num1 * num2;\n                    break;\n\n                case '/':\n                    output = num1 / num2;\n                    break;\n\n            case '%':\n                    output = num1 % num2;\n                    break;\n\n            case '&':\n                    output = num1 & num2;\n                    break;\n            \n                 case '|':\n                    output = num1 | num2;\n                    break;\n             \n                case '^':\n                    output = num1 ^ num2;\n                break;\n\n                default:\n                    System.err.println(\"You entered a not defined operator\");\n                    return -1;\n            }\n            return output;\n        }\n",
        "methodStartingLine": 166,
        "methodEndingLine": 210,
        "jml": "//@ requires operator == '+' || operator == '*' || operator == '-' || operator == '/' || operator == '%' || operator == '&' || operator == '|' || operator == '^';\n//@ requires operator == '+';\n//@ requires num1 + num2 <= Integer.MAX_VALUE;\n//@ requires num1 + num2 >= Integer.MIN_VALUE;\n//@ ensures \\result == num1 + num2;\n//@ requires operator == '*'; \n//@ requires num1 * num2 <= Integer.MAX_VALUE;\n//@ requires num1 * num2 >= Integer.MIN_VALUE;\n//@ ensures \\result == num1 * num2;\n//@ requires operator == '-'; \n//@ requires num1 - num2 <= Integer.MAX_VALUE;\n//@ requires num1 - num2 >= Integer.MIN_VALUE;\n//@ ensures \\result == num1 - num2;\n//@ requires operator == '/'; \n//@ requires num2 != 0;\n//@ requires num1 / num2 <= Integer.MAX_VALUE;\n//@ requires num1 / num2 >= Integer.MIN_VALUE;\n//@ ensures \\result == (num1 / num2);\n//@ requires operator == '%'; \n//@ requires num2 != 0;\n//@ requires num1 % num2 <= Integer.MAX_VALUE;\n//@ requires num1 % num2 >= Integer.MIN_VALUE;\n//@ ensures \\result == (num1 % num2);\n//@ requires operator == '&';\n//@ ensures \\result == (num1 & num2);\n//@ requires operator == '|';\n//@ ensures \\result == (num1 | num2);\n//@ requires operator == '^';\n//@ ensures \\result == (num1 ^ num2);\n//@ requires operator != '+' && operator != '-' && operator != '*' && operator != '/' && operator != '%' ;\n//@ ensures \\result == -1;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/gcdcalculator/GCDCalculatorMain.java",
        "code": "\tpublic static void main(String[] args){\n\t\ttry{ \n\t\t\tint num1, num2, gcd;\n\t\t\tGCDCalculator a = new GCDCalculator();\n\t\t\tScanner input = new Scanner(System.in);\n\t\t\t\n\t\t\tSystem.out.println(\"Enter the first Number.\");\n\t\t\tnum1 = input.nextInt();\n\n\t\t\tSystem.out.println(\"Enter the first Number.\");\n\t\t\tnum2 = input.nextInt();\n\n\t\t\tif(num1 == (Integer.MAX_VALUE) || num2 == (Integer.MAX_VALUE)){\n\t\t\t\tSystem.err.println(\"Number can not be Max Integer Values.\");\n\t\t\t\treturn;\n\t\t\t}\n \n\t\t\t\t\t\t \t\t\n\t\t\tif((num1 == 0 && num2 ==0) || num1 <= (Integer.MIN_VALUE + 1) || num2 <= (Integer.MIN_VALUE + 1)) {\n\t\t\t\tSystem.err.println(\"Both numbers cannot be zero. Or any of the be the Minimum Integer number.\");\n\t\t\t\treturn;\n\t\t\t}\n\n\n\t\t\tgcd = a.GCD(num1, num2);\n\n\t\t\tSystem.out.println(\"GCD of \"+ num1 + \" and \" + num2 + \" is equal to \" + gcd);\n\t\t}\n\t\tcatch (Exception e){\n\t\t    //@ assume \\invariant_for(System.err);\n\t\t    //@ assume System.err.isOpen;\n\t\t\tSystem.err.println(\"Scanner Exception!\");\n                        e.printStackTrace(System.err);\n\t\t\treturn;\n\t\t}\n\n\t}\n",
        "methodStartingLine": 7,
        "methodEndingLine": 43,
        "jml": "//@ requires System.out.isOpen && System.err.isOpen;\n//@ requires \\invariant_for(System.out);\n//@ requires \\invariant_for(System.err);"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/testfiles/escModelFields/EscModelFields.java",
        "code": "    public void increase(EscModelFields other) {\n        //@ ghost boolean b = (\\lbl SAME this == other);\n        rep = rep + other.rep;\n    }\n",
        "methodStartingLine": 21,
        "methodEndingLine": 24,
        "jml": "//@ requires v >= 0;\n//@ ensures value == v;\n//@ requires this != other;\n//@ ensures value == (other.value + \\old(value));"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/testfiles/escModelFields/EscModelFields.java",
        "code": "    public EscModelFields add(EscModelFields other) {\n        int r = rep + other.rep;\n        return new EscModelFields(-r);\n    }\n",
        "methodStartingLine": 28,
        "methodEndingLine": 31,
        "jml": "//@ ensures \\result.value == (other.value + value);"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/esc2DTranspose/TransposeMatrixOrig.java",
        "code": "       public int[][] transposeMat(int[][] matrix)\n       {\n          int m, n, p, q;\n\n          m = matrix.length;\n          n = matrix[0].length;\n     \n          int transpose[][] = new int[n][m];\n          //@ assume \\forall int i; 0<=i<n; transpose[i] != null && transpose[i].length == m;\n          //@ assume \\forall int i; 0<=i<n; \\forall int j; 0<=j<n; i != j ==> transpose[i] != transpose[j];\n\n          //@ assert transpose.length == n;\n          //@ assert (\\forall int k; 0 <= k && k < n; transpose[k] != null && transpose[k].length == m);\n\t  //@ maintaining (\\forall int i, j; i >= 0 && j >= 0 && i < c && j < n ; matrix[i][j] == transpose[j][i]);\n          //@ maintaining c >= 0 && c <= m;\n\t  //@ decreases m - c;\n          for (int c = 0; c < m; c++){\n\t     //@ maintaining (\\forall int j; 0 <= j && j < d; matrix[c][j] == transpose[j][c]);\n             //@ maintaining (\\forall int k; 0 < k && k < matrix.length; matrix[k].length == n);\n             //@ maintaining transpose.length == n;\n             //@ maintaining (\\forall int k; 0 < k && k < transpose.length; transpose[k].length == m);\n\t     //@ maintaining 0 <= d && d <= n;\n\t     //@ decreases n - d;\n             //@ maintaining d < n ==> (transpose[d].length == m);\n\t     //@ maintaining 0 <= c && c < m;\n             for (int d = 0; d < n; d++) {\n\t     //@ assert d < transpose.length && transpose.length == n; \n\t     //@ assert d >= 0;\n\t     //@ assert c <  transpose[0].length && transpose[0].length == m;  \n\t\t\n             transpose[d][c] = matrix[c][d];  \n\t     //@ assert transpose[d][c] == matrix[c][d];              \n             }\n          }\n\t  return transpose;\n       }\n",
        "methodStartingLine": 10,
        "methodEndingLine": 45,
        "jml": "//@ requires matrix.length > 0;\n//@ requires (\\forall int k; 0 <= k && k < matrix.length; matrix[k] != null);\n//@ requires (\\forall int k; 0 <= k && k < matrix.length; matrix[0].length == matrix[k].length);\n//@ ensures (\\forall int i, j; i >= 0 && j >= 0 && i < matrix.length && j < matrix[0].length; matrix[i][j] == \\result[j][i]);\n//@ ensures matrix.length == \\result[0].length;\n//@ ensures matrix[0].length == \\result.length;\t"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/testfiles/escAssignableBug/AssignableBug.java",
        "code": "  public void test(Position p) {\n    piece.setPosition(p);\n    //@ assert inRange(piece.position);\n  }\n",
        "methodStartingLine": 20,
        "methodEndingLine": 23,
        "jml": "//@ requires pp.position.x >= 0 && pp.position.x < xSize;\n//@ ensures piece == pp;\n//@ requires inRange(p);"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/testfiles/escAssignableBug/AssignableBug.java",
        "code": "  public boolean inRange(Position p) {\n      return p.x >= 0 && p.x < xSize;\n  }\n",
        "methodStartingLine": 27,
        "methodEndingLine": 29,
        "jml": "//@ ensures \\result == ( p.x >= 0 && p.x < xSize );"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/testfiles/escAssignableBug/AssignableBug.java",
        "code": "   public void setPosition(Position p) {\n      position = p;\n   }\n",
        "methodStartingLine": 44,
        "methodEndingLine": 46,
        "jml": "//@ ensures position == p;\n//@ ensures position == p;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/escDoublyLinkedList/DoublyLinkedList.java",
        "code": "  public T getValue()\n  {\n    return my_value;\n  }\n",
        "methodStartingLine": 80,
        "methodEndingLine": 83,
        "jml": "//@ requires (a_next != null ==> a_next != a_prev);"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/escDoublyLinkedList/DoublyLinkedList.java",
        "code": "  public void setValue(/*@ nullable */ final T a_value)\n  {\n    my_value = a_value;\n  }\n",
        "methodStartingLine": 94,
        "methodEndingLine": 97,
        "jml": "//@ ensures my_value == a_value;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/escDoublyLinkedList/DoublyLinkedList.java",
        "code": "  public void setPrev(/*@ nullable */ final DoublyLinkedList<T> a_doubly_linked_list)\n  {\n    // A doubly linked list's next is not itself.\n    assert a_doubly_linked_list != this : \"Attempt to set prev to self.\";\n    my_prev = a_doubly_linked_list;\n  }\n",
        "methodStartingLine": 122,
        "methodEndingLine": 127,
        "jml": "//@ requires this != a_doubly_linked_list && (my_next != null ==> a_doubly_linked_list != my_next);\n//@ ensures my_prev == a_doubly_linked_list;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/escDoublyLinkedList/DoublyLinkedList.java",
        "code": "  public void setNext(/*@ nullable */ final DoublyLinkedList<T> a_doubly_linked_list)\n  {\n    // A doubly linked list's prev is not itself.\n    assert a_doubly_linked_list != this : \"Attempt to set next to self.\";\n    my_next = a_doubly_linked_list;\n  }\n",
        "methodStartingLine": 152,
        "methodEndingLine": 157,
        "jml": "//@ requires this != a_doubly_linked_list && (a_doubly_linked_list != null ==> a_doubly_linked_list != my_prev);\n//@ ensures my_next == a_doubly_linked_list;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/escDoublyLinkedList/DoublyLinkedList.java",
        "code": "  public void remove()\n  {\n    if (my_prev != null)\n    {\n      my_prev.setNext(my_next);\n    }\n    if (my_next != null)\n    {\n      my_next.setPrev(my_prev);\n    }\n  }\n",
        "methodStartingLine": 169,
        "methodEndingLine": 179,
        "jml": "//@ requires my_prev != null && my_next != null;\n//@ requires my_prev != my_next.my_next;\n//@ requires my_prev.my_prev != my_next;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/buggyRandomNumbers/buggyRandomNumber.java",
        "code": "   public ArrayList<Integer> Generate(int range, int repeat){\n      ArrayList<Integer> randomNumbers = new ArrayList<Integer>();\n      int counter, selected = 0;\n      Random rnum = new Random();\n      System.out.println(\"Random Numbers:\");\n\n      //@ decreases repeat - counter;\n      //@ maintaining (\\lbl RS randomNumbers.size()) == (\\lbl CN counter)-1;\n      //@ maintaining randomNumbers.size() <= repeat;   \n      //@ maintaining 0 <= selected && selected < range; \n      //@ maintaining (\\forall int i; 0 <= i && i < randomNumbers.size(); 0 <= randomNumbers.get(i) && randomNumbers.get(i) <range);\n      for (counter = 1; counter <= repeat; counter++) {\n     selected = rnum.nextInt(range);\n     randomNumbers.add(selected);\n     //@ assert randomNumbers.get(randomNumbers.size()-1) == selected;\n     //@ assert 0 <= randomNumbers.get(randomNumbers.size()-1);\n     //@ assert randomNumbers.get(randomNumbers.size()-1) < range;\n      }\n      //@ assert randomNumbers.size() == repeat && counter-1 == repeat;\n      return randomNumbers;\n    }\n",
        "methodStartingLine": 13,
        "methodEndingLine": 33,
        "jml": "//@ requires range > 0;\n//@ requires repeat >= 0;\n//@ ensures (\\forall int k; 0 <= k && k < \\result.size() ; \\result.get(k) >= 0 && \\result.get(k) < range);\n//@ ensures repeat == \\result.size();"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/buggyRandomNumbers/buggyRandomNumber.java",
        "code": "   public ArrayList<Integer> GenerateBad(int range, int repeat){\n      ArrayList<Integer> randomNumbers = new ArrayList<Integer>();\n      int counter, selected = 0;\n      Random rnum = new Random();\n      System.out.println(\"Random Numbers:\");\n\n      //@ decreases repeat - counter;\n      //@ maintaining randomNumbers.size() == counter-1;\n      //@ maintaining randomNumbers.size() <= repeat;   \n      //@ maintaining 0 <= selected && selected < range; \n      //@ maintaining (\\forall int i; 0 <= i && i < randomNumbers.size(); 0 <= randomNumbers.get(i) && randomNumbers.get(i) <range);\n      for (counter = 1; counter <= repeat; counter++) {\n     selected = rnum.nextInt(range);\n     randomNumbers.add(selected);\n     //@ assert randomNumbers.get(randomNumbers.size()-1) == selected;\n     //@ assert 0 <= randomNumbers.get(randomNumbers.size()-1);\n     //@ assert randomNumbers.get(randomNumbers.size()-1) < range;\n      }\n      //@ assert randomNumbers.size() == repeat && counter-1 == repeat;\n      return randomNumbers;\n    }\n",
        "methodStartingLine": 40,
        "methodEndingLine": 60,
        "jml": "//@ requires range > 0;\n//@ requires repeat >= 0;\n//@ ensures (\\forall int k; 0 <= k && k < \\result.size() ; \\result.get(k) >= 0 && \\result.get(k) < range);\n//@ ensures repeat == \\result.size();"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/implicitIteration/ImplicitIterationDemo.java",
        "code": "\t   void check(Object v) { noNulls =  noNulls && (v!=null); }\n",
        "methodStartingLine": 11,
        "methodEndingLine": 11,
        "jml": "//@ ensures noNulls == (\\old(noNulls) && v!=null);"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/implicitIteration/ImplicitIterationDemo.java",
        "code": "\t   void checkA(/*@ non_null*/Boolean v) { allTrue =  allTrue && v; }\n",
        "methodStartingLine": 15,
        "methodEndingLine": 15,
        "jml": "//@ ensures allTrue == (\\old(allTrue) && v);"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/implicitIterationA/ImplicitIterationDemo.java",
        "code": "   void check(boolean v) { allTrue =  allTrue && v; }\n",
        "methodStartingLine": 9,
        "methodEndingLine": 9,
        "jml": "//@ ensures allTrue == (\\old(allTrue) && v);"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/escRecursiveInvariant/RecursiveInvariant.java",
        "code": "    public void t() {}\n",
        "methodStartingLine": 9,
        "methodEndingLine": 9,
        "jml": "//@ requires m();"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/src/org/jmlspecs/openjmltest/testcases/scanner.java",
        "code": "    public void helpFailure(String failureMessage, String s, ITokenKind[] list, /*@nullable*/ int[] positions, int numErrors) {\n        boolean failed = false;\n        try {\n            helpScanner(s,list,positions,numErrors);\n        } catch (AssertionError a) {\n            failed = true;\n            assertEquals(\"Failure report wrong\",failureMessage,a.getMessage());\n        }\n        if (!failed) fail(\"Test harness failed to report an error\");\n    }\n",
        "methodStartingLine": 62,
        "methodEndingLine": 71,
        "jml": "//@ requires positions != null && list != null ==> positions.length == list.length*2;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/testfiles/escDoublyLinkedList/DoublyLinkedList.java",
        "code": "  public T getValue()\n  {\n    return my_value;\n  }\n",
        "methodStartingLine": 80,
        "methodEndingLine": 83,
        "jml": "//@ requires a_prev != this && a_next != this && (a_next != null ==> a_next != a_prev);"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/testfiles/escDoublyLinkedList/DoublyLinkedList.java",
        "code": "  public void setValue(/*@ nullable */ final T a_value)\n  {\n    my_value = a_value;\n  }\n",
        "methodStartingLine": 94,
        "methodEndingLine": 97,
        "jml": "//@ ensures my_value == a_value;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/testfiles/escDoublyLinkedList/DoublyLinkedList.java",
        "code": "  public void setPrev(/*@ nullable */ final DoublyLinkedList<T> a_doubly_linked_list)\n  {\n    // A doubly linked list's next is not itself.\n    assert a_doubly_linked_list != this : \"Attempt to set prev to self.\";\n    my_prev = a_doubly_linked_list;\n  }\n",
        "methodStartingLine": 122,
        "methodEndingLine": 127,
        "jml": "//@ requires this != a_doubly_linked_list && (my_next != null ==> a_doubly_linked_list != my_next);\n//@ ensures my_prev == a_doubly_linked_list;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/testfiles/escDoublyLinkedList/DoublyLinkedList.java",
        "code": "  public void setNext(/*@ nullable */ final DoublyLinkedList<T> a_doubly_linked_list)\n  {\n    // A doubly linked list's prev is not itself.\n    assert a_doubly_linked_list != this : \"Attempt to set next to self.\";\n    my_next = a_doubly_linked_list;\n  }\n",
        "methodStartingLine": 152,
        "methodEndingLine": 157,
        "jml": "//@ requires this != a_doubly_linked_list && (a_doubly_linked_list != null ==> a_doubly_linked_list != my_prev);\n//@ ensures my_next == a_doubly_linked_list;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/testfiles/escDoublyLinkedList/DoublyLinkedList.java",
        "code": "  public void remove()\n  {\n    if (my_prev != null)\n    {\n      my_prev.setNext(my_next);\n    }\n    if (my_next != null)\n    {\n      my_next.setPrev(my_prev);\n    }\n  }\n",
        "methodStartingLine": 168,
        "methodEndingLine": 178,
        "jml": "//@ requires my_prev != null && my_next != null;\n//@ requires my_prev != my_next.my_next;\n//@ requires my_prev.my_prev != my_next;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/escRecursiveInvariant2/RecursiveInvariant2.java",
        "code": "    public /*@ pure */ boolean m() { return true; }\n",
        "methodStartingLine": 7,
        "methodEndingLine": 7,
        "jml": "//@ ensures \\result;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/escRecursiveInvariant2/RecursiveInvariant2.java",
        "code": "    public void t() {}\n",
        "methodStartingLine": 10,
        "methodEndingLine": 10,
        "jml": "//@ requires m();"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/escCashAmountPrivate2/CashAmountOnlyPrivate.java",
        "code": "  public CashAmountOnlyPrivate negate() {\n    return new CashAmountOnlyPrivate(-my_dollars, -my_cents);\n  }\n",
        "methodStartingLine": 59,
        "methodEndingLine": 61,
        "jml": "//@ requires -100 < the_cents && the_cents < 100;\n//@ requires !(the_cents > 0 && the_dollars < 0);\n//@ requires !(the_cents < 0 && the_dollars > 0);\n//@ ensures my_dollars == the_dollars && my_cents == the_cents;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/escCashAmountPrivate2/CashAmountOnlyPrivate.java",
        "code": "  public /*@ pure helper */ int dollars() {\n    return my_dollars;\n  }\n",
        "methodStartingLine": 111,
        "methodEndingLine": 113,
        "jml": "//@ ensures \\result == my_dollars;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/escCashAmountPrivate2/CashAmountOnlyPrivate.java",
        "code": "  public /*@ pure helper */ int cents() {\n    return my_cents;\n  }\n",
        "methodStartingLine": 119,
        "methodEndingLine": 121,
        "jml": "//@ ensures \\result == my_cents;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/escRecursiveInvariantMQ/RecursiveInvariantMQ.java",
        "code": "    public void t() {}\n",
        "methodStartingLine": 9,
        "methodEndingLine": 9,
        "jml": "//@ requires m();"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/testfiles/escRecursiveInvariant/RecursiveInvariant.java",
        "code": "    public void t() {}\n",
        "methodStartingLine": 9,
        "methodEndingLine": 9,
        "jml": "//@ requires m();"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/testfiles/escRecursiveInvariant2/RecursiveInvariant2.java",
        "code": "    public /*@ pure */ boolean m() { return true; }\n",
        "methodStartingLine": 7,
        "methodEndingLine": 7,
        "jml": "//@ ensures \\result;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/testfiles/escRecursiveInvariant2/RecursiveInvariant2.java",
        "code": "    public void t() {}\n",
        "methodStartingLine": 10,
        "methodEndingLine": 10,
        "jml": "//@ requires m();"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/testfiles/escCashAmountPrivate2/CashAmountOnlyPrivate.java",
        "code": "  public CashAmountOnlyPrivate negate() {\n    return new CashAmountOnlyPrivate(-my_dollars, -my_cents);\n  }\n",
        "methodStartingLine": 59,
        "methodEndingLine": 61,
        "jml": "//@ requires -100 < the_cents && the_cents < 100;\n//@ requires !(the_cents > 0 && the_dollars < 0);\n//@ requires !(the_cents < 0 && the_dollars > 0);\n//@ ensures my_dollars == the_dollars && my_cents == the_cents;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/testfiles/escCashAmountPrivate2/CashAmountOnlyPrivate.java",
        "code": "  public /*@ pure helper */ int dollars() {\n    return my_dollars;\n  }\n",
        "methodStartingLine": 111,
        "methodEndingLine": 113,
        "jml": "//@ ensures \\result == my_dollars;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/testfiles/escCashAmountPrivate2/CashAmountOnlyPrivate.java",
        "code": "  public /*@ pure helper */ int cents() {\n    return my_cents;\n  }\n",
        "methodStartingLine": 119,
        "methodEndingLine": 121,
        "jml": "//@ ensures \\result == my_cents;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/testfiles/escRecursiveInvariantMQ/RecursiveInvariantMQ.java",
        "code": "    public void t() {}\n",
        "methodStartingLine": 9,
        "methodEndingLine": 9,
        "jml": "//@ requires m();"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/gitbug481b/org/apache/commons/math3/util/MathArrays.java",
        "code": "    public static <T> T[] buildArray(final Field<T> field, final int length) {\n        @SuppressWarnings(\"unchecked\") // OK because field must be correct class\n        T[] array = (T[]) Array.newInstance(field.getRuntimeClass(), length);\n        Arrays.fill(array, field.getZero());\n        return array;\n    }\n",
        "methodStartingLine": 1477,
        "methodEndingLine": 1482,
        "jml": "//@ ensures \\fresh(\\result);"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/gitbug481b/org/apache/commons/math3/linear/ArrayFieldVector.java",
        "code": "    public Field<T> getField() {\n        return field;\n    }\n",
        "methodStartingLine": 445,
        "methodEndingLine": 447,
        "jml": "//@ ensures this.field == field && this.data != null;\n//@ ensures this.field == field && this.data != null && \\fresh(this.data);\n//@ ensures this.field == field && this.data != null;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "vendor/FreeBoogie/src/freeboogie/ast/AstLocation.java",
        "code": "  public int getColumn() {\n    return column;\n  }\n",
        "methodStartingLine": 40,
        "methodEndingLine": 42,
        "jml": "//@ requires file != null ==> line_ > 0;\n//@ requires file != null ==> column_ > 0;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/sfpatch25/A.java",
        "code": "private void test17a(){\n\n        int a = 2;\n        int b = 2;\n\n    test17Helper1(a,b);   //OK\n    test17Helper1(a,b,b); // Compiler crash\n}\n",
        "methodStartingLine": 4,
        "methodEndingLine": 11,
        "jml": "//@ ensures false;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/escLemma/Test.java",
        "code": "\tpublic void mbit(int k) {\n\t\tk = 8*k;\n\t\tboolean b = ((k+1)&5) == 1;\n\t\t//@ assert b;\n\t}\n",
        "methodStartingLine": 11,
        "methodEndingLine": 15,
        "jml": "//@ requires k >= 0;\n//@ requires k <= Integer.MAX_VALUE/16;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/escLemma/Test.java",
        "code": "\tpublic void m(int k) {\n\t\t//@ show k;\n\t\tk = 2*k;\n\t\t//@ use lemma((k+1));\n\t\tboolean b = ((k+1)&1) == 1; // Error expected when k is -1\n\t\t//@ assert b;\n\t}\n",
        "methodStartingLine": 18,
        "methodEndingLine": 24,
        "jml": "//@ requires k <= Integer.MAX_VALUE/2 && k >= -1; // The -1 just so the counterexample is always the same"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/escLemma/Test.java",
        "code": "\tpublic void mm(int k) {\n\t\t//@ show k;\n\t\tk = 2*k;\n\t\t//@ use lemma((k+1));\n\t\tboolean b = ((k+1)&1) == 1;\n\t\t//@ assert b;\n\t}\n",
        "methodStartingLine": 28,
        "methodEndingLine": 34,
        "jml": "//@ requires k >= 0;\n//@ requires k <= Integer.MAX_VALUE/2 && k >= Integer.MIN_VALUE/2;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/gitbug557/Test.java",
        "code": "\tpublic void m() {\n\t\tInner a = new Inner(); \n\t\t\t\t\t\t\t// ff.nnn in precondition wrongly translated\n\t\t\t\t\t\t\t// also, not clear translating states that a.ff is the same as ff\n\t}\t\n",
        "methodStartingLine": 25,
        "methodEndingLine": 29,
        "jml": "//@ requires ff.nnn == 29;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/gitbug623/Test.java",
        "code": "\t\tpublic static int f(int i) { return ~i; }\n",
        "methodStartingLine": 10,
        "methodEndingLine": 10,
        "jml": "//@ ensures \\result == -i-1; pure"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/gitbug643/Test.java",
        "code": "\tpublic void m(int i) {\n\t\t//@ assert i > 0;\n\t}\n",
        "methodStartingLine": 5,
        "methodEndingLine": 7,
        "jml": "//@ requires i > 0;;\n//@ ensures true;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/gitbug735/Test.java",
        "code": "\t   public static void implorig(double a, double b, double c, double d)\n\t   {\n\t        // quadratic equations\n\t        //@ assert ( (a - b) * (c - d) == 0 ) ==> (a == b || c == d);\n\t   }\n",
        "methodStartingLine": 16,
        "methodEndingLine": 20,
        "jml": "//@ requires a==a && b==b && c == c && d==d;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/escFunction/Test.java",
        "code": "\tpublic long f(int i) {\n\t\treturn g(i);\n\t}\n",
        "methodStartingLine": 19,
        "methodEndingLine": 21,
        "jml": "//@ ensures \\result == cv(i);"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/escFunction/Test.java",
        "code": "\tpublic long f2(int i) {\n\t\treturn g2(i);\n\t}\n",
        "methodStartingLine": 34,
        "methodEndingLine": 36,
        "jml": "//@ ensures \\result == cv2(i);"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/escFunction/Test.java",
        "code": "\tpublic long f3(int i) {\n\t\treturn g3(i);\n\t}\n",
        "methodStartingLine": 50,
        "methodEndingLine": 52,
        "jml": "//@ ensures \\result == cv3(i);"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/primitives/Test2.java",
        "code": "\tpublic void lemma21() {}\n",
        "methodStartingLine": 33,
        "methodEndingLine": 33,
        "jml": "//@ ensures (testcol.<X>empty().size() == 0);"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/primitives/Test2.java",
        "code": "\tpublic void lemma22(testcol<X> c, X x, X xx) {}\n",
        "methodStartingLine": 36,
        "methodEndingLine": 36,
        "jml": "//@ ensures c.add(x).add(xx).contains(x);"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/gitbug582/Simpler.java",
        "code": "\tpublic void loop(H h, Object o) {\n\t\twhile (h.has(o)) {\n\t\t\th.take(o);\n\t\t}\n\t\t//@ assert !h.has(o);\n\t}\n",
        "methodStartingLine": 22,
        "methodEndingLine": 27,
        "jml": "//@ ensures !h.has(o);"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/gitbug582/Simpler.java",
        "code": "\tpublic void loop2(H h, Object o) {\n\t\tfor (; h.has(o); ) {\n\t\t\th.take(o);\n\t\t}\n\t\t//@ assert !h.has(o);\n\t}\n",
        "methodStartingLine": 30,
        "methodEndingLine": 35,
        "jml": "//@ ensures !h.has(o);"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/gitbug582/Simpler.java",
        "code": "\tpublic void loop3(H h, Object o) {\n\t\tdo {\n\t\t\th.take(o);\n\t\t} while (h.has(o));\n\t\t//@ assert !h.has(o);\n\t}\n",
        "methodStartingLine": 38,
        "methodEndingLine": 43,
        "jml": "//@ ensures !h.has(o);"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/gitbug582/Simpler.java",
        "code": "\tpublic void loop4(int[] a, H h, Object o) {\n\t\t//@ loop_invariant !h.has(o);\n\t\tfor (int k: a) {\n\t\t\th.take(o);\n\t\t\t//@ assume !h.has(o);\n\t\t} while (h.has(o));\n\t\t//@ assert !h.has(o);\n\t}\n",
        "methodStartingLine": 47,
        "methodEndingLine": 54,
        "jml": "//@ requires !h.has(o);\n//@ ensures !h.has(o);"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/gitbug582/Simpler.java",
        "code": "\tpublic void loop4(java.util.List<Object> a, H h, Object o) {\n\t\t//@ loop_invariant !h.has(o);\n\t\tfor (Object k: a) {\n\t\t\th.take(o);\n\t\t\t//@ assume !h.has(o);\n\t\t}\n\t\t//@ assert !h.has(o);\n\t}\n",
        "methodStartingLine": 58,
        "methodEndingLine": 65,
        "jml": "//@ requires !h.has(o);\n//@ ensures !h.has(o);"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/escArrayCopy/Test.java",
        "code": "\tstatic public void copyByte(byte[] a, byte b[]) {\n\t\tSystem.arraycopy(a, 0, b, 10, a.length);\n\t\t//@ assert (\\forall int i; i <10 && i <= 20; b[i] == \\old(b[i]));\n\t\t//@ assert (\\forall int i; 10<=i && i <20; b[i] == a[i-10]);\n\t}\n",
        "methodStartingLine": 8,
        "methodEndingLine": 12,
        "jml": "//@ requires a != null && a.length == 10;\n//@ requires b != null && b.length == 30;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/escArrayCopy/Test.java",
        "code": "\tstatic public void copyInt(int[] a, int b[]) {\n\t\tSystem.arraycopy(a, 0, b, 10, a.length);\n\t\t//@ assert (\\forall int i; i <10 && i <= 20; b[i] == \\old(b[i]));\n\t\t//@ assert (\\forall int i; 10<=i && i <20; b[i] == a[i-10]);\n\t}\n",
        "methodStartingLine": 17,
        "methodEndingLine": 21,
        "jml": "//@ requires a != null && a.length == 10;\n//@ requires b != null && b.length == 30;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/escArrayCopy/Test.java",
        "code": "\tstatic public void copyBoolean(boolean[] a, boolean b[]) {\n\t\tSystem.arraycopy(a, 0, b, 10, a.length);\n\t\t//@ assert (\\forall int i; i <10 && i <= 20; b[i] == \\old(b[i]));\n\t\t//@ assert (\\forall int i; 10<=i && i <20; b[i] == a[i-10]);\n\t}\n",
        "methodStartingLine": 26,
        "methodEndingLine": 30,
        "jml": "//@ requires a != null && a.length == 10;\n//@ requires b != null && b.length == 30;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/escArrayCopy/Test.java",
        "code": "\tstatic public void copyChar(char[] a, char b[]) {\n\t\tSystem.arraycopy(a, 0, b, 10, a.length);\n\t\t//@ assert (\\forall int i; i <10 && i <= 20; b[i] == \\old(b[i]));\n\t\t//@ assert (\\forall int i; 10<=i && i <20; b[i] == a[i-10]);\n\t}\n",
        "methodStartingLine": 35,
        "methodEndingLine": 39,
        "jml": "//@ requires a != null && a.length == 10;\n//@ requires b != null && b.length == 30;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/escArrayCopy/Test.java",
        "code": "\tstatic public void copyShort(short[] a, short b[]) {\n\t\tSystem.arraycopy(a, 0, b, 10, a.length);\n\t\t//@ assert (\\forall int i; i <10 && i <= 20; b[i] == \\old(b[i]));\n\t\t//@ assert (\\forall int i; 10<=i && i <20; b[i] == a[i-10]);\n\t}\n",
        "methodStartingLine": 44,
        "methodEndingLine": 48,
        "jml": "//@ requires a != null && a.length == 10;\n//@ requires b != null && b.length == 30;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/escArrayCopy/Test.java",
        "code": "\tstatic public void copyLong(long[] a, long b[]) {\n\t\tSystem.arraycopy(a, 0, b, 10, a.length);\n\t\t//@ assert (\\forall int i; i <10 && i <= 20; b[i] == \\old(b[i]));\n\t\t//@ assert (\\forall int i; 10<=i && i <20; b[i] == a[i-10]);\n\t}\n",
        "methodStartingLine": 53,
        "methodEndingLine": 57,
        "jml": "//@ requires a != null && a.length == 10;\n//@ requires b != null && b.length == 30;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/escArrayCopy/Test.java",
        "code": "\tstatic public void copyObject(Object[] a, Object b[]) {\n\t\tSystem.arraycopy(a, 0, b, 10, a.length);\n\t\t//@ assert (\\forall int i; i <10 && i <= 20; b[i] == \\old(b[i]));\n\t\t//@ assert (\\forall int i; 10<=i && i <20; b[i] == a[i-10]);\n\t}\n",
        "methodStartingLine": 63,
        "methodEndingLine": 67,
        "jml": "//@ requires a != null && a.length == 10;\n//@ requires b != null && b.length == 30;\n//@ requires \\elemtype(\\typeof(a)) <: \\elemtype(\\typeof(b));"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/gitbug444/Relaxed.java",
        "code": "    public static boolean isRelaxedPrefix(int[] pat, int[] a) {\n        if (Relaxed.diffIndex(pat, a) == pat.length) return true;\n        //  THIS IS OK @ maintaining  (\\let int k = Relaxed.diffIndex(pat, a); k >  0 ==> (\\forall int j; k < j && j < 0; pat[j] == a[j - 1]));\n        //@ maintaining  ( Relaxed.diffIndex(pat, a) >  0 ==> (\\forall int j; Relaxed.diffIndex(pat, a) < j && j < 0; pat[j] == a[j - 1]));\n        //@ loop_writes pat;\n        while(pat.length > 0){}\n        return true;\n    }\n",
        "methodStartingLine": 3,
        "methodEndingLine": 10,
        "jml": "//@ ensures pat.length > 0 && a.length > 0 ==>  Relaxed.diffIndex(pat, a) == pat.length ==> \\result == true;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/escInlineLoop/Test.java",
        "code": "\tstatic public void putAtI(int v) {\n\t\tarr[ii] = v;\n\t\tii++;\n\t}\n",
        "methodStartingLine": 13,
        "methodEndingLine": 16,
        "jml": "//@ requires ii >= 0 && ii < arr.length;\n//@ ensures arr[oldI] == v;\n//@ ensures ii == oldI + 1;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/escInlineLoop/Test.java",
        "code": "\tpublic void putAtI(int[] arr, int v) {\n\t\tarr[ii] = v;\n\t\tii++;\n\t}\n",
        "methodStartingLine": 47,
        "methodEndingLine": 50,
        "jml": "//@ requires ii >= 0 && ii < arr.length;\n//@ ensures arr[oldI] == v;\n//@ ensures ii == oldI + 1;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/escShortCircuit/SC.java",
        "code": "\tpublic int m(int a, int b) {\n\t\tif(a < 0 || b < 0 || a + b < 10){\n\t\t    return 1;\n\t\t}\n\t\treturn 2;\n\n\t}\n",
        "methodStartingLine": 7,
        "methodEndingLine": 13,
        "jml": "//@ ensures a < 0 ==> \\result == 1;\n//@ ensures b < 0 ==> \\result == 1;\n//@ ensures a + b < 0 ==> \\result == 1;\n//@ ensures a >= 0 && b >= 0 && a+b >= 10 ==> \\result == 2;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/escShortCircuit/SC.java",
        "code": "\tpublic int mm(int a, int b) {\n\t\tif(a >= 0 && b >= 0 && a + b >= 10){\n\t\t    return 1;\n\t\t}\n\t\treturn 2;\n\n\t}\n",
        "methodStartingLine": 19,
        "methodEndingLine": 25,
        "jml": "//@ ensures a < 0 ==> \\result == 2;\n//@ ensures b < 0 ==> \\result == 2;\n//@ ensures a + b < 0 ==> \\result == 2;\n//@ ensures a >= 0 && b >= 0 && a+b >= 10 ==> \\result == 1;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/gitbug444a/Relaxed.java",
        "code": "\t public static boolean isRelaxedPrefix(int[] pat, int[] a) {\n\t    int shift = 0;\n\t    int index = 0;\n\n\t    if (pat.length == 0) return true;\n\t    if (a.length == 0 && pat.length == 1) return true;\n\t    if (a.length == 0 && pat.length > 1) return false;\n\t    assert a.length > 0 && pat.length > 0;\n\t    if (Relaxed.diffIndex(pat, a) == pat.length) return true;\n\t    //@ maintaining 0 <= index && index <= pat.length;\n\t    //@ maintaining 0 <= index - shift && index - shift <= a.length && 0 <= shift && shift <= 1;\n\t   //@ maintaining  Relaxed.diffIndex(pat, a) > index ==>(\\forall int i; 0 <= i && i < index; pat[i] == a[i]) ;\n\t   //@ maintaining  Relaxed.diffIndex(pat, a) >  index ==> (\\forall int j; Relaxed.diffIndex(pat, a) < j && j < index; pat[j] == a[j - 1]);\n\t   //@ decreases pat.length - index - shift;\n\t    while((pat.length > index ) && (a.length > index - shift)){\n\t        if (pat[index] != a[index - shift]){\n\t            if (shift == 0) shift = 1;\n\t            else return false;\n\t        }\n\n\t         index = index + 1;\n\n\t    }\n\t    if (a.length == index - shift && pat.length > index ) return false;\n\t    return true;\n\t}\n",
        "methodStartingLine": 7,
        "methodEndingLine": 32,
        "jml": "//@ requires true;\n//@ ensures pat.length == 0 ==> \\result == true;\n//@ ensures a.length == 0  && pat.length == 1 ==> \\result == true; \n//@ ensures a.length == 0  && pat.length > 1 ==> \\result == false; \n//@ ensures pat.length > 0 && a.length > 0 ==>  Relaxed.diffIndex(pat, a) == pat.length ==> \\result == true;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/gitbug444a/Relaxed.java",
        "code": "\tpublic /*@ pure function @*/ static int diffIndex(int[] pat, int[] a)\n\t{\n\t  int index = 0;\n\t  //@ maintaining 0 <= index && index <= pat.length && index <= a.length;\n\t  //@ maintaining (\\forall int i; 0 <= i && i < index; pat[i] == a[i]);\n\t  //@ decreases pat.length - index;\n\t  while((pat.length > index) && (a.length > index))\n\t  {\n\t      if(pat[index] == a[index]){\n\t        index = index + 1;\n\t      } else {\n\t        return index;\n\t      }\n\n\t  }\n\t  return index;\n\t}\n",
        "methodStartingLine": 39,
        "methodEndingLine": 55,
        "jml": "//@ requires true;\n//@ ensures 0 <= \\result && \\result <= pat.length; \n//@ ensures (\\forall int i; 0 <= i && i < \\result; pat[i] == a[i]);\n//@ ensures (pat.length > \\result) && (a.length > \\result) ==> pat[\\result] != a[\\result];"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/firstTest/FirstTest.java",
        "code": "\tpublic void setA(int a) {\n\t\tthis.a = a;\n\t}\n",
        "methodStartingLine": 7,
        "methodEndingLine": 9,
        "jml": "//@ requires a < 0;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/testfiles/firstTest/FirstTest.java",
        "code": "\tpublic void setA(int a) {\n\t\tthis.a = a;\n\t}\n",
        "methodStartingLine": 7,
        "methodEndingLine": 9,
        "jml": "//@ requires a < 0;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/escJml1/StorageParameters.java",
        "code": "\tlong[] getConfigurationSizes() {\n\t\treturn configurationSizes;\n\t}\n",
        "methodStartingLine": 13,
        "methodEndingLine": 15,
        "jml": "//@ ensures !\\fresh(\\result);"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/primeNumbers/PrimeNumbers.java",
        "code": "\tpublic void Prime(int n)\n       {\n          int status = 1, num = 3, count, j =2;\n          primeArray = new int[n];\n          if (n >= 1)\n          {\n             primeArray[0] = 2;\n          }\n          //@ ghost int maxnumber = Integer.MAX_VALUE;\n\n          //@ maintaining 2 <= count <= n + 1; \n          //@ maintaining primeArray[count-2] < num <= maxnumber;\n          //@ maintaining status == 1;\n          //@ maintaining (\\forall int i, k; 0 <= i < count-1 && 2 <= k <= primeArray[i]/2; primeArray[i]%k != 0); \n          //@ decreases maxnumber - num; \n          //@ split\n          for (count = 2; count <=n && num < Integer.MAX_VALUE;)\n          {    \n              //@ maintaining 2 <= j <= num/2 + 1; \n              //@ maintaining status != 0 && (\\forall int jj; 2 <= jj <= j; num%jj != 0);\n              //@ decreases num - j;\n              for (j = 2; j <= num/2; j++)\n              {\n                  if (num%j == 0)\n                  {\n                      //@ assert num%j == 0;\n                      status = 0;\n                      break;\n                  }\n                  //@ assert num%j != 0;\n              }\n              //@ assert status == 0 ==> (\\exists int jj; 2 <= jj <= num/2; num%jj == 0);\n              //@ assert status != 0 ==> (\\forall int jj; 2 <= jj <= num/2; num%jj != 0);\n\n              if (status != 0)\n              {\n                  primeArray[count-1] = num;\n                  //@ assert (\\forall int i; 2 <= i <= num/2; num%i != 0);\n                  count++;\n              }\n              status = 1;\n              num++;\n          }   \n          //@ assume count == primeArray.length + 1;\n       }\n",
        "methodStartingLine": 11,
        "methodEndingLine": 55,
        "jml": "//@ requires 1 <= n < Integer.MAX_VALUE;\n//@ ensures primeArray != null;\n//@ ensures primeArray.length == n;\n//@ ensures (\\forall int i, j; i >= 0 && i < primeArray.length && j >= 2 && j <= primeArray[i]/2; primeArray[i]%j != 0); "
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/escJml1a/StorageParameters.java",
        "code": "\tlong[] getConfigurationSizes() {\n\t\treturn configurationSizes;\n\t}\n",
        "methodStartingLine": 13,
        "methodEndingLine": 15,
        "jml": "//@ ensures \\fresh(\\result);"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/loopExercises/LoopExercises.java",
        "code": "\tpublic int max(int [] x){\n\t\tint max = x[0];\n\t\tint i = 1;\n        //@ loop_invariant 1 <= i && i <= x.length;\n\t\t//@ loop_invariant (\\forall int j; 0 <= j && j < i; x[j] <= max);\n\t\t//@ decreasing x.length - i;\n\t\twhile (i < x.length) {\n\t\t\tif (x[i] > max) {\n\t\t\t\tmax = x[i];\n\t\t\t};\n\t\t\ti++;\n\t\t}\n\t\treturn max;\n\t}\n",
        "methodStartingLine": 52,
        "methodEndingLine": 65,
        "jml": "//@ requires x.length > 0;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/gcdcalculator/AbsoluteValue.java",
        "code": "\tpublic /*@ pure @*/ int IntAbsolute(int num){\n\t\tif(num >= 0)\n\t\t\treturn num;\n\t\telse\n\t\t\treturn -num;\n\t}\n",
        "methodStartingLine": 12,
        "methodEndingLine": 17,
        "jml": "//@ requires num >= 0;\n//@ ensures \\result == num;\n//@ ensures \\result >= 0;\n//@ requires num < 0 && num > Integer.MIN_VALUE;\n//@ ensures \\result == -num; \n//@ ensures \\result >= 0;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/gcdcalculator/AbsoluteValue.java",
        "code": "\tpublic /*@ pure @*/ long LongAbsolute(long num){\n\t\tif(num >= 0)\n\t\t\treturn num;\n\t\telse\n\t\t\treturn -num;\t\n\t}\n",
        "methodStartingLine": 29,
        "methodEndingLine": 34,
        "jml": "//@ requires num >= 0;\n//@ ensures \\result == num;\n//@ ensures \\result >= 0;\n//@ requires num < 0 && num > Long.MIN_VALUE;\n//@ ensures \\result == -num; \n//@ ensures \\result >= 0;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/factorial/FactorialFunction.java",
        "code": "       public long FactoF(int n)\n       {\n          int c;\n          long fact = 1;\n\t  \n\t   if ( n == 0) {\n\t      //@ assert fact == spec_factorial(n);          \n              return fact;\n\t   }\n\t   //@ assert spec_factorial(0) == 1;\n\n          //@ maintaining c >= 1 && c <= n+1;\n\t  //@ maintaining fact > 0;\n\t  //@ maintaining fact <= Long.MAX_VALUE; \n\t  //@ maintaining spec_factorial(c - 1) == fact;\n\t  //@ decreases n - c;\n          for (c = 1; c <= n; c++){\n\t\t//@ assert c <= n;\n                //@ assume fact*c <= Long.MAX_VALUE;\n                fact = fact*c;\n             }\t\n\t  //@ assert c == n+1;\n\t  //@ assert spec_factorial(c - 1) == fact;   \n          return fact;\n     }\n",
        "methodStartingLine": 6,
        "methodEndingLine": 30,
        "jml": "//@ requires n >= 0 && n <= 20;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/racMainActivity/MainActivity.java",
        "code": "\tpublic static double SumThread(double I1, double I2)\n\t{\t\t\t  \t\n\t\t\n\t\tif ((I1>0) && (I2>0))\n\t\t\tResS=I1+I2;\n\t\telse\n\t\t\tResS=0;\n\t\treturn(ResS);\t\t\t\t\t\t\n\t}\n",
        "methodStartingLine": 26,
        "methodEndingLine": 34,
        "jml": "//@ requires I1 >= 0 && I2>=0;\n//@ ensures \\result > 0.0;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/racMainActivity/MainActivity.java",
        "code": "\tpublic static double DivThread(double I1, double I2)\n\t{\n\t\tResD=I1/I2;\t\n\t\treturn(ResD);\t\t\t\n\t}\n",
        "methodStartingLine": 39,
        "methodEndingLine": 43,
        "jml": "//@ requires I2 > 0;\n//@ ensures \\result < 0;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/racMainActivity/MainActivity.java",
        "code": "\tpublic static double DiffThread(double I1, double I2)\n\t{\n\t\t if (I1 > I2)\n\t\t\tResSu=I1-I2;\n\t\telse\n\t\t\tResSu=0;\n\t\t  return(ResSu);\t\t\t\n\t }\t\t\t\n",
        "methodStartingLine": 48,
        "methodEndingLine": 55,
        "jml": "//@ requires I1 > I2;\n//@ ensures \\result > 0;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/racMainActivity/MainActivity.java",
        "code": "\tpublic static double MultThread(double I1, double I2)\n\t{\n\t\t if ((I1>0) && (I2>0))\n\t\t\tResM=I1*I2;\n\t\telse\n\t\t\tResM=0;\n\t\t  return(ResM);\t\t\t   \n\t}\n",
        "methodStartingLine": 59,
        "methodEndingLine": 66,
        "jml": "//@ requires I1 > 0 && I2 > 0;\n//@ ensures \\result >0;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/racMainActivity/MainActivity.java",
        "code": "\tpublic static double HypotThread(double I1, double I2)\n\t{\n\t\tif ((I1>0) && (I2>0))\n\t\t\tResH=Math.sqrt(Math.pow(I1,2)+Math.pow(I2,2));\n\t\telse\n\t\t\tResH = 0;\n\t\t// @ ensures \\result > 0; // TODO: Avoid crash when this is enabled\n\t\t return(ResH);\t\t\t   \n\t}\n",
        "methodStartingLine": 71,
        "methodEndingLine": 79,
        "jml": "//@ requires I1 > 0 && I2 > 0;\n//@ ensures \\result > 0;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/racMainActivity/MainActivity.java",
        "code": "\tpublic static double PowThread(double I1, double I2)\n\t{\n\t\tif ((I1>0) && (I2>0))\n\t\t\tResP=Math.pow(I1,I2);\n\t\telse\n\t\t\tResP = 0;\t\n\t\t  return(ResP);\t\t\t   \n\t}\n",
        "methodStartingLine": 84,
        "methodEndingLine": 91,
        "jml": "//@ requires I1 > 0 && I2 >= 0 ;\n//@ ensures \\result >0;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/testfiles/loopExercises/LoopExercises.java",
        "code": "\tpublic int max(int [] x){\n\t\tint max = x[0];\n\t\tint i = 1;\n        //@ loop_invariant 1 <= i && i <= x.length;\n\t\t//@ loop_invariant (\\forall int j; 0 <= j && j < i; x[j] <= max);\n\t\t//@ decreasing x.length - i;\n\t\twhile (i < x.length) {\n\t\t\tif (x[i] > max) {\n\t\t\t\tmax = x[i];\n\t\t\t};\n\t\t\ti++;\n\t\t}\n\t\treturn max;\n\t}\n",
        "methodStartingLine": 51,
        "methodEndingLine": 64,
        "jml": "//@ requires x.length > 0;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/testfiles/racMainActivity/MainActivity.java",
        "code": "\tpublic static double SumThread(double I1, double I2)\n\t{\t\t\t  \t\n\t\t\n\t\tif ((I1>0) && (I2>0))\n\t\t\tResS=I1+I2;\n\t\telse\n\t\t\tResS=0;\n\t\treturn(ResS);\t\t\t\t\t\t\n\t}\n",
        "methodStartingLine": 26,
        "methodEndingLine": 34,
        "jml": "//@ requires I1 >= 0 && I2>=0;\n//@ ensures \\result > 0.0;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/testfiles/racMainActivity/MainActivity.java",
        "code": "\tpublic static double DivThread(double I1, double I2)\n\t{\n\t\tResD=I1/I2;\t\n\t\treturn(ResD);\t\t\t\n\t}\n",
        "methodStartingLine": 39,
        "methodEndingLine": 43,
        "jml": "//@ requires I2 > 0;\n//@ ensures \\result < 0;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/testfiles/racMainActivity/MainActivity.java",
        "code": "\tpublic static double DiffThread(double I1, double I2)\n\t{\n\t\t if (I1 > I2)\n\t\t\tResSu=I1-I2;\n\t\telse\n\t\t\tResSu=0;\n\t\t  return(ResSu);\t\t\t\n\t }\t\t\t\n",
        "methodStartingLine": 48,
        "methodEndingLine": 55,
        "jml": "//@ requires I1 > I2;\n//@ ensures \\result > 0;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/testfiles/racMainActivity/MainActivity.java",
        "code": "\tpublic static double MultThread(double I1, double I2)\n\t{\n\t\t if ((I1>0) && (I2>0))\n\t\t\tResM=I1*I2;\n\t\telse\n\t\t\tResM=0;\n\t\t  return(ResM);\t\t\t   \n\t}\n",
        "methodStartingLine": 59,
        "methodEndingLine": 66,
        "jml": "//@ requires I1 > 0 && I2 > 0;\n//@ ensures \\result >0;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/testfiles/racMainActivity/MainActivity.java",
        "code": "\tpublic static double HypotThread(double I1, double I2)\n\t{\n\t\tif ((I1>0) && (I2>0))\n\t\t\tResH=Math.sqrt(Math.pow(I1,2)+Math.pow(I2,2));\n\t\telse\n\t\t\tResH = 0;\n\t\t\n\t\t return(ResH);\t\t\t   \n\t}\n",
        "methodStartingLine": 71,
        "methodEndingLine": 79,
        "jml": "//@ requires I1 > 0 && I2 > 0;\n//@ ensures \\result > 0;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/testfiles/racMainActivity/MainActivity.java",
        "code": "\tpublic static double PowThread(double I1, double I2)\n\t{\n\t\tif ((I1>0) && (I2>0))\n\t\t\tResP=Math.pow(I1,I2);\n\t\telse\n\t\t\tResP = 0;\t\n\t\t  return(ResP);\t\t\t   \n\t}\n",
        "methodStartingLine": 84,
        "methodEndingLine": 91,
        "jml": "//@ requires I1 > 0 && I2 >= 0 ;\n//@ ensures \\result >0;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/escDeterministic/escDeterministic.java",
        "code": "\tstatic public int comp(int a) { return 0; }\n",
        "methodStartingLine": 7,
        "methodEndingLine": 7,
        "jml": "//@ ensures true;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/escDeterministic/escDeterministic.java",
        "code": "\tpublic void m() {\n\t\ta = comp(10);\n\t\tc = 20;\n\t\tb = comp(10);\n\t\t//@ assert a == b;\n\t}\n",
        "methodStartingLine": 14,
        "methodEndingLine": 19,
        "jml": "//@ ensures a == b;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/escDeterministic/escDeterministic.java",
        "code": "\tpublic void n() {}\n",
        "methodStartingLine": 27,
        "methodEndingLine": 27,
        "jml": "//@ ensures true;\n//@ ensures acomp(10) == acomp(10);"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/escDeterministic2/escDeterministic2.java",
        "code": "\tpublic void m() {\n\t\t//@ set a = comp(10);\n\t\t//@ set c = 20;\n\t\t//@ set b = comp(10);\n\t\t//@ assert a == b;\n\t}\n",
        "methodStartingLine": 13,
        "methodEndingLine": 18,
        "jml": "//@ ensures true;\n//@ ensures a == b;"
    },
    {
        "repository": "github.com/OpenJML/OpenJML",
        "file": "OpenJMLTest/test/escDeterministic2/escDeterministic2.java",
        "code": "\tpublic void n() {}\n",
        "methodStartingLine": 21,
        "methodEndingLine": 21,
        "jml": "//@ ensures comp(10) == comp(10);"
    }
]