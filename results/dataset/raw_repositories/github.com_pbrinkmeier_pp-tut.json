{
  "SourcegraphEndpoint": "https://sourcegraph.com",
  "Query": "(//@ requires )|(//@ ensures ) repo:github.com/pbrinkmeier/pp-tut lang:java count:all case:yes type:file patterntype:regexp",
  "Site": {
    "BuildVersion": "238702_2023-08-16_5.1-acf4bcc841e5"
  },
  "Results": [
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "fcd5fd8c7e4e70605f2bf3d47df7816b412d30c0"
        },
        "content": "package set;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class Set\u003cT\u003e {\n    public static void main(String[] args) {\n        Set\u003cString\u003e s = new Set\u003c\u003e();\n        s.add(\"abc\");\n        s.add(\"xyz\");\n        s.add(\"abc\");\n        \n        for (String str: s.getElements()) {\n            System.out.println(str);\n        }\n    }\n\n    private List\u003cT\u003e elements = new ArrayList\u003c\u003e();\n\n    //@ ensures \\result \u003e= 0;\n    /*@ pure @*/ public int size() {\n        return 0;\n    }\n\n    public boolean isEmpty() {\n        return true;\n    }\n\n    public boolean add(T element) {\n        return false;\n    }\n\n    public boolean contains(T element) {\n        return false;\n    }\n\n    public List\u003cT\u003e getElements() {\n        return elements;\n    }\n} \n",
        "name": "Set.java",
        "path": "demos/java/jml/Set.java",
        "url": "/github.com/pbrinkmeier/pp-tut/-/blob/demos/java/jml/Set.java"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 19,
          "offsetAndLengths": [
            [
              4,
              12
            ]
          ],
          "preview": "    //@ ensures \\result \u003e= 0;"
        }
      ],
      "repository": {
        "name": "github.com/pbrinkmeier/pp-tut",
        "url": "/github.com/pbrinkmeier/pp-tut"
      }
    },
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "fcd5fd8c7e4e70605f2bf3d47df7816b412d30c0"
        },
        "content": "class ResizingArray\u003cA\u003e {\n    private A[] elements;\n    private int elementCount;\n    /*@ pure @*/ public int getElementCount();\n\n    //@ ensures getElementCount() ==\n    //@         \\old(getElementCount()) + 1;\n    public void add(A element) { ... }\n}\n",
        "name": "pure.java",
        "path": "slides/code/jml/pure.java",
        "url": "/github.com/pbrinkmeier/pp-tut/-/blob/slides/code/jml/pure.java"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 5,
          "offsetAndLengths": [
            [
              4,
              12
            ]
          ],
          "preview": "    //@ ensures getElementCount() =="
        }
      ],
      "repository": {
        "name": "github.com/pbrinkmeier/pp-tut",
        "url": "/github.com/pbrinkmeier/pp-tut"
      }
    },
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "fcd5fd8c7e4e70605f2bf3d47df7816b412d30c0"
        },
        "content": "class MaxAbsCombinator {\n    //@ requires left != Integer.MIN_VALUE;\n    //@ requires right != Integer.MIN_VALUE;\n    //@ ensures \\result \u003c= left || \\result \u003c= right;\n    //@ ensures \\result \u003e= left \u0026\u0026 \\result \u003e= right;\n    int combine(int left, int right) {\n        return Math.max(Math.abs(left), Math.abs(right));\n    }\n}\n\nnew MaxAbsCombinator().combine(\n    random.nextInt(),\n    random.nextInt());\n",
        "name": "19ss-a6e.java",
        "path": "slides/code/19ss-a6e.java",
        "url": "/github.com/pbrinkmeier/pp-tut/-/blob/slides/code/19ss-a6e.java"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 1,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires left != Integer.MIN_VALUE;"
        },
        {
          "limitHit": false,
          "lineNumber": 2,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires right != Integer.MIN_VALUE;"
        },
        {
          "limitHit": false,
          "lineNumber": 3,
          "offsetAndLengths": [
            [
              4,
              12
            ]
          ],
          "preview": "    //@ ensures \\result \u003c= left || \\result \u003c= right;"
        },
        {
          "limitHit": false,
          "lineNumber": 4,
          "offsetAndLengths": [
            [
              4,
              12
            ]
          ],
          "preview": "    //@ ensures \\result \u003e= left \u0026\u0026 \\result \u003e= right;"
        }
      ],
      "repository": {
        "name": "github.com/pbrinkmeier/pp-tut",
        "url": "/github.com/pbrinkmeier/pp-tut"
      }
    },
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "fcd5fd8c7e4e70605f2bf3d47df7816b412d30c0"
        },
        "content": "class MaxAbsCombinator {\n    //@ requires left != Integer.MIN_VALUE;\n    //@ requires right != Integer.MIN_VALUE;\n    //@ ensures \\result \u003c= left || \\result \u003c= right;\n    //@ ensures \\result \u003e= left \u0026\u0026 \\result \u003e= right;\n    int combine(int left, int right) {\n        return Math.max(Math.abs(left), Math.abs(right));\n    }\n}\n",
        "name": "19ss-a6d.java",
        "path": "slides/code/19ss-a6d.java",
        "url": "/github.com/pbrinkmeier/pp-tut/-/blob/slides/code/19ss-a6d.java"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 1,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires left != Integer.MIN_VALUE;"
        },
        {
          "limitHit": false,
          "lineNumber": 2,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires right != Integer.MIN_VALUE;"
        },
        {
          "limitHit": false,
          "lineNumber": 3,
          "offsetAndLengths": [
            [
              4,
              12
            ]
          ],
          "preview": "    //@ ensures \\result \u003c= left || \\result \u003c= right;"
        },
        {
          "limitHit": false,
          "lineNumber": 4,
          "offsetAndLengths": [
            [
              4,
              12
            ]
          ],
          "preview": "    //@ ensures \\result \u003e= left \u0026\u0026 \\result \u003e= right;"
        }
      ],
      "repository": {
        "name": "github.com/pbrinkmeier/pp-tut",
        "url": "/github.com/pbrinkmeier/pp-tut"
      }
    },
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "fcd5fd8c7e4e70605f2bf3d47df7816b412d30c0"
        },
        "content": "//@ ensures \\result.length() == s.length();\nString[] reverse(String [] s) { ... }\n\n//@ requires amount \u003e 0;\n//@ ensures balance \u003e \\old(balance);\nvoid deposit(int amount) {\n    this.balance += amount;\n}\n",
        "name": "ensures.java",
        "path": "slides/code/jml/ensures.java",
        "url": "/github.com/pbrinkmeier/pp-tut/-/blob/slides/code/jml/ensures.java"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 0,
          "offsetAndLengths": [
            [
              0,
              12
            ]
          ],
          "preview": "//@ ensures \\result.length() == s.length();"
        },
        {
          "limitHit": false,
          "lineNumber": 3,
          "offsetAndLengths": [
            [
              0,
              13
            ]
          ],
          "preview": "//@ requires amount \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 4,
          "offsetAndLengths": [
            [
              0,
              12
            ]
          ],
          "preview": "//@ ensures balance \u003e \\old(balance);"
        }
      ],
      "repository": {
        "name": "github.com/pbrinkmeier/pp-tut",
        "url": "/github.com/pbrinkmeier/pp-tut"
      }
    },
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "fcd5fd8c7e4e70605f2bf3d47df7816b412d30c0"
        },
        "content": "//@ requires b != 0;\nint divide(int a, int b) {\n    return a / b;\n}\n",
        "name": "requires.java",
        "path": "slides/code/jml/requires.java",
        "url": "/github.com/pbrinkmeier/pp-tut/-/blob/slides/code/jml/requires.java"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 0,
          "offsetAndLengths": [
            [
              0,
              13
            ]
          ],
          "preview": "//@ requires b != 0;"
        }
      ],
      "repository": {
        "name": "github.com/pbrinkmeier/pp-tut",
        "url": "/github.com/pbrinkmeier/pp-tut"
      }
    },
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "fcd5fd8c7e4e70605f2bf3d47df7816b412d30c0"
        },
        "content": "class ResizingArray\u003cA\u003e {\n    private A[] elements;\n    private /*@ spec_public @*/ int elementCount;\n\n    //@ ensures elementCount ==\n    //@         \\old(elementCount) + 1;\n    public void add(A element) { ... }\n}\n",
        "name": "specpublic.java",
        "path": "slides/code/jml/specpublic.java",
        "url": "/github.com/pbrinkmeier/pp-tut/-/blob/slides/code/jml/specpublic.java"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 4,
          "offsetAndLengths": [
            [
              4,
              12
            ]
          ],
          "preview": "    //@ ensures elementCount =="
        }
      ],
      "repository": {
        "name": "github.com/pbrinkmeier/pp-tut",
        "url": "/github.com/pbrinkmeier/pp-tut"
      }
    }
  ],
  "LimitHit": false,
  "Cloning": [],
  "Missing": [],
  "Timedout": [],
  "ResultCount": 15,
  "ElapsedMilliseconds": 61,
  "Alert": {
    "Title": "",
    "Description": "",
    "ProposedQueries": null
  }
}
