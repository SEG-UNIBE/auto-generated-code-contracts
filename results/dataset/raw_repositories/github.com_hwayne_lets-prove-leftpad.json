{
  "SourcegraphEndpoint": "https://sourcegraph.com",
  "Query": "(//@ requires )|(//@ ensures ) repo:github.com/hwayne/lets-prove-leftpad lang:java count:all case:yes type:file patterntype:regexp",
  "Site": {
    "BuildVersion": "238702_2023-08-16_5.1-acf4bcc841e5"
  },
  "Results": [
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "8d79d670cd946dc5eec5344bf55d3bb12e677349"
        },
        "content": "public class LeftPad {\n    //@ requires n \u003e= 0;\n    //@ requires s != null;\n    //@ ensures \\result.length == Math.max(n, s.length);\n    //@ ensures \\forall int i; i \u003e= 0 \u0026\u0026 i \u003c Math.max(n - s.length, 0); \\result[i] == c;\n    //@ ensures \\forall int i; i \u003e= 0 \u0026\u0026 i \u003c s.length; \\result[Math.max(n - s.length, 0) + i] == s[i];\n    static char[] leftPad(char c, int n, char[] s) {\n        int pad = Math.max(n - s.length, 0);\n        char[] v = new char[pad + s.length];\n        int i = 0;\n\n        //@ maintaining i \u003e= 0 \u0026\u0026 i \u003c= pad;\n        //@ maintaining \\forall int j; j \u003e= 0 \u0026\u0026 j \u003c i; v[j] == c;\n        for(; i\u003cpad; i++) v[i] = c;\n        \n        //@ maintaining i \u003e= pad;\n        //@ maintaining \\forall int j; j \u003e= 0 \u0026\u0026 j \u003c pad; v[j] == c;\n        //@ maintaining \\forall int j; j \u003e= pad \u0026\u0026 j \u003c i; v[j] == s[j - pad];\n        for(i = pad; i \u003c v.length; i++) v[i] = s[i - pad];\n        \n        return v;\n    }\n}\n",
        "name": "LeftPad.java",
        "path": "java/LeftPad.java",
        "url": "/github.com/hwayne/lets-prove-leftpad/-/blob/java/LeftPad.java"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 1,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires n \u003e= 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 2,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires s != null;"
        },
        {
          "limitHit": false,
          "lineNumber": 3,
          "offsetAndLengths": [
            [
              4,
              12
            ]
          ],
          "preview": "    //@ ensures \\result.length == Math.max(n, s.length);"
        },
        {
          "limitHit": false,
          "lineNumber": 4,
          "offsetAndLengths": [
            [
              4,
              12
            ]
          ],
          "preview": "    //@ ensures \\forall int i; i \u003e= 0 \u0026\u0026 i \u003c Math.max(n - s.length, 0); \\result[i] == c;"
        },
        {
          "limitHit": false,
          "lineNumber": 5,
          "offsetAndLengths": [
            [
              4,
              12
            ]
          ],
          "preview": "    //@ ensures \\forall int i; i \u003e= 0 \u0026\u0026 i \u003c s.length; \\result[Math.max(n - s.length, 0) + i] == s[i];"
        }
      ],
      "repository": {
        "name": "github.com/hwayne/lets-prove-leftpad",
        "url": "/github.com/hwayne/lets-prove-leftpad"
      }
    }
  ],
  "LimitHit": false,
  "Cloning": [],
  "Missing": [],
  "Timedout": [],
  "ResultCount": 5,
  "ElapsedMilliseconds": 40,
  "Alert": {
    "Title": "",
    "Description": "",
    "ProposedQueries": null
  }
}
