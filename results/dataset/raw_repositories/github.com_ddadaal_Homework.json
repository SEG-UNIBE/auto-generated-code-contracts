{
  "SourcegraphEndpoint": "https://sourcegraph.com",
  "Query": "(//@ requires )|(//@ ensures ) repo:github.com/ddadaal/Homework lang:java count:all case:yes type:file patterntype:regexp",
  "Site": {
    "BuildVersion": "238702_2023-08-16_5.1-acf4bcc841e5"
  },
  "Results": [
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "457c2b2e8293c765d163f457e66bf83bb3f68d80"
        },
        "content": "package net.mooctest;\n\n// BinaryHeap class\n//\n// CONSTRUCTION: with optional capacity (that defaults to 100)\n//\n// ******************PUBLIC OPERATIONS*********************\n// void insert( x )       --\u003e Insert x\n// int deleteMin( )--\u003e Return and remove smallest item\n// int findMin( )  --\u003e Return smallest item\n// boolean isEmpty( )     --\u003e Return true if empty; else false\n// boolean isFull( )      --\u003e Return true if full; else false\n// void makeEmpty( )      --\u003e Remove all items\n// ******************ERRORS********************************\n// Throws Overflow if capacity exceeded\n\n/**\n * Implements a binary heap.\n * Note that all \"matching\" is based on the compareTo method.\n * @author Mark Allen Weiss\n */\npublic class BinaryHeap\n{\n    //@ invariant wellFormed();\n    /**\n     * Construct the binary heap.\n     */\n    public BinaryHeap( )\n    {\n        this( DEFAULT_CAPACITY );\n    }\n\n    /**\n     * Construct the binary heap.\n     * @param capacity the capacity of the binary heap.\n     */\n    //@ requires capacity \u003e 0;\n    //@ ensures isEmpty();\n    public BinaryHeap( int capacity )\n    {\n        currentSize = 0;\n        array = new int[ capacity + 1 ];\n    }\n\n    /**\n     * Insert into the priority queue, maintaining heap order.\n     * Duplicates are allowed.\n     * @param x the item to insert.\n     * @exception Overflow if container is full.\n     */\n    public void insert( int x ) throws Overflow\n    {\n        if( isFull( ) )\n            throw new Overflow( );\n\n        // Percolate up\n        int hole = ++currentSize;\n        for( ; hole \u003e 1 \u0026\u0026 x\u003c array[ hole / 2 ]; hole /= 2 )\n            array[ hole ] = array[ hole / 2 ];\n        array[ hole ] = x;\n    }\n\n    /**\n     * Find the smallest item in the priority queue.\n     * @return the smallest item, or null, if empty.\n     */\n    public int findMin( )\n    {\n        if( isEmpty( ) )\n            return -1;\n        return array[ 1 ];\n    }\n    boolean wellFormed() {\n        if(array==null) {//array!=null\n            return false;\n        }\n        if(currentSize\u003c0 || currentSize\u003e=array.length) {//currentSize\u003e=0; currentSize\u003carray.length;\n            return false;\n        }\n        for(int i=1; i\u003ccurrentSize; i++) {\n            if(i*2 \u003c= currentSize \u0026\u0026 array[i]\u003earray[2*i]) {\n                return false;\n            }\n            if(i*2 + 1\u003c= currentSize \u0026\u0026 array[i]\u003earray[2*i+1]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    /**\n     * Remove the smallest item from the priority queue.\n     * @return the smallest item, or null, if empty.\n     */\n    public int deleteMin( )\n    {\n        if( isEmpty( ) )\n            return -1;\n\n        int minItem = findMin( );\n        array[ 1 ] = array[ currentSize-- ];\n        percolateDown( 1 );\n\n        return minItem;\n    }\n\n    /**\n     * Establish heap order property from an arbitrary\n     * arrangement of items. Runs in linear time.\n     */\n    public void buildHeap( )\n    {\n        for( int i = currentSize / 2; i \u003e 0; i-- )\n            percolateDown( i );\n    }\n\n    /**\n     * Test if the priority queue is logically empty.\n     * @return true if empty, false otherwise.\n     */\n    public boolean isEmpty( )\n    {\n        return currentSize == 0;\n    }\n\n    /**\n     * Test if the priority queue is logically full.\n     * @return true if full, false otherwise.\n     */\n    public boolean isFull( )\n    {\n        return currentSize == array.length - 1;\n    }\n\n    /**\n     * Make the priority queue logically empty.\n     */\n    //@ ensures isEmpty();\n    public void makeEmpty( )\n    {\n        currentSize = 0;\n    }\n\n    private static final int DEFAULT_CAPACITY = 100;\n\n    private int currentSize;      // Number of elements in heap\n    private int [ ] array; // The heap array\n\n    /**\n     * Internal method to percolate down in the heap.\n     * @param hole the index at which the percolate begins.\n     */\n    private void percolateDown( int hole )\n    {\n        int child;\n        int tmp = array[ hole ];\n\n        for( ; hole * 2 \u003c= currentSize; hole = child )\n        {\n        \tchild = hole * 2;\n\n            if( child != currentSize \u0026\u0026\n                    array[ child + 1 ]\u003c array[ child ]  )\n                    child++;\n            if( array[ child ]\u003c tmp )\n                array[ hole ] = array[ child ];\n            else\n                 break;\n        }\n         array[ hole ] = tmp;\n    }\n\n\n}\n",
        "name": "BinaryHeap.java",
        "path": "Testing/Practice1/BinaryHeap/src/main/java/net/mooctest/BinaryHeap.java",
        "url": "/github.com/ddadaal/Homework/-/blob/Testing/Practice1/BinaryHeap/src/main/java/net/mooctest/BinaryHeap.java"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 36,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires capacity \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 37,
          "offsetAndLengths": [
            [
              4,
              12
            ]
          ],
          "preview": "    //@ ensures isEmpty();"
        },
        {
          "limitHit": false,
          "lineNumber": 136,
          "offsetAndLengths": [
            [
              4,
              12
            ]
          ],
          "preview": "    //@ ensures isEmpty();"
        }
      ],
      "repository": {
        "name": "github.com/ddadaal/Homework",
        "url": "/github.com/ddadaal/Homework"
      }
    },
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "457c2b2e8293c765d163f457e66bf83bb3f68d80"
        },
        "content": "package net.mooctest;\n\n// BinaryHeap class\n//\n// CONSTRUCTION: with optional capacity (that defaults to 100)\n//\n// ******************PUBLIC OPERATIONS*********************\n// void insert( x )       --\u003e Insert x\n// int deleteMin( )--\u003e Return and remove smallest item\n// int findMin( )  --\u003e Return smallest item\n// boolean isEmpty( )     --\u003e Return true if empty; else false\n// boolean isFull( )      --\u003e Return true if full; else false\n// void makeEmpty( )      --\u003e Remove all items\n// ******************ERRORS********************************\n// Throws Overflow if capacity exceeded\n\n/**\n * Implements a binary heap.\n * Note that all \"matching\" is based on the compareTo method.\n * @author Mark Allen Weiss\n */\npublic class BinaryHeap\n{\n    //@ invariant wellFormed();\n    /**\n     * Construct the binary heap.\n     */\n    public BinaryHeap( )\n    {\n        this( DEFAULT_CAPACITY );\n    }\n\n    /**\n     * Construct the binary heap.\n     * @param capacity the capacity of the binary heap.\n     */\n    //@ requires capacity \u003e 0;\n    //@ ensures isEmpty();\n    public BinaryHeap( int capacity )\n    {\n        currentSize = 0;\n        array = new int[ capacity + 1 ];\n    }\n\n    /**\n     * Insert into the priority queue, maintaining heap order.\n     * Duplicates are allowed.\n     * @param x the item to insert.\n     * @exception Overflow if container is full.\n     */\n    public void insert( int x ) throws Overflow\n    {\n        if( isFull( ) )\n            throw new Overflow( );\n\n        // Percolate up\n        int hole = ++currentSize;\n        for( ; hole \u003e 1 \u0026\u0026 x\u003c array[ hole / 2 ]; hole /= 2 )\n            array[ hole ] = array[ hole / 2 ];\n        array[ hole ] = x;\n    }\n\n    /**\n     * Find the smallest item in the priority queue.\n     * @return the smallest item, or null, if empty.\n     */\n    public int findMin( )\n    {\n        if( isEmpty( ) )\n            return -1;\n        return array[ 1 ];\n    }\n    boolean wellFormed() {\n        if(array==null) {//array!=null\n            return false;\n        }\n        if(currentSize\u003c0 || currentSize\u003e=array.length) {//currentSize\u003e=0; currentSize\u003carray.length;\n            return false;\n        }\n        for(int i=1; i\u003ccurrentSize; i++) {\n            if(i*2 \u003c= currentSize \u0026\u0026 array[i]\u003earray[2*i]) {\n                return false;\n            }\n            if(i*2 + 1\u003c= currentSize \u0026\u0026 array[i]\u003earray[2*i+1]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    /**\n     * Remove the smallest item from the priority queue.\n     * @return the smallest item, or null, if empty.\n     */\n    public int deleteMin( )\n    {\n        if( isEmpty( ) )\n            return -1;\n\n        int minItem = findMin( );\n        array[ 1 ] = array[ currentSize-- ];\n        percolateDown( 1 );\n\n        return minItem;\n    }\n\n    /**\n     * Establish heap order property from an arbitrary\n     * arrangement of items. Runs in linear time.\n     */\n    public void buildHeap( )\n    {\n        for( int i = currentSize / 2; i \u003e 0; i-- )\n            percolateDown( i );\n    }\n\n    /**\n     * Test if the priority queue is logically empty.\n     * @return true if empty, false otherwise.\n     */\n    public boolean isEmpty( )\n    {\n        return currentSize == 0;\n    }\n\n    /**\n     * Test if the priority queue is logically full.\n     * @return true if full, false otherwise.\n     */\n    public boolean isFull( )\n    {\n        return currentSize == array.length - 1;\n    }\n\n    /**\n     * Make the priority queue logically empty.\n     */\n    //@ ensures isEmpty();\n    public void makeEmpty( )\n    {\n        currentSize = 0;\n    }\n\n    private static final int DEFAULT_CAPACITY = 100;\n\n    private int currentSize;      // Number of elements in heap\n    private int [ ] array; // The heap array\n\n    /**\n     * Internal method to percolate down in the heap.\n     * @param hole the index at which the percolate begins.\n     */\n    private void percolateDown( int hole )\n    {\n        int child;\n        int tmp = array[ hole ];\n\n        for( ; hole * 2 \u003c= currentSize; hole = child )\n        {\n        \tchild = hole * 2;\n\n            if( child != currentSize \u0026\u0026\n                    array[ child + 1 ]\u003c array[ child ]  )\n                    child++;\n            if( array[ child ]\u003c tmp )\n                array[ hole ] = array[ child ];\n            else\n                 break;\n        }\n         array[ hole ] = tmp;\n    }\n\n\n}\n",
        "name": "BinaryHeap.java",
        "path": "Testing/Practice1/BinaryHeap/src.backup/main/java/net/mooctest/BinaryHeap.java",
        "url": "/github.com/ddadaal/Homework/-/blob/Testing/Practice1/BinaryHeap/src.backup/main/java/net/mooctest/BinaryHeap.java"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 36,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires capacity \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 37,
          "offsetAndLengths": [
            [
              4,
              12
            ]
          ],
          "preview": "    //@ ensures isEmpty();"
        },
        {
          "limitHit": false,
          "lineNumber": 136,
          "offsetAndLengths": [
            [
              4,
              12
            ]
          ],
          "preview": "    //@ ensures isEmpty();"
        }
      ],
      "repository": {
        "name": "github.com/ddadaal/Homework",
        "url": "/github.com/ddadaal/Homework"
      }
    }
  ],
  "LimitHit": false,
  "Cloning": [],
  "Missing": [],
  "Timedout": [],
  "ResultCount": 6,
  "ElapsedMilliseconds": 1297,
  "Alert": {
    "Title": "",
    "Description": "",
    "ProposedQueries": null
  }
}
