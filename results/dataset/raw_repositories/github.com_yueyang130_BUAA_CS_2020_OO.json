{
  "SourcegraphEndpoint": "https://sourcegraph.com",
  "Query": "(//@ requires )|(//@ ensures ) repo:github.com/yueyang130/BUAA_CS_2020_OO lang:java count:all case:yes type:file patterntype:regexp",
  "Site": {
    "BuildVersion": "238702_2023-08-16_5.1-acf4bcc841e5"
  },
  "Results": [
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "09e589ed0cd8461bbe65f4732df785e737b0edfc"
        },
        "content": "package com.oocourse.spec3.main;\n\nimport java.math.BigInteger;\n\npublic interface Group {\n\n    /*@ public instance model non_null int id;\n      @ public instance model non_null Person[] people;\n      @*/\n      \n    //@ ensures \\result == id;\n    public /*@pure@*/ int getId();\n    \n    /*@ also\n      @ public normal_behavior\n      @ requires obj != null \u0026\u0026 obj instanceof Group;\n      @ assignable \\nothing;\n      @ ensures \\result == (((Group) obj).getId() == id);\n      @ also\n      @ public normal_behavior\n      @ requires obj == null || !(obj instanceof Group);\n      @ assignable \\nothing;\n      @ ensures \\result == false;\n      @*/\n    public /*@pure@*/ boolean equals(Object obj);\n    \n    public void addPerson(Person person);\n    \n    //@ ensures \\result == (\\exists int i; 0 \u003c= i \u0026\u0026 i \u003c people.length; people[i].equals(person));\n    public /*@pure@*/ boolean hasPerson(Person person);\n    \n    /*@ ensures \\result == (\\sum int i; 0 \u003c= i \u0026\u0026 i \u003c people.length; \n      @          (\\sum int j; 0 \u003c= j \u0026\u0026 j \u003c people.length \u0026\u0026 people[i].isLinked(people[j]); 1));\n      @*/\n    public /*@pure@*/ int getRelationSum();\n    \n    /*@ ensures \\result == (\\sum int i; 0 \u003c= i \u0026\u0026 i \u003c people.length; \n      @          (\\sum int j; 0 \u003c= j \u0026\u0026 j \u003c people.length \u0026\u0026 \n      @           people[i].isLinked(people[j]); people[i].queryValue(people[j])));\n      @*/\n    public /*@pure@*/ int getValueSum();\n\n    /*@ public normal_behavior\n      @ requires people.length \u003e 0;\n      @ ensures (\\exists BigInteger[] temp; \n      @          temp.length == people.length \u0026\u0026 temp[0] == people[0].getCharacter();\n      @           (\\forall int i; 1 \u003c= i \u0026\u0026 i \u003c temp.length; \n      @            temp[i] == temp[i-1].xor(people[i].getCharacter())) \u0026\u0026 \n      @             \\result == temp[temp.length - 1]);\n      @ also \n      @ public normal_behavior\n      @ requires people.length == 0;\n      @ ensures \\result == BigInteger.ZERO;\n      @*/\n    public /*@pure@*/ BigInteger getConflictSum();\n    \n    /*@ ensures \\result == (people.length == 0? 0 : \n      @          ((\\sum int i; 0 \u003c= i \u0026\u0026 i \u003c people.length; people[i].getAge()) / people.length));\n      @*/\n    public /*@pure@*/ int getAgeMean();\n    \n    /*@ ensures \\result == (people.length == 0? 0 : ((\\sum int i; 0 \u003c= i \u0026\u0026 i \u003c people.length; \n      @          (people[i].getAge() - getAgeMean()) * (people[i].getAge() - getAgeMean())) / \n      @           people.length));\n      @*/\n    public /*@pure@*/ int getAgeVar();\n\n    public void delPerson(Person person);\n}",
        "name": "Group.java",
        "path": "u3_3/src/com/oocourse/spec3/main/Group.java",
        "url": "/github.com/yueyang130/BUAA_CS_2020_OO/-/blob/u3_3/src/com/oocourse/spec3/main/Group.java"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 10,
          "offsetAndLengths": [
            [
              4,
              12
            ]
          ],
          "preview": "    //@ ensures \\result == id;"
        },
        {
          "limitHit": false,
          "lineNumber": 28,
          "offsetAndLengths": [
            [
              4,
              12
            ]
          ],
          "preview": "    //@ ensures \\result == (\\exists int i; 0 \u003c= i \u0026\u0026 i \u003c people.length; people[i].equals(person));"
        }
      ],
      "repository": {
        "name": "github.com/yueyang130/BUAA_CS_2020_OO",
        "url": "/github.com/yueyang130/BUAA_CS_2020_OO"
      }
    },
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "09e589ed0cd8461bbe65f4732df785e737b0edfc"
        },
        "content": "package com.oocourse.spec2.main;\n\nimport java.math.BigInteger;\n\npublic interface Group {\n\n    /*@ public instance model non_null int id;\n      @ public instance model non_null Person[] people;\n      @*/\n      \n    //@ ensures \\result == id;\n    public /*@pure@*/ int getId();\n    \n    /*@ also\n      @ public normal_behavior\n      @ requires obj != null \u0026\u0026 obj instanceof Group;\n      @ assignable \\nothing;\n      @ ensures \\result == (((Group) obj).getId() == id);\n      @ also\n      @ public normal_behavior\n      @ requires obj == null || !(obj instanceof Group);\n      @ assignable \\nothing;\n      @ ensures \\result == false;\n      @*/\n    public /*@pure@*/ boolean equals(Object obj);\n    \n    public void addPerson(Person person);\n    \n    //@ ensures \\result == (\\exists int i; 0 \u003c= i \u0026\u0026 i \u003c people.length; people[i].equals(person));\n    public /*@pure@*/ boolean hasPerson(Person person);\n    \n    /*@ ensures \\result == (\\sum int i; 0 \u003c= i \u0026\u0026 i \u003c people.length; \n      @          (\\sum int j; 0 \u003c= j \u0026\u0026 j \u003c people.length \u0026\u0026 people[i].isLinked(people[j]); 1));\n      @*/\n    public /*@pure@*/ int getRelationSum();\n    \n    /*@ ensures \\result == (\\sum int i; 0 \u003c= i \u0026\u0026 i \u003c people.length; \n      @          (\\sum int j; 0 \u003c= j \u0026\u0026 j \u003c people.length \u0026\u0026 \n      @           people[i].isLinked(people[j]); people[i].queryValue(people[j])));\n      @*/\n    public /*@pure@*/ int getValueSum();\n\n    /*@ public normal_behavior\n      @ requires people.length \u003e 0;\n      @ ensures (\\exists BigInteger[] temp; \n      @          temp.length == people.length \u0026\u0026 temp[0] == people[0].getCharacter();\n      @           (\\forall int i; 1 \u003c= i \u0026\u0026 i \u003c temp.length; \n      @            temp[i] == temp[i-1].xor(people[i].getCharacter())) \u0026\u0026 \n      @             \\result == temp[temp.length - 1]);\n      @ also \n      @ public normal_behavior\n      @ requires people.length == 0;\n      @ ensures \\result == BigInteger.ZERO;\n      @*/\n    public /*@pure@*/ BigInteger getConflictSum();\n    \n    /*@ ensures \\result == people.length == 0? 0 : \n      @          ((\\sum int i; 0 \u003c= i \u0026\u0026 i \u003c people.length; people[i].getAge()) / people.length);\n      @*/\n    public /*@pure@*/ int getAgeMean();\n    \n    /*@ ensures \\result == people.length == 0? 0 : ((\\sum int i; 0 \u003c= i \u0026\u0026 i \u003c people.length; \n      @          (people[i].getAge() - getAgeMean()) * (people[i].getAge() - getAgeMean())) / \n      @           people.length);\n      @*/\n    public /*@pure@*/ int getAgeVar();\n}",
        "name": "Group.java",
        "path": "u3_2/src/com/oocourse/spec2/main/Group.java",
        "url": "/github.com/yueyang130/BUAA_CS_2020_OO/-/blob/u3_2/src/com/oocourse/spec2/main/Group.java"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 10,
          "offsetAndLengths": [
            [
              4,
              12
            ]
          ],
          "preview": "    //@ ensures \\result == id;"
        },
        {
          "limitHit": false,
          "lineNumber": 28,
          "offsetAndLengths": [
            [
              4,
              12
            ]
          ],
          "preview": "    //@ ensures \\result == (\\exists int i; 0 \u003c= i \u0026\u0026 i \u003c people.length; people[i].equals(person));"
        }
      ],
      "repository": {
        "name": "github.com/yueyang130/BUAA_CS_2020_OO",
        "url": "/github.com/yueyang130/BUAA_CS_2020_OO"
      }
    },
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "09e589ed0cd8461bbe65f4732df785e737b0edfc"
        },
        "content": "package com.oocourse.spec2.main;\n\nimport java.math.BigInteger;\n\npublic interface Person extends Comparable\u003cPerson\u003e {\n\n    /*@ public instance model non_null int id;\n      @ public instance model non_null String name;\n      @ public instance model non_null BigInteger character;\n      @ public instance model non_null int age;\n      @ public instance model non_null Person[] acquaintance;\n      @ public instance model non_null int[] value;\n      @*/\n\n\n    //@ ensures \\result == id;\n    public /*@pure@*/ int getId();\n\n    //@ ensures \\result.equals(name);\n    public /*@pure@*/ String getName();\n\n    //@ ensures \\result.equals(character);\n    public /*@pure@*/ BigInteger getCharacter();\n\n    //@ ensures \\result == age;\n    public /*@pure@*/ int getAge();\n\n    /*@ also\n      @ public normal_behavior\n      @ requires obj != null \u0026\u0026 obj instanceof Person;\n      @ assignable \\nothing;\n      @ ensures \\result == (((Person) obj).getId() == id);\n      @ also\n      @ public normal_behavior\n      @ requires obj == null || !(obj instanceof Person);\n      @ assignable \\nothing;\n      @ ensures \\result == false;\n      @*/\n    public /*@pure@*/ boolean equals(Object obj);\n    \n    /*@ public normal_behavior\n      @ assignable \\nothing;\n      @ ensures \\result == (\\exists int i; 0 \u003c= i \u0026\u0026 i \u003c acquaintance.length; \n      @                     acquaintance[i].getId() == person.getId()) || person.getId() == id;\n      @*/\n    public /*@pure@*/ boolean isLinked(Person person);\n    \n    /*@ public normal_behavior\n      @ requires (\\exists int i; 0 \u003c= i \u0026\u0026 i \u003c acquaintance.length; \n      @          acquaintance[i].getId() == person.getId());\n      @ assignable \\nothing;\n      @ ensures (\\exists int i; 0 \u003c= i \u0026\u0026 i \u003c acquaintance.length; \n      @         acquaintance[i].getId() == person.getId() \u0026\u0026 \\result == value[i]);\n      @ also\n      @ public normal_behavior\n      @ requires (\\forall int i; 0 \u003c= i \u0026\u0026 i \u003c acquaintance.length; \n      @          acquaintance[i].getId() != person.getId());\n      @ ensures \\result == 0;\n      @*/\n    public /*@pure@*/ int queryValue(Person person);\n\n    //@ ensures \\result == acquaintance.length;\n    public /*@pure@*/ int getAcquaintanceSum();\n\n    /*@ also\n      @ public normal_behavior\n      @ ensures \\result == name.compareTo(p2.getName());\n      @*/\n    public /*@pure@*/ int compareTo(Person p2);\n\n}\n",
        "name": "Person.java",
        "path": "u3_2/src/com/oocourse/spec2/main/Person.java",
        "url": "/github.com/yueyang130/BUAA_CS_2020_OO/-/blob/u3_2/src/com/oocourse/spec2/main/Person.java"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 15,
          "offsetAndLengths": [
            [
              4,
              12
            ]
          ],
          "preview": "    //@ ensures \\result == id;"
        },
        {
          "limitHit": false,
          "lineNumber": 18,
          "offsetAndLengths": [
            [
              4,
              12
            ]
          ],
          "preview": "    //@ ensures \\result.equals(name);"
        },
        {
          "limitHit": false,
          "lineNumber": 21,
          "offsetAndLengths": [
            [
              4,
              12
            ]
          ],
          "preview": "    //@ ensures \\result.equals(character);"
        },
        {
          "limitHit": false,
          "lineNumber": 24,
          "offsetAndLengths": [
            [
              4,
              12
            ]
          ],
          "preview": "    //@ ensures \\result == age;"
        },
        {
          "limitHit": false,
          "lineNumber": 61,
          "offsetAndLengths": [
            [
              4,
              12
            ]
          ],
          "preview": "    //@ ensures \\result == acquaintance.length;"
        }
      ],
      "repository": {
        "name": "github.com/yueyang130/BUAA_CS_2020_OO",
        "url": "/github.com/yueyang130/BUAA_CS_2020_OO"
      }
    },
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "09e589ed0cd8461bbe65f4732df785e737b0edfc"
        },
        "content": "package com.oocourse.spec3.main;\n\nimport java.math.BigInteger;\n\npublic interface Person extends Comparable\u003cPerson\u003e {\n\n    /*@ public instance model non_null int id;\n      @ public instance model non_null String name;\n      @ public instance model non_null BigInteger character;\n      @ public instance model non_null int age;\n      @ public instance model non_null Person[] acquaintance;\n      @ public instance model non_null int[] value;\n      @*/\n    \n\n    //@ ensures \\result == id;\n    public /*@pure@*/ int getId();\n\n    //@ ensures \\result.equals(name);\n    public /*@pure@*/ String getName();\n\n    //@ ensures \\result.equals(character);\n    public /*@pure@*/ BigInteger getCharacter();\n\n    //@ ensures \\result == age;\n    public /*@pure@*/ int getAge();\n\n    /*@ also\n      @ public normal_behavior\n      @ requires obj != null \u0026\u0026 obj instanceof Person;\n      @ assignable \\nothing;\n      @ ensures \\result == (((Person) obj).getId() == id);\n      @ also\n      @ public normal_behavior\n      @ requires obj == null || !(obj instanceof Person);\n      @ assignable \\nothing;\n      @ ensures \\result == false;\n      @*/\n    public /*@pure@*/ boolean equals(Object obj);\n    \n    /*@ public normal_behavior\n      @ assignable \\nothing;\n      @ ensures \\result == (\\exists int i; 0 \u003c= i \u0026\u0026 i \u003c acquaintance.length; \n      @                     acquaintance[i].getId() == person.getId()) || person.getId() == id;\n      @*/\n    public /*@pure@*/ boolean isLinked(Person person);\n    \n    /*@ public normal_behavior\n      @ requires (\\exists int i; 0 \u003c= i \u0026\u0026 i \u003c acquaintance.length; \n      @          acquaintance[i].getId() == person.getId());\n      @ assignable \\nothing;\n      @ ensures (\\exists int i; 0 \u003c= i \u0026\u0026 i \u003c acquaintance.length; \n      @         acquaintance[i].getId() == person.getId() \u0026\u0026 \\result == value[i]);\n      @ also\n      @ public normal_behavior\n      @ requires (\\forall int i; 0 \u003c= i \u0026\u0026 i \u003c acquaintance.length; \n      @          acquaintance[i].getId() != person.getId());\n      @ ensures \\result == 0;\n      @*/\n    public /*@pure@*/ int queryValue(Person person);\n\n    //@ ensures \\result == acquaintance.length;\n    public /*@pure@*/ int getAcquaintanceSum();\n\n    /*@ also\n      @ public normal_behavior\n      @ ensures \\result == name.compareTo(p2.getName());\n      @*/\n    public /*@pure@*/ int compareTo(Person p2);\n\n}\n",
        "name": "Person.java",
        "path": "u3_3/src/com/oocourse/spec3/main/Person.java",
        "url": "/github.com/yueyang130/BUAA_CS_2020_OO/-/blob/u3_3/src/com/oocourse/spec3/main/Person.java"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 15,
          "offsetAndLengths": [
            [
              4,
              12
            ]
          ],
          "preview": "    //@ ensures \\result == id;"
        },
        {
          "limitHit": false,
          "lineNumber": 18,
          "offsetAndLengths": [
            [
              4,
              12
            ]
          ],
          "preview": "    //@ ensures \\result.equals(name);"
        },
        {
          "limitHit": false,
          "lineNumber": 21,
          "offsetAndLengths": [
            [
              4,
              12
            ]
          ],
          "preview": "    //@ ensures \\result.equals(character);"
        },
        {
          "limitHit": false,
          "lineNumber": 24,
          "offsetAndLengths": [
            [
              4,
              12
            ]
          ],
          "preview": "    //@ ensures \\result == age;"
        },
        {
          "limitHit": false,
          "lineNumber": 61,
          "offsetAndLengths": [
            [
              4,
              12
            ]
          ],
          "preview": "    //@ ensures \\result == acquaintance.length;"
        }
      ],
      "repository": {
        "name": "github.com/yueyang130/BUAA_CS_2020_OO",
        "url": "/github.com/yueyang130/BUAA_CS_2020_OO"
      }
    },
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "09e589ed0cd8461bbe65f4732df785e737b0edfc"
        },
        "content": "package com.oocourse.spec3.main;\n\nimport java.math.BigInteger;\n\nimport com.oocourse.spec3.exceptions.EqualGroupIdException;\nimport com.oocourse.spec3.exceptions.EqualPersonIdException;\nimport com.oocourse.spec3.exceptions.EqualRelationException;\nimport com.oocourse.spec3.exceptions.PersonIdNotFoundException;\nimport com.oocourse.spec3.exceptions.RelationNotFoundException;\nimport com.oocourse.spec3.exceptions.GroupIdNotFoundException;\n\npublic interface Network {\n    \n    /*@ public instance model non_null Person[] people;\n      @ public instance model non_null Group[] groups;\n      @ public instance model non_null int[] money;\n      @*/\n      \n      \n    //@ ensures \\result == (\\exists int i; 0 \u003c= i \u0026\u0026 i \u003c people.length; people[i].getId() == id);\n    public /*@pure@*/ boolean contains(int id);\n    \n    /*@ public normal_behavior\n      @ requires contains(id);\n      @ ensures (\\exists int i; 0 \u003c= i \u0026\u0026 i \u003c people.length; people[i].getId() == id \u0026\u0026 \n      @         \\result == people[i]);\n      @ also\n      @ public normal_behavior\n      @ requires !contains(id);\n      @ ensures \\result == null;\n      @*/\n    public /*@pure@*/ Person getPerson(int id);\n    \n    /*@ public normal_behavior\n      @ requires !(\\exists int i; 0 \u003c= i \u0026\u0026 i \u003c people.length; people[i].equals(person));\n      @ assignable people, money;\n      @ ensures people.length == \\old(people.length) + 1;\n      @ ensures money.length == people.length;\n      @ ensures (\\forall int i; 0 \u003c= i \u0026\u0026 i \u003c \\old(people.length); \n      @         (\\exists int j; 0 \u003c= j \u0026\u0026 j \u003c people.length; \n      @         people[j] == \\old(people[i]) \u0026\u0026 money[j] == \\old(money[i])));\n      @ ensures (\\exists int i; 0 \u003c= i \u0026\u0026 i \u003c people.length; people[i] == person \u0026\u0026 money[i] == 0);\n      @ also\n      @ public exceptional_behavior\n      @ signals (EqualPersonIdException e) (\\exists int i; 0 \u003c= i \u0026\u0026 i \u003c people.length; \n      @                                     people[i].equals(person));\n      @*/\n    public void addPerson(Person person) throws EqualPersonIdException;\n    \n    /*@ public normal_behavior\n      @ requires contains(id1) \u0026\u0026 contains(id2) \u0026\u0026 id1 != id2 \u0026\u0026 \n      @             !getPerson(id1).isLinked(getPerson(id2));\n      @ assignable people;\n      @ ensures people.length == \\old(people.length);\n      @ ensures (\\forall int i; 0 \u003c= i \u0026\u0026 i \u003c \\old(people.length); \n      @          (\\exists int j; 0 \u003c= j \u0026\u0026 j \u003c people.length; people[j] == \\old(people[i])));\n      @ ensures (\\forall int i; 0 \u003c= i \u0026\u0026 i \u003c people.length \u0026\u0026 \\old(people[i].getId()) != id1 \u0026\u0026 \n      @     \\old(people[i].getId()) != id2; \\not_assigned(people[i]));\n      @ ensures getPerson(id1).isLinked(getPerson(id2)) \u0026\u0026 getPerson(id2).isLinked(getPerson(id1));\n      @ ensures getPerson(id1).queryValue(getPerson(id2)) == value;\n      @ ensures getPerson(id2).queryValue(getPerson(id1)) == value;\n      @ ensures (\\forall int i; 0 \u003c= i \u0026\u0026 i \u003c \\old(getPerson(id1).acquaintance.length); \n      @         \\old(getPerson(id1).acquaintance[i]) == getPerson(id1).acquaintance[i] \u0026\u0026 \n      @          \\old(getPerson(id1).value[i]) == getPerson(id1).value[i]);\n      @ ensures (\\forall int i; 0 \u003c= i \u0026\u0026 i \u003c \\old(getPerson(id2).acquaintance.length); \n      @         \\old(getPerson(id2).acquaintance[i]) == getPerson(id2).acquaintance[i] \u0026\u0026 \n      @          \\old(getPerson(id2).value[i]) == getPerson(id2).value[i]);\n      @ ensures getPerson(id1).value.length == getPerson(id1).acquaintance.length;\n      @ ensures getPerson(id2).value.length == getPerson(id2).acquaintance.length;\n      @ ensures \\old(getPerson(id1).value.length) == getPerson(id1).acquaintance.length - 1;\n      @ ensures \\old(getPerson(id2).value.length) == getPerson(id2).acquaintance.length - 1;\n      @ also\n      @ public exceptional_behavior\n      @ assignable \\nothing;\n      @ requires !contains(id1) || !contains(id2) || \n      @          (getPerson(id1).isLinked(getPerson(id2)) \u0026\u0026 id1 != id2);\n      @ signals (PersonIdNotFoundException e) !contains(id1) || !contains(id2);\n      @ signals (EqualRelationException e) contains(id1) \u0026\u0026 contains(id2) \u0026\u0026 \n      @         getPerson(id1).isLinked(getPerson(id2));\n      @*/\n    public void addRelation(int id1, int id2, int value) throws \n        PersonIdNotFoundException, EqualRelationException;\n\n    /*@ public normal_behavior\n      @ requires contains(id1) \u0026\u0026 contains(id2) \u0026\u0026 getPerson(id1).isLinked(getPerson(id2));\n      @ ensures \\result == getPerson(id1).queryValue(getPerson(id2));\n      @ also\n      @ public exceptional_behavior\n      @ signals (PersonIdNotFoundException e) !contains(id1) || !contains(id2);\n      @ signals (RelationNotFoundException e) contains(id1) \u0026\u0026 contains(id2) \u0026\u0026 \n      @         !getPerson(id1).isLinked(getPerson(id2));\n      @*/\n    public /*@pure@*/ int queryValue(int id1, int id2) throws \n        PersonIdNotFoundException, RelationNotFoundException;\n\n    /*@ public normal_behavior\n      @ requires contains(id1) \u0026\u0026 contains(id2);\n      @ ensures \\result.equals(getPerson(id1).getCharacter().xor(getPerson(id2).getCharacter()));\n      @ also\n      @ public exceptional_behavior\n      @ signals (PersonIdNotFoundException e) !contains(id1) || !contains(id2);\n      @*/\n    public /*@pure@*/ BigInteger queryConflict(int id1, int id2) throws PersonIdNotFoundException;\n    \n    /*@ public normal_behavior\n      @ requires contains(id);\n      @ ensures \\result == getPerson(id).getAcquaintanceSum();\n      @ also\n      @ public exceptional_behavior\n      @ signals (PersonIdNotFoundException e) !contains(id);\n      @*/\n    public /*@pure@*/ int queryAcquaintanceSum(int id) throws PersonIdNotFoundException;\n    \n    /*@ public normal_behavior\n      @ requires contains(id1) \u0026\u0026 contains(id2);\n      @ ensures \\result == getPerson(id1).getAge() - getPerson(id2).getAge();\n      @ also\n      @ public exceptional_behavior\n      @ signals (PersonIdNotFoundException e) !contains(id1) || !contains(id2);\n      @*/\n    public /*@pure@*/ int compareAge(int id1, int id2) throws PersonIdNotFoundException;\n    \n    /*@ public normal_behavior\n      @ requires contains(id1) \u0026\u0026 contains(id2);\n      @ ensures \\result == getPerson(id1).getName().compareTo(getPerson(id2).getName());\n      @ also\n      @ public exceptional_behavior\n      @ signals (PersonIdNotFoundException e) !contains(id1) || !contains(id2);\n      @*/\n    public /*@pure@*/ int compareName(int id1, int id2) throws PersonIdNotFoundException;\n\n    //@ ensures \\result == people.length;\n    public /*@pure@*/ int queryPeopleSum();\n\n    /*@ public normal_behavior\n      @ requires contains(id);\n      @ ensures \\result == (\\sum int i; 0 \u003c= i \u0026\u0026 i \u003c people.length \u0026\u0026 \n      @                     compareName(id, people[i].getId()) \u003e 0; 1) + 1;\n      @ also\n      @ public exceptional_behavior\n      @ signals (PersonIdNotFoundException e) !contains(id);\n      @*/\n    public /*@pure@*/ int queryNameRank(int id) throws PersonIdNotFoundException;\n    \n    /*@ public normal_behavior\n      @ requires contains(id1) \u0026\u0026 contains(id2);\n      @ ensures \\result == (\\exists Person[] array; array.length \u003e= 2; \n      @                     array[0].equals(getPerson(id1)) \u0026\u0026 \n      @                     array[array.length - 1].equals(getPerson(id2)) \u0026\u0026\n      @                      (\\forall int i; 0 \u003c= i \u0026\u0026 i \u003c array.length - 1; \n      @                      array[i].isLinked(array[i + 1]) == true));\n      @ also\n      @ public exceptional_behavior\n      @ signals (PersonIdNotFoundException e) !contains(id1) || !contains(id2);\n      @*/\n    public /*@pure@*/ boolean isCircle(int id1, int id2) throws PersonIdNotFoundException;\n\n    /*@ public normal_behavior\n      @ requires !(\\exists int i; 0 \u003c= i \u0026\u0026 i \u003c groups.length; groups[i].equals(group));\n      @ assignable groups;\n      @ ensures groups.length == \\old(groups.length) + 1;\n      @ ensures (\\forall int i; 0 \u003c= i \u0026\u0026 i \u003c \\old(groups.length); \n      @          (\\exists int j; 0 \u003c= j \u0026\u0026 j \u003c groups.length; groups[j] == (\\old(groups[i]))));\n      @ ensures (\\exists int i; 0 \u003c= i \u0026\u0026 i \u003c groups.length; groups[i] == group);\n      @ also\n      @ public exceptional_behavior\n      @ signals (EqualGroupIdException e) (\\exists int i; 0 \u003c= i \u0026\u0026 i \u003c groups.length; \n      @                                     groups[i].equals(group));\n      @*/\n    public void addGroup(Group group) throws EqualGroupIdException;\n    \n    /*@ ensures (\\exists int i; 0 \u003c= i \u0026\u0026 i \u003c groups.length; groups[i].getId() == id \u0026\u0026 \n      @ \\result == groups[i]);\n      @*/\n    public /*@pure@*/ Group getGroup(int id);\n    \n    /*@ public normal_behavior\n      @ requires (\\exists int i; 0 \u003c= i \u0026\u0026 i \u003c groups.length; groups[i].getId() == id2) \u0026\u0026\n      @           (\\exists int i; 0 \u003c= i \u0026\u0026 i \u003c people.length; people[i].getId() == id1) \u0026\u0026\n      @            getGroup(id2).hasPerson(getPerson(id1)) == false \u0026\u0026 \n      @             getGroup(id2).people.length \u003c 1111;\n      @ assignable groups;\n      @ ensures (\\forall int i; 0 \u003c= i \u003c groups.length; \\not_assigned(groups[i]));\n      @ ensures (\\forall Person i; \\old(getGroup(id2).hasPerson(i)); \n      @          getGroup(id2).hasPerson(i));\n      @ ensures \\old(getGroup(id2).people.length) == getGroup(id2).people.length - 1;\n      @ ensures getGroup(id2).hasPerson(getPerson(id1));\n      @ also\n      @ public exceptional_behavior\n      @ signals (GroupIdNotFoundException e) !(\\exists int i; 0 \u003c= i \u0026\u0026 i \u003c groups.length; \n      @          groups[i].getId() == id2);\n      @ signals (PersonIdNotFoundException e) (\\exists int i; 0 \u003c= i \u0026\u0026 i \u003c groups.length; \n      @          groups[i].getId() == id2) \u0026\u0026 !(\\exists int i; 0 \u003c= i \u0026\u0026 i \u003c people.length; \n      @           people[i].getId() == id1);\n      @ signals (EqualPersonIdException e) (\\exists int i; 0 \u003c= i \u0026\u0026 i \u003c groups.length; \n      @          groups[i].getId() == id2) \u0026\u0026 (\\exists int i; 0 \u003c= i \u0026\u0026 i \u003c people.length; \n      @           people[i].getId() == id1) \u0026\u0026 getGroup(id2).hasPerson(getPerson(id1));\n      @*/\n    public void addtoGroup(int id1, int id2) throws GroupIdNotFoundException, \n        PersonIdNotFoundException, EqualPersonIdException;\n\n    //@ ensures \\result == groups.length;\n    public /*@pure@*/ int queryGroupSum();\n\n    /*@ public normal_behavior\n      @ requires (\\exists int i; 0 \u003c= i \u0026\u0026 i \u003c groups.length; groups[i].getId() == id);\n      @ ensures \\result == getGroup(id).people.length;\n      @ also\n      @ public exceptional_behavior\n      @ signals (GroupIdNotFoundException e) !(\\exists int i; 0 \u003c= i \u0026\u0026 i \u003c groups.length; \n      @          groups[i].getId() == id);\n      @*/\n    public /*@pure@*/ int queryGroupPeopleSum(int id) throws GroupIdNotFoundException;\n    \n    /*@ public normal_behavior\n      @ requires (\\exists int i; 0 \u003c= i \u0026\u0026 i \u003c groups.length; groups[i].getId() == id);\n      @ ensures \\result == getGroup(id).getRelationSum();\n      @ also\n      @ public exceptional_behavior\n      @ signals (GroupIdNotFoundException e) !(\\exists int i; 0 \u003c= i \u0026\u0026 i \u003c groups.length; \n      @          groups[i].getId() == id);\n      @*/\n    public /*@pure@*/ int queryGroupRelationSum(int id) throws GroupIdNotFoundException;\n\n    /*@ public normal_behavior\n      @ requires (\\exists int i; 0 \u003c= i \u0026\u0026 i \u003c groups.length; groups[i].getId() == id);\n      @ ensures \\result == getGroup(id).getValueSum();\n      @ also\n      @ public exceptional_behavior\n      @ signals (GroupIdNotFoundException e) !(\\exists int i; 0 \u003c= i \u0026\u0026 i \u003c groups.length; \n      @          groups[i].getId() == id);\n      @*/\n    public /*@pure@*/ int queryGroupValueSum(int id) throws GroupIdNotFoundException;\n\n    /*@ public normal_behavior\n      @ requires (\\exists int i; 0 \u003c= i \u0026\u0026 i \u003c groups.length; groups[i].getId() == id);\n      @ ensures \\result == getGroup(id).getConflictSum();\n      @ also\n      @ public exceptional_behavior\n      @ signals (GroupIdNotFoundException e) !(\\exists int i; 0 \u003c= i \u0026\u0026 i \u003c groups.length; \n      @          groups[i].getId() == id);\n      @*/\n    public /*@pure@*/ BigInteger queryGroupConflictSum(int id) throws GroupIdNotFoundException;\n\n    /*@ public normal_behavior\n      @ requires (\\exists int i; 0 \u003c= i \u0026\u0026 i \u003c groups.length; groups[i].getId() == id);\n      @ ensures \\result == getGroup(id).getAgeMean();\n      @ also\n      @ public exceptional_behavior\n      @ signals (GroupIdNotFoundException e) !(\\exists int i; 0 \u003c= i \u0026\u0026 i \u003c groups.length; \n      @          groups[i].getId() == id);\n      @*/\n    public /*@pure@*/ int queryGroupAgeMean(int id) throws GroupIdNotFoundException;\n    \n    /*@ public normal_behavior\n      @ requires (\\exists int i; 0 \u003c= i \u0026\u0026 i \u003c groups.length; groups[i].getId() == id);\n      @ ensures \\result == getGroup(id).getAgeVar();\n      @ also\n      @ public exceptional_behavior\n      @ signals (GroupIdNotFoundException e) !(\\exists int i; 0 \u003c= i \u0026\u0026 i \u003c groups.length; \n      @          groups[i].getId() == id);\n      @*/\n    public /*@pure@*/ int queryGroupAgeVar(int id) throws GroupIdNotFoundException;\n\n    /*@ ensures \\result == (\\sum int i; 0 \u003c= i \u003c people.length \u0026\u0026 people[i].getAge() \u003e= l \n      @                    \u0026\u0026 people[i].getAge() \u003c= r; 1);\n      @*/\n    public /*@pure@*/ int queryAgeSum(int l, int r);\n\n    /*@ public normal_behavior\n      @ requires (\\exists int i; 0 \u003c= i \u0026\u0026 i \u003c groups.length; groups[i].getId() == id2) \u0026\u0026\n      @           (\\exists int i; 0 \u003c= i \u0026\u0026 i \u003c people.length; people[i].getId() == id1) \u0026\u0026\n      @            getGroup(id2).hasPerson(getPerson(id1)) == true;\n      @ assignable groups;\n      @ ensures (\\forall int i; 0 \u003c= i \u003c groups.length; \\not_assigned(groups[i]));\n      @ ensures (\\forall Person i; getGroup(id2).hasPerson(i); \n      @          \\old(getGroup(id2).hasPerson(i)));\n      @ ensures \\old(getGroup(id2).people.length) == getGroup(id2).people.length + 1;\n      @ ensures getGroup(id2).hasPerson(getPerson(id1)) == false;\n      @ also\n      @ public exceptional_behavior\n      @ signals (GroupIdNotFoundException e) !(\\exists int i; 0 \u003c= i \u0026\u0026 i \u003c groups.length; \n      @          groups[i].getId() == id2);\n      @ signals (PersonIdNotFoundException e) (\\exists int i; 0 \u003c= i \u0026\u0026 i \u003c groups.length; \n      @          groups[i].getId() == id2) \u0026\u0026 !(\\exists int i; 0 \u003c= i \u0026\u0026 i \u003c people.length; \n      @           people[i].getId() == id1);\n      @ signals (EqualPersonIdException e) (\\exists int i; 0 \u003c= i \u0026\u0026 i \u003c groups.length; \n      @          groups[i].getId() == id2) \u0026\u0026 (\\exists int i; 0 \u003c= i \u0026\u0026 i \u003c people.length; \n      @           people[i].getId() == id1) \u0026\u0026 !getGroup(id2).hasPerson(getPerson(id1));\n      @*/\n    public void delFromGroup(int id1, int id2) \n            throws GroupIdNotFoundException, PersonIdNotFoundException, EqualPersonIdException;\n    \n    /*@ public normal_behavior\n      @ requires contains(id1) \u0026\u0026 contains(id2) \u0026\u0026 id1 == id2;\n      @ ensures \\result == 0;\n      @ also\n      @ public normal_behavior\n      @ requires contains(id1) \u0026\u0026 contains(id2) \u0026\u0026 id1 != id2 \u0026\u0026 \n      @          !isCircle(id1, id2);\n      @ ensures \\result == -1;\n      @ also\n      @ public normal_behavior\n      @ requires contains(id1) \u0026\u0026 contains(id2) \u0026\u0026 id1 != id2 \u0026\u0026 \n      @          isCircle(id1, id2);\n      @ ensures (\\exists Person[] pathM; \n      @         pathM.length \u003e= 2 \u0026\u0026 \n      @         pathM[0].equals(getPerson(id1)) \u0026\u0026 pathM[pathM.length - 1].equals(getPerson(id2))\u0026\u0026 \n      @         (\\forall int i; 1 \u003c= i \u0026\u0026 i \u003c pathM.length; pathM[i - 1].isLinked(pathM[i]));\n      @         (\\forall Person[] path; \n      @         path.length \u003e= 2 \u0026\u0026\n      @         path[0].equals(getPerson(id1)) \u0026\u0026 path[path.length - 1].equals(getPerson(id2)) \u0026\u0026 \n      @         (\\forall int i; 1 \u003c= i \u0026\u0026 i \u003c path.length; path[i - 1].isLinked(path[i])); \n      @         (\\sum int i; 1 \u003c= i \u0026\u0026 i \u003c path.length; path[i - 1].queryValue(path[i])) \u003e= \n      @         (\\sum int i; 1 \u003c= i \u0026\u0026 i \u003c pathM.length; pathM[i - 1].queryValue(pathM[i]))) \u0026\u0026 \n      @         \\result==(\\sum int i; 1 \u003c= i \u0026\u0026 i \u003c pathM.length; pathM[i-1].queryValue(pathM[i])));\n      @ also\n      @ public exceptional_behavior\n      @ signals (PersonIdNotFoundException e) !contains(id1) || !contains(id2);\n      @*/\n    public /*@pure@*/ int queryMinPath(int id1, int id2) throws PersonIdNotFoundException;\n\n    /*@ public normal_behavior\n      @ requires contains(id1) \u0026\u0026 contains(id2) \u0026\u0026 id1 == id2;\n      @ ensures \\result == true;\n      @ also\n      @ public normal_behavior\n      @ requires contains(id1) \u0026\u0026 contains(id2) \u0026\u0026 id1 != id2;\n      @ ensures \\result == (\\exists Person[] pathM, path; pathM.length \u003e= 3 \u0026\u0026 path.length \u003e= 2 \u0026\u0026\n      @         pathM[0].equals(getPerson(id1)) \u0026\u0026 pathM[pathM.length - 1].equals(getPerson(id2))\u0026\u0026 \n      @         (\\forall int i; 1 \u003c= i \u0026\u0026 i \u003c pathM.length; pathM[i - 1].isLinked(pathM[i])) \u0026\u0026\n      @         path[0].equals(getPerson(id1)) \u0026\u0026 path[path.length - 1].equals(getPerson(id2)) \u0026\u0026 \n      @         (\\forall int i; 1 \u003c= i \u0026\u0026 i \u003c path.length; path[i - 1].isLinked(path[i]));\n      @         (\\sum int i,j; 0 \u003c= i \u0026\u0026 i \u003c pathM.length \u0026\u0026 0 \u003c= j \u0026\u0026 j \u003c path.length \u0026\u0026\n      @         pathM[i].equals(path[j]); 1) == 2);\n      @ also\n      @ public exceptional_behavior\n      @ signals (PersonIdNotFoundException e) !contains(id1) || !contains(id2);\n      @*/\n    public /*@pure@*/ boolean queryStrongLinked(int id1, int id2) throws PersonIdNotFoundException;\n    \n    /*@ ensures \\result == \n      @         (\\sum int i; 0 \u003c= i \u0026\u0026 i \u003c people.length \u0026\u0026 \n      @         (\\forall int j; 0 \u003c= j \u0026\u0026 j \u003c i; !isCircle(people[i].getId(), people[j].getId()));\n      @         1);\n      @*/\n    public /*@pure@*/ int queryBlockSum();\n\n    /*@ public normal_behavior\n      @ requires contains(id1) \u0026\u0026 contains(id2) \u0026\u0026 id1 != id2;\n      @ assignable money;\n      @ ensures (\\exists int i; 0 \u003c= i \u0026\u0026 i \u003c people.length \u0026\u0026 people[i].getId() == id1;\n      @         money[i] == \\old(money[i] - value));\n      @ ensures (\\exists int i; 0 \u003c= i \u0026\u0026 i \u003c people.length \u0026\u0026 people[i].getId() == id2;\n      @         money[i] == \\old(money[i] + value));\n      @ ensures (\\forall int i; 0 \u003c= i \u0026\u0026 i \u003c people.length \u0026\u0026 \n      @         people[i].getId() != id1 \u0026\u0026 people[i].getId() != id2;\n      @         money[i] == \\old(money[i]));\n      @ also \n      @ public exceptional_behavior\n      @ signals (PersonIdNotFoundException e) !contains(id1) || !contains(id2);\n      @ signals (EqualPersonIdException e) contains(id1) \u0026\u0026 id1 == id2;\n      @*/\n    public void borrowFrom(int id1, int id2, int value) \n            throws PersonIdNotFoundException, EqualPersonIdException;\n    \n    /*@ public normal_behavior\n      @ requires contains(id);\n      @ ensures (\\exists int i; 0 \u003c= i \u0026\u0026 i \u003c people.length \u0026\u0026 people[i].getId() == id;\n      @          money[i] == \\result);\n      @ also\n      @ public exceptional_behavior\n      @ signals (PersonIdNotFoundException e) !contains(id);\n      @*/\n    public /*@pure@*/ int queryMoney(int id) throws  PersonIdNotFoundException;\n}\n",
        "name": "Network.java",
        "path": "u3_3/src/com/oocourse/spec3/main/Network.java",
        "url": "/github.com/yueyang130/BUAA_CS_2020_OO/-/blob/u3_3/src/com/oocourse/spec3/main/Network.java"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 19,
          "offsetAndLengths": [
            [
              4,
              12
            ]
          ],
          "preview": "    //@ ensures \\result == (\\exists int i; 0 \u003c= i \u0026\u0026 i \u003c people.length; people[i].getId() == id);"
        },
        {
          "limitHit": false,
          "lineNumber": 131,
          "offsetAndLengths": [
            [
              4,
              12
            ]
          ],
          "preview": "    //@ ensures \\result == people.length;"
        },
        {
          "limitHit": false,
          "lineNumber": 201,
          "offsetAndLengths": [
            [
              4,
              12
            ]
          ],
          "preview": "    //@ ensures \\result == groups.length;"
        }
      ],
      "repository": {
        "name": "github.com/yueyang130/BUAA_CS_2020_OO",
        "url": "/github.com/yueyang130/BUAA_CS_2020_OO"
      }
    },
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "09e589ed0cd8461bbe65f4732df785e737b0edfc"
        },
        "content": "package com.oocourse.spec2.main;\n\nimport java.math.BigInteger;\n\nimport com.oocourse.spec2.exceptions.EqualGroupIdException;\nimport com.oocourse.spec2.exceptions.EqualPersonIdException;\nimport com.oocourse.spec2.exceptions.EqualRelationException;\nimport com.oocourse.spec2.exceptions.PersonIdNotFoundException;\nimport com.oocourse.spec2.exceptions.RelationNotFoundException;\nimport com.oocourse.spec2.exceptions.GroupIdNotFoundException;\n\npublic interface Network {\n    \n    /*@ public instance model non_null Person[] people;\n      @ public instance model non_null Group[] groups;\n      @*/\n      \n      \n    //@ ensures \\result == (\\exists int i; 0 \u003c= i \u0026\u0026 i \u003c people.length; people[i].getId() == id);\n    public /*@pure@*/ boolean contains(int id);\n    \n    /*@ public normal_behavior\n      @ requires contains(id);\n      @ ensures (\\exists int i; 0 \u003c= i \u0026\u0026 i \u003c people.length; people[i].getId() == id \u0026\u0026 \n      @         \\result == people[i]);\n      @ also\n      @ public normal_behavior\n      @ requires !contains(id);\n      @ ensures \\result == null;\n      @*/\n    public /*@pure@*/ Person getPerson(int id);\n    \n    /*@ public normal_behavior\n      @ requires !(\\exists int i; 0 \u003c= i \u0026\u0026 i \u003c people.length; people[i].equals(person));\n      @ assignable people;\n      @ ensures people.length == \\old(people.length) + 1;\n      @ ensures (\\forall int i; 0 \u003c= i \u0026\u0026 i \u003c \\old(people.length); \n      @          (\\exists int j; 0 \u003c= j \u0026\u0026 j \u003c people.length; people[j] == (\\old(people[i]))));\n      @ ensures (\\exists int i; 0 \u003c= i \u0026\u0026 i \u003c people.length; people[i] == person);\n      @ also\n      @ public exceptional_behavior\n      @ signals (EqualPersonIdException e) (\\exists int i; 0 \u003c= i \u0026\u0026 i \u003c people.length; \n      @                                     people[i].equals(person));\n      @*/\n    public void addPerson(Person person) throws EqualPersonIdException;\n    \n    /*@ public normal_behavior\n      @ requires contains(id1) \u0026\u0026 contains(id2) \u0026\u0026 id1 != id2 \u0026\u0026 \n      @             !getPerson(id1).isLinked(getPerson(id2));\n      @ assignable people;\n      @ ensures people.length == \\old(people.length);\n      @ ensures (\\forall int i; 0 \u003c= i \u0026\u0026 i \u003c \\old(people.length); \n      @          (\\exists int j; 0 \u003c= j \u0026\u0026 j \u003c people.length; people[j] == \\old(people[i])));\n      @ ensures (\\forall int i; 0 \u003c= i \u0026\u0026 i \u003c people.length \u0026\u0026 \\old(people[i].getId()) != id1 \u0026\u0026 \n      @     \\old(people[i].getId()) != id2; \\not_assigned(people[i]));\n      @ ensures getPerson(id1).isLinked(getPerson(id2)) \u0026\u0026 getPerson(id2).isLinked(getPerson(id1));\n      @ ensures getPerson(id1).queryValue(getPerson(id2)) == value;\n      @ ensures getPerson(id2).queryValue(getPerson(id1)) == value;\n      @ ensures (\\forall int i; 0 \u003c= i \u0026\u0026 i \u003c \\old(getPerson(id1).acquaintance.length); \n      @         \\old(getPerson(id1).acquaintance[i]) == getPerson(id1).acquaintance[i] \u0026\u0026 \n      @          \\old(getPerson(id1).value[i]) == getPerson(id1).value[i]);\n      @ ensures (\\forall int i; 0 \u003c= i \u0026\u0026 i \u003c \\old(getPerson(id2).acquaintance.length); \n      @         \\old(getPerson(id2).acquaintance[i]) == getPerson(id2).acquaintance[i] \u0026\u0026 \n      @          \\old(getPerson(id2).value[i]) == getPerson(id2).value[i]);\n      @ ensures getPerson(id1).value.length == getPerson(id1).acquaintance.length;\n      @ ensures getPerson(id2).value.length == getPerson(id2).acquaintance.length;\n      @ ensures \\old(getPerson(id1).value.length) == getPerson(id1).acquaintance.length - 1;\n      @ ensures \\old(getPerson(id2).value.length) == getPerson(id2).acquaintance.length - 1;\n      @ also\n      @ public exceptional_behavior\n      @ assignable \\nothing;\n      @ requires !contains(id1) || !contains(id2) || \n      @          (getPerson(id1).isLinked(getPerson(id2)) \u0026\u0026 id1 != id2);\n      @ signals (PersonIdNotFoundException e) !contains(id1) || !contains(id2);\n      @ signals (EqualRelationException e) contains(id1) \u0026\u0026 contains(id2) \u0026\u0026 \n      @         getPerson(id1).isLinked(getPerson(id2));\n      @*/\n    public void addRelation(int id1, int id2, int value) throws \n        PersonIdNotFoundException, EqualRelationException;\n\n    /*@ public normal_behavior\n      @ requires contains(id1) \u0026\u0026 contains(id2) \u0026\u0026 getPerson(id1).isLinked(getPerson(id2));\n      @ ensures \\result == getPerson(id1).queryValue(getPerson(id2));\n      @ also\n      @ public exceptional_behavior\n      @ signals (PersonIdNotFoundException e) !contains(id1) || !contains(id2);\n      @ signals (RelationNotFoundException e) contains(id1) \u0026\u0026 contains(id2) \u0026\u0026 \n      @         !getPerson(id1).isLinked(getPerson(id2));\n      @*/\n    public /*@pure@*/ int queryValue(int id1, int id2) throws \n        PersonIdNotFoundException, RelationNotFoundException;\n\n    /*@ public normal_behavior\n      @ requires contains(id1) \u0026\u0026 contains(id2);\n      @ ensures \\result.equals(getPerson(id1).getCharacter().xor(getPerson(id2).getCharacter()));\n      @ also\n      @ public exceptional_behavior\n      @ signals (PersonIdNotFoundException e) !contains(id1) || !contains(id2);\n      @*/\n    public /*@pure@*/ BigInteger queryConflict(int id1, int id2) throws PersonIdNotFoundException;\n    \n    /*@ public normal_behavior\n      @ requires contains(id);\n      @ ensures \\result == getPerson(id).getAcquaintanceSum();\n      @ also\n      @ public exceptional_behavior\n      @ signals (PersonIdNotFoundException e) !contains(id);\n      @*/\n    public /*@pure@*/ int queryAcquaintanceSum(int id) throws PersonIdNotFoundException;\n    \n    /*@ public normal_behavior\n      @ requires contains(id1) \u0026\u0026 contains(id2);\n      @ ensures \\result == getPerson(id1).getAge() - getPerson(id2).getAge();\n      @ also\n      @ public exceptional_behavior\n      @ signals (PersonIdNotFoundException e) !contains(id1) || !contains(id2);\n      @*/\n    public /*@pure@*/ int compareAge(int id1, int id2) throws PersonIdNotFoundException;\n    \n    /*@ public normal_behavior\n      @ requires contains(id1) \u0026\u0026 contains(id2);\n      @ ensures \\result == getPerson(id1).getName().compareTo(getPerson(id2).getName());\n      @ also\n      @ public exceptional_behavior\n      @ signals (PersonIdNotFoundException e) !contains(id1) || !contains(id2);\n      @*/\n    public /*@pure@*/ int compareName(int id1, int id2) throws PersonIdNotFoundException;\n\n    //@ ensures \\result == people.length;\n    public /*@pure@*/ int queryPeopleSum();\n\n    /*@ public normal_behavior\n      @ requires contains(id);\n      @ ensures \\result == (\\sum int i; 0 \u003c= i \u0026\u0026 i \u003c people.length \u0026\u0026 \n      @                     compareName(id, people[i].getId()) \u003e 0; 1) + 1;\n      @ also\n      @ public exceptional_behavior\n      @ signals (PersonIdNotFoundException e) !contains(id);\n      @*/\n    public /*@pure@*/ int queryNameRank(int id) throws PersonIdNotFoundException;\n    \n    /*@ public normal_behavior\n      @ requires contains(id1) \u0026\u0026 contains(id2);\n      @ ensures \\result == (\\exists Person[] array; array.length \u003e= 2; \n      @                     array[0].equals(getPerson(id1)) \u0026\u0026 \n      @                     array[array.length - 1].equals(getPerson(id2)) \u0026\u0026\n      @                      (\\forall int i; 0 \u003c= i \u0026\u0026 i \u003c array.length - 1; \n      @                      array[i].isLinked(array[i + 1]) == true));\n      @ also\n      @ public exceptional_behavior\n      @ signals (PersonIdNotFoundException e) !contains(id1) || !contains(id2);\n      @*/\n    public /*@pure@*/ boolean isCircle(int id1, int id2) throws PersonIdNotFoundException;\n\n    /*@ public normal_behavior\n      @ requires !(\\exists int i; 0 \u003c= i \u0026\u0026 i \u003c groups.length; groups[i].equals(group));\n      @ assignable groups;\n      @ ensures groups.length == \\old(groups.length) + 1;\n      @ ensures (\\forall int i; 0 \u003c= i \u0026\u0026 i \u003c \\old(groups.length); \n      @          (\\exists int j; 0 \u003c= j \u0026\u0026 j \u003c groups.length; groups[j] == (\\old(groups[i]))));\n      @ ensures (\\exists int i; 0 \u003c= i \u0026\u0026 i \u003c groups.length; groups[i] == group);\n      @ also\n      @ public exceptional_behavior\n      @ signals (EqualGroupIdException e) (\\exists int i; 0 \u003c= i \u0026\u0026 i \u003c groups.length; \n      @                                     groups[i].equals(group));\n      @*/\n    public void addGroup(Group group) throws EqualGroupIdException;\n    \n    /*@ ensures (\\exists int i; 0 \u003c= i \u0026\u0026 i \u003c groups.length; groups[i].getId() == id \u0026\u0026 \n      @ \\result == groups[i]);\n      @*/\n    public /*@pure@*/ Group getGroup(int id);\n    \n    /*@ public normal_behavior\n      @ requires (\\exists int i; 0 \u003c= i \u0026\u0026 i \u003c groups.length; groups[i].getId() == id2) \u0026\u0026\n      @           (\\exists int i; 0 \u003c= i \u0026\u0026 i \u003c people.length; people[i].getId() == id1) \u0026\u0026\n      @            getGroup(id2).hasPerson(getPerson(id1)) == false \u0026\u0026 \n      @             getGroup(id2).people.length \u003c 1111;\n      @ assignable groups;\n      @ ensures (\\forall int i; 0 \u003c= i \u003c groups.length; \\not_assigned(groups[i]));\n      @ ensures (\\forall Person i; \\old(getGroup(id2).hasPerson(i)); \n      @          getGroup(id2).hasPerson(i));\n      @ ensures \\old(getGroup(id2).people.length) == getGroup(id2).people.length - 1;\n      @ ensures getGroup(id2).hasPerson(getPerson(id1));\n      @ also\n      @ public exceptional_behavior\n      @ signals (GroupIdNotFoundException e) !(\\exists int i; 0 \u003c= i \u0026\u0026 i \u003c groups.length; \n      @          groups[i].getId() == id2);\n      @ signals (PersonIdNotFoundException e) (\\exists int i; 0 \u003c= i \u0026\u0026 i \u003c groups.length; \n      @          groups[i].getId() == id2) \u0026\u0026 !(\\exists int i; 0 \u003c= i \u0026\u0026 i \u003c people.length; \n      @           people[i].getId() == id1);\n      @ signals (EqualPersonIdException e) (\\exists int i; 0 \u003c= i \u0026\u0026 i \u003c groups.length; \n      @          groups[i].getId() == id2) \u0026\u0026 (\\exists int i; 0 \u003c= i \u0026\u0026 i \u003c people.length; \n      @           people[i].getId() == id1) \u0026\u0026 getGroup(id2).hasPerson(getPerson(id1));\n      @*/\n    public void addtoGroup(int id1, int id2) throws GroupIdNotFoundException, \n        PersonIdNotFoundException, EqualPersonIdException;\n\n    //@ ensures \\result == groups.length;\n    public /*@pure@*/ int queryGroupSum();\n\n    /*@ public normal_behavior\n      @ requires (\\exists int i; 0 \u003c= i \u0026\u0026 i \u003c groups.length; groups[i].getId() == id);\n      @ ensures \\result == getGroup(id).people.length;\n      @ also\n      @ public exceptional_behavior\n      @ signals (GroupIdNotFoundException e) !(\\exists int i; 0 \u003c= i \u0026\u0026 i \u003c groups.length; \n      @          groups[i].getId() == id);\n      @*/\n    public /*@pure@*/ int queryGroupPeopleSum(int id) throws GroupIdNotFoundException;\n    \n    /*@ public normal_behavior\n      @ requires (\\exists int i; 0 \u003c= i \u0026\u0026 i \u003c groups.length; groups[i].getId() == id);\n      @ ensures \\result == getGroup(id).getRelationSum();\n      @ also\n      @ public exceptional_behavior\n      @ signals (GroupIdNotFoundException e) !(\\exists int i; 0 \u003c= i \u0026\u0026 i \u003c groups.length; \n      @          groups[i].getId() == id);\n      @*/\n    public /*@pure@*/ int queryGroupRelationSum(int id) throws GroupIdNotFoundException;\n\n    /*@ public normal_behavior\n      @ requires (\\exists int i; 0 \u003c= i \u0026\u0026 i \u003c groups.length; groups[i].getId() == id);\n      @ ensures \\result == getGroup(id).getValueSum();\n      @ also\n      @ public exceptional_behavior\n      @ signals (GroupIdNotFoundException e) !(\\exists int i; 0 \u003c= i \u0026\u0026 i \u003c groups.length; \n      @          groups[i].getId() == id);\n      @*/\n    public /*@pure@*/ int queryGroupValueSum(int id) throws GroupIdNotFoundException;\n\n    /*@ public normal_behavior\n      @ requires (\\exists int i; 0 \u003c= i \u0026\u0026 i \u003c groups.length; groups[i].getId() == id);\n      @ ensures \\result == getGroup(id).getConflictSum();\n      @ also\n      @ public exceptional_behavior\n      @ signals (GroupIdNotFoundException e) !(\\exists int i; 0 \u003c= i \u0026\u0026 i \u003c groups.length; \n      @          groups[i].getId() == id);\n      @*/\n    public /*@pure@*/ BigInteger queryGroupConflictSum(int id) throws GroupIdNotFoundException;\n\n    /*@ public normal_behavior\n      @ requires (\\exists int i; 0 \u003c= i \u0026\u0026 i \u003c groups.length; groups[i].getId() == id);\n      @ ensures \\result == getGroup(id).getAgeMean();\n      @ also\n      @ public exceptional_behavior\n      @ signals (GroupIdNotFoundException e) !(\\exists int i; 0 \u003c= i \u0026\u0026 i \u003c groups.length; \n      @          groups[i].getId() == id);\n      @*/\n    public /*@pure@*/ int queryGroupAgeMean(int id) throws GroupIdNotFoundException;\n    \n    /*@ public normal_behavior\n      @ requires (\\exists int i; 0 \u003c= i \u0026\u0026 i \u003c groups.length; groups[i].getId() == id);\n      @ ensures \\result == getGroup(id).getAgeVar();\n      @ also\n      @ public exceptional_behavior\n      @ signals (GroupIdNotFoundException e) !(\\exists int i; 0 \u003c= i \u0026\u0026 i \u003c groups.length; \n      @          groups[i].getId() == id);\n      @*/\n    public int queryGroupAgeVar(int id) throws GroupIdNotFoundException;\n}\n",
        "name": "Network.java",
        "path": "u3_2/src/com/oocourse/spec2/main/Network.java",
        "url": "/github.com/yueyang130/BUAA_CS_2020_OO/-/blob/u3_2/src/com/oocourse/spec2/main/Network.java"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 18,
          "offsetAndLengths": [
            [
              4,
              12
            ]
          ],
          "preview": "    //@ ensures \\result == (\\exists int i; 0 \u003c= i \u0026\u0026 i \u003c people.length; people[i].getId() == id);"
        },
        {
          "limitHit": false,
          "lineNumber": 128,
          "offsetAndLengths": [
            [
              4,
              12
            ]
          ],
          "preview": "    //@ ensures \\result == people.length;"
        },
        {
          "limitHit": false,
          "lineNumber": 198,
          "offsetAndLengths": [
            [
              4,
              12
            ]
          ],
          "preview": "    //@ ensures \\result == groups.length;"
        }
      ],
      "repository": {
        "name": "github.com/yueyang130/BUAA_CS_2020_OO",
        "url": "/github.com/yueyang130/BUAA_CS_2020_OO"
      }
    },
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "09e589ed0cd8461bbe65f4732df785e737b0edfc"
        },
        "content": "package com.oocourse.spec1.main;\n\nimport java.math.BigInteger;\n\npublic interface Person extends Comparable\u003cPerson\u003e {\n\n    /*@ public instance model non_null int id;\n      @ public instance model non_null String name;\n      @ public instance model non_null BigInteger character;\n      @ public instance model non_null int age;\n      @ public instance model non_null Person[] acquaintance;\n      @ public instance model non_null int[] value;\n      @*/\n    \n\n    //@ ensures \\result == id;\n    public /*@pure@*/ int getId();\n\n    //@ ensures \\result.equals(name);\n    public /*@pure@*/ String getName();\n\n    //@ ensures \\result.equals(character);\n    public /*@pure@*/ BigInteger getCharacter();\n\n    //@ ensures \\result == age;\n    public /*@pure@*/ int getAge();\n\n    /*@ also\n      @ public normal_behavior\n      @ requires obj != null \u0026\u0026 obj instanceof Person;\n      @ assignable \\nothing;\n      @ ensures \\result == (((Person) obj).getId() == id);\n      @ also\n      @ public normal_behavior\n      @ requires obj == null || !(obj instanceof Person);\n      @ assignable \\nothing;\n      @ ensures \\result == false;\n      @*/\n    public /*@pure@*/ boolean equals(Object obj);\n    \n    /*@ public normal_behavior\n      @ assignable \\nothing;\n      @ ensures \\result == (\\exists int i; 0 \u003c= i \u0026\u0026 i \u003c acquaintance.length; \n      @                     acquaintance[i].getId() == person.getId()) || person.getId() == id;\n      @*/\n    public /*@pure@*/ boolean isLinked(Person person);\n    \n    /*@ public normal_behavior\n      @ requires (\\exists int i; 0 \u003c= i \u0026\u0026 i \u003c acquaintance.length; \n      @          acquaintance[i].getId() == person.getId());\n      @ assignable \\nothing;\n      @ ensures (\\exists int i; 0 \u003c= i \u0026\u0026 i \u003c acquaintance.length; \n      @         acquaintance[i].getId() == person.getId() \u0026\u0026 \\result == value[i]);\n      @ also\n      @ public normal_behavior\n      @ requires (\\forall int i; 0 \u003c= i \u0026\u0026 i \u003c acquaintance.length; \n      @          acquaintance[i].getId() != person.getId());\n      @ ensures \\result == 0;\n      @*/\n    public /*@pure@*/ int queryValue(Person person);\n\n    //@ ensures \\result == acquaintance.length;\n    public /*@pure@*/ int getAcquaintanceSum();\n\n    /*@ also\n      @ public normal_behavior\n      @ ensures \\result == name.compareTo(p2.getName());\n      @*/\n    public /*@pure@*/ int compareTo(Person p2);\n\n}\n",
        "name": "Person.java",
        "path": "u3_1/module/com/oocourse/spec1/main/Person.java",
        "url": "/github.com/yueyang130/BUAA_CS_2020_OO/-/blob/u3_1/module/com/oocourse/spec1/main/Person.java"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 15,
          "offsetAndLengths": [
            [
              4,
              12
            ]
          ],
          "preview": "    //@ ensures \\result == id;"
        },
        {
          "limitHit": false,
          "lineNumber": 18,
          "offsetAndLengths": [
            [
              4,
              12
            ]
          ],
          "preview": "    //@ ensures \\result.equals(name);"
        },
        {
          "limitHit": false,
          "lineNumber": 21,
          "offsetAndLengths": [
            [
              4,
              12
            ]
          ],
          "preview": "    //@ ensures \\result.equals(character);"
        },
        {
          "limitHit": false,
          "lineNumber": 24,
          "offsetAndLengths": [
            [
              4,
              12
            ]
          ],
          "preview": "    //@ ensures \\result == age;"
        },
        {
          "limitHit": false,
          "lineNumber": 61,
          "offsetAndLengths": [
            [
              4,
              12
            ]
          ],
          "preview": "    //@ ensures \\result == acquaintance.length;"
        }
      ],
      "repository": {
        "name": "github.com/yueyang130/BUAA_CS_2020_OO",
        "url": "/github.com/yueyang130/BUAA_CS_2020_OO"
      }
    },
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "09e589ed0cd8461bbe65f4732df785e737b0edfc"
        },
        "content": "package com.oocourse.spec1.main;\n\nimport java.math.BigInteger;\n\nimport com.oocourse.spec1.exceptions.EqualPersonIdException;\nimport com.oocourse.spec1.exceptions.EqualRelationException;\nimport com.oocourse.spec1.exceptions.PersonIdNotFoundException;\nimport com.oocourse.spec1.exceptions.RelationNotFoundException;\n\npublic interface Network {\n    \n    /*@ public instance model non_null Person[] people;\n      @*/\n      \n      \n    //@ ensures \\result == (\\exists int i; 0 \u003c= i \u0026\u0026 i \u003c people.length; people[i].getId() == id);\n    public /*@pure@*/ boolean contains(int id);\n    \n    /*@ public normal_behavior\n      @ requires contains(id);\n      @ ensures (\\exists int i; 0 \u003c= i \u0026\u0026 i \u003c people.length; people[i].getId() == id \u0026\u0026 \n      @         \\result == people[i]);\n      @ also\n      @ public normal_behavior\n      @ requires !contains(id);\n      @ ensures \\result == null;\n      @*/\n    public /*@pure@*/ Person getPerson(int id);\n    \n    /*@ public normal_behavior\n      @ requires !(\\exists int i; 0 \u003c= i \u0026\u0026 i \u003c people.length; people[i].equals(person));\n      @ assignable people;\n      @ ensures people.length == \\old(people.length) + 1;\n      @ ensures (\\forall int i; 0 \u003c= i \u0026\u0026 i \u003c \\old(people.length); \n      @          (\\exists int j; 0 \u003c= j \u0026\u0026 j \u003c people.length; people[j] == (\\old(people[i]))));\n      @ ensures (\\exists int i; 0 \u003c= i \u0026\u0026 i \u003c people.length; people[i] == person);\n      @ also\n      @ public exceptional_behavior\n      @ signals (EqualPersonIdException e) (\\exists int i; 0 \u003c= i \u0026\u0026 i \u003c people.length; \n      @                                     people[i].equals(person));\n      @*/\n    public void addPerson(Person person) throws EqualPersonIdException;\n    \n    /*@ public normal_behavior\n      @ requires contains(id1) \u0026\u0026 contains(id2) \u0026\u0026 id1 != id2 \u0026\u0026 \n      @             !getPerson(id1).isLinked(getPerson(id2));\n      @ assignable people;\n      @ ensures people.length == \\old(people.length);\n      @ ensures (\\forall int i; 0 \u003c= i \u0026\u0026 i \u003c \\old(people.length); \n      @          (\\exists int j; 0 \u003c= j \u0026\u0026 j \u003c people.length; people[j] == \\old(people[i])));\n      @ ensures (\\forall int i; 0 \u003c= i \u0026\u0026 i \u003c people.length \u0026\u0026 \\old(people[i].getId()) != id1 \u0026\u0026 \n      @     \\old(people[i].getId()) != id2; \\not_assigned(people[i]));\n      @ ensures getPerson(id1).isLinked(getPerson(id2)) \u0026\u0026 getPerson(id2).isLinked(getPerson(id1));\n      @ ensures getPerson(id1).queryValue(getPerson(id2)) == value;\n      @ ensures getPerson(id2).queryValue(getPerson(id1)) == value;\n      @ ensures (\\forall int i; 0 \u003c= i \u0026\u0026 i \u003c \\old(getPerson(id1).acquaintance.length); \n      @         \\old(getPerson(id1).acquaintance[i]) == getPerson(id1).acquaintance[i] \u0026\u0026 \n      @          \\old(getPerson(id1).value[i]) == getPerson(id1).value[i]);\n      @ ensures (\\forall int i; 0 \u003c= i \u0026\u0026 i \u003c \\old(getPerson(id2).acquaintance.length); \n      @         \\old(getPerson(id2).acquaintance[i]) == getPerson(id2).acquaintance[i] \u0026\u0026 \n      @          \\old(getPerson(id2).value[i]) == getPerson(id2).value[i]);\n      @ ensures getPerson(id1).value.length == getPerson(id1).acquaintance.length;\n      @ ensures getPerson(id2).value.length == getPerson(id2).acquaintance.length;\n      @ ensures \\old(getPerson(id1).value.length) == getPerson(id1).acquaintance.length - 1;\n      @ ensures \\old(getPerson(id2).value.length) == getPerson(id2).acquaintance.length - 1;\n      @ also\n      @ public normal_behavior\n      @ requires id1 == id2 \u0026\u0026 contains(id1);\n      @ assignable \\nothing;\n      @ also\n      @ public exceptional_behavior\n      @ requires !contains(id1) || !contains(id2) || \n      @          (getPerson(id1).isLinked(getPerson(id2)) \u0026\u0026 id1 != id2);\n      @ signals (PersonIdNotFoundException e) !contains(id1) || !contains(id2);\n      @ signals (EqualRelationException e) contains(id1) \u0026\u0026 contains(id2) \u0026\u0026 \n      @         \\old(getPerson(id1)).isLinked(\\old(getPerson(id2)));\n      @*/\n    public void addRelation(int id1, int id2, int value) throws \n        PersonIdNotFoundException, EqualRelationException;\n\n    /*@ public normal_behavior\n      @ requires contains(id1) \u0026\u0026 contains(id2) \u0026\u0026 getPerson(id1).isLinked(getPerson(id2));\n      @ ensures \\result == getPerson(id1).queryValue(getPerson(id2));\n      @ also\n      @ public exceptional_behavior\n      @ signals (PersonIdNotFoundException e) !contains(id1) || !contains(id2);\n      @ signals (RelationNotFoundException e) contains(id1) \u0026\u0026 contains(id2) \u0026\u0026 \n      @         !getPerson(id1).isLinked(getPerson(id2));\n      @*/\n    public /*@pure@*/ int queryValue(int id1, int id2) throws \n        PersonIdNotFoundException, RelationNotFoundException;\n\n    /*@ public normal_behavior\n      @ requires contains(id1) \u0026\u0026 contains(id2);\n      @ ensures \\result.equals(getPerson(id1).getCharacter().xor(getPerson(id2).getCharacter()));\n      @ also\n      @ public exceptional_behavior\n      @ signals (PersonIdNotFoundException e) !contains(id1) || !contains(id2);\n      @*/\n    public /*@pure@*/ BigInteger queryConflict(int id1, int id2) throws PersonIdNotFoundException;\n    \n    /*@ public normal_behavior\n      @ requires contains(id);\n      @ ensures \\result == getPerson(id).getAcquaintanceSum();\n      @ also\n      @ public exceptional_behavior\n      @ signals (PersonIdNotFoundException e) !contains(id);\n      @*/\n    public /*@pure@*/ int queryAcquaintanceSum(int id) throws PersonIdNotFoundException;\n    \n    /*@ public normal_behavior\n      @ requires contains(id1) \u0026\u0026 contains(id2);\n      @ ensures \\result == getPerson(id1).getAge() - getPerson(id2).getAge();\n      @ also\n      @ public exceptional_behavior\n      @ signals (PersonIdNotFoundException e) !contains(id1) || !contains(id2);\n      @*/\n    public /*@pure@*/ int compareAge(int id1, int id2) throws PersonIdNotFoundException;\n    \n    /*@ public normal_behavior\n      @ requires contains(id1) \u0026\u0026 contains(id2);\n      @ ensures \\result == getPerson(id1).getName().compareTo(getPerson(id2).getName());\n      @ also\n      @ public exceptional_behavior\n      @ signals (PersonIdNotFoundException e) !contains(id1) || !contains(id2);\n      @*/\n    public /*@pure@*/ int compareName(int id1, int id2) throws PersonIdNotFoundException;\n\n    //ensures \\result == people.length;\n    public /*@pure@*/ int queryPeopleSum();\n\n    /*@ public normal_behavior\n      @ requires contains(id);\n      @ ensures \\result == (\\sum int i; 0 \u003c= i \u0026\u0026 i \u003c people.length \u0026\u0026 \n      @                     compareName(id, people[i].getId()) \u003e 0; 1) + 1;\n      @ also\n      @ public exceptional_behavior\n      @ signals (PersonIdNotFoundException e) !contains(id);\n      @*/\n    public /*@pure@*/ int queryNameRank(int id) throws PersonIdNotFoundException;\n    \n    /*@ public normal_behavior\n      @ requires contains(id1) \u0026\u0026 contains(id2);\n      @ ensures \\result == (\\exists Person[] array; array.length \u003e= 2; \n      @                     array[0].equals(getPerson(id1)) \u0026\u0026 \n      @                     array[array.length - 1].equals(getPerson(id2)) \u0026\u0026\n      @                      (\\forall int i; 0 \u003c= i \u0026\u0026 i \u003c array.length - 1; \n      @                      array[i].isLinked(array[i + 1]) == true));\n      @ also\n      @ public exceptional_behavior\n      @ signals (PersonIdNotFoundException e) !contains(id1) || !contains(id2);\n      @*/\n    public /*@pure@*/ boolean isCircle(int id1, int id2)throws PersonIdNotFoundException;\n\n}\n",
        "name": "Network.java",
        "path": "u3_1/module/com/oocourse/spec1/main/Network.java",
        "url": "/github.com/yueyang130/BUAA_CS_2020_OO/-/blob/u3_1/module/com/oocourse/spec1/main/Network.java"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 15,
          "offsetAndLengths": [
            [
              4,
              12
            ]
          ],
          "preview": "    //@ ensures \\result == (\\exists int i; 0 \u003c= i \u0026\u0026 i \u003c people.length; people[i].getId() == id);"
        }
      ],
      "repository": {
        "name": "github.com/yueyang130/BUAA_CS_2020_OO",
        "url": "/github.com/yueyang130/BUAA_CS_2020_OO"
      }
    }
  ],
  "LimitHit": false,
  "Cloning": [],
  "Missing": [],
  "Timedout": [],
  "ResultCount": 26,
  "ElapsedMilliseconds": 1892,
  "Alert": {
    "Title": "",
    "Description": "",
    "ProposedQueries": null
  }
}
