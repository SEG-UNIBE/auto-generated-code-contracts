{
  "SourcegraphEndpoint": "https://sourcegraph.com",
  "Query": "(//@ requires )|(//@ ensures ) repo:github.com/edoardottt/MSc-CyberSecurity-Sapienza lang:java count:all case:yes type:file patterntype:regexp",
  "Site": {
    "BuildVersion": "238702_2023-08-16_5.1-acf4bcc841e5"
  },
  "Results": [
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "f038f5679d93445efceda004e92c9493e3ef4add"
        },
        "content": "\n/*\n  This assignment illustrates how specifications such as invariants and\n  preconditions written in a formal language can help in removing\n  errors in code.\n\n  The assignment concerns a class \"Person\" that is used for Persons.\n\n */\nclass Person {\n\n\n\n /* isFemale is true iff the person is female */\n //@ invariant (this.isFemale == true) ==\u003e (this.isMale == false);\n //@ invariant (this.isFemale == false) ==\u003e (this.isMale == true);\n boolean isFemale;\n\n /* isMale is true iff the person is male */\n //@ invariant (this.isMale == true) ==\u003e (this.isFemale == false);\n //@ invariant (this.isMale == false) ==\u003e (this.isFemale == true);\n boolean isMale;\n\n\n\n /*@ nullable @*/ Person father, mother; // These fields won't really be used\n\n /* Age in years */\n int age;\n\n boolean isMarried;\n\n /* Reference to spouse if person is married, null otherwise */\n //@ invariant (this.isMarried == false) ==\u003e this.spouse == null;\n //@ invariant (this.spouse == null) ==\u003e this.isMarried == false;\n //@ invariant (this.isMarried == true) ==\u003e this.spouse != null;\n //@ invariant (this.spouse != null) ==\u003e this.isMarried == true;\n //@ invariant (this.spouse != null) ==\u003e (this.isFemale != spouse.isFemale);\n //@ invariant (this.spouse != null) ==\u003e (this.isMale != spouse.isMale);\n //@ invariant (this.spouse != null) ==\u003e (this.spouse.spouse == this);\n //@ invariant (this.spouse != null) ==\u003e (this.age \u003e= 18);\n //@ invariant (this.spouse != null) ==\u003e (this.spouse.age \u003e= 18);\n //@ invariant (this.isMarried == true) ==\u003e (this.age \u003e= 18);\n //@ invariant (this.isMarried == true) ==\u003e (this.spouse.age \u003e= 18);\n /*@ nullable @*/ Person spouse;\n\n /* welfare subsidy */\n //@ invariant (this.age \u003c= 65 \u0026\u0026 this.isMarried == false) ==\u003e (this.state_subsidy == 500);\n //@ invariant (this.age \u003c= 65 \u0026\u0026 this.isMarried == true) ==\u003e (this.state_subsidy == 350);\n //@ invariant (this.age \u003e 65 \u0026\u0026 this.isMarried == false) ==\u003e (this.state_subsidy == 600);\n //@ invariant (this.age \u003e 65 \u0026\u0026 this.isMarried == true) ==\u003e (this.state_subsidy == 420);\n int state_subsidy;\n\n\n /* CONSTRUCTOR */\n\n Person(boolean s, Person ma, Person pa) {\n   age = 0; \n   isMarried = false;\n   this.isMale = s;\n   this.isFemale = !s;\n   mother = ma;\n   father = pa;\n   spouse = null;\n   int DEFAULT_SUBSIDY = 500;\n   state_subsidy = DEFAULT_SUBSIDY;\n  \n }\n\n /* METHODS */\n\n /* Marry to new_spouse */\n //@ requires new_spouse != null;\n //@ requires this.spouse == null;\n //@ requires this.isMarried == false;\n //@ requires new_spouse.isMarried == false;\n //@ requires new_spouse.spouse == null;\n //@ requires this.isMale != new_spouse.isMale;\n //@ requires this.isFemale != new_spouse.isFemale;\n //@ requires new_spouse.age \u003e= 18;\n //@ requires this.age \u003e= 18;\n //@ ensures new_spouse.isMarried == true;\n //@ ensures this.spouse == new_spouse;\n //@ ensures new_spouse.spouse == this;\n void marry(Person new_spouse) {\n  new_spouse.isMarried = true;\n  new_spouse.spouse = this;\n  spouse = new_spouse;\n  isMarried = true;\n  if (age \u003c= 65) state_subsidy = 350;\n  if (age \u003e 65) state_subsidy = 420;\n  if (spouse.age \u003c= 65) spouse.state_subsidy = 350;\n  if (spouse.age \u003e 65) spouse.state_subsidy = 420;\n }\n\n /* Divorce from current spouse */\n //@ requires this.spouse != null;\n //@ requires this.isMarried == true;\n //@ requires this.spouse.spouse != null;\n //@ requires this.spouse.isMarried == true;\n void divorce() {\n  if (spouse.age \u003c= 65) spouse.state_subsidy = 500;\n  if (spouse.age \u003e 65) spouse.state_subsidy = 600;\n  spouse.isMarried = false;\n  spouse.spouse = null;\n  spouse = null;\n  isMarried = false;\n  if (age \u003c= 65) state_subsidy = 500;\n  if (age \u003e 65) state_subsidy = 600;\n }\n\n\n\n /* Person has a birthday and the age increases by one */\n //@ requires age \u003c 200;\n void haveBirthday() {\n  age = age + 1;\n  if (age \u003e 65 \u0026\u0026 isMarried) state_subsidy = 420;\n  if (age \u003e 65 \u0026\u0026 !isMarried) state_subsidy = 600;\n }\n\n}",
        "name": "Person.java",
        "path": "Security-in-Software-Applications/projects/Proj2_fa21/Person.java",
        "url": "/github.com/edoardottt/MSc-CyberSecurity-Sapienza/-/blob/Security-in-Software-Applications/projects/Proj2_fa21/Person.java"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 72,
          "offsetAndLengths": [
            [
              1,
              13
            ]
          ],
          "preview": " //@ requires new_spouse != null;"
        },
        {
          "limitHit": false,
          "lineNumber": 73,
          "offsetAndLengths": [
            [
              1,
              13
            ]
          ],
          "preview": " //@ requires this.spouse == null;"
        },
        {
          "limitHit": false,
          "lineNumber": 74,
          "offsetAndLengths": [
            [
              1,
              13
            ]
          ],
          "preview": " //@ requires this.isMarried == false;"
        },
        {
          "limitHit": false,
          "lineNumber": 75,
          "offsetAndLengths": [
            [
              1,
              13
            ]
          ],
          "preview": " //@ requires new_spouse.isMarried == false;"
        },
        {
          "limitHit": false,
          "lineNumber": 76,
          "offsetAndLengths": [
            [
              1,
              13
            ]
          ],
          "preview": " //@ requires new_spouse.spouse == null;"
        },
        {
          "limitHit": false,
          "lineNumber": 77,
          "offsetAndLengths": [
            [
              1,
              13
            ]
          ],
          "preview": " //@ requires this.isMale != new_spouse.isMale;"
        },
        {
          "limitHit": false,
          "lineNumber": 78,
          "offsetAndLengths": [
            [
              1,
              13
            ]
          ],
          "preview": " //@ requires this.isFemale != new_spouse.isFemale;"
        },
        {
          "limitHit": false,
          "lineNumber": 79,
          "offsetAndLengths": [
            [
              1,
              13
            ]
          ],
          "preview": " //@ requires new_spouse.age \u003e= 18;"
        },
        {
          "limitHit": false,
          "lineNumber": 80,
          "offsetAndLengths": [
            [
              1,
              13
            ]
          ],
          "preview": " //@ requires this.age \u003e= 18;"
        },
        {
          "limitHit": false,
          "lineNumber": 81,
          "offsetAndLengths": [
            [
              1,
              12
            ]
          ],
          "preview": " //@ ensures new_spouse.isMarried == true;"
        },
        {
          "limitHit": false,
          "lineNumber": 82,
          "offsetAndLengths": [
            [
              1,
              12
            ]
          ],
          "preview": " //@ ensures this.spouse == new_spouse;"
        },
        {
          "limitHit": false,
          "lineNumber": 83,
          "offsetAndLengths": [
            [
              1,
              12
            ]
          ],
          "preview": " //@ ensures new_spouse.spouse == this;"
        },
        {
          "limitHit": false,
          "lineNumber": 96,
          "offsetAndLengths": [
            [
              1,
              13
            ]
          ],
          "preview": " //@ requires this.spouse != null;"
        },
        {
          "limitHit": false,
          "lineNumber": 97,
          "offsetAndLengths": [
            [
              1,
              13
            ]
          ],
          "preview": " //@ requires this.isMarried == true;"
        },
        {
          "limitHit": false,
          "lineNumber": 98,
          "offsetAndLengths": [
            [
              1,
              13
            ]
          ],
          "preview": " //@ requires this.spouse.spouse != null;"
        },
        {
          "limitHit": false,
          "lineNumber": 99,
          "offsetAndLengths": [
            [
              1,
              13
            ]
          ],
          "preview": " //@ requires this.spouse.isMarried == true;"
        },
        {
          "limitHit": false,
          "lineNumber": 114,
          "offsetAndLengths": [
            [
              1,
              13
            ]
          ],
          "preview": " //@ requires age \u003c 200;"
        }
      ],
      "repository": {
        "name": "github.com/edoardottt/MSc-CyberSecurity-Sapienza",
        "url": "/github.com/edoardottt/MSc-CyberSecurity-Sapienza"
      }
    }
  ],
  "LimitHit": false,
  "Cloning": [],
  "Missing": [],
  "Timedout": [],
  "ResultCount": 17,
  "ElapsedMilliseconds": 1307,
  "Alert": {
    "Title": "",
    "Description": "",
    "ProposedQueries": null
  }
}
