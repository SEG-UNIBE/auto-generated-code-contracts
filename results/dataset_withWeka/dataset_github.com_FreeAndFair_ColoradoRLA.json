[
    {
        "repository": "github.com/FreeAndFair/ColoradoRLA",
        "file": "server/eclipse-project/src/main/java/us/freeandfair/corla/model/DoSDashboard.java",
        "code": "  public boolean updateContestToAudit(final ContestToAudit the_contest_to_audit) {\n    boolean auditable = true;\n    \n    // check to see if the contest is in our set\n    ContestToAudit contest_to_remove = null;\n    for (final ContestToAudit c : my_contests_to_audit) {\n      if (c.contest().equals(the_contest_to_audit.contest())) {\n        // check if the entry is auditable; if so, it will be removed later\n        auditable = !c.audit().equals(AuditType.NOT_AUDITABLE);\n        contest_to_remove = c;\n        break;\n      }\n    }\n    \n    if (auditable) {\n      my_contests_to_audit.remove(contest_to_remove);\n      if (the_contest_to_audit.audit() != AuditType.NONE) {\n        my_contests_to_audit.add(the_contest_to_audit);\n      }\n    }\n    \n    return auditable;\n  }\n",
        "methodStartingLine": 207,
        "methodEndingLine": 229,
        "jml": "//@ requires the_contest_to_audit != null;"
    },
    {
        "repository": "github.com/FreeAndFair/ColoradoRLA",
        "file": "server/eclipse-project/src/main/java/us/freeandfair/corla/asm/PersistentASMState.java",
        "code": "  public static PersistentASMState stateFor(final AbstractStateMachine the_asm) {\n    final String asm_class = the_asm.getClass().getName();\n    // identifying info to be dealt with later\n    final ASMState state = the_asm.currentState();\n    final String state_class = state.getClass().getName();\n    String state_value = null;\n    if (state instanceof Enum<?>) {\n      final Enum<?> state_enum = (Enum<?>) state;\n      state_value = state_enum.name();\n    }\n    return new PersistentASMState(asm_class, the_asm.identity(), state_class, state_value);\n  }\n",
        "methodStartingLine": 112,
        "methodEndingLine": 123,
        "jml": "//@ requires the_asm != null;"
    },
    {
        "repository": "github.com/FreeAndFair/ColoradoRLA",
        "file": "server/eclipse-project/src/main/java/us/freeandfair/corla/asm/PersistentASMState.java",
        "code": "  public static AbstractStateMachine asmFor(final PersistentASMState the_state) {\n    try {\n      // first, construct an ASM of the correct class\n      final AbstractStateMachine result = \n          (AbstractStateMachine) Class.forName(the_state.asmClass()).newInstance();\n      result.setIdentity(the_state.asmIdentity());\n      the_state.applyTo(result);\n      return result;\n    } catch (final ClassNotFoundException | IllegalAccessException | \n                   InstantiationException e) {\n      throw new IllegalArgumentException(e);\n    }\n  }\n",
        "methodStartingLine": 135,
        "methodEndingLine": 147,
        "jml": "//@ requires the_state != null;"
    },
    {
        "repository": "github.com/FreeAndFair/ColoradoRLA",
        "file": "server/eclipse-project/src/main/java/us/freeandfair/corla/asm/PersistentASMState.java",
        "code": "  public void applyTo(final AbstractStateMachine the_asm) {\n    if (the_asm.getClass().getName().equals(asmClass()) &&\n        nullableEquals(the_asm.identity(), asmIdentity())) {\n      final ASMState state = asmStateFor(this);\n      if (state == null) {\n        throw new IllegalArgumentException(\"no ASM state found for state \" + this);\n      } else {\n        the_asm.setCurrentState(state);\n      }\n    } else {\n      throw new IllegalArgumentException(\"invalid ASM class \" + \n                                         the_asm.getClass().getName() + \n                                         \" for state \" + this);\n    }\n  }\n",
        "methodStartingLine": 210,
        "methodEndingLine": 224,
        "jml": "//@ requires the_asm != null"
    },
    {
        "repository": "github.com/FreeAndFair/ColoradoRLA",
        "file": "server/eclipse-project/src/main/java/us/freeandfair/corla/asm/PersistentASMState.java",
        "code": "  public void updateFrom(final AbstractStateMachine the_asm) {\n    final PersistentASMState new_state = stateFor(the_asm);\n    if (new_state.asmClass().equals(asmClass()) &&\n        nullableEquals(new_state.asmIdentity(), asmIdentity())) {\n      my_state_class = new_state.stateClass();\n      my_state_value = new_state.stateValue();\n    } else {\n      throw new IllegalArgumentException(\"invalid ASM \" + the_asm + \n                                         \" for updating state \" + this);\n    }\n  }\n",
        "methodStartingLine": 234,
        "methodEndingLine": 244,
        "jml": "//@ requires the_asm != null"
    },
    {
        "repository": "github.com/FreeAndFair/ColoradoRLA",
        "file": "server/eclipse-project/src/main/java/us/freeandfair/corla/crypto/PseudoRandomNumberGenerator.java",
        "code": "  public List<Integer> getRandomNumbers(final int the_from, final int the_to) {\n    assert the_from <= the_to;\n    assert my_with_replacement || the_to <= my_maximum_index;\n    if (the_to + 1 > my_random_numbers.size()) {\n      extendList(the_to + 1);\n    }\n    // subList has an exclusive upper bound, but we have an inclusive one\n    return my_random_numbers.subList(the_from, the_to + 1);\n  }\n",
        "methodStartingLine": 131,
        "methodEndingLine": 139,
        "jml": "//@ requires 20 <= the_seed.length();\n//@ requires seedOnlyContainsDigits(the_seed);\n//@ requires the_minimum <= the_maximum;\n//@ requires the_from <= the_to;"
    },
    {
        "repository": "github.com/FreeAndFair/ColoradoRLA",
        "file": "server/eclipse-project/src/main/java/us/freeandfair/corla/model/Contest.java",
        "code": "  @Override\n  public Long id() {\n    return my_id;\n  }\n",
        "methodStartingLine": 170,
        "methodEndingLine": 173,
        "jml": "//@ requires 1 <= the_votes_allowed;\n//@ requires the_votes_allowed <= the_choices.size();"
    }
]