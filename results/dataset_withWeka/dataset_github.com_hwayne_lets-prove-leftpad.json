[
    {
        "repository": "github.com/hwayne/lets-prove-leftpad",
        "file": "java/LeftPad.java",
        "code": "    static char[] leftPad(char c, int n, char[] s) {\n        int pad = Math.max(n - s.length, 0);\n        char[] v = new char[pad + s.length];\n        int i = 0;\n\n        //@ maintaining i >= 0 && i <= pad;\n        //@ maintaining \\forall int j; j >= 0 && j < i; v[j] == c;\n        for(; i<pad; i++) v[i] = c;\n        \n        //@ maintaining i >= pad;\n        //@ maintaining \\forall int j; j >= 0 && j < pad; v[j] == c;\n        //@ maintaining \\forall int j; j >= pad && j < i; v[j] == s[j - pad];\n        for(i = pad; i < v.length; i++) v[i] = s[i - pad];\n        \n        return v;\n    }\n",
        "methodStartingLine": 7,
        "methodEndingLine": 22,
        "jml": "//@ requires n >= 0;\n//@ requires s != null;\n//@ ensures \\result.length == Math.max(n, s.length);\n//@ ensures \\forall int i; i >= 0 && i < Math.max(n - s.length, 0); \\result[i] == c;\n//@ ensures \\forall int i; i >= 0 && i < s.length; \\result[Math.max(n - s.length, 0) + i] == s[i];"
    }
]