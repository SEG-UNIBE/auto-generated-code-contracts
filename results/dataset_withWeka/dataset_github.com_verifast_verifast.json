[
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/map.java",
        "code": "    boolean isEmpty()\n        \n        \n    {\n        //@ open List(Nil.class)(this, xs);\n        //@ close List(Nil.class)(this, xs);\n        return true;\n    }\n",
        "methodStartingLine": 67,
        "methodEndingLine": 74,
        "jml": "//@ requires List(Nil.class)(this, ?xs);\n//@ ensures List(Nil.class)(this, xs) &*& result == (xs == nil);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/map.java",
        "code": "    int head()\n        \n        \n    {\n        //@ open List(Nil.class)(this, xs);\n        return 0; //~allow_dead_code\n    }\n",
        "methodStartingLine": 76,
        "methodEndingLine": 82,
        "jml": "//@ requires List(Nil.class)(this, ?xs) &*& xs != nil;\n//@ ensures List(Nil.class)(this, xs) &*& result == head(xs);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/map.java",
        "code": "    List tail()\n        \n        \n    {\n        //@ open List(Nil.class)(this, xs);\n        return null; //~allow_dead_code\n    }\n",
        "methodStartingLine": 84,
        "methodEndingLine": 90,
        "jml": "//@ requires List(Nil.class)(this, ?xs) &*& xs != nil;\n//@ ensures List(Nil.class)(this, xs) &*& result != null &*& List(result.getClass())(result, tail(xs));"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/map.java",
        "code": "    List map(MapFunc f)\n        \n        \n    {\n        //@ open List(Nil.class)(this, xs);\n        //@ close List(Nil.class)(this, xs);\n        //@ append_nil(ys);\n        //@ assume(this.getClass() == Nil.class);\n        //@ list_split_fractions(this);\n        return this;\n    }\n",
        "methodStartingLine": 92,
        "methodEndingLine": 102,
        "jml": "//@ requires List(Nil.class)(this, ?xs) &*& f != null &*& MapFunc(f.getClass())(f, xs, ?ys, ?info);\n//@ ensures List(Nil.class)(this, xs) &*& result!= null &*& List(result.getClass())(result, ?zs) &*& MapFunc(f.getClass())(f, nil, append(ys, zs), info);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/map.java",
        "code": "    boolean equals(List other)\n        \n        \n    {\n        //@ open List(Nil.class)(this, xs);\n        //@ close List(Nil.class)(this, xs);\n        return other.isEmpty();\n    }\n",
        "methodStartingLine": 104,
        "methodEndingLine": 111,
        "jml": "//@ requires List(Nil.class)(this, ?xs) &*& other!= null &*& List(other.getClass())(other, ?ys);\n//@ ensures List(Nil.class)(this, xs) &*& List(other.getClass())(other, ys) &*& result ? xs == ys : xs != ys;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/map.java",
        "code": "    boolean isEmpty()\n        \n        \n    {\n        //@ open List(Cons.class)(this, ?xs_);\n        //@ close List(Cons.class)(this, xs_);\n        return false;\n    }\n",
        "methodStartingLine": 136,
        "methodEndingLine": 143,
        "jml": "//@ requires List(Cons.class)(this, ?xs);\n//@ ensures List(Cons.class)(this, xs) &*& result == (xs == nil);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/map.java",
        "code": "    int head()\n        \n        \n    {\n        //@ open List(Cons.class)(this, ?xs_);\n        return this.head;\n        //@ close List(Cons.class)(this, xs_);\n    }\n",
        "methodStartingLine": 145,
        "methodEndingLine": 152,
        "jml": "//@ requires List(Cons.class)(this, ?xs) &*& xs != nil;\n//@ ensures List(Cons.class)(this, xs) &*& result == head(xs);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/map.java",
        "code": "    List tail()\n        \n        \n    {\n        //@ open List(Cons.class)(this, ?xs_);\n        List result = this.tail;\n        //@ list_split_fractions(result);\n        //@ close List(Cons.class)(this, xs_);\n        return result;\n    }\n",
        "methodStartingLine": 154,
        "methodEndingLine": 163,
        "jml": "//@ requires List(Cons.class)(this, ?xs) &*& xs != nil;\n//@ ensures List(Cons.class)(this, xs) &*& result!= null &*& List(result.getClass())(result, tail(xs));"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/map.java",
        "code": "    List map(MapFunc f)\n        \n        \n    {\n        //@ open List(Cons.class)(this, ?xs_);\n        int fhead = f.apply(this.head);\n        List tail = this.tail;\n        List ftail = tail.map(f);\n        //@ assert List(_)(ftail, ?ftailxs);\n        return new Cons(fhead, ftail);\n        //@ close List(Cons.class)(this, xs_);\n        //@ append_assoc(ys, cons(fhead, nil), ftailxs);\n    }\n",
        "methodStartingLine": 165,
        "methodEndingLine": 177,
        "jml": "//@ requires List(Cons.class)(this, ?xs) &*& f != null &*& MapFunc(f.getClass())(f, xs, ?ys, ?info);\n//@ ensures List(Cons.class)(this, xs) &*& result != null &*& List(result.getClass())(result, ?zs) &*& MapFunc(f.getClass())(f, nil, append(ys, zs), info);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/map.java",
        "code": "    boolean equals(List other)\n        \n        \n    {\n        //@ switch (ys) { case nil: case cons(h, t): }\n        //@ open List(Cons.class)(this, ?xs_);\n        boolean otherEmpty = other.isEmpty();\n        if (otherEmpty) {\n            //@ close List(Cons.class)(this, xs_);\n            return false;\n        } else {\n            int otherHead = other.head();\n            if (this.head == otherHead) {\n                List otherTail = other.tail();\n                List tail = this.tail;\n                return tail.equals(otherTail);\n                //@ close List(Cons.class)(this, xs_);\n            } else {\n                //@ close List(Cons.class)(this, xs_);\n                return false;\n            }\n        }\n    }\n",
        "methodStartingLine": 179,
        "methodEndingLine": 201,
        "jml": "//@ requires List(Cons.class)(this, ?xs) &*& other != null &*& List(other.getClass())(other, ?ys);\n//@ ensures List(Cons.class)(this, xs) &*& List(other.getClass())(other, ys) &*& result ? xs == ys : xs != ys;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/map.java",
        "code": "    int apply(int x)\n        \n        \n    {\n        //@ open MapFunc(PlusOne.class)(this, ?in_, ?out_, ?info_);\n        //@ append_assoc(out_, cons(x + 1, nil), plusOne(tail(in_)));\n        //@ close MapFunc(PlusOne.class)(this, tail(in_), append(out_, cons(x + 1, nil)), info_);\n        return x + 1;\n    }\n",
        "methodStartingLine": 227,
        "methodEndingLine": 235,
        "jml": "//@ requires MapFunc(PlusOne.class)(this, ?in, ?out, ?info) &*& switch (in) { case nil: return false; case cons(h, t): return x == h; };\n//@ ensures MapFunc(PlusOne.class)(this, tail(in), append(out, cons(result, nil)), info);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/map.java",
        "code": "    public static void main(String[] args)\n    \n    \n    {\n        List l = new Nil();\n        l = new Cons(3, l);\n        l = new Cons(2, l);\n        l = new Cons(1, l);\n        PlusOne f = new PlusOne();\n        //@ close MapFunc(PlusOne.class)(f, cons(1, cons(2, cons(3, nil))), nil, cons(1, cons(2, cons(3, nil))));\n        List l2 = l.map(f);\n        //@ open MapFunc(PlusOne.class)(f, nil, ?ys, cons(1, cons(2, cons(3, nil))));\n        List l3 = new Nil();\n        l3 = new Cons(4, l3);\n        l3 = new Cons(3, l3);\n        l3 = new Cons(2, l3);\n        boolean eq = l2.equals(l3);\n        //@ append_nil(ys);\n        assert(eq);\n    }\n",
        "methodStartingLine": 240,
        "methodEndingLine": 259,
        "jml": "//@ requires true;\n//@ ensures true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Bag.java",
        "code": "  int extractMin()\n    \n    /*@\n    ensures\n        valid(?xs1) &*& result == min(xs) &*&\n        permut(xs, _, append(xs1, cons(result, nil))); // The new elements plus the result are a permutation of the old elements.\n    @*/\n  {\n    int mindex = 0;\n    //@ switch (xs) { case nil: case cons(x0, xs0): }\n    int m = a[mindex];\n    for (int i = 1; i < n; i++)\n      /*@\n      invariant\n        a |-> ?ar &*& n |-> ?num &*& array_slice(ar, 0, num, xs) &*&\n        0 <= mindex &*& mindex < num &*&\n        1 <= i &*& i <= num &*&\n        nth(mindex, xs) == m &*& m == min(take(i, xs));\n      @*/\n    {\n      //@ take_one_more(i, xs);\n      //@ min0_append(head(take(i, xs)), take(i, xs), cons(nth(i, xs), nil));\n      if (a[i] < m) {\n        mindex = i;\n        m = a[i];\n      }\n    }\n    n--;\n    a[mindex] = a[n];\n    return m;\n    //@ assert a |-> ?array &*& n |-> ?number &*& array_slice(array, 0, number, ?xs1);\n    //@ assert xs == append(take(number, xs), drop(number, xs));\n    //@ assert drop(number, xs) == cons(?nv, ?tail);\n    //@ switch (tail) { case nil: case cons(h, t): length_nonnegative(t); }\n    /*@\n    if (mindex < number) {\n        update_append_l(mindex, nv, take(number, xs), cons(m, nil));\n    }\n    @*/\n    //@ close permut(xs, cons(pair(mindex, number), nil), append(xs1, cons(m, nil)));\n  }\n",
        "methodStartingLine": 110,
        "methodEndingLine": 150,
        "jml": "//@ requires valid(?xs) &*& xs != nil;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Stack.java",
        "code": "    void push(int element)\n        \n        \n    {\n        //@ open valid(count);\n        Node n = new Node();\n        n.value = element;\n        n.next = head;\n        head = n;\n        //@ close nodes(head, count + 1);\n        //@ close valid(count + 1);\n    }\n",
        "methodStartingLine": 33,
        "methodEndingLine": 44,
        "jml": "//@ requires valid(?count);\n//@ ensures valid(count + 1);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Stack.java",
        "code": "    int pop()\n        \n        \n    {\n        //@ open valid(count);\n        //@ open nodes(_, _);\n        int result = head.value;\n        head = head.next;\n        //@ close valid(count - 1);\n        return result;\n    }\n",
        "methodStartingLine": 46,
        "methodEndingLine": 56,
        "jml": "//@ requires valid(?count) &*& 0 < count;\n//@ ensures valid(count - 1);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Stack.java",
        "code": "    public static void main(String[] args)\n        \n        \n    {\n        Stack s = new Stack();\n        s.push(10);\n        s.push(20);\n        s.push(30);\n        s.pop();\n        s.pop();\n        s.pop();\n    }\n",
        "methodStartingLine": 62,
        "methodEndingLine": 73,
        "jml": "//@ requires true;\n//@ ensures true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Spouse.java",
        "code": "    public /*lemma*/ void spouse_symm()\n        \n        \n    {\n        //@ open valid(s);\n        //@ spouse.spouse_symm_helper();\n        //@ close valid(s);\n    }\n",
        "methodStartingLine": 20,
        "methodEndingLine": 27,
        "jml": "//@ requires valid(?s) &*& s.valid(?ss);\n//@ ensures valid(s) &*& s.valid(ss) &*& ss == this;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Spouse.java",
        "code": "    public Person getSpouse()\n        \n        \n    {\n        //@ open valid(s);\n        return spouse;\n        //@ close valid(s);\n    }\n",
        "methodStartingLine": 36,
        "methodEndingLine": 43,
        "jml": "//@ requires valid(?s);\n//@ ensures valid(s) &*& result == s;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Spouse.java",
        "code": "    protected void setSpouse(Person other)\n        \n        \n    {\n        //@ open valid(null);\n        spouse = other;\n        other.spouse = this;\n        //@ close valid(other);\n    }\n",
        "methodStartingLine": 45,
        "methodEndingLine": 53,
        "jml": "//@ requires valid(null) &*& other.spouse |-> null;\n//@ ensures valid(other) &*& [1/2]other.spouse |-> this &*& [1/2]spouse |-> other;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Spouse.java",
        "code": "    protected void clearSpouse()\n        \n        \n    {\n        //@ open valid(ss);\n        spouse.spouse = null;\n        spouse = null;\n        //@ close valid(null);\n    }\n",
        "methodStartingLine": 55,
        "methodEndingLine": 63,
        "jml": "//@ requires [1/2]spouse |-> ?s &*& valid(?ss) &*& [1/2]s.spouse |-> _;\n//@ ensures valid(null) &*& s.spouse |-> null &*& ss == s;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Spouse.java",
        "code": "    void marry(Person other)\n        \n        \n    {\n        //@ open valid(null);\n        other.setSpouse(this);\n        //@ close valid(other);\n    }\n",
        "methodStartingLine": 65,
        "methodEndingLine": 72,
        "jml": "//@ requires valid(null) &*& other.valid(null);\n//@ ensures valid(other) &*& other.valid(this);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Spouse.java",
        "code": "    void divorce()\n        \n        \n    {\n        //@ open valid(other);\n        spouse.clearSpouse();\n        //@ close valid(null);\n    }\n",
        "methodStartingLine": 74,
        "methodEndingLine": 81,
        "jml": "//@ requires valid(?other) &*& other.valid(?ss);\n//@ ensures valid(null) &*& other.valid(null) &*& ss == this;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Spouse.java",
        "code": "    public static void main(String[] args)\n        \n        \n    {\n        Person a = new Person();\n        Person b = new Person();\n        a.marry(b);\n        b.divorce();\n    }\n",
        "methodStartingLine": 87,
        "methodEndingLine": 95,
        "jml": "//@ requires true;\n//@ ensures true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Recell.java",
        "code": "    void increment()\n        \n        \n    {\n        //@ open valid(x);\n        value++;\n        //@ close valid(x + 1);\n    }\n",
        "methodStartingLine": 16,
        "methodEndingLine": 23,
        "jml": "//@ requires valid(?x);\n//@ ensures valid(x + 1);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Recell.java",
        "code": "    void increment()\n        \n        \n    {\n        //@ open valid(x);\n        value--; //~allow_dead_code\n    }\n",
        "methodStartingLine": 31,
        "methodEndingLine": 37,
        "jml": "//@ requires valid(?x);\n//@ ensures valid(x + 1);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Spouse2.java",
        "code": "    protected Person getSpouse0()\n        \n        \n    {\n        //@ open valid0(s);\n        Person result = spouse;\n        //@ close valid0(s);\n        return result;\n    }\n",
        "methodStartingLine": 18,
        "methodEndingLine": 26,
        "jml": "//@ requires valid0(?s);\n//@ ensures valid0(s) &*& result == s;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Spouse2.java",
        "code": "    protected void setSpouse0(Person other)\n        \n        \n    {\n        //@ open valid0(null);\n        spouse = other;\n        //@ close valid0(other);\n        //@ close ticket(other);\n    }\n",
        "methodStartingLine": 28,
        "methodEndingLine": 36,
        "jml": "//@ requires valid0(null) &*& other != null;\n//@ ensures valid0(other) &*& ticket(other);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Spouse2.java",
        "code": "    protected void clearSpouse0()\n        \n        \n    {\n        //@ open valid0(other);\n        //@ open ticket(_);\n        spouse = null;\n        //@ close valid0(null);\n    }\n",
        "methodStartingLine": 38,
        "methodEndingLine": 46,
        "jml": "//@ requires valid0(?other) &*& ticket(_);\n//@ ensures valid0(null) &*& other != null;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Spouse2.java",
        "code": "    protected void setSpouse(Person other)\n        \n        \n    {\n        //@ open valid(null);\n        setSpouse0(other);\n        //@ close valid(other);\n    }\n",
        "methodStartingLine": 48,
        "methodEndingLine": 55,
        "jml": "//@ requires valid(null) &*& other.ticket(this);\n//@ ensures valid(other) &*& this.ticket(other);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Spouse2.java",
        "code": "    protected void clearSpouse()\n        \n        \n    {\n        //@ open valid(s);\n        clearSpouse0();\n        //@ close valid(null);\n    }\n",
        "methodStartingLine": 57,
        "methodEndingLine": 64,
        "jml": "//@ requires valid(?s) &*& this.ticket(_);\n//@ ensures valid(null) &*& s.ticket(this);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Spouse2.java",
        "code": "    protected /*lemma*/ void ticketLemma()\n        \n        \n    {\n        //@ open valid(s);\n        //@ ticketLemma0();\n        //@ close valid(s);\n    }\n",
        "methodStartingLine": 80,
        "methodEndingLine": 87,
        "jml": "//@ requires valid(?s) &*& this.ticket(?s0);\n//@ ensures valid(s) &*& this.ticket(s0) &*& s == s0;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Spouse2.java",
        "code": "    public /*lemma*/ void symmetryLemma()\n        \n        \n    {\n        //@ open valid(s);\n        Person spouse = getSpouse0();\n        spouse.ticketLemma();\n        //@ close valid(s);\n    }\n",
        "methodStartingLine": 89,
        "methodEndingLine": 97,
        "jml": "//@ requires valid(?s) &*& s.valid(?ss);\n//@ ensures valid(s) &*& s.valid(ss) &*& ss == this;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Spouse2.java",
        "code": "    public static Person create()\n        \n        \n    {\n        Person p = new Person();\n        //@ p.initLemma();\n        return p;\n    }\n",
        "methodStartingLine": 117,
        "methodEndingLine": 124,
        "jml": "//@ requires true;\n//@ ensures result.valid(null);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Spouse2.java",
        "code": "    public Person getSpouse()\n        \n        \n    {\n        //@ open valid(s);\n        return getSpouse0();\n        //@ close valid(s);\n    }\n",
        "methodStartingLine": 126,
        "methodEndingLine": 133,
        "jml": "//@ requires valid(?s);\n//@ ensures valid(s) &*& result == s;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Spouse2.java",
        "code": "    void marry(Person other)\n        \n        \n    {\n        //@ open valid(null);\n        setSpouse0(other);\n        other.setSpouse(this);\n        //@ close valid(other);\n    }\n",
        "methodStartingLine": 135,
        "methodEndingLine": 143,
        "jml": "//@ requires valid(null) &*& other.valid(null);\n//@ ensures valid(other) &*& other.valid(this);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Spouse2.java",
        "code": "    void divorce()\n        \n        \n    {\n        //@ open valid(other);\n        Person spouse = getSpouse0();\n        spouse.clearSpouse();\n        clearSpouse0();\n        //@ close valid(null);\n    }\n",
        "methodStartingLine": 145,
        "methodEndingLine": 154,
        "jml": "//@ requires valid(?other) &*& other.valid(this);\n//@ ensures valid(null) &*& other.valid(null);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Spouse2.java",
        "code": "    public static void main(String[] args)\n        \n        \n    {\n        Person a = Person.create();\n        Person b = Person.create();\n        a.marry(b);\n        b.divorce();\n    }\n",
        "methodStartingLine": 160,
        "methodEndingLine": 168,
        "jml": "//@ requires true;\n//@ ensures true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Contrib.java",
        "code": "    public void run()\n        \n        \n    {\n        try {\n            this.runCore();\n        } catch (InterruptedException e) {\n            RuntimeException e0 = new RuntimeException(e);\n            throw e0;\n        }\n    }\n",
        "methodStartingLine": 30,
        "methodEndingLine": 40,
        "jml": "//@ requires pre();\n//@ ensures post();"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Contrib.java",
        "code": "    public void runCore() throws InterruptedException /*@ ensures true; @*/\n        \n        \n    {\n        lock.acquire();\n        //@ open Counter(counter)();\n        counter.value++;\n        //@ counter.c1++;\n        //@ close Counter(counter)();\n        lock.release();\n    }\n",
        "methodStartingLine": 42,
        "methodEndingLine": 52,
        "jml": "//@ requires pre();\n//@ ensures post();"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Contrib.java",
        "code": "    public void run()\n        \n        \n    {\n        try {\n            this.runCore();\n        } catch (InterruptedException e) {\n            RuntimeException e0 = new RuntimeException(e);\n            throw e0;\n        }\n    }\n",
        "methodStartingLine": 64,
        "methodEndingLine": 74,
        "jml": "//@ requires pre();\n//@ ensures post();"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Contrib.java",
        "code": "    public void runCore() throws InterruptedException /*@ ensures true; @*/\n        \n        \n    {\n        lock.acquire();\n        //@ open Counter(counter)();\n        counter.value++;\n        //@ counter.c2++;\n        //@ close Counter(counter)();\n        lock.release();\n    }\n",
        "methodStartingLine": 76,
        "methodEndingLine": 86,
        "jml": "//@ requires pre();\n//@ ensures post();"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Contrib.java",
        "code": "    public static void main(String[] args)\n        \n        \n    {\n        Counter c = new Counter();\n        //@ close Counter(c)();\n        //@ one_time(Counter(c));\n        Semaphore lock = new Semaphore(1);\n        //@ lock.splitHandle(1r, 1, 1r/3, 1);\n        //@ lock.splitHandle(2r/3, 0, 1r/3, 0);\n        \n        Session1 session1 = new Session1();\n        session1.counter = c;\n        session1.lock = lock;\n        JoinableRunnable session1Joinable = ThreadingHelper.createJoinableRunnable(session1);\n        //@ close session1.pre();\n        //@ session1Joinable.closeIt();\n        Thread thread1 = new Thread(session1Joinable);\n        thread1.start();\n        \n        Session2 session2 = new Session2();\n        session2.counter = c;\n        session2.lock = lock;\n        JoinableRunnable session2Joinable = ThreadingHelper.createJoinableRunnable(session2);\n        //@ close session2.pre();\n        //@ session2Joinable.closeIt();\n        Thread thread2 = new Thread(session2Joinable);\n        thread2.start();\n        \n        ThreadingHelper.join(thread1, session1Joinable);\n        //@ open session1.post();\n        ThreadingHelper.join(thread2, session2Joinable);\n        //@ open session2.post();\n        \n        //@ lock.mergeHandles(1r/3, 0, 1r/3, 0);\n        //@ lock.mergeHandles(1r/3, 1, 2r/3, 0);\n        //@ lock.destroy();\n        //@ open n_times(1, Counter(c));\n        //@ open Counter(c)();\n        \n        int sum = c.value;\n        assert(sum == 2);\n    }\n",
        "methodStartingLine": 91,
        "methodEndingLine": 133,
        "jml": "//@ requires true;\n//@ ensures true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Counter.java",
        "code": "  void increment()\n    \n    \n  {\n    this.value = this.value + 1;\n  }\n",
        "methodStartingLine": 24,
        "methodEndingLine": 29,
        "jml": "//@ requires this.value |-> ?v;\n//@ ensures this.value |-> v + 1;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Counter.java",
        "code": "  void add(int x)\n    \n    \n  {\n    this.value = this.value + x;\n  }\n",
        "methodStartingLine": 31,
        "methodEndingLine": 36,
        "jml": "//@ requires this.value |-> ?v;\n//@ ensures this.value |-> v + x;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Counter.java",
        "code": "  void add(Counter x)\n    \n    \n  {\n    add(x.value);\n  }\n",
        "methodStartingLine": 37,
        "methodEndingLine": 42,
        "jml": "//@ requires this.value |-> ?v &*& x.value |-> ?v';\n//@ ensures this.value |-> v + v' &*& x.value |-> v';"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Counter.java",
        "code": "  static void swap(Counter c1, Counter c2)\n    \n    \n  {\n    int tmp = c1.value;\n    c1.value = c2.value;\n    c2.value = tmp;\n  }\n",
        "methodStartingLine": 44,
        "methodEndingLine": 51,
        "jml": "//@ requires c1.value |-> ?v1 &*& c2.value |-> ?v2;\n//@ ensures c1.value |-> v2 &*& c2.value |-> v1;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Counter.java",
        "code": "  public static void main(String[] args)\n    \n    \n  {\n    Counter c1 = new Counter(0);\n    Counter c2 = new Counter(5);\n    Counter c3 = new Counter(5,5);\n    Counter c4= new Counter(c2);\n    c1.increment();\n    Counter.swap(c1, c2);\n    int tmp = c2.value;\n    //@ assert tmp == 1;\n    tmp=c3.value;\n    //@ assert tmp==10;\n    tmp=c4.value;\n    int tmp2=c1.value;\n    //@ assert tmp==tmp2;\n    \n    c1.add(10);\n    tmp=c1.value;\n    //@ assert tmp==15;\n    \n    c1.add(c2);\n    tmp=c1.value;\n    //@ assert tmp==16;\n  }\n",
        "methodStartingLine": 53,
        "methodEndingLine": 78,
        "jml": "//@ requires true;\n//@ ensures true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Account.java",
        "code": "    int getBalance()\n        \n        \n    {\n        //@ open valid(b);\n        return balance;\n        //@ close valid(b);\n    }\n",
        "methodStartingLine": 14,
        "methodEndingLine": 21,
        "jml": "//@ requires valid(?b);\n//@ ensures valid(b) &*& result == b;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Account.java",
        "code": "    void deposit(int amount)\n        \n        \n    {\n        //@ open valid(b);\n        balance += amount;\n        //@ close valid(_);\n    }\n",
        "methodStartingLine": 23,
        "methodEndingLine": 30,
        "jml": "//@ requires valid(?b);\n//@ ensures valid(b + amount);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Account.java",
        "code": "    void transferTo(Account target, int amount)\n        \n        \n    {\n        deposit(-amount);\n        target.deposit(amount);\n    }\n",
        "methodStartingLine": 32,
        "methodEndingLine": 38,
        "jml": "//@ requires this.valid(?b) &*& target.valid(?bt);\n//@ ensures this.valid(b - amount) &*& target.valid(bt + amount);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Account.java",
        "code": "    public static void main(String[] args)\n        \n        \n    {\n        Account a = new Account();\n        a.deposit(1000);\n        \n        Account b = new Account();\n        b.deposit(2000);\n        \n        a.transferTo(b, 500);\n        \n        int ba = a.getBalance();\n        int bb = b.getBalance();\n        assert ba == 500 && bb == 2500;\n    }\n",
        "methodStartingLine": 44,
        "methodEndingLine": 59,
        "jml": "//@ requires true;\n//@ ensures true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "javacard_tutorial/abs.java",
        "code": "    static short abs(short x)\n        \n        \n    {\n        if (x < 0) {\n            x = (short)-x;\n            return x;\n        } else {\n            return x;\n        }\n    }\n",
        "methodStartingLine": 2,
        "methodEndingLine": 12,
        "jml": "//@ requires true;\n//@ ensures 0 <= result &*& result == x || result == -x;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "javacard_tutorial/min.java",
        "code": "    static short min(short x, short y, short z)\n        \n        /*@\n        ensures\n            result <= x && result <= y && result <= z &&\n            (result == x || result == y || result == z);\n        @*/\n    {\n        if (x < y) {\n            if (x < z) {\n                return x;\n            } else {\n                return z;\n            }\n        } else {\n            return y;\n        }\n    }\n",
        "methodStartingLine": 2,
        "methodEndingLine": 19,
        "jml": "//@ requires true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/DoWhile.java",
        "code": "    static void readLinesIntoList(BufferedReader reader, List list)\n        \n        \n    {\n        boolean repeat = true;\n        do\n            //@ invariant reader.Reader() &*& list.List(_);\n        {\n            String line = reader.readLine();\n            if (line == null)\n                repeat = false;\n            else\n                list.add(line);\n        }\n        while (repeat);\n    }\n",
        "methodStartingLine": 5,
        "methodEndingLine": 20,
        "jml": "//@ requires reader.Reader() &*& list.List(_);\n//@ ensures reader.Reader() &*& list.List(_);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Downcast.java",
        "code": "    int getY()\n        \n        \n    {\n        //@ open D(x, y);\n        return this.y;\n        //@ close D(x, y);\n    }\n",
        "methodStartingLine": 45,
        "methodEndingLine": 52,
        "jml": "//@ requires D(?x, ?y);\n//@ ensures D(x, y) &*& result == y;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Downcast.java",
        "code": "    int getY()\n        \n        \n    {\n        //@ open D(x, y);\n        //@ open E(x, y, _);\n        return super.getY();\n        //@ close E(x, y, _);\n        //@ close D(x, y);\n    }\n",
        "methodStartingLine": 89,
        "methodEndingLine": 98,
        "jml": "//@ requires D(?x, ?y);\n//@ ensures D(x, y) &*& result == y;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Downcast.java",
        "code": "    static int getY(C c)\n        \n        \n    {\n        if (c instanceof D) {\n            D d = (D)c;\n            //@ d.castCToD();\n            return d.getY();\n            //@ d.castDToC();\n        } else {\n            return 0;\n        }\n    }\n",
        "methodStartingLine": 102,
        "methodEndingLine": 114,
        "jml": "//@ requires c.C(?x);\n//@ ensures c.C(x);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Downcast.java",
        "code": "    static void test()\n        \n        \n    {\n        E e = new E();\n        //@ close e.C(_);\n        getY(e);\n    }\n",
        "methodStartingLine": 116,
        "methodEndingLine": 123,
        "jml": "//@ requires true;\n//@ ensures true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Iterator.java",
        "code": "    public boolean hasNext()\n        \n        \n    {\n        //@ open valid(xs);\n        return !done;\n        //@ close valid(xs);\n    }\n",
        "methodStartingLine": 49,
        "methodEndingLine": 56,
        "jml": "//@ requires valid(?xs);\n//@ ensures valid(xs) &*& result == (xs != nil);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Iterator.java",
        "code": "    public Object next()\n        \n        \n    {\n        //@ open valid(xs);\n        done = true;\n        return value;\n        //@ close valid(nil);\n    }\n",
        "methodStartingLine": 58,
        "methodEndingLine": 66,
        "jml": "//@ requires valid(?xs) &*& xs != nil;\n//@ ensures valid(tail(xs)) &*& result == head(xs) &*& result != null;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Iterator.java",
        "code": "    public static Object getLast(Iterator iterator)\n        \n        \n    {\n        Object value = null;\n        boolean more = iterator.hasNext();\n        while (more)\n            //@ invariant iterator.valid(?ys) &*& more == (ys != nil) &*& objects_last(cons(value, ys)) == objects_last(xs);\n        {\n            //@ switch (ys) { case nil: case cons(y, ys0): }\n            value = iterator.next();\n            more = iterator.hasNext();\n        }\n        return value;\n    }\n",
        "methodStartingLine": 72,
        "methodEndingLine": 86,
        "jml": "//@ requires iterator.valid(?xs);\n//@ ensures iterator.valid(nil) &*& result == objects_last(xs);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Iterator.java",
        "code": "    public static void main(String[] args)\n        \n        \n    {\n        Object o = new Object();\n        SingletonIterator i = new SingletonIterator(o);\n        boolean before = i.hasNext();\n        assert(before);\n\n        Object last = IteratorUtil.getLast(i);\n        assert last == o;\n      \n        boolean after = i.hasNext();\n        assert(!after);\n    }\n",
        "methodStartingLine": 92,
        "methodEndingLine": 106,
        "jml": "//@ requires true;\n//@ ensures true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Division.java",
        "code": "  int division_test(int nom, int denom) \n    \n    \n  {\n    int tmp = nom / denom;\n    return tmp;\n  }\n",
        "methodStartingLine": 8,
        "methodEndingLine": 14,
        "jml": "//@ requires denom != 0 && !((nom == -2147483648) && (denom == -1));\n//@ ensures result == nom / denom;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Division.java",
        "code": "  void division_test2(int nom, int denom) \n    \n    \n  {\n    int tmp = nom / denom;\n    int rest = nom % denom;\n    //@ assert denom*tmp + rest == nom;\n  }\n",
        "methodStartingLine": 16,
        "methodEndingLine": 23,
        "jml": "//@ requires denom != 0 && !((nom == -2147483648) && (denom == -1));\n//@ ensures true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Division.java",
        "code": "  void bigwiseand_test(int x) \n    \n    \n  {\n    int tmp = x & 255;\n    //@ assert 255 >= (x & 255);\n  }\n",
        "methodStartingLine": 25,
        "methodEndingLine": 31,
        "jml": "//@ requires 0 <= x;\n//@ ensures true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Division.java",
        "code": "  int division_test_fail(int nom, int denom) \n    \n    \n  {\n    int tmp = nom / denom; //~ should_fail\n    return tmp; //~allow_dead_code\n  }\n",
        "methodStartingLine": 33,
        "methodEndingLine": 39,
        "jml": "//@ requires true;\n//@ ensures result == nom / denom;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Constants.java",
        "code": "    public void m(int s) \n      \n      \n    {\n    }\n",
        "methodStartingLine": 16,
        "methodEndingLine": 20,
        "jml": "//@ requires true;\n//@ ensures true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Constants.java",
        "code": "    public static void main(String[] args)\n        \n        \n    {\n        short tmp0 = 0;\n        tmp0 = BLA;\n        assert Foo.FOO == 12345;\n        assert BAR == 3;\n        assert QUUX == 12348;\n    }\n",
        "methodStartingLine": 22,
        "methodEndingLine": 31,
        "jml": "//@ requires true;\n//@ ensures true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Constants.java",
        "code": "    static void user()\n        \n        \n    {\n        assert Baz.ONE == 1;\n    }\n",
        "methodStartingLine": 51,
        "methodEndingLine": 56,
        "jml": "//@ requires true;\n//@ ensures true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Constants.java",
        "code": "    void instanceMethod()\n        \n        \n    {\n        assert TWO == 2;\n    }\n",
        "methodStartingLine": 60,
        "methodEndingLine": 65,
        "jml": "//@ requires true;\n//@ ensures true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Constants.java",
        "code": "    static void staticMethod()\n        \n        \n    {\n        assert TWO == 2;\n    }\n",
        "methodStartingLine": 67,
        "methodEndingLine": 72,
        "jml": "//@ requires true;\n//@ ensures true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/ArrayList.java",
        "code": "    public boolean hasNext()\n        \n        \n    {\n        return index < list.size();\n        //@ switch (removals) { case nil: case cons(r, rs1): }\n        //@ length_remove_nths(removals, oldElements);\n        \n    }\n",
        "methodStartingLine": 179,
        "methodEndingLine": 187,
        "jml": "//@ requires Iterator(?es, ?c, ?n);\n//@ ensures Iterator(es, c, n) &*& result ? es(n) != none : es(n) == none; // Force case split."
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/ArrayList.java",
        "code": "    public T next()\n        \n        \n    {\n        //@ list.size_limits();\n        //@ switch (removals) { case nil: case cons(r, rs1): }\n        //@ length_remove_nths(removals, oldElements);\n        //@ assert [_]oldElements |-> ?oes;\n        //@ seq_of_list_length(oes, n);\n        return list.get(index++);\n        //@ hasCurrentElement = true;\n        //@ nextRemoveIndex = n;\n        //@ nth_remove_nths(n, removals, oldElements);\n    }\n",
        "methodStartingLine": 189,
        "methodEndingLine": 202,
        "jml": "//@ requires Iterator(?es, ?c, ?n) &*& es(n) != none;\n//@ ensures Iterator(es, some(n), n + 1) &*& result == the(es(n));"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/ArrayList.java",
        "code": "    public void remove()\n        \n        \n    {\n        //@ open Iterator_removals(_);\n        list.remove(--index);\n        //@ removals = cons(the(c), rs);\n        //@ hasCurrentElement = false;\n        //@ nextRemoveIndex = n;\n        //@ remove_nth_remove_nths(the(c), rs, oldElements);\n        //@ length_remove_nths(cons(the(c), rs), oldElements);\n    }\n",
        "methodStartingLine": 204,
        "methodEndingLine": 215,
        "jml": "//@ requires Iterator(?es, ?c, ?n) &*& Iterator_removals(?rs) &*& c != none;\n//@ ensures Iterator(es, none, n) &*& Iterator_removals(cons(the(c), rs));"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/ArrayList.java",
        "code": "    public int size()\n        \n        \n    {\n        //@ listToIterable();\n        return size;\n        //@ iterableToList();\n    }\n",
        "methodStartingLine": 289,
        "methodEndingLine": 296,
        "jml": "//@ requires [?f]List(?es);\n//@ ensures [f]List(es) &*& result == length(es);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/ArrayList.java",
        "code": "    public T get(int index)\n        \n        \n    {\n        return elements[index];\n    }\n",
        "methodStartingLine": 298,
        "methodEndingLine": 303,
        "jml": "//@ requires [?f]List(?es) &*& 0 <= index &*& index < length(es);\n//@ ensures [f]List(es) &*& result == nth(index, es);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/ArrayList.java",
        "code": "    public Iterator<T> iterator()\n        \n        /*@\n        ensures\n            result.Iterator((seq_of_list)(es), none, 0) &*&\n            (f == 1 ? result.Iterator_removals(nil) : true) &*&\n            Iterable_iterating(this.getClass())(this, es, f, result);\n        @*/\n    {\n        //@ this.iterableToList();\n        ArrayListIterator<T> i = new ArrayListIterator<T>(this);\n        //@ close Iterable_iterating(ArrayList.class)(this, es, f, i);\n        return i;\n    }\n",
        "methodStartingLine": 305,
        "methodEndingLine": 318,
        "jml": "//@ requires [?f]Iterable(?es);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/ArrayList.java",
        "code": "    boolean add(T e)\n        \n        \n    {\n        if (size == elements.length) {\n            Object[] newArray = new Object[2 * size + 1];\n            //@ close array_slice_dynamic(array_slice_Object, elements, 0, size, _);\n            //@ close array_slice_dynamic(array_slice_Object, newArray, 0, size, _);\n            //@ close arraycopy_pre(array_slice_Object, false, 1, elements, 0, size, _, newArray, 0);\n            System.arraycopy(elements, 0, newArray, 0, size);\n            //@ open arraycopy_post(_, _, _, _, _, _, _, _, _);\n            //@ open array_slice_dynamic(array_slice_Object, newArray, _, _, _);\n            elements = newArray;\n        }\n        elements[size++] = e;\n        return true;\n    }\n",
        "methodStartingLine": 342,
        "methodEndingLine": 358,
        "jml": "//@ requires List(?es);\n//@ ensures List(append(es, cons(e, nil))) &*& result;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/ArrayList.java",
        "code": "    boolean addAll(Collection<T> other)\n        \n        \n    {\n        //@ open listIsCollection(li, other);\n        List l = (List) other;\n        int n = l.size();\n        //@ list<Object> ys = nil;\n        //@ list<Object> zs = other_es;\n        for (int i = 0; i < n; i++)\n            //@ requires List(?xs) &*& l.List(append(ys, zs)) &*& length(ys) == i &*& length(ys) + length(zs) == n &*& switch (zs) { case nil: return true; case cons(h, t): return true; };\n            //@ ensures List(append(xs, old_zs)) &*& l.List(append(old_ys, old_zs));\n        {\n            add(l.get(i));\n            //@ assert zs == cons(?h, ?t);\n            //@ append_assoc(ys, {h}, t);\n            //@ ys = append(ys, {h});\n            //@ zs = t;\n            //@ append_assoc(xs, {h}, t);\n        }\n        return true;\n    }\n",
        "methodStartingLine": 360,
        "methodEndingLine": 381,
        "jml": "//@ requires List(?es) &*& listIsCollection(?li, other) &*& li.List(?other_es);\n//@ ensures List(append(es, other_es)) &*& li.List(other_es);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/ArrayList.java",
        "code": "    T remove(int index)\n        \n        \n    {\n        T result = elements[index];\n        /*@\n        if (index + 1 == size) {\n            close array_slice_dynamic(array_slice_Object, elements, index + 1, index + 1, array_slice_Objects(nil));\n            close array_slice_dynamic(array_slice_Object, elements, index, index, array_slice_Objects(nil));\n            close arraycopy_pre(array_slice_Object, false, 1, elements, index + 1, 0, array_slice_Objects(nil), elements, index);\n        } else {\n            close array_slice_dynamic(array_slice_Object, elements, index, index + 1, _);\n            assert elements |-> ?e &*& size |-> ?s &*& array_slice(e, index + 1, s, ?elems);\n            close array_slice_dynamic(array_slice_Object, elements, index + 1, size - 1, _);\n            close array_slice_dynamic(array_slice_Object, elements, size - 1, size, _);\n            close arraycopy_pre(array_slice_Object, true, 1, elements, index + 1, size - index - 1, array_slice_Objects(elems), elements, index);\n        }\n        @*/\n        System.arraycopy(elements, index + 1, elements, index, size - index - 1);\n        //@ open arraycopy_post(_, _, _, _, _, _, _, _, _);\n        //@ open array_slice_dynamic(_, _, _, _, _);\n        //@ open array_slice_dynamic(_, _, _, _, _);\n        elements[--size] = null;\n        return result;\n        //@ remove_nth_take_drop(es, index);\n    }\n",
        "methodStartingLine": 383,
        "methodEndingLine": 408,
        "jml": "//@ requires List(?es) &*& 0 <= index &*& index < length(es);\n//@ ensures List(remove_nth(index, es)) &*& result == nth(index, es);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/ThreadRun.java",
        "code": "    void start()\n        \n        \n    {\n        throw new NullPointerException();\n    }\n",
        "methodStartingLine": 14,
        "methodEndingLine": 19,
        "jml": "//@ requires this.pre();\n//@ ensures started(this);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/ThreadRun.java",
        "code": "    void run()\n        \n        \n    {\n        //@ open pre();\n        //@ close post();\n    }\n",
        "methodStartingLine": 21,
        "methodEndingLine": 27,
        "jml": "//@ requires pre();\n//@ ensures post();"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/ThreadRun.java",
        "code": "    void join()\n        \n        \n    {\n        throw new NullPointerException();\n    }\n",
        "methodStartingLine": 29,
        "methodEndingLine": 34,
        "jml": "//@ requires started(this);\n//@ ensures this.post();"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/ThreadRun.java",
        "code": "    void run()\n        \n        \n    {\n        //@ open pre();\n        x++;\n        //@ close post();\n    }\n",
        "methodStartingLine": 52,
        "methodEndingLine": 59,
        "jml": "//@ requires pre();\n//@ ensures post();"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/ThreadRun.java",
        "code": "    int getResult()\n        \n        \n    {\n        //@ open post();\n        return x;\n    }\n",
        "methodStartingLine": 61,
        "methodEndingLine": 67,
        "jml": "//@ requires post();\n//@ ensures x |-> 1 &*& result == 1;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/ThreadRun.java",
        "code": "    public static void main(String[] args)\n        \n        \n    {\n        MyThread t = new MyThread();\n        t.start();\n        t.join();\n        int result = t.getResult();\n        assert result == 1;\n    }\n",
        "methodStartingLine": 72,
        "methodEndingLine": 81,
        "jml": "//@ requires true;\n//@ ensures true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "javacard_tutorial/purse.java",
        "code": "    void deposit(Purse p, short amount)\n        \n        \n    {\n        p.balance += amount;\n    }\n",
        "methodStartingLine": 8,
        "methodEndingLine": 13,
        "jml": "//@ requires Purse_balance(p, ?b);\n//@ ensures Purse_balance(p, (short)(b + amount));"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/chat/Room.java",
        "code": "    public boolean has_member(String nick)\n        \n        \n    {\n        //@ open room(this);\n        //@ assert foreach(?members, _);\n        List<Member> membersList = this.members;\n        //@ membersList.listToIterable();\n        Iterator<Member> iter = membersList.iterator();\n        boolean hasMember = false;\n        boolean hasNext = iter.hasNext();\n        while (hasNext && !hasMember)\n            /*@\n            invariant\n                iter.Iterator((seq_of_list)(members), _, ?i) &*& Iterable_iterating(membersList.getClass())(membersList, members, 1, iter) &*& foreach(members, @member)\n                &*& hasNext == (i < length(members)) &*& 0 <= i &*& i <= length(members);\n            @*/\n        {\n            Member member = iter.next();\n            //@ foreach_remove<Member>(member, members);\n            //@ open member(member);\n            hasMember = nick.equals(member.nick);\n            //@ close member(member);\n            //@ foreach_unremove<Member>(member, members);\n            hasNext = iter.hasNext();\n        }\n        //@ membersList.destroyIterator();\n        //@ membersList.iterableToList();\n        //@ close room(this);\n        return hasMember;\n    }\n",
        "methodStartingLine": 26,
        "methodEndingLine": 56,
        "jml": "//@ requires room(this) &*& nick != null;\n//@ ensures room(this);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/chat/Room.java",
        "code": "    public void broadcast_message(String message) throws IOException /*@ ensures true; @*/\n        \n        \n    {\n        //@ open room(this);\n        //@ assert foreach(?members0, _);\n        List<Member> membersList = this.members;\n        //@ membersList.listToIterable();\n        Iterator<Member> iter = membersList.iterator();\n        boolean hasNext = iter.hasNext();\n        //@ length_nonnegative(members0);\n        while (hasNext)\n            /*@\n            invariant\n                foreach<Member>(?members, @member) &*& iter.Iterator((seq_of_list)(members), _, ?i) &*& Iterable_iterating(membersList.getClass())(membersList, members, 1, iter)\n                &*& hasNext == (i < length(members)) &*& 0 <= i &*& i <= length(members);\n            @*/\n        {\n            Member member = iter.next();\n            //@ mem_nth(i, members);\n            //@ foreach_remove<Member>(member, members);\n            //@ open member(member);\n            Writer writer = member.writer;\n            writer.write(message);\n            writer.write(\"\\r\\n\");\n            writer.flush();\n            //@ close member(member);\n            //@ foreach_unremove<Member>(member, members);\n            hasNext = iter.hasNext();\n        }\n        //@ membersList.destroyIterator();\n        //@ membersList.iterableToList();\n        //@ close room(this);\n    }\n",
        "methodStartingLine": 58,
        "methodEndingLine": 91,
        "jml": "//@ requires room(this) &*& message != null;\n//@ ensures room(this);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Automation.java",
        "code": "  void test1() \n    \n    \n  {\n    //@ assert c(0, 5);\n  }\n",
        "methodStartingLine": 9,
        "methodEndingLine": 14,
        "jml": "//@ requires a(true, 5);\n//@ ensures true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Automation.java",
        "code": "  void test2()\n    \n    \n  {\n     //@ assert [1/2]n();\n  }\n",
        "methodStartingLine": 16,
        "methodEndingLine": 21,
        "jml": "//@ requires p();\n//@ ensures true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Automation.java",
        "code": "  void test1(CellImpl c) \n    \n    \n  {\n    c.value = 5;\n  }\n",
        "methodStartingLine": 47,
        "methodEndingLine": 52,
        "jml": "//@ requires cell(BackupCell.class)(c);\n//@ ensures true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Automation.java",
        "code": "  void test2(BackupCellWrapper c) \n    \n    \n  {\n    if(! c.b) {\n      c.value = 5;\n    } else {\n      c.myvalue = 10;\n    }\n  }\n",
        "methodStartingLine": 54,
        "methodEndingLine": 63,
        "jml": "//@ requires cell(BackupCellWrapper.class)(c);\n//@ ensures true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Exceptions.java",
        "code": "  void test() throws MyException /*@ ensures true; @*/\n    \n    \n  {\n    throw new MyException();\n  }\n",
        "methodStartingLine": 9,
        "methodEndingLine": 14,
        "jml": "//@ requires true;\n//@ ensures false;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Exceptions.java",
        "code": "  void throwsMyException(boolean thrw) throws MyException /*@ ensures thrw == true; @*/\n    \n    \n  {\n    if(thrw) {\n      throw new MyException();\n    }\n  }\n",
        "methodStartingLine": 16,
        "methodEndingLine": 23,
        "jml": "//@ requires true;\n//@ ensures thrw == false;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Exceptions.java",
        "code": "  void test2() throws YourException /*@ ensures true; @*/\n    \n    \n  {\n    try {\n      throwsMyException(true);\n    } catch(MyException e) {\n      throw new YourException();\n    }\n  }\n",
        "methodStartingLine": 25,
        "methodEndingLine": 34,
        "jml": "//@ requires true;\n//@ ensures false;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Exceptions.java",
        "code": "  void test3() throws YourException /*@ ensures true; @*/\n    \n    \n  {\n    try {\n      throwsMyException(true);\n    } catch(MyException e) {\n    }\n  }\n",
        "methodStartingLine": 36,
        "methodEndingLine": 44,
        "jml": "//@ requires true;\n//@ ensures true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Exceptions.java",
        "code": "  void test4()\n    \n    \n  {\n    try {\n      throw new MyException();\n    } catch(YourException e) {\n      assert(false);\n    } catch(MyException e) {\n    }\n  } \n",
        "methodStartingLine": 46,
        "methodEndingLine": 56,
        "jml": "//@ requires true;\n//@ ensures true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Exceptions.java",
        "code": "  void m(int i) throws MyException /*@ ensures true; @*/\n    \n    \n  {\n  }\n",
        "methodStartingLine": 60,
        "methodEndingLine": 64,
        "jml": "//@ requires true;\n//@ ensures true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Exceptions.java",
        "code": "  void m(int i) throws MyException /*@ ensures i == 0; @*/\n    \n    \n  {\n  }\n",
        "methodStartingLine": 68,
        "methodEndingLine": 72,
        "jml": "//@ requires true;\n//@ ensures true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/fm2012/problem2.java",
        "code": "    public void upsweep(int left, int right)\n        \n        \n    {\n        //@ open array_tree0(_, _, _, _);\n        if (right > left+1) {\n            int space = right - left;\n            upsweep(left-space/2,left);\n            upsweep(right-space/2,right);\n        }\n        a[right] = a[left]+a[right];\n        //@ close array_tree1(a_, left, right, values);\n    }\n",
        "methodStartingLine": 273,
        "methodEndingLine": 285,
        "jml": "//@ requires a |-> ?a_ &*& array_tree0(a_, left, right, ?values);\n//@ ensures a |-> a_ &*& array_tree1(a_, left, right, values) &*& array_element(a_, right, treesum(values));"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/fm2012/problem2.java",
        "code": "    public void downsweep(int left, int right)\n        \n        \n    {\n        //@ open array_tree1(_, _, _, _);\n        int tmp = a[right];\n        a[right] = a[right] + a[left];\n        a[left] = tmp;\n        if (right > left+1) {\n            int space = right - left;\n            downsweep(left-space/2,left);\n            downsweep(right-space/2,right);\n        }\n        //@ close array_tree2(a_, left, right, leftSum, values);\n    }\n",
        "methodStartingLine": 288,
        "methodEndingLine": 302,
        "jml": "//@ requires a |-> ?a_ &*& array_tree1(a_, left, right, ?values) &*& array_element(a_, right, ?leftSum);\n//@ ensures a |-> a_ &*& array_tree2(a_, left, right, leftSum, values);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/fm2012/problem2.java",
        "code": "    public static void prefixsums(int[] a)\n        \n        \n    {\n        int left = a.length / 2 - 1;\n        int right = a.length - 1;\n        PrefixSumRec p = new PrefixSumRec(a);\n        //@ array_slice_to_array_tree0(n, a, 0, a.length);\n        p.upsweep(left, right);\n        a[a.length - 1]=0;\n        p.downsweep(left, right);\n        //@ array_tree2_prefixsums();\n        //@ flatten_bintree_of_list(succ(n), vs);\n        //@ list_prefixSums_flatten(0, bintree_of_list(succ(n), vs));\n    }\n",
        "methodStartingLine": 304,
        "methodEndingLine": 318,
        "jml": "//@ requires array_slice(a, 0, a.length, ?vs) &*& exists<nat>(?n) &*& length(vs) == pow(2, succ(n));\n//@ ensures array_slice(a, 0, a.length, list_prefixSums(0, vs));"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/fm2012/problem2.java",
        "code": "    public static void main (String [] args)\n        \n        \n    {\n        int [] a = {3,1,7,0,4,1,6,3};\n        //@ close exists(succ(succ(zero)));\n        prefixsums(a);\n        //@ assert a[..] |-> {0,3,4,11,11,15,16,22};\n    }\n",
        "methodStartingLine": 320,
        "methodEndingLine": 328,
        "jml": "//@ requires true;\n//@ ensures true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/InstanceOf.java",
        "code": "  void test(A[] a) \n    \n    \n  {\n    if(! (a instanceof B[])) {\n    }\n    \n    if(a instanceof I[]) {\n    }\n  }\n",
        "methodStartingLine": 11,
        "methodEndingLine": 20,
        "jml": "//@ requires true;\n//@ ensures true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/SuperCalls.java",
        "code": "  public int m(int y) \n    \n    \n  {\n    //@ open valid(v);\n    x = y;\n    //@ close valid(y);\n    return y;\n  }\n",
        "methodStartingLine": 4,
        "methodEndingLine": 12,
        "jml": "//@ requires valid(?v) &*& 0 <= y;\n//@ ensures valid(y) &*& result == y;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/SuperCalls.java",
        "code": "  public int m(int y) \n    \n    \n  {\n    //@ open valid(v);\n    //@ close valid(A.class)(v);\n    int tmp = super.m(y);\n   //@ open valid(A.class)(y);\n   //@ close valid(y);\n   return tmp;\n  }\n",
        "methodStartingLine": 20,
        "methodEndingLine": 30,
        "jml": "//@ requires valid(?v) &*& 0 <= y;\n//@ ensures valid(y) &*& result == y;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/ArraysAuto.java",
        "code": "    static void test2()\n        \n        \n    {\n        int[] xs = new int[100];\n        //@ assert array_slice(xs, 0, 100, ?elems);\n        int x = xs[50];\n        assert x == 0;\n        test3(xs);\n    }\n",
        "methodStartingLine": 2,
        "methodEndingLine": 11,
        "jml": "//@ requires true;\n//@ ensures true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/ArraysAuto.java",
        "code": "    static void test3(int[] xs)\n        \n        \n    {\n    }\n",
        "methodStartingLine": 13,
        "methodEndingLine": 17,
        "jml": "//@ requires array_slice(xs, 60, 70, ?elems) &*& all_eq(elems, 0) == true;\n//@ ensures true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/HelloWorld.java",
        "code": "  public static void main(String[] args) \n    \n    \n  {\n    System.out.println(\"Hello, World\");\n  }\n",
        "methodStartingLine": 3,
        "methodEndingLine": 8,
        "jml": "//@ requires System_out(?o) &*& o != null;\n//@ ensures true; "
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "javacard_tutorial/minsep.java",
        "code": "    static short min(short x, short y, short z)\n        \n        /*@\n        ensures\n            result <= x &*& result <= y &*& result <= z &*&\n            (result == x || result == y || result == z);\n        @*/\n    {\n        if (x < y) {\n            if (x < z) {\n                return x;\n            } else {\n                return z;\n            }\n        } else {\n            return y;\n        }\n    }\n",
        "methodStartingLine": 2,
        "methodEndingLine": 19,
        "jml": "//@ requires true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "javacard_tutorial/rotate.java",
        "code": "    static void rotate(byte[] xs, short start, short end)\n        \n        \n    {\n        if (start >= end - 1)\n            return;\n        byte last = xs[end - 1];\n        for (short i = start; i < end - 1; i++)\n            //@ invariant array_slice(xs, start, end, _) &*& start <= i;\n        {\n            xs[i + 1] = xs[i];\n        }\n        xs[start] = last;\n    }\n",
        "methodStartingLine": 2,
        "methodEndingLine": 15,
        "jml": "//@ requires array_slice(xs, start, end, _);\n//@ ensures array_slice(xs, start, end, _);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/DefaultCtor.java",
        "code": "    public static void doAssert(boolean b)\n        \n        \n    {\n        assert b;\n    }\n",
        "methodStartingLine": 19,
        "methodEndingLine": 24,
        "jml": "//@ requires b;\n//@ ensures true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/DefaultCtor.java",
        "code": "    public static void main(String[] args)\n        \n        \n    {\n        Bar b = new Bar();\n        Foo f = b;\n        \n        doAssert(f.x == 0);\n        doAssert(f.y == 0);\n        doAssert(f.z == 0);\n        doAssert(f.o == null);\n        doAssert(f.p == null);\n        doAssert(b.xx == 0);\n    }\n",
        "methodStartingLine": 26,
        "methodEndingLine": 39,
        "jml": "//@ requires true;\n//@ ensures true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/SpouseFinal.java",
        "code": "    public Person getSpouse()\n        \n        \n    {\n        //@ open valid(s);\n        return spouse;\n        //@ close valid(s);\n    }\n",
        "methodStartingLine": 29,
        "methodEndingLine": 36,
        "jml": "//@ requires valid(?s);\n//@ ensures valid(s) &*& result == s;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/SpouseFinal.java",
        "code": "    void marry(Person other)\n        \n        \n    {\n        //@ open valid(null);\n        //@ open other.valid(null);\n        spouse = other;\n        other.spouse = this;\n        //@ close other.valid(this);\n        //@ close valid(other);\n    }\n",
        "methodStartingLine": 38,
        "methodEndingLine": 48,
        "jml": "//@ requires valid(null) &*& other.valid(null);\n//@ ensures valid(other) &*& other.valid(this);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/SpouseFinal.java",
        "code": "    void divorce()\n        \n        \n    {\n        //@ open valid(other);\n        //@ open other.valid(ss);\n        spouse.spouse = null;\n        spouse = null;\n        //@ close other.valid(null);\n        //@ close valid(null);\n    }\n",
        "methodStartingLine": 50,
        "methodEndingLine": 60,
        "jml": "//@ requires valid(?other) &*& other.valid(?ss);\n//@ ensures valid(null) &*& other.valid(null) &*& ss == this;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/SpouseFinal.java",
        "code": "    public static void foo(Person a, Person b)\n        \n        \n    {\n        Person aSpouse = a.getSpouse();\n        Person bSpouse = b.getSpouse();\n        if (aSpouse == b) {\n            //@ a.spouse_symm();\n            assert bSpouse == a;\n        }\n    }\n",
        "methodStartingLine": 66,
        "methodEndingLine": 76,
        "jml": "//@ requires a.valid(?aSpouse_) &*& b.valid(?bSpouse_);\n//@ ensures a.valid(aSpouse_) &*& b.valid(bSpouse_);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/SpouseFinal.java",
        "code": "    public static void main(String[] args)\n        \n        \n    {\n        Person a = new Person();\n        Person b = new Person();\n        a.marry(b);\n        foo(a, b);\n        b.divorce();\n    }\n",
        "methodStartingLine": 78,
        "methodEndingLine": 87,
        "jml": "//@ requires true;\n//@ ensures true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/chatbot/Bot.java",
        "code": "    public static void main(String[] args) throws IOException /*@ ensures true; @*/\n        \n        \n    {\n        Socket s = new Socket(\"localhost\", 12345);\n      \n        InputStream in = s.getInputStream();\n        InputStreamReader reader0 = new InputStreamReader(in);\n        BufferedReader r = new BufferedReader(reader0);\n        OutputStream out = s.getOutputStream();\n        OutputStreamWriter writer0 = new OutputStreamWriter(out);\n        Writer w = writer0;\n\n        r.readLine();\n        r.readLine();\n        r.readLine();\n        \n        w.write(\"BoT\\r\\n\");\n        w.flush();\n        \n        while (true)\n            //@ invariant r.Reader() &*& w.Writer();\n        {\n            String line = r.readLine();\n            if (line == null)\n                break;\n            int index = line.indexOf(\" says: \");\n            if (index > -1) {\n                String nick = line.substring(0, index);\n                int length = line.length();\n                String text = line.substring(index + 7, length);\n                boolean isSelf = nick.equals(\"BoT\");\n                if (!isSelf) {\n                    boolean isHello = text.equals(\"!hello\");\n                    if (isHello) {\n                        w.write(\"Hello \");\n                        w.write(nick);\n                        w.write(\"!\\r\\n\");\n                        w.flush();\n                    } else {\n                        boolean isQuit = text.equals(\"!quit\");\n                        if (isQuit) {\n                            w.write(\"Byebye!\\r\\n\");\n                            w.flush();\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n        \n        s.shutdownOutput();\n        while (true)\n            //@ invariant r.Reader();\n        {\n            String line = r.readLine();\n            if (line == null)\n                break;\n        }\n        \n        //@ r.destroy();\n        //@ reader0.destroy();\n        //@ writer0.destroy();\n        s.close();\n    }\n",
        "methodStartingLine": 7,
        "methodEndingLine": 71,
        "jml": "//@ requires true;\n//@ ensures true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/GenericClass.java",
        "code": "\tpublic T add(T arg)\n\t\n\t\n\t{\n\t\tfield = arg;\n\t\treturn field;\n\t}\n",
        "methodStartingLine": 16,
        "methodEndingLine": 22,
        "jml": "//@ requires this.field |-> ?f;\n//@ ensures this.field |-> arg;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/GenericClass.java",
        "code": "\tpublic T get()\n\t\n\t\n\t{\n\t\treturn field;\n\t}\n",
        "methodStartingLine": 24,
        "methodEndingLine": 29,
        "jml": "//@ requires this.field |-> ?f;\n//@ ensures this.field |-> f;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/GenericClass.java",
        "code": "  public static void main(String[] args) \n    \n    \n  {\n    String[] sentence = {\"Hello\", \"World\"};\n    List<String> sentenceList = Arrays.<String>asList(sentence);\n    Foo<String> foo = new Foo<String>(\"test\");\n    GenericClass<String> simple = new GenericClass<String>(\"Example\");\n    GenericClass<GenericClass<String> > nested = new GenericClass<GenericClass<String> >(new GenericClass<String>(\"foo\"));\n    nested.add(new GenericClass<String>(\"hello\"));\n    GenericClass<String> s = nested.get();   // no cast\n    \n    List<String> l = new ArrayList< >();\n    l.add(\"foo\");\n    String abba = l.get(0);\n  }\n",
        "methodStartingLine": 73,
        "methodEndingLine": 88,
        "jml": "//@ requires true;\n//@ ensures true; "
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/ArraysManual.java",
        "code": "    static void test(byte[] xs, byte[] ys)\n        \n        \n    {\n        int x = xs[0];\n        assert -128 <= x && x <= 127;\n        int y = ys[0];\n        assert -128 <= y && y <= 127;\n    }\n",
        "methodStartingLine": 2,
        "methodEndingLine": 10,
        "jml": "//@ requires xs[0..10] |-> _ &*& ys[0] |-> _;\n//@ ensures true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/ArraysManual.java",
        "code": "    static void foo(Object[] xs)\n        \n        \n    {\n    }\n",
        "methodStartingLine": 14,
        "methodEndingLine": 18,
        "jml": "//@ requires [?f]array_slice(xs, 0, xs.length, ?elems);\n//@ ensures [f]array_slice(xs, 0, xs.length, elems);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/ArraysManual.java",
        "code": "    static void bar(Integer[] xs)\n        \n        \n    {\n        // Here, an auto-upcast of the array_slice chunk happens.\n        // This leaks half of the fraction (to prevent assignment, which may raise ArrayStoreException).\n        // Only makes sense for read-only arrays.\n        foo(xs);\n    }\n",
        "methodStartingLine": 20,
        "methodEndingLine": 28,
        "jml": "//@ requires [_]xs[..] |-> ?elems;\n//@ ensures [_]xs[..] |-> elems;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/ArraysManual.java",
        "code": "    static void foo(Object[] xs)\n        \n        \n    {\n    }\n",
        "methodStartingLine": 32,
        "methodEndingLine": 36,
        "jml": "//@ requires [?f]xs[..] |-> ?elems;\n//@ ensures [f]xs[..] |-> elems;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/ArraysManual.java",
        "code": "    static void bar(Integer[] xs)\n        \n        \n    {\n        // Here, an auto-upcast of the array_slice chunk happens.\n        // This leaks half of the fraction (to prevent assignment, which may raise ArrayStoreException).\n        // Only makes sense for read-only arrays.\n        foo(xs);\n    }\n",
        "methodStartingLine": 38,
        "methodEndingLine": 46,
        "jml": "//@ requires [_]xs[..] |-> ?elems;\n//@ ensures [_]xs[..] |-> elems;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/ArraysManual.java",
        "code": "    static void test()\n        \n        \n    {\n        int[] xs = new int[] { 1, 2, 3 };\n        assert xs.length == 3;\n        int x = xs[0];\n        assert x == 1;\n        x = xs[1];\n        assert x == 2;\n        x = xs[2];\n        assert x == 3;\n    }\n",
        "methodStartingLine": 50,
        "methodEndingLine": 62,
        "jml": "//@ requires true;\n//@ ensures true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/ArraysManual.java",
        "code": "    static void increment(int[] xs, int i)\n        \n        \n    {\n        xs[i]++;\n    }\n",
        "methodStartingLine": 66,
        "methodEndingLine": 71,
        "jml": "//@ requires xs[i] |-> ?n;\n//@ ensures xs[i] |-> n + 1;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/ArraysManual.java",
        "code": "    void processBirthday(int i)\n        \n        \n    {\n        Person p = this.persons[i];\n        p.age++;\n    }\n",
        "methodStartingLine": 83,
        "methodEndingLine": 89,
        "jml": "//@ requires this.persons |-> ?persons &*& array_slice_deep(persons, 0, persons.length, person, 18, _, _) &*& 0 <= i &*& i < persons.length;\n//@ ensures this.persons |-> persons &*& array_slice_deep(persons, 0, persons.length, person, 18, _, _);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/ArraysManual.java",
        "code": "    static void deleteRecord(Object[] records, int recordLength, int i)\n        /*@\n        requires\n            array_slice_deep(records, 0, records.length, record, recordLength, ?rs, _) &*&\n            0 <= i &*& i < records.length &*& 0 < recordLength;\n        @*/\n        \n    {\n        Object record0 = records[i];\n        byte[] record = (byte[])record0;\n        record[recordLength - 1] = 0;\n    }\n",
        "methodStartingLine": 147,
        "methodEndingLine": 158,
        "jml": "//@ ensures array_slice_deep(records, 0, records.length, record, recordLength, _, _);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/ArraysManual.java",
        "code": "    static Object[] createRecords(int count, int recordLength)\n        \n        \n    {\n        Object[] records = new Object[count];\n        int i = 0;\n        while (i < count)\n            //@ invariant 0 <= i &*& i <= count &*& array_slice_deep(records, 0, i, record, recordLength, _, _) &*& records[i..] |-> ?elems &*& all_eq(elems, null) == true;\n        {\n            Object tmp = records[i];\n            assert tmp == null;\n            records[i] = new byte[recordLength];\n            i++;\n        }\n        return records;\n    }\n",
        "methodStartingLine": 160,
        "methodEndingLine": 175,
        "jml": "//@ requires 0 <= count &*& 0 <= recordLength;\n//@ ensures array_slice_deep(result, 0, result.length, record, recordLength, _, _);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/ArraysManual.java",
        "code": "    static Object[] createRecords2(int count, int recordLength)\n        \n        \n    {\n        Object[] records = new Object[count];\n        int i = count;\n        while (0 < i)\n            //@ invariant 0 <= i &*& i <= count &*& array_slice_deep(records, i, count, record, recordLength, _, _) &*& records[..i] |-> ?elems &*& all_eq(elems, null) == true;\n        {\n            i--;\n            Object tmp = records[i];\n            assert tmp == null;\n            records[i] = new byte[recordLength];\n            //@ all_eq_take(i, elems, null);\n        }\n        return records;\n    }\n",
        "methodStartingLine": 177,
        "methodEndingLine": 193,
        "jml": "//@ requires 0 <= count &*& 0 <= recordLength;\n//@ ensures array_slice_deep(result, 0, result.length, record, recordLength, _, _);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/DowncastInfo.java",
        "code": "    int getY()\n        \n        \n    {\n        //@ open D(x, y, _);\n        return this.y;\n        //@ close D(x, y, _);\n    }\n",
        "methodStartingLine": 47,
        "methodEndingLine": 54,
        "jml": "//@ requires D(?x, ?y, ?info);\n//@ ensures D(x, y, info) &*& result == y;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/DowncastInfo.java",
        "code": "    int getY()\n        \n        \n    {\n        //@ open D(x, y, _);\n        //@ open E(x, y, _, _);\n        return super.getY();\n        //@ close E(x, y, _, _);\n        //@ close D(x, y, _);\n    }\n",
        "methodStartingLine": 91,
        "methodEndingLine": 100,
        "jml": "//@ requires D(?x, ?y, ?info);\n//@ ensures D(x, y, info) &*& result == y;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/DowncastInfo.java",
        "code": "    static int getY(C c)\n        \n        \n    {\n        if (c instanceof D) {\n            D d = (D)c;\n            //@ d.castCToD();\n            //@ assert d.D(_, _, ?info0);\n            //@ close getY_result(info0);\n            return d.getY();\n            //@ d.castDToC();\n        } else {\n            return 0;\n        }\n    }\n",
        "methodStartingLine": 106,
        "methodEndingLine": 120,
        "jml": "//@ requires c.C(?x, ?info);\n//@ ensures c.C(x, info) &*& true == (c instanceof D) ? getY_result(?info0) &*& info == pair(result, info0) : true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/DowncastInfo.java",
        "code": "    static void test()\n        \n        \n    {\n        E e = new E();\n        //@ close e.C(_, _);\n        getY(e);\n    }\n",
        "methodStartingLine": 122,
        "methodEndingLine": 129,
        "jml": "//@ requires true;\n//@ ensures true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/chat/Session.java",
        "code": "    static <T> void remove(List<T> l, T o) // Like l.remove(o), except uses identity comparison instead of .equals().\n        \n        \n    {\n        for (int i = 0; i < l.size(); i++)\n            //@ invariant l.List(es) &*& 0 <= i &*& i <= index_of(o, es);\n        {\n            if (l.get(i) == o) {\n                l.remove(i);\n                //@ remove_remove_nth(o, es);\n                //@ index_of_nth(i, es);\n                break;\n            }\n            //@ if (index_of(o, es) == i) { nth_index_of(o, es); }\n        }\n        //@ if (mem(o, es)) { mem_index_of(o, es); } else { mem_remove_eq(o, es); }\n    }\n",
        "methodStartingLine": 10,
        "methodEndingLine": 26,
        "jml": "//@ requires l.List(?es);\n//@ ensures l.List(remove(o, es));"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/chat/Session.java",
        "code": "    public void run_with_nick(Room room, Semaphore roomLock, BufferedReader reader, Writer writer, String nick) throws InterruptedException /*@ ensures true; @*/, IOException /*@ ensures true; @*/\n        /*@\n        requires\n            roomLock != null &*& [_]roomLock.Semaphore(room_ctor(room)) &*& room != null &*& room(room) &*&\n            reader != null &*& reader.Reader() &*&\n            writer != null &*& writer.Writer();\n        @*/\n        \n    {\n        Member member = null;\n        String joinMessage = nick + \" has joined the room.\";\n        room.broadcast_message(joinMessage);\n        {\n            //@ open room(room);\n            member = new Member(nick, writer);\n            List<Member> list = room.members;\n            list.add(member);\n            //@ open foreach<Member>(?members, @member);\n            //@ close foreach(members, @member);\n            //@ foreach_member_not_contains(members, member);\n            //@ close foreach<Member>(nil, @member);\n            //@ close foreach<Member>(cons<Member>(member, nil), @member);\n            //@ foreach_append<Member>(members, cons<Member>(member, nil));\n            //@ close room(room);\n        }\n        //@ close room_ctor(room)();\n        //@ roomLock.makeHandle();\n        roomLock.release();\n        \n        {\n            String message = reader.readLine();\n            while (message != null)\n                //@ invariant reader.Reader() &*& [_]roomLock.Semaphore(room_ctor(room));\n            {\n                //@ roomLock.makeHandle();\n                roomLock.acquire();\n                //@ open room_ctor(room)();\n                room.broadcast_message(nick + \" says: \" + message);\n                //@ close room_ctor(room)();\n                roomLock.release();\n                message = reader.readLine();\n            }\n        }\n        \n        roomLock.acquire();\n        //@ open room_ctor(room)();\n        //@ open room(room);\n        {\n            List<Member> membersList = room.members;\n            //@ assert foreach<Member>(?members, @member);\n            //@ assume(mem<Member>(member, members)); // TODO: Eliminate using a ghost list.\n            ListUtil.remove(membersList, member);\n            //@ foreach_remove<Member>(member, members);\n        }\n        //@ close room(room);\n        {\n            room.broadcast_message(nick + \" left the room.\");\n        }\n        //@ close room_ctor(room)();\n        roomLock.release();\n        \n        //@ open member(member);\n    }\n",
        "methodStartingLine": 62,
        "methodEndingLine": 124,
        "jml": "//@ ensures [_]roomLock.Semaphore(room_ctor(room)) &*& reader.Reader() &*& writer.Writer();"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/chat/Session.java",
        "code": "    public void run()\n        \n        \n    {\n        try {\n            this.runCore();\n        } catch (InterruptedException e) {\n            throw new RuntimeException(e);\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n    }\n",
        "methodStartingLine": 126,
        "methodEndingLine": 137,
        "jml": "//@ requires pre();\n//@ ensures post();"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/chat/Session.java",
        "code": "    public void runCore() throws InterruptedException /*@ ensures true; @*/, IOException /*@ ensures true; @*/\n        \n        \n    {\n        //@ open pre();\n        //@ open session(this);\n        Room room = this.room;\n        Semaphore roomLock = this.room_lock;\n        Socket socket = this.socket;\n        InputStream in = socket.getInputStream();\n        InputStreamReader reader0 = new InputStreamReader(in);\n        BufferedReader reader = new BufferedReader(reader0);\n        OutputStream out = socket.getOutputStream();\n        OutputStreamWriter writer0 = new OutputStreamWriter(out);\n        BufferedWriter writer1 = new BufferedWriter(writer0);\n        Writer writer = writer1;\n        \n        writer.write(\"Welcome to the chat room.\\r\\n\");\n        writer.write(\"The following members are present: \");\n        \n        //@ roomLock.makeHandle();\n        roomLock.acquire();\n        //@ open room_ctor(room)();\n        //@ open room(room);\n        {\n            List<Member> membersList = room.members;\n            //@ assert foreach<Member>(?members, @member);\n            //@ membersList.listToIterable();\n            Iterator<Member> iter = membersList.iterator();\n            boolean hasNext = iter.hasNext();\n            while (hasNext)\n                /*@\n                invariant\n                    writer.Writer() &*&\n                    iter.Iterator((seq_of_list)(members), _, ?i) &*& Iterable_iterating(membersList.getClass())(membersList, members, 1, iter)\n                    &*& foreach(members, @member) &*& hasNext == (i < length(members)) &*& 0 <= i &*& i <= length(members);\n                @*/\n            {\n                Member member = iter.next();\n                //@ foreach_remove<Member>(member, members);\n                //@ open member(member);\n                writer.write(member.nick);\n                writer.write(\"  \");\n                //@ close member(member);\n                //@ foreach_unremove<Member>(member, members);\n                hasNext = iter.hasNext();\n            }\n            writer.write(\"\\r\\n\");\n            writer.flush();\n            //@ membersList.destroyIterator();\n            //@ membersList.iterableToList();\n        }\n        \n        //@ close room(room);\n        //@ close room_ctor(room)();\n        roomLock.release();\n\n        {\n            boolean done = false;\n            while (!done)\n                //@ invariant writer.Writer() &*& reader.Reader() &*& [_]roomLock.Semaphore(room_ctor(room));\n            {\n                writer.write(\"Please enter your nick: \\r\\n\");\n                writer.flush();\n                {\n                    String nick = reader.readLine();\n                    if (nick == null) {\n                        done = true;\n                    } else {\n                        //@ roomLock.makeHandle();\n                        roomLock.acquire();\n                        //@ open room_ctor(room)();\n                        {\n                            if (room.has_member(nick)) {\n                                //@ close room_ctor(room)();\n                                roomLock.release();\n                                writer.write(\"Error: This nick is already in use.\\r\\n\");\n                                writer.flush();\n                            } else {\n                                this.run_with_nick(room, roomLock, reader, writer, nick);\n                                done = true;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        \n        //@ reader.destroy();\n        //@ reader0.destroy();\n        //@ writer1.destroy();\n        //@ writer0.destroy();\n        socket.close();\n        //@ close post();\n    }\n",
        "methodStartingLine": 139,
        "methodEndingLine": 233,
        "jml": "//@ requires pre();\n//@ ensures post();"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/StaticFields.java",
        "code": "    static void foo()\n        \n        \n    {\n        x = x + 1;\n    }\n",
        "methodStartingLine": 3,
        "methodEndingLine": 8,
        "jml": "//@ requires x |-> ?v;\n//@ ensures x |-> v + 1;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/StaticFields.java",
        "code": "    public static void main(String[] args)\n        \n        \n    {\n        //@ init_class(Program.class);\n        foo();\n        assertEq(x, 1);\n        assertEq(y.length, 4);\n        assertEq(y[0], 1);\n        assertEq(y[1], 2);\n        assertEq(y[2], 3);\n        assertEq(y[3], 4);\n    }\n",
        "methodStartingLine": 11,
        "methodEndingLine": 23,
        "jml": "//@ requires class_init_token(Program.class);\n//@ ensures true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/StaticFields.java",
        "code": "    static void assertEq(int expected, int actual)\n        \n        \n    {\n        assert(expected == actual);\n    }\n",
        "methodStartingLine": 25,
        "methodEndingLine": 30,
        "jml": "//@ requires expected == actual;\n//@ ensures true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/chat/Program.java",
        "code": "    public static void main(String[] args) throws IOException /*@ ensures true; @*/\n        \n        \n    {\n        Room room = new Room();\n        //@ close room_ctor(room)();\n        //@ one_time(room_ctor(room));\n        Semaphore roomLock = new Semaphore(1);\n        //@ roomLock.leakHandle();\n        ServerSocket serverSocket = new ServerSocket(12345);\n\n        while (true)\n            //@ invariant [_]roomLock.Semaphore(room_ctor(room)) &*& serverSocket.ServerSocket();\n        {\n            Socket socket = serverSocket.accept();\n            Session session = new Session(room, roomLock, socket);\n            //@ close session.pre();\n            Thread t = new Thread(session);\n            t.start();\n        }\n    }\n",
        "methodStartingLine": 9,
        "methodEndingLine": 29,
        "jml": "//@ requires true;\n//@ ensures true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/vstte2010/problem5.java",
        "code": "  public static LinkedList New()\n    \n    \n  {\n    LinkedList l = new LinkedList();\n    //@ leak l.head |-> _;\n    //@ leak l.tail |-> null;\n    //@ leak l.length |-> 0;\n    //@ close linkedlist(l, nil);\n    return l;\n  }\n",
        "methodStartingLine": 38,
        "methodEndingLine": 48,
        "jml": "//@ requires true;\n//@ ensures result != null &*& linkedlist(result, nil);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/vstte2010/problem5.java",
        "code": "  public LinkedList Cons(int d)\n    \n    \n  {\n    //@ copy(this);\n    //@ open linkedlist(this, vs);\n    LinkedList r = new LinkedList();\n    r.head = d;\n    r.tail = this;\n    r.length = length+1;\n    //@ close linkedlist(this, vs);\n    //@ leak r.head |-> d;\n    //@ leak r.tail |-> _;\n    //@ leak r.length |-> _;\n    //@ close linkedlist(r, cons(d, vs));\n    return r;\n  }\n",
        "methodStartingLine": 50,
        "methodEndingLine": 66,
        "jml": "//@ requires linkedlist(this, ?vs);\n//@ ensures result != null &*& linkedlist(this, vs) &*& linkedlist(result, cons(d, vs));"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/vstte2010/problem5.java",
        "code": "  public LinkedList Concat(LinkedList end)\n    \n    \n  {\n    //@ open linkedlist(this,vs);\n    if(length == 0) {\n      //@ copy(end);\n      //@ open linkedlist(end, vs2);\n      //@ close linkedlist(end, vs2);\n      return end;\n      //@ close linkedlist(this,vs);\n    } else {\n      LinkedList c = tail.Concat(end);\n      LinkedList r = c.Cons(head);\n      //@ close linkedlist(this,vs);\n      return r;\n    }\n  }\n",
        "methodStartingLine": 68,
        "methodEndingLine": 85,
        "jml": "//@ requires linkedlist(this, ?vs) &*& linkedlist(end, ?vs2);\n//@ ensures result != null &*& linkedlist(this, vs) &*& linkedlist(end, vs2) &*& linkedlist(result, append(vs, vs2));"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/vstte2010/problem5.java",
        "code": "  public LinkedList reverse()\n    \n    \n  {\n    //@ open linkedlist(this, vs);\n    LinkedList r;\n    if(length == 0) {\n      r = New();\n    } else {\n      r = tail.reverse();\n      LinkedList e = New();\n      e = e.Cons(head);\n      r = r.Concat(e);\n    }\n    //@ close linkedlist(this, vs);\n    return r;\n  }\n",
        "methodStartingLine": 87,
        "methodEndingLine": 103,
        "jml": "//@ requires linkedlist(this, ?vs);\n//@ ensures result != null &*& linkedlist(this, vs) &*& linkedlist(result, reverse(vs));"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/vstte2010/problem5.java",
        "code": "  int front()\n    \n    \n  {\n    //@ LinkedList front = this.front;\n    //@ LinkedList rear = this.rear;\n    //@ open linkedlist(front, ?vs1);\n    //@ open linkedlist(rear, ?vs2);\n    int r = this.front.head;\n    //@ close linkedlist(front, vs1);\n    //@ close linkedlist(rear, vs2);\n    return r;\n  }\n",
        "methodStartingLine": 143,
        "methodEndingLine": 155,
        "jml": "//@ requires queue(this, ?vs) &*& vs != nil;\n//@ ensures queue(this, vs) &*& result == head(vs);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/vstte2010/problem5.java",
        "code": "  AmortizedQueue tail() \n    \n    \n  {\n    //@ LinkedList front = this.front;\n    //@ LinkedList rear = this.rear;\n    //@ open linkedlist(front, ?vs1);\n    //@ open linkedlist(rear, ?vs2);\n    //@ close linkedlist(rear, vs2);\n    AmortizedQueue r = new AmortizedQueue(this.front.tail, this.rear);\n    //@ close linkedlist(front, vs1);\n    return r;\n  }\n",
        "methodStartingLine": 157,
        "methodEndingLine": 169,
        "jml": "//@ requires queue(this, ?vs) &*& vs != nil;\n//@ ensures queue(this, vs) &*& queue(result, tail(vs));"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/vstte2010/problem5.java",
        "code": "  AmortizedQueue enqueue(int item)\n    \n    \n  {\n    //@ LinkedList rear2 = this.rear;\n    //@ open linkedlist(rear2, ?vs2);\n    //@ close linkedlist(rear2, vs2);\n    //@ LinkedList front = this.front;\n    //@ open linkedlist(front, ?vs1);\n    //@ close linkedlist(front, vs1);\n    LinkedList r = rear.Cons(item);\n    AmortizedQueue q = new AmortizedQueue(this.front, r);\n    //@ append_assoc(vs1, reverse(vs2), cons(item, nil));\n    return q;\n  }\n",
        "methodStartingLine": 171,
        "methodEndingLine": 185,
        "jml": "//@ requires queue(this, ?vs);\n//@ ensures result != null &*& queue(this, vs) &*& queue(result, append(vs, cons(item, nil)));"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/vstte2010/problem5.java",
        "code": "  public static void main(String[] args) \n    \n    \n  {\n    AmortizedQueue q1 = new AmortizedQueue();\n    AmortizedQueue q2 = q1.enqueue(5);\n    AmortizedQueue q3 = q1.enqueue(6);\n    int res1 = q2.front();\n    int res2 = q3.front();\n    assert(res1 == 5);\n    assert(res2 == 6);\n  }\n",
        "methodStartingLine": 189,
        "methodEndingLine": 200,
        "jml": "//@ requires true;\n//@ ensures true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/fm2012/SuffixArray.java",
        "code": "    public int select(int i)\n        \n        \n    { \n        return suffixes[i]; \n    }\n",
        "methodStartingLine": 53,
        "methodEndingLine": 58,
        "jml": "//@ requires false;\n//@ ensures true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/fm2012/SuffixArray.java",
        "code": "    private int lcp(int x, int y)\n        \n        \n    {\n        int l = 0;\n        while (x+l<N && y+l<N && a[x+l]==a[y+l]) {\n            l++;\n        }\n        return l;\n    }\n",
        "methodStartingLine": 61,
        "methodEndingLine": 70,
        "jml": "//@ requires false;\n//@ ensures true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/fm2012/SuffixArray.java",
        "code": "    public int lcp(int i)\n        \n        \n    {\n        return lcp(suffixes[i], suffixes[i-1]);\n    }\n",
        "methodStartingLine": 73,
        "methodEndingLine": 78,
        "jml": "//@ requires false;\n//@ ensures true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/fm2012/SuffixArray.java",
        "code": "    public int compare(int x, int y)\n        \n        \n    {\n        if (x == y) return 0;\n        int l = 0;\n\n        while (x+l<N && y+l<N && a[x+l] == a[y+l]) {\n            l++;\n        }\n\n        if (x+l == N) return -1;\n        if (y+l == N) return 1;\n        if (a[x+l] < a[y+l]) return -1;\n        if (a[x+l] > a[y+l]) return 1;\n        \n        throw new RuntimeException();\n    }\n",
        "methodStartingLine": 81,
        "methodEndingLine": 98,
        "jml": "//@ requires false;\n//@ ensures true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/fm2012/SuffixArray.java",
        "code": "    public void sort(int[] data)\n        \n        \n    {\n        for(int i = 0; i < data.length + 0; i++) {\n            for(int j = i; j > 0 && compare(data[j - 1], data[j]) > 0; j--) {\n                int b = j - 1;\n                int t = data[j];\n                data[j] = data[b];\n                data[b] = t;\n            }\n        }\n    }\n",
        "methodStartingLine": 101,
        "methodEndingLine": 113,
        "jml": "//@ requires false;\n//@ ensures true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/fm2012/SuffixArray.java",
        "code": "    public static void main(String[] argv)\n        \n        \n    {\n        int[] arr = {1,2,2,5};\n        SuffixArray sa = new SuffixArray(arr);\n        System.out.println(sa.lcp(1,2));\n        int[] brr = {1,2,3,5};\n        sa = new SuffixArray(brr);\n        System.out.println(sa.lcp(1,2));\n        int[] crr = {1,2,3,5};\n        sa = new SuffixArray(crr);\n        System.out.println(sa.lcp(2,3));\n        int[] drr = {1,2,3,3};\n        sa = new SuffixArray(drr);\n        System.out.println(sa.lcp(2,3));\n    }\n",
        "methodStartingLine": 116,
        "methodEndingLine": 132,
        "jml": "//@ requires false;\n//@ ensures true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "javacard_tutorial/arraylist.java",
        "code": "    short getCount()\n        \n        \n    {\n        return count;\n    }\n",
        "methodStartingLine": 19,
        "methodEndingLine": 24,
        "jml": "//@ requires ArrayList(?n);\n//@ ensures ArrayList(n) &*& result == n;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "javacard_tutorial/arraylist.java",
        "code": "    byte get(short index)\n        \n        \n    {\n        return elems[index];\n    }\n",
        "methodStartingLine": 26,
        "methodEndingLine": 31,
        "jml": "//@ requires ArrayList(?n) &*& 0 <= index &*& index < n;\n//@ ensures ArrayList(n);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "javacard_tutorial/arraylist.java",
        "code": "    boolean add(byte value)\n        \n        \n    {\n        if (count == elems.length)\n            return false;\n        elems[count++] = value;\n        return true;\n    }\n",
        "methodStartingLine": 33,
        "methodEndingLine": 41,
        "jml": "//@ requires ArrayList(?n);\n//@ ensures result ? ArrayList((short)(n + 1)) : ArrayList(n);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "javacard_tutorial/arraylist.java",
        "code": "    static void test()\n        \n        \n    {\n        ArrayList list = new ArrayList((short)10);\n        if (list.add((byte)1) && list.add((byte)2) && list.add((byte)3)) {\n            short count = list.getCount();\n            assert count == 3;\n            list.get((short)2);\n        }\n    }\n",
        "methodStartingLine": 45,
        "methodEndingLine": 55,
        "jml": "//@ requires true;\n//@ ensures true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/chat_raw/Room.java",
        "code": "    public boolean has_member(String nick)\n        \n        \n    {\n        //@ open room(this);\n        //@ assert foreach(?members, _);\n        List membersList = this.members;\n        //@ membersList.listToIterable();\n        Iterator iter = membersList.iterator();\n        boolean hasMember = false;\n        boolean hasNext = iter.hasNext();\n        while (hasNext && !hasMember)\n            /*@\n            invariant\n                iter.Iterator((seq_of_list)(members), _, ?i) &*& Iterable_iterating(membersList.getClass())(membersList, members, 1, iter) &*& foreach(members, @member)\n                &*& hasNext == (i < length(members)) &*& 0 <= i &*& i <= length(members);\n            @*/\n        {\n            Member member = (Member) iter.next();\n            //@ foreach_remove<Member>(member, members);\n            //@ open member(member);\n            hasMember = nick.equals(member.nick);\n            //@ close member(member);\n            //@ foreach_unremove<Member>(member, members);\n            hasNext = iter.hasNext();\n        }\n        //@ membersList.destroyIterator();\n        //@ membersList.iterableToList();\n        //@ close room(this);\n        return hasMember;\n    }\n",
        "methodStartingLine": 26,
        "methodEndingLine": 56,
        "jml": "//@ requires room(this) &*& nick != null;\n//@ ensures room(this);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/chat_raw/Room.java",
        "code": "    public void broadcast_message(String message) throws IOException /*@ ensures true; @*/\n        \n        \n    {\n        //@ open room(this);\n        //@ assert foreach(?members0, _);\n        List membersList = this.members;\n        //@ membersList.listToIterable();\n        Iterator iter = membersList.iterator();\n        boolean hasNext = iter.hasNext();\n        //@ length_nonnegative(members0);\n        while (hasNext)\n            /*@\n            invariant\n                foreach<Member>(?members, @member) &*& iter.Iterator((seq_of_list)(members), _, ?i) &*& Iterable_iterating(membersList.getClass())(membersList, members, 1, iter)\n                &*& hasNext == (i < length(members)) &*& 0 <= i &*& i <= length(members);\n            @*/\n        {\n            Member member = (Member) iter.next();\n            //@ mem_nth(i, members);\n            //@ foreach_remove<Member>(member, members);\n            //@ open member(member);\n            Writer writer = member.writer;\n            writer.write(message);\n            writer.write(\"\\r\\n\");\n            writer.flush();\n            //@ close member(member);\n            //@ foreach_unremove<Member>(member, members);\n            hasNext = iter.hasNext();\n        }\n        //@ membersList.destroyIterator();\n        //@ membersList.iterableToList();\n        //@ close room(this);\n    }\n",
        "methodStartingLine": 58,
        "methodEndingLine": 91,
        "jml": "//@ requires room(this) &*& message != null;\n//@ ensures room(this);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/vstte2010/problem3.java",
        "code": "    public static int findFirstZero(Node ll)\n        \n        \n    {\n        Node jj = ll;\n        int i = 0;\n        while (jj != null && jj.head != 0)\n            /*@\n            invariant\n                Lseg(ll, jj, ?elems0) &*& List(jj, ?elems1) &*& elems == append(elems0, elems1) &*&\n                find(0, elems) == i + find(0, elems1);\n            @*/\n        {\n            //@ append_assoc(elems0, cons(jj.head, nil), tail(elems1));\n            jj = jj.next;\n            i++;\n            //@ Lseg_add(ll);\n        }\n        //@ open List(null, _);\n        //@ Lseg_to_List(ll);\n        return i;\n    }\n",
        "methodStartingLine": 60,
        "methodEndingLine": 81,
        "jml": "//@ requires List(ll, ?elems);\n//@ ensures List(ll, elems) &*& result == find(0, elems);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/vstte2010/problem4.java",
        "code": "  static boolean isConsistent(int[] board, int pos) \n    \n    \n  {\n    int bp = board[pos];\n    for(int i = 0; i < pos; i++) \n      //@ invariant 0 <= i &*& i <= pos &*& array_slice(board, 0, board.length, vs) &*& consistent(vs, nat_of_int(i), pos) == true;\n    {\n      int bi = board[i];\n      //@ succ_int(i);\n      if(bi == bp || pos - i == bp - bi || pos - i == bi - bp) {\n        //@ not_consistent_monotonic(vs, pos, nat_of_int(pos - i - 1));\n        return false;\n      }\n    }\n    return true;\n  }\n",
        "methodStartingLine": 360,
        "methodEndingLine": 376,
        "jml": "//@ requires board != null &*& array_slice(board, 0, board.length, ?vs) &*& 0 <= pos && pos < board.length;\n//@ ensures array_slice(board, 0, board.length, vs) &*& result == consistent(vs, nat_of_int(pos), pos);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/vstte2010/problem4.java",
        "code": "  static int[] search(int[] board, int pos)\n    \n    /*@ ensures array_slice(board, 0, board.length, ?vs2) &*& inrange(vs2, board.length) == true &*& result == null  ? \n                  take(pos, vs) == take(pos, vs2) &*&\n                  allconsistent(vs2, nat_of_int(pos)) == true &*&\n                  inconsistent(vs2, nat_of_int(board.length), pos): \n                  result == board &*& allconsistent(vs2, nat_of_int(length(vs2))) == true; @*/\n  {\n    if(pos == board.length) {\n      return board;\n    } else {\n      //@ close inconsistent(vs, zero, pos);\n      for(int i = 0; i < board.length; i++) \n        //@ invariant 0 <= i &*& i <= board.length &*& array_slice(board, 0, board.length, ?vs2) &*& inrange(vs2, board.length) == true &*& take(pos, vs) == take(pos, vs2) &*& allconsistent(vs2, nat_of_int(pos)) == true &*& inconsistent(vs2, nat_of_int(i), pos);\n      {\n        board[pos] = i;\n        //@ assert array_slice(board, 0, board.length, ?vs3);\n        //@ take_append(take(pos, vs2), append(cons(i, nil), take(length(vs2) - pos - 1, tail(drop(pos, vs2)))), pos);\n        //@ take_allconsistent(vs2, nat_of_int(pos));\n        //@ append_allconsistent(take(pos, vs2), nat_of_int(pos), append(cons(i, nil), take(length(vs2) - pos - 1, tail(drop(pos, vs2)))));\n        //@ inconsistent_take(vs2, nat_of_int(i), pos, vs3);\n        //@ inrange_update(vs2, board.length, i, pos);\n        //@ inrange_update_array(vs2, board.length, i, pos);        \n        if(isConsistent(board, pos)) {\n          //@ succ_int(pos);\n          int[] s = search(board, pos + 1);\n          if(s != null) {\n            return s;\n          }\n          //@ assert array_slice(board, 0, board.length, ?vs4);\n          //@ take_oke(vs3, vs4, pos);\n          //@ inconsistent_take(vs2, nat_of_int(i), pos, vs3);\n          //@ inconsistent_take(vs3, nat_of_int(i), pos, vs4);\n          //@ succ_int(i);\n          //@ nth_take(pos, pos + 1, vs4); \n          //@ update_nth(vs4, i, pos);\n          //@ close inconsistent(vs4, (nat_of_int(i + 1)), pos);\n        } else {\n          //@ succ_int(i);\n          //@ close inconsistent(vs3, (nat_of_int(i + 1)), pos);\n        }\n      }\n      return null;\n    }\n  }\n",
        "methodStartingLine": 378,
        "methodEndingLine": 422,
        "jml": "//@ requires board != null &*& array_slice(board, 0, board.length, ?vs) &*& inrange(vs, board.length) == true &*& 0 <= pos && pos <= board.length &*& allconsistent(vs, nat_of_int(pos)) == true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/vstte2010/problem4.java",
        "code": "  static int[] startsearch(int[] board) \n    \n    \n  {\n    return search(board, 0);\n  }\n",
        "methodStartingLine": 424,
        "methodEndingLine": 429,
        "jml": "//@ requires board != null &*& array_slice(board, 0, board.length, ?vs) &*& inrange(vs, board.length) == true;\n//@ ensures array_slice(board, 0, board.length, ?vs2) &*& inrange(vs2, board.length) == true &*& result == null ? inconsistent(vs2, nat_of_int(board.length), 0) : result == board &*& allconsistent(vs2, nat_of_int(length(vs2))) == true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/vstte2010/problem4.java",
        "code": "  public static void main(String[] args) \n    \n    \n  {\n    int[] board = new int[2];\n    //@ int length = board.length;\n    //@ assert array_slice(board, 0, board.length, ?vs);\n    //@ inrange_all_eq(vs, 2, 0);\n    int[] res = startsearch(board);\n      //@ assert array_slice(board, 0, length, ?vs2);\n    if(res == null) {\n      // we can prove from startsearch's postcondition that any board of size 2 is inconsistent\n      int[] myboard = new int[2];\n      myboard[0] = 0;\n      myboard[1] = 1;\n      //@ assert array_slice(board, 0, board.length, ?myvs);\n      //@ inconsistent_take(vs2, nat_of_int(board.length), 0, myvs);\n      //@ assert inconsistent(myvs, nat_of_int(myboard.length), 0);\n    } else {\n      //@ assert vs2 == cons(?p0, cons(?p1, nil));\n      //@ succ_int(1);\n      //@ succ_int(0);\n      //@ assert nat_of_int(length(vs2)) == succ(succ(zero));\n      /*@\n      if (p0 < 1) {\n          assert p0 == 0;\n      } else {\n          assert p0 == 1;\n      }\n      @*/\n      /*@\n      if (p1 < 1) {} else {}\n      @*/\n      assert false; // not reachable\n    }\n  }\n",
        "methodStartingLine": 431,
        "methodEndingLine": 466,
        "jml": "//@ requires true;\n//@ ensures true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/FloatingPoint.java",
        "code": "    public static boolean getRandomBool()\n        \n        \n    {\n        return Math.random() < 0.5;\n    }\n",
        "methodStartingLine": 3,
        "methodEndingLine": 8,
        "jml": "//@ requires true;\n//@ ensures true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "javacard_tutorial/abs_trunc.java",
        "code": "    static short abs(short x)\n        \n        \n    {\n        if (x < 0) {\n            x = /*@truncating@*/(short)-x;\n            return x;\n        } else {\n            return x;\n        }\n    }\n",
        "methodStartingLine": 2,
        "methodEndingLine": 12,
        "jml": "//@ requires true;\n//@ ensures true; //0 <= result &*& result == x || result == -x;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/MonitorExample.java",
        "code": "    public void run()\n        \n        \n    {\n        //@ open pre(_);\n        //@ open Cell(cell)();\n        cell.value += increment;\n        //@ close Cell(cell)();\n        //@ close post();\n    }\n",
        "methodStartingLine": 20,
        "methodEndingLine": 29,
        "jml": "//@ requires pre(?payload) &*& payload();\n//@ ensures post() &*& payload();"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/MonitorExample.java",
        "code": "    int pickIncrement()\n        \n        \n    {\n        return 1;\n    }\n",
        "methodStartingLine": 42,
        "methodEndingLine": 47,
        "jml": "//@ requires true;\n//@ ensures 0 <= result;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/MonitorExample.java",
        "code": "    public void run()\n        \n        \n    {\n        for (;;)\n            //@ invariant cell |-> ?c &*& [_]c.monitor |-> ?m &*& [_]m.Monitor(Cell(c));\n        {\n            IncrementorCriticalSection s = new IncrementorCriticalSection();\n            s.cell = cell;\n            s.increment = pickIncrement();\n            cell.monitor.sync(s);\n        }\n    }\n",
        "methodStartingLine": 52,
        "methodEndingLine": 64,
        "jml": "//@ requires pre();\n//@ ensures post();"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/MonitorExample.java",
        "code": "    public void run()\n        \n        \n    {\n        //@ open pre(_);\n        //@ open Cell(cell)();\n        if (cell.value < lastValue)\n            assert false;\n        lastValue = cell.value;\n        //@ cell.min = lastValue;\n        //@ close Cell(cell)();\n        //@ close post();\n    }\n",
        "methodStartingLine": 76,
        "methodEndingLine": 88,
        "jml": "//@ requires pre(?payload) &*& payload();\n//@ ensures post() &*& payload();"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/MonitorExample.java",
        "code": "    public void run()\n        \n        \n    {\n        //@ open pre();\n        ReaderCriticalSection s = new ReaderCriticalSection();\n        s.cell = cell;\n        s.lastValue = Integer.MIN_VALUE;\n        \n        for (;;)\n            //@ invariant cell |-> ?c &*& [_]c.monitor |-> ?m &*& [_]m.Monitor(Cell(c)) &*& s.cell |-> c &*& s.lastValue |-> ?v &*& [1/2]c.min |-> ?min &*& v <= min;\n        {\n            //@ close s.pre(Cell(c));\n            cell.monitor.sync(s);\n            //@ open s.post();\n        }\n        //@ close post();\n    }\n",
        "methodStartingLine": 104,
        "methodEndingLine": 121,
        "jml": "//@ requires pre();\n//@ ensures post();"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/MonitorExample.java",
        "code": "    public static void main(String[] args)\n        \n        \n    {\n        Cell cell = new Cell();\n        //@ close exists(Cell(cell));\n        //@ close Cell(cell)();\n        cell.monitor = new Monitor();\n        //@ leak cell.monitor |-> ?m &*& m.Monitor(_);\n        new Thread(new ReaderThread(cell)).start();\n        new Thread(new IncrementorThread(cell)).start();\n    }\n",
        "methodStartingLine": 127,
        "methodEndingLine": 138,
        "jml": "//@ requires true;\n//@ ensures true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/AmortizedQueue.java",
        "code": "  public static LinkedList New()\n    \n    \n  {\n    LinkedList l = new LinkedList();\n    //@ leak l.head |-> _;\n    //@ leak l.tail |-> null;\n    //@ leak l.length |-> 0;\n    //@ close linkedlist(l, nil);\n    return l;\n  }\n",
        "methodStartingLine": 38,
        "methodEndingLine": 48,
        "jml": "//@ requires true;\n//@ ensures result != null &*& linkedlist(result, nil);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/AmortizedQueue.java",
        "code": "  public LinkedList Cons(int d)\n    \n    \n  {\n    //@ copy(this);\n    //@ open linkedlist(this, vs);\n    LinkedList r = new LinkedList();\n    r.head = d;\n    r.tail = this;\n    r.length = length+1;\n    //@ close linkedlist(this, vs);\n    //@ leak r.head |-> d;\n    //@ leak r.tail |-> _;\n    //@ leak r.length |-> _;\n    //@ close linkedlist(r, cons(d, vs));\n    return r;\n  }\n",
        "methodStartingLine": 50,
        "methodEndingLine": 66,
        "jml": "//@ requires linkedlist(this, ?vs);\n//@ ensures result != null &*& linkedlist(this, vs) &*& linkedlist(result, cons(d, vs));"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/AmortizedQueue.java",
        "code": "  public LinkedList Concat(LinkedList end)\n    \n    \n  {\n    //@ open linkedlist(this,vs);\n    if(length == 0) {\n      //@ copy(end);\n      //@ open linkedlist(end, vs2);\n      //@ close linkedlist(end, vs2);\n      return end;\n      //@ close linkedlist(this,vs);\n    } else {\n      LinkedList c = tail.Concat(end);\n      LinkedList r = c.Cons(head);\n      //@ close linkedlist(this,vs);\n      return r;\n    }\n  }\n",
        "methodStartingLine": 68,
        "methodEndingLine": 85,
        "jml": "//@ requires linkedlist(this, ?vs) &*& linkedlist(end, ?vs2);\n//@ ensures result != null &*& linkedlist(this, vs) &*& linkedlist(end, vs2) &*& linkedlist(result, append(vs, vs2));"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/AmortizedQueue.java",
        "code": "  public LinkedList reverse()\n    \n    \n  {\n    //@ open linkedlist(this, vs);\n    LinkedList r;\n    if(length == 0) {\n      r = New();\n    } else {\n      r = tail.reverse();\n      LinkedList e = New();\n      e = e.Cons(head);\n      r = r.Concat(e);\n    }\n    //@ close linkedlist(this, vs);\n    return r;\n  }\n",
        "methodStartingLine": 87,
        "methodEndingLine": 103,
        "jml": "//@ requires linkedlist(this, ?vs);\n//@ ensures result != null &*& linkedlist(this, vs) &*& linkedlist(result, reverse(vs));"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/AmortizedQueue.java",
        "code": "  int front()\n    \n    \n  {\n    //@ open queue(this, vs);\n    //@ LinkedList front = this.front;\n    //@ LinkedList rear = this.rear;\n    //@ open linkedlist(front, ?vs1);\n    //@ open linkedlist(rear, ?vs2);\n    int r = this.front.head;\n    //@ close linkedlist(front, vs1);\n    //@ close linkedlist(rear, vs2);\n    //@ close queue(this, vs);\n    return r;\n  }\n",
        "methodStartingLine": 145,
        "methodEndingLine": 159,
        "jml": "//@ requires queue(this, ?vs) &*& vs != nil;\n//@ ensures queue(this, vs) &*& result == head(vs);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/AmortizedQueue.java",
        "code": "  AmortizedQueue tail() \n    \n    \n  {\n    //@ open queue(this, vs);\n    //@ LinkedList front = this.front;\n    //@ LinkedList rear = this.rear;\n    //@ open linkedlist(front, ?vs1);\n    //@ open linkedlist(rear, ?vs2);\n    //@ close linkedlist(rear, vs2);\n    AmortizedQueue r = new AmortizedQueue(this.front.tail, this.rear);\n    //@ close linkedlist(front, vs1);\n    //@ close queue(this, vs);\n    return r;\n  }\n",
        "methodStartingLine": 161,
        "methodEndingLine": 175,
        "jml": "//@ requires queue(this, ?vs) &*& vs != nil;\n//@ ensures queue(this, vs) &*& queue(result, tail(vs));"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/AmortizedQueue.java",
        "code": "  AmortizedQueue enqueue(int item)\n    \n    \n  {\n    //@ open queue(this, vs);\n    //@ LinkedList rear2 = this.rear;\n    //@ open linkedlist(rear2, ?vs2);\n    //@ close linkedlist(rear2, vs2);\n    //@ LinkedList front = this.front;\n    //@ open linkedlist(front, ?vs1);\n    //@ close linkedlist(front, vs1);\n    LinkedList r = rear.Cons(item);\n    AmortizedQueue q = new AmortizedQueue(this.front, r);\n    //@ append_assoc(vs1, reverse(vs2), cons(item, nil));\n    //@ close queue(this, vs);\n    return q;\n  }\n",
        "methodStartingLine": 177,
        "methodEndingLine": 193,
        "jml": "//@ requires queue(this, ?vs);\n//@ ensures result != null &*& queue(this, vs) &*& queue(result, append(vs, cons(item, nil)));"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/AmortizedQueue.java",
        "code": "  public static void main(String[] args) \n    \n    \n  {\n    AmortizedQueue q1 = new AmortizedQueue();\n    AmortizedQueue q2 = q1.enqueue(5);\n    AmortizedQueue q3 = q1.enqueue(6);\n    int res1 = q2.front();\n    int res2 = q3.front();\n    assert(res1 == 5);\n    assert(res2 == 6);\n  }\n",
        "methodStartingLine": 197,
        "methodEndingLine": 208,
        "jml": "//@ requires true;\n//@ ensures true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Comprehensions.java",
        "code": "  public static int array_sum(int[] a)\n    \n    \n  {\n    int total = 0;\n    int i = 0;\n    while(i < a.length) \n      //@ invariant 0 <= i &*& i <= a.length &*& array_slice(a, 0, a.length, vs) &*& total == sum(take(i, vs));\n    {\n      int tmp = a[i];\n      total = total + tmp;\n      //@ length_drop(i, vs);\n      //@ take_one_more2(vs, i);\n      i++;\n    }\n    return total;\n  }\n",
        "methodStartingLine": 307,
        "methodEndingLine": 323,
        "jml": "//@ requires array_slice(a, 0, a.length, ?vs);\n//@ ensures array_slice(a, 0, a.length, vs) &*& result == sum(vs);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Comprehensions.java",
        "code": "  public static int get(int[] a, int index)\n    \n    \n  {\n    int tmp = a[index];\n    //@ length_drop(index, vs);\n    //@ nth_drop(vs, index);\n    return tmp;\n  }\n",
        "methodStartingLine": 325,
        "methodEndingLine": 333,
        "jml": "//@ requires array_slice(a, 0, a.length, ?vs) &*& 0 <= index &*& index < a.length;\n//@ ensures array_slice(a, 0, a.length, vs) &*& result == nth(index, vs);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Comprehensions.java",
        "code": "  public static void set(int[] a, int index, int v)\n    \n    \n  {\n    a[index] = v;\n  }\n",
        "methodStartingLine": 335,
        "methodEndingLine": 340,
        "jml": "//@ requires array_slice(a, 0, a.length, ?vs) &*& 0 <= index &*& index < a.length;\n//@ ensures array_slice(a, 0, a.length, update(index, v, vs));"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Comprehensions.java",
        "code": "  public static int min(int[] a) \n    \n    \n  { \n    //@ switch(vs) { case nil:  case cons(h, t): }\n    int tmp = indexOfMin(a, 0);\n    //@ length_drop(tmp, vs);\n    //@ nth_drop(vs, tmp);\n    //@ mem_nth(tmp, vs);\n    return a[tmp];\n  }\n",
        "methodStartingLine": 343,
        "methodEndingLine": 353,
        "jml": "//@ requires array_slice(a, 0, a.length, ?vs) &*& vs != nil;\n//@ ensures array_slice(a, 0, a.length, vs) &*& mem(result, vs) == true && forall_le(vs, result);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Comprehensions.java",
        "code": "  public static int indexOfMin(int[] a, int start) \n    \n    \n  {\n    int min = start;\n    int j = start;\n    while(j < a.length)\n      //@ invariant start <= min &*& min < a.length && min <= j &*& j <= a.length &*& array_slice(a, start, a.length, vs) &*& forall_le(take(j - start, vs), nth(min - start, vs)) == true;\n    {\n      int tmp = a[j];\n      int abc = 0;\n      //@ length_drop(j - start, vs);\n      int tmp2 = a[min];\n      //@ length_drop(min - start, vs);\n      //@ int old_min = min;\n      if(tmp < tmp2) {\n        min = j;\n      }\n      //@ take_one_more(j - start, vs);\n      //@ drop_one_more(vs, j - start);\n      //@ forall_append(take(j - start, vs), {nth(j - start, vs)}, (le)(nth(min - start, vs)));\n      //@ forall_le_mono(take(j - start, vs), nth(old_min - start, vs), nth(min - start, vs));\n      j++;\n    }\n    return min;\n  }\n",
        "methodStartingLine": 355,
        "methodEndingLine": 380,
        "jml": "//@ requires array_slice(a, start, a.length, ?vs) &*& vs != nil &*& length(vs) != 0;\n//@ ensures array_slice(a, start, a.length, vs) &*& start <= result &*& result < a.length &*& forall_le(vs, nth(result - start, vs)) == true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Comprehensions.java",
        "code": "  public static void insert_sorted(int[] a, int start)\n    \n    \n  {\n    if(start == a.length - 1) {\n      //@ switch(vs) { case nil: case cons(h, t): }\n      //@ switch(tail(vs)) { case nil: case cons(h, t): }\n    } else {\n      int tmp = a[start];\n      int tmp2 = a[start + 1];\n      //@ switch(vs) { case nil: case cons(h, t): }\n      //@ switch(tail(vs)) { case nil: case cons(h, t): }\n      if(tmp < tmp2) {\n      } else {\n        a[start + 1] = tmp;\n        insert_sorted(a, start + 1);\n        a[start] = tmp2;\n      }\n    }\n  }\n",
        "methodStartingLine": 383,
        "methodEndingLine": 402,
        "jml": "//@ requires array_slice(a, start, a.length, ?vs) &*& start < a.length;\n//@ ensures array_slice(a, start, a.length, insert_sorted(tail(vs), head(vs)));"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Comprehensions.java",
        "code": "  public static void my_sort(int[] a, int start)\n    \n    \n  {\n    if(start == a.length) {\n      //@ switch(vs) { case nil: case cons(h, t): }\n    } else {\n      //@ switch(vs) { case nil: case cons(h, t): }\n      my_sort(a, start + 1);\n      insert_sorted(a, start);\n    }\n  }\n",
        "methodStartingLine": 404,
        "methodEndingLine": 415,
        "jml": "//@ requires array_slice(a, start, a.length, ?vs);\n//@ ensures array_slice(a, start, a.length, sort(vs));"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Comprehensions.java",
        "code": "  public static void sort(int[] a) \n    \n    \n  {\n    my_sort(a, 0);\n  }\n",
        "methodStartingLine": 417,
        "methodEndingLine": 422,
        "jml": "//@ requires array_slice(a, 0, a.length, ?vs);\n//@ ensures array_slice(a, 0, a.length, ?vs2) &*& is_sorted(vs2) == true &*& is_perm(vs2, vs) == true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/Echo.java",
        "code": "    public static void install(byte[] bArray, short bOffset, byte bLength) \n    \n    \n    {\n        Echo echo = new Echo();\n        //@ close echo.valid();\n        echo.register();\n    }\n",
        "methodStartingLine": 18,
        "methodEndingLine": 25,
        "jml": "//@ requires system();\n//@ ensures true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/Echo.java",
        "code": "    public void process(APDU apdu) \n    \n    \n    {\n        //retrieve the APDU buffer\n        byte[] buffer = apdu.getBuffer();\n        \n        if(selectingApplet())\n            return;\n        \n        if(buffer[ISO7816.OFFSET_CLA] != Echo_CLA)\n            ISOException.throwIt(ISO7816.SW_CLA_NOT_SUPPORTED);\n        if(buffer[ISO7816.OFFSET_INS] != Echo_INS)\n            ISOException.throwIt(ISO7816.SW_INS_NOT_SUPPORTED);\n        else\n            echo(apdu);\n    }\n",
        "methodStartingLine": 27,
        "methodEndingLine": 43,
        "jml": "//@ requires current_applet(this) &*& [1/2]valid() &*& APDU(apdu, ?buffer_) &*& array_slice(buffer_, 0, buffer_.length, _);\n//@ ensures current_applet(this) &*& [1/2]valid() &*& APDU(apdu, buffer_) &*& array_slice(buffer_, 0, buffer_.length, _);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/Echo.java",
        "code": "    private void echo(APDU apdu)\n    \n    \n    {\n        byte[] buffer = apdu.getBuffer();\n        \n        apdu.setOutgoing();\n        \n        apdu.setOutgoingLength(buffer[ISO7816.OFFSET_LC]);\n        \n        apdu.sendBytes((short)buffer[ISO7816.OFFSET_CDATA], (short)(buffer[ISO7816.OFFSET_CDATA] + buffer[ISO7816.OFFSET_LC]));\n    }\n",
        "methodStartingLine": 45,
        "methodEndingLine": 56,
        "jml": "//@ requires APDU(apdu, ?buffer_) &*& array_slice(buffer_, 0, buffer_.length, _);\n//@ ensures APDU(apdu, buffer_) &*& array_slice(buffer_, 0, buffer_.length, _);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/StringLiterals.java",
        "code": "  public static void main(String[] args)\n    \n    \n  {\n    String foo = \"Foo\";\n    String bar = \"Bar\";\n    \n    method(foo);\n    method(bar);\n    \n    methodFoo(foo);\n    int i = 0;\n    //@ assert i == 0;\n    i = methodBar(foo);\n    //@ assert i == -1;\n    i = methodBar(bar);\n    //@ assert i == 1;\n  }\n",
        "methodStartingLine": 5,
        "methodEndingLine": 22,
        "jml": "//@ requires true;\n//@ ensures true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/StringLiterals.java",
        "code": "  static public void method(String s)\n    \n    \n  {\n    //@ close charsInString(s, charsOfString(s));\n  }\n",
        "methodStartingLine": 24,
        "methodEndingLine": 29,
        "jml": "//@ requires true;\n//@ ensures  charsInString(s, charsOfString(s));"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/StringLiterals.java",
        "code": "  static public void methodFoo(String s)\n    \n    \n  {\n  }\n",
        "methodStartingLine": 31,
        "methodEndingLine": 35,
        "jml": "//@ requires charsOfString(s) == \"Foo\";\n//@ ensures  true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/StringLiterals.java",
        "code": "  static int methodBar(String s)\n    \n    \n  {\n    if (s.equals(\"Bar\"))\n      return 1;\n    else\n      return -1;\n  }\n",
        "methodStartingLine": 37,
        "methodEndingLine": 45,
        "jml": "//@ requires s != null;\n//@ ensures  result == (charsOfString(s) == \"Bar\" ? 1 : -1);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "javacard_tutorial/abs_static.java",
        "code": "    static short abs(short x)\n        \n        \n    {\n        if (x < 0) {\n            x = (short)-x;\n            return x;\n        } else {\n            return x;\n        }\n    }\n",
        "methodStartingLine": 2,
        "methodEndingLine": 12,
        "jml": "//@ requires x != -32768;\n//@ ensures 0 <= result &*& result == x || result == -x;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "javacard_tutorial/abs_except.java",
        "code": "    static short abs(short x)\n        \n        \n    {\n        if (x == -32768)\n            ISOException.throwIt(ISO7816.SW_UNKNOWN);\n        if (x < 0) {\n            x = (short)-x;\n            return x;\n        } else {\n            return x;\n        }\n    }\n",
        "methodStartingLine": 4,
        "methodEndingLine": 16,
        "jml": "//@ requires true;\n//@ ensures 0 <= result &*& result == x || result == -x;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/termination/Set.java",
        "code": "    static boolean contains(Set set, int x)\n        \n        \n        //@ terminates;\n    {\n        //@ open [_]Set(set, level);\n        //@ assert [_]set.valid(?level0);\n        //@ call_perm_weaken(2, level0);\n        //@ set.getClass_le_level();\n        //@ consume_call_perm_for(set.getClass());\n        return set.contains(x);\n    }\n",
        "methodStartingLine": 23,
        "methodEndingLine": 34,
        "jml": "//@ requires [_]Set(set, ?level) &*& [2]call_perm(currentThread, level);\n//@ ensures true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/termination/Set.java",
        "code": "    static boolean intersects(Set set, Set other)\n        \n        \n        //@ terminates;\n    {\n        //@ open [_]Set(set, level);\n        //@ assert [_]set.valid(?level0);\n        //@ level_append_mono_l(level0, level, otherLevel);\n        //@ call_perm_weaken(2, append(level0, otherLevel));\n        //@ set.getClass_le_level();\n        //@ level_le_append_l(level0, otherLevel);\n        //@ level_le_trans({set.getClass()}, level0, append(level0, otherLevel));\n        //@ consume_call_perm_for(set.getClass());\n        return set.intersects(other);\n    }\n",
        "methodStartingLine": 36,
        "methodEndingLine": 50,
        "jml": "//@ requires [_]Set(set, ?level) &*& [_]Set(other, ?otherLevel) &*& [2]call_perm(currentThread, append(level, otherLevel));\n//@ ensures true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/termination/Set.java",
        "code": "    public boolean contains(int x)\n        \n        \n        //@ terminates;\n    {\n        return false;\n    }\n",
        "methodStartingLine": 70,
        "methodEndingLine": 76,
        "jml": "//@ requires [_]valid(?level) &*& call_perm(currentThread, level);\n//@ ensures true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/termination/Set.java",
        "code": "    public boolean intersects(Set other)\n        \n        \n        //@ terminates;\n    {\n        return false;\n    }\n",
        "methodStartingLine": 77,
        "methodEndingLine": 83,
        "jml": "//@ requires [_]valid(?level) &*& [_]Set(other, ?otherLevel) &*& call_perm(currentThread, append(level, otherLevel));\n//@ ensures true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/termination/Set.java",
        "code": "    public static Set create()\n        \n        \n        //@ terminates;\n    {\n        return new Empty();\n    }\n",
        "methodStartingLine": 84,
        "methodEndingLine": 90,
        "jml": "//@ requires true;\n//@ ensures [_]Set(result, {Empty.class});"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/termination/Set.java",
        "code": "    public boolean contains(int x)\n        \n        \n        //@ terminates;\n    {\n        //@ open [_]valid(_);\n        //@ call_perm_weaken_and_dup(2);\n        return x == elem || SetHelper.contains(set, x);\n    }\n",
        "methodStartingLine": 115,
        "methodEndingLine": 123,
        "jml": "//@ requires [_]valid(?level) &*& call_perm(currentThread, level);\n//@ ensures true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/termination/Set.java",
        "code": "    public boolean intersects(Set other)\n        \n        \n        //@ terminates;\n    {\n        //@ open [_]valid(_);\n        Set set = this.set;\n        //@ assert [_]Set(set, ?setLevel);\n        //@ call_perm_weaken_and_dup(4);\n        //@ level_le_append_r(setLevel, otherLevel);\n        //@ call_perm_weaken(2, otherLevel);\n        return SetHelper.contains(other, elem) || SetHelper.intersects(set, other);\n    }\n",
        "methodStartingLine": 124,
        "methodEndingLine": 136,
        "jml": "//@ requires [_]valid(?level) &*& [_]Set(other, ?otherLevel) &*& call_perm(currentThread, append(level, otherLevel));\n//@ ensures true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/termination/Set.java",
        "code": "    public static Set create(int elem, Set set)\n        \n        \n        //@ terminates;\n    {\n        return new Insert(elem, set);\n    }\n",
        "methodStartingLine": 137,
        "methodEndingLine": 143,
        "jml": "//@ requires [_]Set(set, ?setLevel) &*& call_perm(currentThread, cons(Insert.class, setLevel));\n//@ ensures [_]Set(result, cons(Insert.class, setLevel));"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/termination/Set.java",
        "code": "    public static boolean intersects(Set s1, Set s2)\n        \n        \n        //@ terminates;\n    {\n        //@ call_perm_weaken_and_dup(2);\n        return SetHelper.intersects(s1, s2);\n    }\n",
        "methodStartingLine": 147,
        "methodEndingLine": 154,
        "jml": "//@ requires [_]Set(s1, ?s1Level) &*& [_]Set(s2, ?s2Level) &*& call_perm(currentThread, cons(Util.class, append(s1Level, s2Level)));\n//@ ensures true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/termination/Set.java",
        "code": "    public static void main()\n        \n        \n        //@ terminates;\n    {\n        //@ produce_call_below_perm_();\n        //@ call_below_perm__elim(2, {Util.class, Insert.class, Empty.class, Insert.class, Empty.class});\n        Set s1 = Empty.create();\n        //@ call_perm_weaken(1, {Insert.class, Empty.class});\n        Set s2 = Insert.create(42, s1);\n        Util.intersects(s2, s2);\n    }\n",
        "methodStartingLine": 158,
        "methodEndingLine": 169,
        "jml": "//@ requires true;\n//@ ensures true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/prodcons/client.java",
        "code": "    public void run()\n        \n        \n    {\n        String m = \"Hello\";\n        int i;\n        for(i = 0; i < Program.sendMaxCount; i++)\n            /*@\n            invariant\n                [_]Program_queue(?queue) &*& [_]queue.ArrayBlockingQueue() &*& [_]atomic_space(client_inv(queue)) &*&\n                [_]Program_sendMaxCount(?smc) &*& i <= smc &*&\n                [_]Program_producers(?s) &*& [_]this.myIndex |-> ?myIndex &*&\n                [_]Program_producersCount(?sc) &*& myIndex < sc &*&\n                [1/3]array_slice_deep(s, myIndex, myIndex + 1, producerWorkerInv, unit, cons(this, nil), cons(i, nil));\n            @*/\n        {\n            /*@\n            predicate P() =\n                [_]Program_sendMaxCount(smc) &*&\n                [_]Program_producers(s) &*& [_]this.myIndex |-> myIndex &*&\n                [_]Program_producersCount(sc) &*& myIndex < sc &*&\n                [1/3]array_slice_deep(s, myIndex, myIndex + 1, producerWorkerInv, unit, cons(this, nil), cons(i, nil));\n            predicate Q() =\n                [_]Program_sendMaxCount(smc) &*&\n                [_]Program_producers(s) &*& [_]this.myIndex |-> myIndex &*&\n                [_]Program_producersCount(sc) &*& myIndex < sc &*&\n                [1/3]array_slice_deep(s, myIndex, myIndex + 1, producerWorkerInv, unit, cons(this, nil), cons(i + 1, nil));\n            \n            lemma void my_put()\n                requires i < smc &*& P() &*& my_unsep_pred(queue)(?items, ?qms) &*& length(items) < qms;\n                ensures Q() &*& my_unsep_pred(queue)(append(items, cons(m, nil)), qms);\n            {\n                open P();\n                open my_unsep_pred(queue)(items, qms);\n                ProducerThread[] producers = Program.producers;\n                int producersCount = Program.producersCount;\n                int k = myIndex;\n                assert [1/3]array_slice_deep(producers, 0, producersCount, producerWorkerInv, unit, _, ?oldProducerCounts);\n                array_slice_deep_split(Program.producers, 0, myIndex);\n                array_slice_deep_split_precise(1/3, Program.producers, myIndex, Program.producersCount, producerWorkerInv, unit, myIndex + 1);\n                array_slice_deep_open_precise(2/3, Program.producers, myIndex);\n                int myOldSendCount = producerSendCount;\n                producerSendCount++;\n                int myNewSendCount = producerSendCount;\n                array_slice_deep_close(Program.producers, myIndex, producerWorkerInv, unit);\n                array_slice_deep_join_precise(1/3, Program.producers, myIndex, myIndex + 1, producerWorkerInv, unit, Program.producersCount);\n                array_slice_deep_join_precise(1/3, Program.producers, 0, myIndex, producerWorkerInv, unit, Program.producersCount);\n                \n                forall_append(items, cons(m, nil), non_null);\n                length_append(items, cons(m, nil));\n                assert [1/3]array_slice_deep(producers, 0, producersCount, producerWorkerInv, unit, _, ?newProducerCounts);\n                assert newProducerCounts == append(take(k, oldProducerCounts), cons(myNewSendCount, drop(1, drop(k, oldProducerCounts))));\n                assert length(oldProducerCounts) == producersCount;\n                assert 0 <= 1 &*& 0 <= k &*& 1 + k <= length(oldProducerCounts);\n                drop_drop(1, k, oldProducerCounts);\n                assert newProducerCounts == append(take(k, oldProducerCounts), cons(myNewSendCount, drop(k + 1, oldProducerCounts)));\n                sum_take_cons_drop(k, oldProducerCounts, myNewSendCount);\n                assert sum(newProducerCounts) == sum(oldProducerCounts) + myNewSendCount - myOldSendCount;\n                close my_unsep_pred(queue)(append(items, cons(m, nil)), qms);\n                close Q();\n            }\n            @*/\n            //@ produce_lemma_function_pointer_chunk(my_sep) : ArrayBlockingQueue_sep(client_inv(queue), queue, my_sep_pred, my_unsep_pred(queue))() { close exists(queue); call(); };\n            //@ produce_lemma_function_pointer_chunk(my_unsep) : ArrayBlockingQueue_unsep(client_inv(queue), queue, my_sep_pred, my_unsep_pred(queue))() { close exists(queue); call(); };\n            //@ close my_sep_pred();\n            //@ produce_lemma_function_pointer_chunk(my_put) : ArrayBlockingQueue_put(client_inv(queue), queue, my_unsep_pred(queue), m, P, Q)() { call(); };\n            //@ close P();\n            Program.queue.put(m);\n            //@ open Q();\n        }\n        //@ assert i == Program.sendMaxCount;\n        //@ close post();\n    }\n",
        "methodStartingLine": 157,
        "methodEndingLine": 229,
        "jml": "//@ requires pre();\n//@ ensures post();"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/prodcons/client.java",
        "code": "    public void run()\n        \n        \n    {\n        int i;\n        for (i=0; i < Program.receiveMaxCount; i++)\n            /*@\n            invariant\n                [_]Program_queue(?queue) &*& [_]queue.ArrayBlockingQueue() &*& [_]atomic_space(client_inv(queue)) &*&\n                [_]Program_receiveMaxCount(?rmc) &*& i <= rmc &*&\n                [_]Program_consumers(?r) &*& [_]this.myIndex |-> ?myIndex &*&\n                [_]Program_consumersCount(?rc) &*& myIndex < rc &*&\n                [1/3]array_slice_deep(r, myIndex, myIndex + 1, consumerWorkerInv, unit, cons(this, nil), cons(i, nil));\n            @*/\n        {\n            /*@\n            predicate P() =  \n                [_]Program_receiveMaxCount(rmc) &*&\n                [_]Program_consumers(r) &*& [_]this.myIndex |-> myIndex &*&\n                [_]Program_consumersCount(rc) &*& myIndex < rc &*&\n                [1/3]array_slice_deep(r, myIndex, myIndex + 1, consumerWorkerInv, unit, cons(this, nil), cons(i, nil));\n            predicate Q(Object result) = \n                [_]Program_receiveMaxCount(rmc) &*& \n                [_]Program_consumers(r) &*& [_]this.myIndex |-> myIndex &*& \n                [_]Program_consumersCount(rc) &*& myIndex < rc &*&\n                [1/3]array_slice_deep(r, myIndex, myIndex + 1, consumerWorkerInv, unit, cons(this, nil), cons(i + 1, nil));\n            \n            lemma void my_ArrayBlockingQueue_take()\n                requires i < rmc &*& P() &*& my_unsep_pred(queue)(?items, ?qms) &*& items != nil;\n                ensures Q(head(items)) &*& my_unsep_pred(queue)(tail(items), qms);\n            {\n                open P();\n                open my_unsep_pred(queue)(items, qms);\n                ConsumerThread[] consumers = Program.consumers;\n                int consumersCount = Program.consumersCount;\n                int k = myIndex;\n                assert [1/3]array_slice_deep(consumers, 0, consumersCount, consumerWorkerInv, unit, _, ?oldConsumerCounts);\n                array_slice_deep_split(Program.consumers, 0, myIndex);\n                array_slice_deep_split_precise(1/3, Program.consumers, myIndex, Program.consumersCount, consumerWorkerInv, unit, myIndex + 1);\n                array_slice_deep_open_precise(2/3, Program.consumers, myIndex);\n                int myOldReceiveCount = consumerReceiveCount;\n                switch (items) {\n                case nil:\n                case cons(head, tail):\n                    consumerReceiveCount++;\n                }\n                int myNewConsumerCount = consumerReceiveCount;\n                array_slice_deep_close(Program.consumers, myIndex, consumerWorkerInv, unit);\n                array_slice_deep_join_precise(1/3, Program.consumers, myIndex, myIndex + 1, consumerWorkerInv, unit, Program.consumersCount);\n                array_slice_deep_join_precise(1/3, Program.consumers, 0, myIndex, consumerWorkerInv, unit, Program.consumersCount);\n                \n                assert [1/3]array_slice_deep(consumers, 0, consumersCount, consumerWorkerInv, unit, _, ?newConsumerCounts);\n                assert newConsumerCounts == append(take(k, oldConsumerCounts), cons(myNewConsumerCount, drop(1, drop(k, oldConsumerCounts))));\n                assert length(oldConsumerCounts) == consumersCount;\n                assert 0 <= 1 &*& 0 <= k &*& 1 + k <= length(oldConsumerCounts);\n                drop_drop(1, k, oldConsumerCounts);\n                assert newConsumerCounts == append(take(k, oldConsumerCounts), cons(myNewConsumerCount, drop(k + 1, oldConsumerCounts)));\n                sum_take_cons_drop(k, oldConsumerCounts, myNewConsumerCount);\n                assert sum(newConsumerCounts) == sum(oldConsumerCounts) + myNewConsumerCount - myOldReceiveCount;\n                \n                switch (items) {\n                case nil:\n                case cons(head, tail):\n                    close my_unsep_pred(queue)(tail, qms);\n                    close Q(head);\n                }\n            }\n            @*/\n            //@ produce_lemma_function_pointer_chunk(my_sep) : ArrayBlockingQueue_sep(client_inv(queue), queue, my_sep_pred, my_unsep_pred(queue))() { close exists(queue); call(); };\n            //@ produce_lemma_function_pointer_chunk(my_unsep) : ArrayBlockingQueue_unsep(client_inv(queue), queue, my_sep_pred, my_unsep_pred(queue))() { close exists(queue); call(); };\n            //@ close my_sep_pred();\n            //@ produce_lemma_function_pointer_chunk(my_ArrayBlockingQueue_take) : ArrayBlockingQueue_take(client_inv(queue), queue, my_unsep_pred(queue), P, Q)() { call(); };\n            //@ close P();\n            String m = (String)Program.queue.take();\n            //@ open Q(m);\n        }\n        //@ close post();\n    }\n",
        "methodStartingLine": 274,
        "methodEndingLine": 351,
        "jml": "//@ requires pre();\n//@ ensures post();"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/prodcons/client.java",
        "code": "    public static void main(String[] args)\n        \n        \n    {\n        //@ init_class();\n        Program.producersCount = 1000;\n        Program.consumersCount = 1000;\n        Program.sendMaxCount = 2000;\n        Program.receiveMaxCount = 2000;\n        Program.work();\n        //@assert Program.sendCount == 2000000;\n        //@assert Program.receiveCount == 2000000;\n    }\n",
        "methodStartingLine": 367,
        "methodEndingLine": 379,
        "jml": "//@ requires class_init_token(Program.class);\n//@ ensures true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/prodcons/client.java",
        "code": "    public static void work()\n        /*@\n        requires\n            Program_queue(_) &*&\n            Program_producers(_) &*& Program_consumers(_) &*&\n            [_]Program_producersCount(?producersCount) &*& [_]Program_consumersCount(?consumersCount) &*&\n            0 < producersCount &*& 0 < consumersCount &*&\n            Program_sendCount(?psc) &*& Program_receiveCount(?prc) &*& psc==0 &*& prc==0 &*&\n            Program_sendMaxCount(?smc) &*& 0 < smc  &*& Program_receiveMaxCount(?rmc) &*& 0 < rmc;\n        @*/\n        \n     {\n        Program.producers = new ProducerThread[Program.producersCount];\n        //@ ProducerThread[] s = Program.producers;\n        //@ leak Program_producers(s);\n        //@ array_slice_deep_empty_close(s, 0, producerWorker, unit);\n        for (int i = 0; i < Program.producersCount; i++)\n            /*@\n            invariant\n                0 <= i &*& i <= producersCount &*&\n                [_]Program_producers(s) &*& [_]Program_producersCount(producersCount) &*&\n                [1/3]Program_sendMaxCount(smc) &*& 0 < smc &*&\n                array_slice(s, i, producersCount, ?elems) &*& all_eq(elems, null) == true &*&\n                [1/3]array_slice_deep(s, 0, i, producerWorkerInv, unit, _, ?v) &*& all_eq(v, 0) == true &*&\n                [2/3]array_slice_deep(s, 0, i, producerWorkerNull, unit, _, _);\n            @*/\n        {\n            Program.producers[i] = new ProducerThread();\n            //@ Program.producers[i].myIndex = i;\n            //@ array_slice_split(producers, i, i + 1);\n            //@ close [2/3]producerWorkerNull(unit, producers[i], unit);\n            //@ close [1/3]producerWorkerInv(unit, producers[i], _);\n            //@ array_slice_deep_close_precise(2/3, producers, i, producerWorkerNull, unit);\n            //@ array_slice_deep_close_precise(1/3, producers, i, producerWorkerInv, unit);\n            \n        }\n        \n        Program.consumers = new ConsumerThread[Program.consumersCount];\n        //@ ConsumerThread[] r = Program.consumers;\n        //@ leak Program_consumers(r);\n        //@ array_slice_deep_empty_close(r, 0, consumerWorker, unit);\n        for (int i = 0; i < Program.consumersCount; i++)\n            /*@\n            invariant\n                0 <= i &*& i <= consumersCount &*&\n                [_]Program_consumers(r) &*& [_]Program_consumersCount(consumersCount) &*&\n                [1/3]Program_receiveMaxCount(rmc) &*& 0 < rmc &*&\n                array_slice(r, i, consumersCount, ?elems) &*& all_eq(elems, null) == true &*&\n                [1/3]array_slice_deep(r, 0, i, consumerWorkerInv, unit, _, ?v) &*& all_eq(v, 0) == true &*&\n                [2/3]array_slice_deep(r, 0, i, consumerWorkerNull, unit, _, _);\n            @*/\n        {\n            consumers[i] = new ConsumerThread();\n            //@ Program.consumers[i].myIndex = i;\n            //@ array_slice_split(consumers, i, i + 1);\n            //@ close [2/3]consumerWorkerNull(unit, consumers[i], unit);\n            //@ close [1/3]consumerWorkerInv(unit, consumers[i], _);\n            //@ array_slice_deep_close_precise(2/3, consumers, i, consumerWorkerNull, unit);\n            //@ array_slice_deep_close_precise(1/3, consumers, i, consumerWorkerInv, unit);\n        }\n        Program.queue = new ArrayBlockingQueue(2);\n        \n        //@ close client_inv(Program.queue)();\n        //@ create_atomic_space(client_inv(Program.queue));\n        //@ close foreach_i(0, nil, producerWorkerIndex);\n        \n        for (int i = 0; i < Program.producersCount; i++)\n            /*@\n            invariant\n                0 <= i &*& i <= producersCount &*&\n                [_]Program_producersCount(producersCount) &*& [_]Program_producers(s) &*&\n                [_]Program_queue(?queue) &*& [_]queue.ArrayBlockingQueue() &*& [_]atomic_space(client_inv(queue)) &*& [_]Program_sendMaxCount(smc) &*& 0 < smc &*&\n                [2/3]array_slice_deep(s, i, producersCount, producerWorkerNull, unit, _, _) &*&\n                [1/3]array_slice_deep(s, 0, i, producerWorker, unit, ?elements, _) &*& foreach_i(0, elements, producerWorkerIndex);\n            @*/\n        {\n            //@ array_slice_deep_split(s, i, i + 1);\n            //@ array_slice_deep_open_precise(2/3, s, i);\n            ProducerThread producer = producers[i];\n            //@ close [1/3]producerWorkerInv(unit, producer, _);\n            //@ array_slice_deep_close_precise(1/3, s, i, producerWorkerInv, unit);\n            JoinableRunnable j = ThreadingHelper.createJoinableRunnable(producer);\n            //@ producer.myIndex = i;\n            //@ leak producer.myIndex |-> i;\n            //@ close producer.pre();\n            //@ j.closeIt();\n            Thread t = new Thread(j);\n            t.start();\n            \n            producer.thread = t;\n            producer.joinable = j;\n            //@ close [1/3]producerWorker(unit, producer, unit);\n            //@ array_slice_deep_close_precise(1/3, producers, i, producerWorker, unit);\n            \n            //@ close foreach_i(i + 1, nil, producerWorkerIndex);\n            //@ close producerWorkerIndex(i, producer);\n            //@ close foreach_i(i, cons(producer, nil), producerWorkerIndex);\n            //@ foreach_i_append(0, elements, cons(producer, nil));\n        }\n        //@ close foreach_i(0, nil, consumerWorkerIndex);\n        for (int i = 0; i < Program.consumersCount; i++)\n            /*@\n            invariant\n                0 <= i &*& i <= consumersCount &*&\n                [_]Program_consumersCount(consumersCount) &*& [_]Program_consumers(r) &*&\n                [_]Program_queue(?queue) &*& [_]queue.ArrayBlockingQueue() &*& [_]atomic_space(client_inv(queue)) &*& [_]Program_receiveMaxCount(rmc) &*& 0 < rmc &*&\n                [2/3]array_slice_deep(r, i, consumersCount, consumerWorkerNull, unit, _, _) &*&\n                [1/3]array_slice_deep(r, 0, i, consumerWorker, unit, ?elements, _) &*& foreach_i(0, elements, consumerWorkerIndex);\n            @*/\n        {\n            //@ array_slice_deep_split(r, i, i + 1);\n            //@ array_slice_deep_open_precise(2/3, r, i);\n            ConsumerThread consumer = consumers[i];\n            //@ close [1/3]consumerWorkerInv(unit, consumer, _);\n            //@ array_slice_deep_close_precise(1/3, r, i, consumerWorkerInv, unit);\n            JoinableRunnable j = ThreadingHelper.createJoinableRunnable(consumer);\n            //@ consumer.myIndex = i;\n            //@ leak consumer.myIndex |-> i;\n            //@ close consumer.pre();\n            //@ j.closeIt();\n            Thread t = new Thread(j);\n            t.start();\n            \n            consumer.thread = t;\n            consumer.joinable = j;\n            //@ close [1/3]consumerWorker(unit, consumer, unit);\n            //@ array_slice_deep_close_precise(1/3, consumers, i, consumerWorker, unit);\n            \n            //@ close foreach_i(i + 1, nil, consumerWorkerIndex);\n            //@ close consumerWorkerIndex(i, consumer);\n            //@ close foreach_i(i, cons(consumer, nil), consumerWorkerIndex);\n            //@ foreach_i_append(0, elements, cons(consumer, nil));\n        }\n        \n        int j;\n        for (j = 0; j < Program.producersCount; j++)\n            /*@\n            invariant\n                0 <= j &*& j <= producersCount &*&\n                [_]Program_producersCount(producersCount) &*& [_]Program_producers(s) &*&\n                [_]Program_queue(?queue) &*& [_]queue.ArrayBlockingQueue() &*& [_]atomic_space(client_inv(queue)) &*&\n                Program_sendCount(j * smc) &*& [_]Program_sendMaxCount(smc) &*&\n                [1/3]array_slice_deep(s, j, producersCount, producerWorker, unit, ?elements, _) &*& foreach_i(j, elements, producerWorkerIndex);\n            @*/\n        {\n            ProducerThread sw = producers[j];\n            ThreadingHelper.join(sw.thread, sw.joinable);\n            //@ open sw.post();\n            //@ open foreach_i(j, elements, producerWorkerIndex);\n            //@ open producerWorkerIndex(j, sw);\n            //@ int jj = sw.myIndex;\n            //@ assert j == jj;\n            //@ array_slice_deep_open_precise(1/3, s, j);\n            //@ open producerWorkerInv(unit, sw, _);\n            //@ Program.sendCount += sw.producerSendCount;\n        }\n        //@ assert Program.sendCount == Program.sendMaxCount * j;\n        //@ assert j == producersCount;\n        //@ assert Program.sendCount == Program.sendMaxCount * producersCount;\n        for (j = 0; j < Program.consumersCount; j++)\n            /*@\n            invariant\n                0 <= j &*& j <= consumersCount &*&\n                [_]Program_consumersCount(consumersCount) &*& [_]Program_consumers(r) &*&\n                [_]Program_queue(?queue) &*& [_]queue.ArrayBlockingQueue() &*& [_]atomic_space(client_inv(queue)) &*&\n                Program_receiveCount(j * rmc) &*& [_]Program_receiveMaxCount(rmc) &*&\n                [1/3]array_slice_deep(r, j, consumersCount, consumerWorker, unit, ?elements, _) &*& foreach_i(j, elements, consumerWorkerIndex);\n            @*/\n        {\n            ConsumerThread rw = consumers[j];\n            ThreadingHelper.join(rw.thread, rw.joinable);\n            //@ open rw.post();\n            //@ open foreach_i(j, elements, consumerWorkerIndex);\n            //@ open consumerWorkerIndex(j, rw);\n            //@ int jj = rw.myIndex;\n            //@ assert j == jj;\n            //@ array_slice_deep_open_precise(1/3, r, j);\n            //@ open consumerWorkerInv(unit, rw, _);\n            //@ Program.receiveCount += rw.consumerReceiveCount;\n        }\n        //@ assert Program.receiveCount == Program.receiveMaxCount * j;\n        //@ assert j == consumersCount;\n        //@ assert Program.receiveCount == Program.receiveMaxCount * consumersCount;\n    }\n",
        "methodStartingLine": 381,
        "methodEndingLine": 564,
        "jml": "//@ ensures Program_sendCount(smc * producersCount) &*& Program_receiveCount(rmc * consumersCount);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/channels/client.java",
        "code": "    public void run()\n        \n        \n    {\n        String m = \"Hello\";\n        int i;\n        for(i = 0; i < Program.sendMaxCount; i++)\n            /*@\n            invariant\n                [_]Program_channel(?c) &*& [_]c.Channel() &*& [_]atomic_space(client_inv(c)) &*&\n                [_]Program_sendMaxCount(?smc) &*& i <= smc &*&\n                [_]Program_senders(?s) &*& [_]this.myIndex |-> ?myIndex &*&\n                [_]Program_sendersCount(?sc) &*& myIndex < sc &*&\n                [1/3]array_slice_deep(s, myIndex, myIndex + 1, senderWorkerInv, unit, cons(this, nil), cons(i, nil));\n            @*/\n        {\n            for (;;)\n                /*@\n                invariant\n                    [_]Program_channel(c) &*& [_]c.Channel() &*& [_]atomic_space(client_inv(c)) &*&\n                    [_]Program_sendMaxCount(smc) &*& i < smc &*&\n                    [_]Program_senders(s) &*& [_]this.myIndex |-> myIndex &*&\n                    [_]Program_sendersCount(sc) &*& myIndex < sc &*&\n                    [1/3]array_slice_deep(s, myIndex, myIndex + 1, senderWorkerInv, unit, cons(this, nil), cons(i, nil));\n                @*/\n            {\n                \n                /*@\n                predicate P() =\n                    [_]Program_sendMaxCount(smc) &*&\n                    [_]Program_senders(s) &*& [_]this.myIndex |-> myIndex &*&\n                    [_]Program_sendersCount(sc) &*& myIndex < sc &*&\n                    [1/3]array_slice_deep(s, myIndex, myIndex + 1, senderWorkerInv, unit, cons(this, nil), cons(i, nil));\n                predicate Q(boolean r) =\n                    [_]Program_sendMaxCount(smc) &*&\n                    [_]Program_senders(s) &*& [_]this.myIndex |-> myIndex &*&\n                    [_]Program_sendersCount(sc) &*& myIndex < sc &*&\n                    [1/3]array_slice_deep(s, myIndex, myIndex + 1, senderWorkerInv, unit, cons(this, nil), (r ? cons(i+1, nil) : cons(i, nil)));\n                \n                lemma void my_send(boolean r)\n                    requires i < smc &*& P() &*& my_unsep_pred(c)(?items, ?qms);\n                    ensures Q(r) &*& my_unsep_pred(c)(r ? append(items, cons(m, nil)) : items, qms);\n                {\n                    open P();\n                    open my_unsep_pred(c)(items, qms);\n                    SenderThread[] senders = Program.senders;\n                    int sendersCount = Program.sendersCount;\n                    int k = myIndex;\n                    assert [1/3]array_slice_deep(senders, 0, sendersCount, senderWorkerInv, unit, _, ?oldSenderCounts);\n                    array_slice_deep_split(Program.senders, 0, myIndex);\n                    array_slice_deep_split_precise(1/3, Program.senders, myIndex, Program.sendersCount, senderWorkerInv, unit, myIndex + 1);\n                    array_slice_deep_open_precise(2/3, Program.senders, myIndex);\n                    int myOldSendCount = senderSendCount;\n                    if (r) {\n                        senderSendCount++;\n                    }\n                    int myNewSendCount = senderSendCount;\n                    array_slice_deep_close(Program.senders, myIndex, senderWorkerInv, unit);\n                    array_slice_deep_join_precise(1/3, Program.senders, myIndex, myIndex + 1, senderWorkerInv, unit, Program.sendersCount);\n                    array_slice_deep_join_precise(1/3, Program.senders, 0, myIndex, senderWorkerInv, unit, Program.sendersCount);\n                    \n                    forall_append(items, cons(m, nil), non_null);\n                    length_append(items, cons(m, nil));\n                    assert [1/3]array_slice_deep(senders, 0, sendersCount, senderWorkerInv, unit, _, ?newSenderCounts);\n                    assert newSenderCounts == append(take(k, oldSenderCounts), cons(myNewSendCount, drop(1, drop(k, oldSenderCounts))));\n                    assert length(oldSenderCounts) == sendersCount;\n                    assert 0 <= 1 &*& 0 <= k &*& 1 + k <= length(oldSenderCounts);\n                    drop_drop(1, k, oldSenderCounts);\n                    assert newSenderCounts == append(take(k, oldSenderCounts), cons(myNewSendCount, drop(k + 1, oldSenderCounts)));\n                    sum_take_cons_drop(k, oldSenderCounts, myNewSendCount);\n                    assert sum(newSenderCounts) == sum(oldSenderCounts) + myNewSendCount - myOldSendCount;\n                    close my_unsep_pred(c)(r ? append(items, cons(m, nil)) : items, qms);\n                    close Q(r);\n                }\n                @*/\n                //@ produce_lemma_function_pointer_chunk(my_sep) : channel_sep(client_inv(c), c, my_sep_pred, my_unsep_pred(c))() { close exists(c); call(); };\n                //@ produce_lemma_function_pointer_chunk(my_unsep) : channel_unsep(client_inv(c), c, my_sep_pred, my_unsep_pred(c))() { close exists(c); call(); };\n                //@ close my_sep_pred();\n                //@ produce_lemma_function_pointer_chunk(my_send) : channel_send(client_inv(c), c, my_unsep_pred(c), m, P, Q)(r) { call(); };\n                //@ close P();\n                boolean success = Program.channel.send(m);\n                //@ open Q(success);\n                if (success) break;\n            }\n        }\n        //@ assert i == Program.sendMaxCount;\n        //@ close post();\n    }\n",
        "methodStartingLine": 157,
        "methodEndingLine": 244,
        "jml": "//@ requires pre();\n//@ ensures post();"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/channels/client.java",
        "code": "    public void run()\n        \n        \n    {\n        int i;\n        for (i=0; i < Program.receiveMaxCount; i++)\n            /*@\n            invariant\n                [_]Program_channel(?c) &*& [_]c.Channel() &*& [_]atomic_space(client_inv(c)) &*&\n                [_]Program_receiveMaxCount(?rmc) &*& i <= rmc &*&\n                [_]Program_receivers(?r) &*& [_]this.myIndex |-> ?myIndex &*&\n                [_]Program_receiversCount(?rc) &*& myIndex < rc &*&\n                [1/3]array_slice_deep(r, myIndex, myIndex + 1, receiverWorkerInv, unit, cons(this, nil), cons(i, nil));\n            @*/\n        {\n            for (;;)\n                /*@\n                invariant\n                    [_]Program_channel(c) &*& [_]c.Channel() &*& [_]atomic_space(client_inv(c)) &*&\n                    [_]Program_receiveMaxCount(rmc) &*& i < rmc &*&\n                    [_]Program_receivers(r) &*& [_]this.myIndex |-> myIndex &*&\n                    [_]Program_receiversCount(rc) &*& myIndex < rc &*&\n                    [1/3]array_slice_deep(r, myIndex, myIndex + 1, receiverWorkerInv, unit, cons(this, nil), cons(i, nil));\n                @*/\n            {\n                /*@\n                predicate P() =  \n                    [_]Program_receiveMaxCount(rmc) &*&\n                    [_]Program_receivers(r) &*& [_]this.myIndex |-> myIndex &*&\n                    [_]Program_receiversCount(rc) &*& myIndex < rc &*&\n                    [1/3]array_slice_deep(r, myIndex, myIndex + 1, receiverWorkerInv, unit, cons(this, nil), cons(i, nil));\n                predicate Q(Object result) = \n                    [_]Program_receiveMaxCount(rmc) &*& \n                    [_]Program_receivers(r) &*& [_]this.myIndex |-> myIndex &*& \n                    [_]Program_receiversCount(rc) &*& myIndex < rc &*&\n                    [1/3]array_slice_deep(r, myIndex, myIndex + 1, receiverWorkerInv, unit, cons(this, nil), (result != null ? cons(i + 1, nil) : cons(i , nil)));\n                \n                lemma void my_channel_receive()\n                    requires i < rmc &*& P() &*& my_unsep_pred(c)(?items, ?qms);\n                    ensures Q(items != nil ? head(items) : null) &*& my_unsep_pred(c)(tail(items), qms);\n                {\n                    open P();\n                    open my_unsep_pred(c)(items, qms);\n                    ReceiverThread[] receivers = Program.receivers;\n                    int receiversCount = Program.receiversCount;\n                    int k = myIndex;\n                    assert [1/3]array_slice_deep(receivers, 0, receiversCount, receiverWorkerInv, unit, _, ?oldReceiverCounts);\n                    array_slice_deep_split(Program.receivers, 0, myIndex);\n                    array_slice_deep_split_precise(1/3, Program.receivers, myIndex, Program.receiversCount, receiverWorkerInv, unit, myIndex + 1);\n                    array_slice_deep_open_precise(2/3, Program.receivers, myIndex);\n                    int myOldReceiveCount = receiverReceiveCount;\n                    switch (items) {\n                    case nil:\n                    case cons(head, tail):\n                        receiverReceiveCount++;\n                    }\n                    int myNewReceiverCount = receiverReceiveCount;\n                    array_slice_deep_close(Program.receivers, myIndex, receiverWorkerInv, unit);\n                    array_slice_deep_join_precise(1/3, Program.receivers, myIndex, myIndex + 1, receiverWorkerInv, unit, Program.receiversCount);\n                    array_slice_deep_join_precise(1/3, Program.receivers, 0, myIndex, receiverWorkerInv, unit, Program.receiversCount);\n                    \n                    assert [1/3]array_slice_deep(receivers, 0, receiversCount, receiverWorkerInv, unit, _, ?newReceiverCounts);\n                    assert newReceiverCounts == append(take(k, oldReceiverCounts), cons(myNewReceiverCount, drop(1, drop(k, oldReceiverCounts))));\n                    assert length(oldReceiverCounts) == receiversCount;\n                    assert 0 <= 1 &*& 0 <= k &*& 1 + k <= length(oldReceiverCounts);\n                    drop_drop(1, k, oldReceiverCounts);\n                    assert newReceiverCounts == append(take(k, oldReceiverCounts), cons(myNewReceiverCount, drop(k + 1, oldReceiverCounts)));\n                    sum_take_cons_drop(k, oldReceiverCounts, myNewReceiverCount);\n                    assert sum(newReceiverCounts) == sum(oldReceiverCounts) + myNewReceiverCount - myOldReceiveCount;\n                    \n                    switch (items) {\n                    case nil:\n                        close my_unsep_pred(c)(items, qms);\n                        close Q(null);\n                    case cons(head, tail):\n                        close my_unsep_pred(c)(tail, qms);\n                        close Q(head);\n                    }\n                }\n                @*/\n                //@ produce_lemma_function_pointer_chunk(my_sep) : channel_sep(client_inv(c), c, my_sep_pred, my_unsep_pred(c))() { close exists(c); call(); };\n                //@ produce_lemma_function_pointer_chunk(my_unsep) : channel_unsep(client_inv(c), c, my_sep_pred, my_unsep_pred(c))() { close exists(c); call(); };\n                //@ close my_sep_pred();\n                //@ produce_lemma_function_pointer_chunk(my_channel_receive) : channel_receive(client_inv(c), c, my_unsep_pred(c), P, Q)() { call(); };\n                //@ close P();\n                String m = Program.channel.receive();\n                //@ open Q(m);\n                if (m != null) break;\n            }\n        }\n        //@ close post();\n    }\n",
        "methodStartingLine": 289,
        "methodEndingLine": 380,
        "jml": "//@ requires pre();\n//@ ensures post();"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/channels/client.java",
        "code": "    public static void main(String[] args)\n        \n        \n    {\n        //@ init_class();\n        Program.sendersCount = 1000;\n        Program.receiversCount = 1000;\n        Program.sendMaxCount = 2000;\n        Program.receiveMaxCount = 2000;\n        Program.work();\n        //@assert Program.sendCount == 2000000;\n        //@assert Program.receiveCount == 2000000;\n    }\n",
        "methodStartingLine": 396,
        "methodEndingLine": 408,
        "jml": "//@ requires class_init_token(Program.class);\n//@ ensures true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/channels/client.java",
        "code": "    public static void work()\n        /*@\n        requires\n            Program_channel(?channel) &*&\n            Program_senders(_) &*& Program_receivers(_) &*&\n            [_]Program_sendersCount(?sendersCount) &*& [_]Program_receiversCount(?receiversCount) &*&\n            0 < sendersCount &*& 0 < receiversCount &*&\n            Program_sendCount(?psc) &*& Program_receiveCount(?prc) &*& psc==0 &*& prc==0 &*&\n            Program_sendMaxCount(?smc) &*& 0 < smc  &*& Program_receiveMaxCount(?rmc) &*& 0 < rmc;\n        @*/\n        \n     {\n        Program.senders = new SenderThread[Program.sendersCount];\n        //@ SenderThread[] s = Program.senders;\n        //@ leak Program_senders(s);\n        //@ array_slice_deep_empty_close(s, 0, senderWorker, unit);\n        for (int i = 0; i < Program.sendersCount; i++)\n            /*@\n            invariant\n                0 <= i &*& i <= sendersCount &*&\n                [_]Program_senders(s) &*& [_]Program_sendersCount(sendersCount) &*&\n                [1/3]Program_sendMaxCount(smc) &*& 0 < smc &*&\n                array_slice(s, i, sendersCount, ?elems) &*& all_eq(elems, null) == true &*&\n                [1/3]array_slice_deep(s, 0, i, senderWorkerInv, unit, _, ?v) &*& all_eq(v, 0) == true &*&\n                [2/3]array_slice_deep(s, 0, i, senderWorkerNull, unit, _, _);\n            @*/\n        {\n            Program.senders[i] = new SenderThread();\n            //@ Program.senders[i].myIndex = i;\n            //@ array_slice_split(senders, i, i + 1);\n            //@ close [2/3]senderWorkerNull(unit, senders[i], unit);\n            //@ close [1/3]senderWorkerInv(unit, senders[i], _);\n            //@ array_slice_deep_close_precise(2/3, senders, i, senderWorkerNull, unit);\n            //@ array_slice_deep_close_precise(1/3, senders, i, senderWorkerInv, unit);\n            \n        }\n        \n        Program.receivers = new ReceiverThread[Program.receiversCount];\n        //@ ReceiverThread[] r = Program.receivers;\n        //@ leak Program_receivers(r);\n        //@ array_slice_deep_empty_close(r, 0, receiverWorker, unit);\n        for (int i = 0; i < Program.receiversCount; i++)\n            /*@\n            invariant\n                0 <= i &*& i <= receiversCount &*&\n                [_]Program_receivers(r) &*& [_]Program_receiversCount(receiversCount) &*&\n                [1/3]Program_receiveMaxCount(rmc) &*& 0 < rmc &*&\n                array_slice(r, i, receiversCount, ?elems) &*& all_eq(elems, null) == true &*&\n                [1/3]array_slice_deep(r, 0, i, receiverWorkerInv, unit, _, ?v) &*& all_eq(v, 0) == true &*&\n                [2/3]array_slice_deep(r, 0, i, receiverWorkerNull, unit, _, _);\n            @*/\n        {\n            receivers[i] = new ReceiverThread();\n            //@ Program.receivers[i].myIndex = i;\n            //@ array_slice_split(receivers, i, i + 1);\n            //@ close [2/3]receiverWorkerNull(unit, receivers[i], unit);\n            //@ close [1/3]receiverWorkerInv(unit, receivers[i], _);\n            //@ array_slice_deep_close_precise(2/3, receivers, i, receiverWorkerNull, unit);\n            //@ array_slice_deep_close_precise(1/3, receivers, i, receiverWorkerInv, unit);\n        }\n        Program.channel = new Channel(2);\n        \n        //@ close client_inv(Program.channel)();\n        //@ create_atomic_space(client_inv(Program.channel));\n        //@ close foreach_i(0, nil, senderWorkerIndex);\n        \n        for (int i = 0; i < Program.sendersCount; i++)\n            /*@\n            invariant\n                0 <= i &*& i <= sendersCount &*&\n                [_]Program_sendersCount(sendersCount) &*& [_]Program_senders(s) &*&\n                [_]Program_channel(?c) &*& [_]c.Channel() &*& [_]atomic_space(client_inv(c)) &*& [_]Program_sendMaxCount(smc) &*& 0 < smc &*&\n                [2/3]array_slice_deep(s, i, sendersCount, senderWorkerNull, unit, _, _) &*&\n                [1/3]array_slice_deep(s, 0, i, senderWorker, unit, ?elements, _) &*& foreach_i(0, elements, senderWorkerIndex);\n            @*/\n        {\n            //@ array_slice_deep_split(s, i, i + 1);\n            //@ array_slice_deep_open_precise(2/3, s, i);\n            SenderThread sender = senders[i];\n            //@ close [1/3]senderWorkerInv(unit, sender, _);\n            //@ array_slice_deep_close_precise(1/3, s, i, senderWorkerInv, unit);\n            JoinableRunnable j = ThreadingHelper.createJoinableRunnable(sender);\n            //@ sender.myIndex = i;\n            //@ leak sender.myIndex |-> i;\n            //@ close sender.pre();\n            //@ j.closeIt();\n            Thread t = new Thread(j);\n            t.start();\n            \n            sender.thread = t;\n            sender.joinable = j;\n            //@ close [1/3]senderWorker(unit, sender, unit);\n            //@ array_slice_deep_close_precise(1/3, senders, i, senderWorker, unit);\n            \n            //@ close foreach_i(i + 1, nil, senderWorkerIndex);\n            //@ close senderWorkerIndex(i, sender);\n            //@ close foreach_i(i, cons(sender, nil), senderWorkerIndex);\n            //@ foreach_i_append(0, elements, cons(sender, nil));\n        }\n        //@ close foreach_i(0, nil, receiverWorkerIndex);\n        for (int i = 0; i < Program.receiversCount; i++)\n            /*@\n            invariant\n                0 <= i &*& i <= receiversCount &*&\n                [_]Program_receiversCount(receiversCount) &*& [_]Program_receivers(r) &*&\n                [_]Program_channel(?c) &*& [_]c.Channel() &*& [_]atomic_space(client_inv(c)) &*& [_]Program_receiveMaxCount(rmc) &*& 0 < rmc &*&\n                [2/3]array_slice_deep(r, i, receiversCount, receiverWorkerNull, unit, _, _) &*&\n                [1/3]array_slice_deep(r, 0, i, receiverWorker, unit, ?elements, _) &*& foreach_i(0, elements, receiverWorkerIndex);\n            @*/\n        {\n            //@ array_slice_deep_split(r, i, i + 1);\n            //@ array_slice_deep_open_precise(2/3, r, i);\n            ReceiverThread receiver = receivers[i];\n            //@ close [1/3]receiverWorkerInv(unit, receiver, _);\n            //@ array_slice_deep_close_precise(1/3, r, i, receiverWorkerInv, unit);\n            JoinableRunnable j = ThreadingHelper.createJoinableRunnable(receiver);\n            //@ receiver.myIndex = i;\n            //@ leak receiver.myIndex |-> i;\n            //@ close receiver.pre();\n            //@ j.closeIt();\n            Thread t = new Thread(j);\n            t.start();\n            \n            receiver.thread = t;\n            receiver.joinable = j;\n            //@ close [1/3]receiverWorker(unit, receiver, unit);\n            //@ array_slice_deep_close_precise(1/3, receivers, i, receiverWorker, unit);\n            \n            //@ close foreach_i(i + 1, nil, receiverWorkerIndex);\n            //@ close receiverWorkerIndex(i, receiver);\n            //@ close foreach_i(i, cons(receiver, nil), receiverWorkerIndex);\n            //@ foreach_i_append(0, elements, cons(receiver, nil));\n        }\n        \n        int j;\n        for (j = 0; j < Program.sendersCount; j++)\n            /*@\n            invariant\n                0 <= j &*& j <= sendersCount &*&\n                [_]Program_sendersCount(sendersCount) &*& [_]Program_senders(s) &*&\n                [_]Program_channel(?c) &*& [_]c.Channel() &*& [_]atomic_space(client_inv(c)) &*&\n                Program_sendCount(j * smc) &*& [_]Program_sendMaxCount(smc) &*&\n                [1/3]array_slice_deep(s, j, sendersCount, senderWorker, unit, ?elements, _) &*& foreach_i(j, elements, senderWorkerIndex);\n            @*/\n        {\n            SenderThread sw = senders[j];\n            ThreadingHelper.join(sw.thread, sw.joinable);\n            //@ open sw.post();\n            //@ open foreach_i(j, elements, senderWorkerIndex);\n            //@ open senderWorkerIndex(j, sw);\n            //@ int jj = sw.myIndex;\n            //@ assert j == jj;\n            //@ array_slice_deep_open_precise(1/3, s, j);\n            //@ open senderWorkerInv(unit, sw, _);\n            //@ Program.sendCount += sw.senderSendCount;\n        }\n        //@ assert Program.sendCount == Program.sendMaxCount * j;\n        //@ assert j == sendersCount;\n        //@ assert Program.sendCount == Program.sendMaxCount * sendersCount;\n        for (j = 0; j < Program.receiversCount; j++)\n            /*@\n            invariant\n                0 <= j &*& j <= receiversCount &*&\n                [_]Program_receiversCount(receiversCount) &*& [_]Program_receivers(r) &*&\n                [_]Program_channel(?c) &*& [_]c.Channel() &*& [_]atomic_space(client_inv(c)) &*&\n                Program_receiveCount(j * rmc) &*& [_]Program_receiveMaxCount(rmc) &*&\n                [1/3]array_slice_deep(r, j, receiversCount, receiverWorker, unit, ?elements, _) &*& foreach_i(j, elements, receiverWorkerIndex);\n            @*/\n        {\n            ReceiverThread rw = receivers[j];\n            ThreadingHelper.join(rw.thread, rw.joinable);\n            //@ open rw.post();\n            //@ open foreach_i(j, elements, receiverWorkerIndex);\n            //@ open receiverWorkerIndex(j, rw);\n            //@ int jj = rw.myIndex;\n            //@ assert j == jj;\n            //@ array_slice_deep_open_precise(1/3, r, j);\n            //@ open receiverWorkerInv(unit, rw, _);\n            //@ Program.receiveCount += rw.receiverReceiveCount;\n        }\n        //@ assert Program.receiveCount == Program.receiveMaxCount * j;\n        //@ assert j == receiversCount;\n        //@ assert Program.receiveCount == Program.receiveMaxCount * receiversCount;\n    }\n",
        "methodStartingLine": 410,
        "methodEndingLine": 593,
        "jml": "//@ ensures Program_sendCount(smc * sendersCount) &*& Program_receiveCount(rmc * receiversCount);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/InterfaceLemmas.java",
        "code": "    public int get()\n        \n        \n    {\n        //@ open Counter(value);\n        return count;\n        //@ close [f]Counter(value);\n    }\n",
        "methodStartingLine": 45,
        "methodEndingLine": 52,
        "jml": "//@ requires [?f]Counter(?value);\n//@ ensures [f]Counter(value) &*& result == value;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/InterfaceLemmas.java",
        "code": "    public void set(int value)\n        \n        \n    {\n        //@ open Counter(_);\n        count = value;\n        //@ close Counter(value);\n    }\n",
        "methodStartingLine": 54,
        "methodEndingLine": 61,
        "jml": "//@ requires Counter(_) &*& 0 <= value;\n//@ ensures Counter(value);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/InterfaceLemmas.java",
        "code": "    public static void test(Counter c)\n        \n        \n    {\n        int value = c.get();\n        //@ c.inv();\n        assert 0 <= value;\n    }\n",
        "methodStartingLine": 65,
        "methodEndingLine": 72,
        "jml": "//@ requires [?f]c.Counter(?value_);\n//@ ensures [f]c.Counter(value_);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/InterfaceLemmas.java",
        "code": "    public static void main(String[] args)\n        \n        \n    {\n        Counter c = new MyCounter();\n        c.set(42);\n        test(c);\n    }\n",
        "methodStartingLine": 74,
        "methodEndingLine": 81,
        "jml": "//@ requires true;\n//@ ensures true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/Store.java",
        "code": "    public static void install(byte[] bArray, short bOffset, byte bLength)\n        \n        \n    {\n        //@ init_class();\n        Store store = new Store();\n        store.register();\n    }\n",
        "methodStartingLine": 20,
        "methodEndingLine": 27,
        "jml": "//@ requires class_init_token(Store.class) &*& system();\n//@ ensures true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/Store.java",
        "code": "    public void process(APDU apdu)\n        \n        \n    {\n        byte[] abuffer = apdu.getBuffer();\n        \n        if(selectingApplet())\n            return;\n        \n        if(abuffer[ISO7816.OFFSET_CLA] != Store_CLA)\n            ISOException.throwIt(ISO7816.SW_CLA_NOT_SUPPORTED);\n        \n        switch(abuffer[ISO7816.OFFSET_INS]) {\n            case GET: get(apdu); return;\n            case SET: set(apdu); return;\n            default: ISOException.throwIt(ISO7816.SW_INS_NOT_SUPPORTED);\n        }\n    }\n",
        "methodStartingLine": 37,
        "methodEndingLine": 54,
        "jml": "//@ requires [1/2]this.valid() &*& current_applet(this) &*& APDU(apdu, ?buffer) &*& array_slice(buffer, 0, buffer.length, _);\n//@ ensures [1/2]this.valid() &*& current_applet(this) &*& APDU(apdu, buffer) &*& array_slice(buffer, 0, buffer.length, _);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/Store.java",
        "code": "    private final void set(APDU apdu)\n        \n        \n    {\n        byte[] abuffer = apdu.getBuffer();\n        \n        //Data received > 5 bytes (length value array) -> exception\n        if((abuffer[ISO7816.OFFSET_LC] & 0xff) > 5)\n            ISOException.throwIt(ISO7816.SW_DATA_INVALID);\n\n        JCSystem.beginTransaction();\n        //@ open valid();\n        //Copy received data into value array\n        Util.arrayCopy(abuffer, (short)ISO7816.OFFSET_CDATA, value, (short)0, (short)(abuffer[ISO7816.OFFSET_LC] & 0xff));\n        //@ close valid();\n        JCSystem.commitTransaction();\n    }\n",
        "methodStartingLine": 56,
        "methodEndingLine": 72,
        "jml": "//@ requires APDU(apdu, ?buffer) &*& array_slice(buffer, 0, buffer.length, _) &*& current_applet(this) &*& [1/2]valid();\n//@ ensures APDU(apdu, buffer) &*& array_slice(buffer, 0, buffer.length, _) &*& current_applet(this) &*& [1/2]valid();"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/Store.java",
        "code": "    private void get(APDU apdu)\n    \n    \n    {\n        byte[] abuffer = apdu.getBuffer();\n        \n        apdu.setOutgoing();\n        apdu.setOutgoingLength(abuffer[ISO7816.OFFSET_LC]);\n        \n        //@ open [1/2]valid();\n        //Send data in value array\n        apdu.sendBytesLong(value, (short)0, (short)value.length);\n        //@ close [1/2]valid();\n    }\n",
        "methodStartingLine": 74,
        "methodEndingLine": 87,
        "jml": "//@ requires APDU(apdu, ?buffer) &*& array_slice(buffer, 0, buffer.length, _) &*& current_applet(this) &*& [1/2]valid();\n//@ ensures APDU(apdu, buffer) &*& array_slice(buffer, 0, buffer.length, _) &*& current_applet(this) &*& [1/2]valid();"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/AbstractClasses.java",
        "code": "  public void m()\n    \n    \n  {\n    //@ open valid();\n    x = 0;\n    //@ close valid();\n  }\n",
        "methodStartingLine": 14,
        "methodEndingLine": 21,
        "jml": "//@ requires valid();\n//@ ensures valid();"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/AbstractClasses.java",
        "code": "  public void test(A a) \n    \n    \n  {\n    a.m();\n  }\n",
        "methodStartingLine": 28,
        "methodEndingLine": 33,
        "jml": "//@ requires a != null &*& a.valid();\n//@ ensures true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "javacard_tutorial/transaction.java",
        "code": "    public static void install(byte[] array, short offset, byte length) \n        \n        \n    {\n        MyApplet applet = new MyApplet();\n        applet.register();\n    }\n",
        "methodStartingLine": 15,
        "methodEndingLine": 21,
        "jml": "//@ requires system();\n//@ ensures true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "javacard_tutorial/transaction.java",
        "code": "    public void process(APDU apdu)\n        \n        \n    {\n        //@ { int x = tokensLeft + tokensUsed; assert x == 10; }\n        if (tokensLeft == 0)\n            ISOException.throwIt(ISO7816.SW_CONDITIONS_NOT_SATISFIED);\n        JCSystem.beginTransaction();\n        //@ open valid();\n        tokensLeft--;\n        tokensUsed++;\n        JCSystem.commitTransaction();\n    }\n",
        "methodStartingLine": 23,
        "methodEndingLine": 35,
        "jml": "//@ requires current_applet(this) &*& [1/2]valid();\n//@ ensures current_applet(this) &*& [1/2]valid();"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/chat_raw/Session.java",
        "code": "    static void remove(List l, Object o) // Like l.remove(o), except uses identity comparison instead of .equals().\n        \n        \n    {\n        for (int i = 0; i < l.size(); i++)\n            //@ invariant l.List(es) &*& 0 <= i &*& i <= index_of(o, es);\n        {\n            if (l.get(i) == o) {\n                l.remove(i);\n                //@ remove_remove_nth(o, es);\n                //@ index_of_nth(i, es);\n                break;\n            }\n            //@ if (index_of(o, es) == i) { nth_index_of(o, es); }\n        }\n        //@ if (mem(o, es)) { mem_index_of(o, es); } else { mem_remove_eq(o, es); }\n    }\n",
        "methodStartingLine": 10,
        "methodEndingLine": 26,
        "jml": "//@ requires l.List(?es);\n//@ ensures l.List(remove(o, es));"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/chat_raw/Session.java",
        "code": "    public void run_with_nick(Room room, Semaphore roomLock, BufferedReader reader, Writer writer, String nick) throws InterruptedException /*@ ensures true; @*/, IOException /*@ ensures true; @*/\n        /*@\n        requires\n            roomLock != null &*& [_]roomLock.Semaphore(room_ctor(room)) &*& room != null &*& room(room) &*&\n            reader != null &*& reader.Reader() &*&\n            writer != null &*& writer.Writer();\n        @*/\n        \n    {\n        Member member = null;\n        String joinMessage = nick + \" has joined the room.\";\n        room.broadcast_message(joinMessage);\n        {\n            //@ open room(room);\n            member = new Member(nick, writer);\n            List list = room.members;\n            list.add(member);\n            //@ open foreach<Member>(?members, @member);\n            //@ close foreach(members, @member);\n            //@ foreach_member_not_contains(members, member);\n            //@ close foreach<Member>(nil, @member);\n            //@ close foreach<Member>(cons<Member>(member, nil), @member);\n            //@ foreach_append<Member>(members, cons<Member>(member, nil));\n            //@ close room(room);\n        }\n        //@ close room_ctor(room)();\n        //@ roomLock.makeHandle();\n        roomLock.release();\n        \n        {\n            String message = reader.readLine();\n            while (message != null)\n                //@ invariant reader.Reader() &*& [_]roomLock.Semaphore(room_ctor(room));\n            {\n                //@ roomLock.makeHandle();\n                roomLock.acquire();\n                //@ open room_ctor(room)();\n                room.broadcast_message(nick + \" says: \" + message);\n                //@ close room_ctor(room)();\n                roomLock.release();\n                message = reader.readLine();\n            }\n        }\n        \n        roomLock.acquire();\n        //@ open room_ctor(room)();\n        //@ open room(room);\n        {\n            List membersList = room.members;\n            //@ assert foreach<Member>(?members, @member);\n            //@ assume(mem<Member>(member, members)); // TODO: Eliminate using a ghost list.\n            ListUtil.remove(membersList, member);\n            //@ foreach_remove<Member>(member, members);\n        }\n        //@ close room(room);\n        {\n            room.broadcast_message(nick + \" left the room.\");\n        }\n        //@ close room_ctor(room)();\n        roomLock.release();\n        \n        //@ open member(member);\n    }\n",
        "methodStartingLine": 62,
        "methodEndingLine": 124,
        "jml": "//@ ensures [_]roomLock.Semaphore(room_ctor(room)) &*& reader.Reader() &*& writer.Writer();"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/chat_raw/Session.java",
        "code": "    public void run()\n        \n        \n    {\n        try {\n            this.runCore();\n        } catch (InterruptedException e) {\n            throw new RuntimeException(e);\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n    }\n",
        "methodStartingLine": 126,
        "methodEndingLine": 137,
        "jml": "//@ requires pre();\n//@ ensures post();"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/chat_raw/Session.java",
        "code": "    public void runCore() throws InterruptedException /*@ ensures true; @*/, IOException /*@ ensures true; @*/\n        \n        \n    {\n        //@ open pre();\n        //@ open session(this);\n        Room room = this.room;\n        Semaphore roomLock = this.room_lock;\n        Socket socket = this.socket;\n        InputStream in = socket.getInputStream();\n        InputStreamReader reader0 = new InputStreamReader(in);\n        BufferedReader reader = new BufferedReader(reader0);\n        OutputStream out = socket.getOutputStream();\n        OutputStreamWriter writer0 = new OutputStreamWriter(out);\n        BufferedWriter writer1 = new BufferedWriter(writer0);\n        Writer writer = writer1;\n        \n        writer.write(\"Welcome to the chat room.\\r\\n\");\n        writer.write(\"The following members are present: \");\n        \n        //@ roomLock.makeHandle();\n        roomLock.acquire();\n        //@ open room_ctor(room)();\n        //@ open room(room);\n        {\n            List membersList = room.members;\n            //@ assert foreach<Member>(?members, @member);\n            //@ membersList.listToIterable();\n            Iterator iter = membersList.iterator();\n            boolean hasNext = iter.hasNext();\n            while (hasNext)\n                /*@\n                invariant\n                    writer.Writer() &*&\n                    iter.Iterator((seq_of_list)(members), _, ?i) &*& Iterable_iterating(membersList.getClass())(membersList, members, 1, iter)\n                    &*& foreach(members, @member) &*& hasNext == (i < length(members)) &*& 0 <= i &*& i <= length(members);\n                @*/\n            {\n                Member member = (Member) iter.next();\n                //@ foreach_remove<Member>(member, members);\n                //@ open member(member);\n                writer.write(member.nick);\n                writer.write(\"  \");\n                //@ close member(member);\n                //@ foreach_unremove<Member>(member, members);\n                hasNext = iter.hasNext();\n            }\n            writer.write(\"\\r\\n\");\n            writer.flush();\n            //@ membersList.destroyIterator();\n            //@ membersList.iterableToList();\n        }\n        \n        //@ close room(room);\n        //@ close room_ctor(room)();\n        roomLock.release();\n\n        {\n            boolean done = false;\n            while (!done)\n                //@ invariant writer.Writer() &*& reader.Reader() &*& [_]roomLock.Semaphore(room_ctor(room));\n            {\n                writer.write(\"Please enter your nick: \\r\\n\");\n                writer.flush();\n                {\n                    String nick = reader.readLine();\n                    if (nick == null) {\n                        done = true;\n                    } else {\n                        //@ roomLock.makeHandle();\n                        roomLock.acquire();\n                        //@ open room_ctor(room)();\n                        {\n                            if (room.has_member(nick)) {\n                                //@ close room_ctor(room)();\n                                roomLock.release();\n                                writer.write(\"Error: This nick is already in use.\\r\\n\");\n                                writer.flush();\n                            } else {\n                                this.run_with_nick(room, roomLock, reader, writer, nick);\n                                done = true;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        \n        //@ reader.destroy();\n        //@ reader0.destroy();\n        //@ writer1.destroy();\n        //@ writer0.destroy();\n        socket.close();\n        //@ close post();\n    }\n",
        "methodStartingLine": 139,
        "methodEndingLine": 233,
        "jml": "//@ requires pre();\n//@ ensures post();"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/termination/Beep.java",
        "code": "    static void beep()\n        \n        \n        //@ terminates;\n    {\n        throw new RuntimeException();\n    }\n",
        "methodStartingLine": 5,
        "methodEndingLine": 11,
        "jml": "//@ requires IO(?n);\n//@ ensures 0 < n &*& IO(n - 1);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/termination/Beep.java",
        "code": "    static void beepForever()\n        \n        \n        //@ terminates;\n    {\n        OS.beep();\n        //@ call_perm_rec_weaken(2, n - 1);\n        //@ call_perm_rec_elim(1);\n        //@ consume_call_perm_for(Beeper.class);\n        beepForever();\n    }\n",
        "methodStartingLine": 17,
        "methodEndingLine": 27,
        "jml": "//@ requires IO(?n) &*& call_perm_rec(currentThread, {Beeper.class}, int_lt, n);\n//@ ensures false;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/termination/Beep.java",
        "code": "    static void main()\n        \n        \n        //@ terminates;\n    {\n        //@ produce_call_below_perm_();\n        //@ is_wf_int_lt();\n        //@ call_below_perm__elim_rec(1, {Beeper.class}, int_lt, n);\n        Beeper.beepForever();\n    }\n",
        "methodStartingLine": 33,
        "methodEndingLine": 42,
        "jml": "//@ requires IO(?n);\n//@ ensures false;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Iterator/Program.java",
        "code": "    public static void main(String[] args)\n        \n        \n    {\n        Object o = new Object();\n        Iterator i = new SingletonIterator(o);\n        boolean before = i.hasNext();\n        assert before;\n\n        Object last = IteratorUtil.getLast(i);\n        assert last == o;\n      \n        boolean after = i.hasNext();\n        assert !after;\n    }\n",
        "methodStartingLine": 9,
        "methodEndingLine": 23,
        "jml": "//@ requires true;\n//@ ensures true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/chat_raw/Program.java",
        "code": "    public static void main(String[] args) throws IOException /*@ ensures true; @*/\n        \n        \n    {\n        Room room = new Room();\n        //@ close room_ctor(room)();\n        //@ one_time(room_ctor(room));\n        Semaphore roomLock = new Semaphore(1);\n        //@ roomLock.leakHandle();\n        ServerSocket serverSocket = new ServerSocket(12345);\n\n        while (true)\n            //@ invariant [_]roomLock.Semaphore(room_ctor(room)) &*& serverSocket.ServerSocket();\n        {\n            Socket socket = serverSocket.accept();\n            Session session = new Session(room, roomLock, socket);\n            //@ close session.pre();\n            Thread t = new Thread(session);\n            t.start();\n        }\n    }\n",
        "methodStartingLine": 9,
        "methodEndingLine": 29,
        "jml": "//@ requires true;\n//@ ensures true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/DivisionOverflow.java",
        "code": "  int division_test_fail_overflow(int nom, int denom)\n    \n    \n  {\n    int tmp = nom / denom; //~ should_fail\n    return tmp; //~allow_dead_code\n  }\n",
        "methodStartingLine": 2,
        "methodEndingLine": 8,
        "jml": "//@ requires denom != 0;\n//@ ensures result == nom / denom;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/verifythis2016/matmul.java",
        "code": "    static void matrixMultiply(int[][] A, int[][] B, int[][] C)\n    \n    \n    {\n        //@ open matrix(A, _, _, _);\n        //@ open matrix(C, _, _, _);\n        int n = A.length;\n        //@ assert C[..] |-> ?CrowArrays;\n        //@ assert [_]A[..] |-> ?ArowArrays;\n        \n        for (int i = 0; ; )\n            /*@\n            requires\n                C[i..] |-> drop(i, CrowArrays) &*& vectors(C, drop(i, CrowArrays), N, _) &*& [_]matrix(B, N, N, Brows) &*&\n                [_]A[i..] |-> drop(i, ArowArrays) &*& [_]vectors(A, drop(i, ArowArrays), N, ?Arows1) &*& length(CrowArrays) == length(ArowArrays);\n            @*/\n            //@ ensures C[old_i..] |-> drop(old_i, CrowArrays) &*& vectors(C, drop(old_i, CrowArrays), N, matrix_multiply(Arows1, Brows));\n        {\n            if (i >= n) {\n                //@ open vectors(C, nil, N, _);\n                //@ open vectors(A, nil, N, _);\n                break;\n            }\n            //@ drop_n_plus_one(i, CrowArrays);\n            //@ drop_n_plus_one(i, ArowArrays);\n            int[] ArowArray = A[i];\n            int[] CrowArray = C[i];\n            //@ open [_]vectors(A, drop(i, ArowArrays), _, _);\n            //@ assert [_]vectors(A, drop(i + 1, ArowArrays), N, tail(Arows1));\n            //@ assert [_]ArowArray[..] |-> ?Arow;\n            //@ open vectors(C, drop(i, CrowArrays), _, _);\n            //@ assert CrowArray[..] |-> ?Crow;\n            //@ assert len(Arow) == len(Crow);\n            for (int j = 0; ; )\n                //@ requires [_]ArowArray[..] |-> Arow &*& [_]matrix(B, N, N, Brows) &*& CrowArray[j..] |-> ?xs &*& 0 <= j;\n                //@ ensures CrowArray[old_j..] |-> matrix_multiply_row(len(xs), Arow, old_j, Brows);\n            {\n                //@ switch (xs) { case nil: case cons(h, t): }\n                if (j >= n) {\n                    break;\n                }\n                CrowArray[j] = 0;\n                //@ open [_]matrix(B, _, _, _);\n                //@ assert [_]B[..] |-> ?BrowArrays;\n                for (int k = 0; k < n; k++)\n                    //@ requires CrowArray[j] |-> ?x &*& [_]ArowArray[k..] |-> drop(k, Arow) &*& [_]B[k..] |-> drop(k, BrowArrays) &*& [_]vectors(B, drop(k, BrowArrays), N, ?Brows1) &*& 0 <= k;\n                    //@ ensures CrowArray[j] |-> x + matrix_multiply_elem(drop(old_k, Arow), j, Brows1);\n                {\n                    //@ drop_n_plus_one(k, Arow);\n                    //@ drop_n_plus_one(k, BrowArrays);\n                    //@ open [_]vectors(B, drop(k, BrowArrays), _, _);\n                    int[] BrowArray = B[k];\n                    //@ open [_]vector(BrowArray, _, _);\n                    //@ assert [_]BrowArray[..] |-> ?Brow &*& BrowArray.length == N;\n                    CrowArray[j] += ArowArray[k] * BrowArray[j];\n                }\n                //@ assert CrowArray[j] |-> matrix_multiply_elem(Arow, j, Brows);\n                j++;\n                //@ recursive_call();\n                \n            }\n            i++;\n            //@ recursive_call();\n            \n            //@ assert [_]vectors(A, drop(old_i + 1, ArowArrays), N, tail(Arows1));\n            //@ assert vectors(C, drop(old_i + 1, CrowArrays), N, matrix_multiply(tail(Arows1), Brows));\n            //@ assert CrowArray[..] |-> matrix_multiply_row(len(head(Arows1)), head(Arows1), 0, Brows);\n            //@ close vectors(C, drop(old_i, CrowArrays), N, matrix_multiply(Arows1, Brows));\n            \n        }\n        //@ close matrix(C, N, N, _);\n    }\n",
        "methodStartingLine": 60,
        "methodEndingLine": 131,
        "jml": "//@ requires [_]matrix(A, ?N, N, ?Arows) &*& [_]matrix(B, N, N, ?Brows) &*& matrix(C, N, N, _);\n//@ ensures matrix(C, N, N, matrix_multiply(Arows, Brows));"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/termination/Stack.java",
        "code": "    static void pushIter(Stack stack, Object value)\n        \n        \n        //@ terminates;\n    {\n        //@ int scope = call_perm_scope_of(currentThread);\n        Node head;\n        {\n            /*@\n            predicate pre() = true;\n            predicate post(Object result) = [_]stack.readers |-> ?readers &*& GhostBagHandle(readers, result);\n            lemma void get()\n                requires Stack_spaceInv(scope, stack)(?o) &*& pre();\n                ensures Stack_spaceInv(scope, stack)(o) &*& post(o);\n            {\n                open Stack_spaceInv(scope, stack)(o);\n                open pre();\n                \n                GhostBag_add(stack.readers, o);\n                \n                close Stack_spaceInv(scope, stack)(o);\n                close post(o);\n            }\n            @*/\n            //@ produce_lemma_function_pointer_chunk(get) : AtomicReference_get(Stack_spaceInv(scope, stack), pre, post)() { call(); };\n            //@ close pre();\n            head = (Node)stack.head.get();\n            //@ open post(head);\n        }\n        Node n = new Node(value, head);\n        boolean casResult;\n        //@ int pushThread = currentThread;\n        {\n            /*@\n            predicate pre() = [_]stack.readers |-> ?readers &*& GhostBagHandle(readers, head) &*& call_perms_omega(pushThread, {StackHelper.class}) &*& n.value |-> value &*& [_]n.next |-> head;\n            predicate post(boolean result) = result ? true : call_perm(pushThread, {StackHelper.class}) &*& call_perms_omega(pushThread, {StackHelper.class});\n            lemma void compareAndSet()\n                requires Stack_spaceInv(scope, stack)(?o) &*& pre();\n                ensures Stack_spaceInv(scope, stack)(o != head ? o : n) &*& post(o == head);\n            {\n                open Stack_spaceInv(scope, stack)(o);\n                open pre();\n                \n                assert GhostBag(_, ?oldRs);\n                GhostBag_remove(stack.readers, head);\n                assert GhostBag(_, ?newRs);\n                \n                if (o == head) {\n                    open call_perms_omega(_, _);\n                    call_perm_rec_weaken(1, pair(0, count_neq<Object>(n, newRs)));\n                    close call_perms(pushThread, count_neq<Object>(n, newRs), {StackHelper.class});\n                    close nodes(n);\n                } else {\n                    count_neq_remove(o, head, oldRs);\n                    count_neq_nonnegative(o, newRs);\n                    assert count_neq(o, newRs) == count_neq(o, oldRs) - 1;\n                    open call_perms(?thread, count_neq(o, oldRs), {StackHelper.class});\n                    call_perm_rec_weaken(2, pair(0, count_neq(o, newRs)));\n                    close call_perms(thread, count_neq(o, newRs), {StackHelper.class});\n                    call_perm_rec_elim(1);\n                    call_perm_transfer(pushThread);\n                }\n                \n                close post(o == head);\n                close Stack_spaceInv(scope, stack)(o != head ? o : n);\n            }\n            @*/\n            //@ close pre();\n            //@ produce_lemma_function_pointer_chunk(compareAndSet) : AtomicReference_compareAndSet(head, n, Stack_spaceInv(scope, stack), pre, post)() { call(); };\n            casResult = stack.head.compareAndSet(head, n);\n            //@ open post(casResult);\n        }\n        if (!casResult) {\n            //@ consume_call_perm_for(StackHelper.class);\n            pushIter(stack, value);\n        }\n    }\n",
        "methodStartingLine": 20,
        "methodEndingLine": 96,
        "jml": "//@ requires [_]stack.valid(call_perm_scope_of(currentThread)) &*& call_perms_omega(currentThread, {StackHelper.class});\n//@ ensures true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/termination/Stack.java",
        "code": "    static Object popIter(Stack stack)\n        \n        \n        //@ terminates;\n    {\n        //@ int scope = call_perm_scope_of(currentThread);\n        Node head;\n        {\n            /*@\n            predicate pre() = true;\n            predicate post(Object result) = [_]stack.readers |-> ?readers &*& GhostBagHandle(readers, result) &*& result == null ? true : [_]Node_next(^result, _);\n            lemma void get()\n                requires Stack_spaceInv(scope, stack)(?o) &*& pre();\n                ensures Stack_spaceInv(scope, stack)(o) &*& post(o);\n            {\n                open Stack_spaceInv(scope, stack)(o);\n                open pre();\n                \n                GhostBag_add(stack.readers, o);\n                assert nodes(?h);\n                open nodes(h);\n                close nodes(h);\n                \n                close Stack_spaceInv(scope, stack)(o);\n                close post(o);\n            }\n            @*/\n            //@ produce_lemma_function_pointer_chunk(get) : AtomicReference_get(Stack_spaceInv(scope, stack), pre, post)() { call(); };\n            //@ close pre();\n            head = (Node)stack.head.get();\n            //@ open post(head);\n        }\n        if (head == null)\n            return null;\n        Node next = head.next;\n        boolean casResult;\n        //@ int popThread = currentThread;\n        {\n            /*@\n            predicate pre() = [_]stack.readers |-> ?readers &*& GhostBagHandle(readers, head) &*& call_perms_omega(popThread, {StackHelper.class}) &*& [_]head.next |-> next;\n            predicate post(boolean result) = result ? head.value |-> _ : call_perm(popThread, {StackHelper.class}) &*& call_perms_omega(popThread, {StackHelper.class});\n            lemma void compareAndSet()\n                requires Stack_spaceInv(scope, stack)(?o) &*& pre();\n                ensures Stack_spaceInv(scope, stack)(o != head ? o : next) &*& post(o == head);\n            {\n                open Stack_spaceInv(scope, stack)(o);\n                open pre();\n                \n                assert GhostBag(_, ?oldRs);\n                GhostBag_remove(stack.readers, head);\n                assert GhostBag(_, ?newRs);\n                \n                if (o == head) {\n                    open call_perms_omega(_, _);\n                    call_perm_rec_weaken(1, pair(0, count_neq<Object>(next, newRs)));\n                    close call_perms(popThread, count_neq<Object>(next, newRs), {StackHelper.class});\n                    open nodes(head);\n                } else {\n                    count_neq_remove(o, head, oldRs);\n                    count_neq_nonnegative(o, newRs);\n                    assert count_neq(o, newRs) == count_neq(o, oldRs) - 1;\n                    open call_perms(?thread, count_neq(o, oldRs), {StackHelper.class});\n                    call_perm_rec_weaken(2, pair(0, count_neq(o, newRs)));\n                    close call_perms(thread, count_neq(o, newRs), {StackHelper.class});\n                    call_perm_rec_elim(1);\n                    call_perm_transfer(popThread);\n                }\n                \n                close post(o == head);\n                close Stack_spaceInv(scope, stack)(o != head ? o : next);\n            }\n            @*/\n            //@ close pre();\n            //@ produce_lemma_function_pointer_chunk(compareAndSet) : AtomicReference_compareAndSet(head, next, Stack_spaceInv(scope, stack), pre, post)() { call(); };\n            casResult = stack.head.compareAndSet(head, head.next);\n            //@ open post(casResult);\n        }\n        if (!casResult) {\n            //@ consume_call_perm_for(StackHelper.class);\n            return popIter(stack);\n        }\n        return head.value;\n    }\n",
        "methodStartingLine": 98,
        "methodEndingLine": 180,
        "jml": "//@ requires [_]stack.valid(call_perm_scope_of(currentThread)) &*& call_perms_omega(currentThread, {StackHelper.class});\n//@ ensures true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/termination/Stack.java",
        "code": "    void push(Object value)\n        \n        \n        //@ terminates;\n    {\n        //@ produce_call_below_perm_();\n        //@ is_wf_int_lt();\n        //@ is_wf_pair_lt(int_lt, int_lt);\n        //@ call_below_perm__elim_rec(1, {StackHelper.class}, (pair_lt)(int_lt, int_lt), pair(1, 0));\n        //@ close call_perms_omega(currentThread, {StackHelper.class});\n        StackHelper.pushIter(this, value);\n    }\n",
        "methodStartingLine": 259,
        "methodEndingLine": 270,
        "jml": "//@ requires [_]valid(call_perm_scope_of(currentThread));\n//@ ensures true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/termination/Stack.java",
        "code": "    Object pop()\n        \n        \n        //@ terminates;\n    {\n        //@ produce_call_below_perm_();\n        //@ is_wf_int_lt();\n        //@ is_wf_pair_lt(int_lt, int_lt);\n        //@ call_below_perm__elim_rec(1, {StackHelper.class}, (pair_lt)(int_lt, int_lt), pair(1, 0));\n        //@ close call_perms_omega(currentThread, {StackHelper.class});\n        return StackHelper.popIter(this);\n    }\n",
        "methodStartingLine": 272,
        "methodEndingLine": 283,
        "jml": "//@ requires [_]valid(call_perm_scope_of(currentThread));\n//@ ensures true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/termination/Stack.java",
        "code": "    static void push(Stack stack)\n        \n        \n        //@ terminates;\n    {\n        for (int i = 0; i < 10; i++)\n            //@ invariant [_]stack.valid(call_perm_scope_of(currentThread));\n            //@ decreases 10 - i;\n        {\n            stack.push((Object)Integer.valueOf(i));\n        }\n    }\n",
        "methodStartingLine": 289,
        "methodEndingLine": 300,
        "jml": "//@ requires [_]stack.valid(call_perm_scope_of(currentThread));\n//@ ensures true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/termination/Stack.java",
        "code": "    void run()\n        \n        \n        //@ terminates;\n    {\n        push(stack);\n        //@ close post();\n    }\n",
        "methodStartingLine": 317,
        "methodEndingLine": 324,
        "jml": "//@ requires obs(cons(?thisThread, ?O)) &*& pre(call_perm_scope_of(currentThread), wait_level_of(thisThread), O);\n//@ ensures obs({thisThread}) &*& post();"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/termination/Stack.java",
        "code": "    static void pop(Stack stack)\n        \n        \n        //@ terminates;\n    {\n        for (int i = 0; i < 10; i++)\n            //@ invariant [_]stack.valid(call_perm_scope_of(currentThread));\n            //@ decreases 10 - i;\n        {\n            stack.pop();\n        }\n    }\n",
        "methodStartingLine": 330,
        "methodEndingLine": 341,
        "jml": "//@ requires [_]stack.valid(call_perm_scope_of(currentThread));\n//@ ensures true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/termination/Stack.java",
        "code": "    void run()\n        \n        \n        //@ terminates;\n    {\n        pop(stack);\n        //@ close post();\n    }\n",
        "methodStartingLine": 358,
        "methodEndingLine": 365,
        "jml": "//@ requires obs(cons(?thisThread, ?O)) &*& pre(call_perm_scope_of(currentThread), wait_level_of(thisThread), O);\n//@ ensures obs({thisThread}) &*& post();"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/termination/Stack.java",
        "code": "    static void main()\n        \n        \n        //@ terminates;\n    {\n        Stack stack = new Stack();\n        \n        //@ produce_call_below_perm_();\n        //@ call_below_perm__elim(2, {Pusher.class, Popper.class});\n        \n        //@ close exists(nil);\n        //@ call_perm_weaken(1, {Pusher.class});\n        Thread pusherThread = ThreadUtil.forkJoinable(new Pusher(stack));\n        Pusher.push(stack);\n        pusherThread.join();\n        \n        //@ close exists(nil);\n        //@ call_perm_weaken(1, {Popper.class});\n        Thread popperThread = ThreadUtil.forkJoinable(new Popper(stack));\n        Popper.pop(stack);\n        popperThread.join();\n    }\n",
        "methodStartingLine": 371,
        "methodEndingLine": 392,
        "jml": "//@ requires obs(nil); // For clarity, unlike examples SqrtCached and ThreadPool, this example does not apply the modular obligations specification approach.\n//@ ensures obs(nil);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/FieldInitializers.java",
        "code": "  static int id(int x)\n    \n    \n  {\n    return x;\n  }\n",
        "methodStartingLine": 2,
        "methodEndingLine": 7,
        "jml": "//@ requires true;\n//@ ensures result == x;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/FieldInitializers.java",
        "code": "  int getA() \n    \n    \n  {\n    return this.a;\n  }\n",
        "methodStartingLine": 20,
        "methodEndingLine": 25,
        "jml": "//@ requires this.a |-> ?v;\n//@ ensures this.a |-> v &*& result == v;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/termination/Dining.java",
        "code": "    void run()\n        \n        \n        //@ terminates;\n    {\n        first.lock.acquire();\n        //@ Lock firstLock = first.lock;\n        //@ open Counter_inv(first)();\n        first.n++;\n        //@ wait_level_lt_trans(wait_level_of(second.lock), wait_level_of(first.lock), wait_level_of(thisThread));\n        second.lock.acquire();\n        //@ open Counter_inv(second)();\n        second.n++;\n        //@ close Counter_inv(second)();\n        second.lock.release();\n        //@ close Counter_inv(first)();\n        first.lock.release();\n    }\n",
        "methodStartingLine": 54,
        "methodEndingLine": 71,
        "jml": "//@ requires obs(cons(?thisThread, ?O)) &*& pre(call_perm_scope_of(currentThread), wait_level_of(thisThread), O);\n//@ ensures obs({thisThread}) &*& post();"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/termination/Dining.java",
        "code": "    static void main()\n        \n        \n        //@ terminates;\n    {\n        //@ produce_call_below_perm_();\n        //@ call_below_perm__elim(3, {Philosopher.class});\n        \n        //@ close exists(1r);\n        Counter c1 = new Counter();\n        //@ close exists(2r);\n        Counter c2 = new Counter();\n        //@ close exists(3r);\n        Counter c3 = new Counter();\n\n        //@ close exists(nil);\n        Philosopher philo1 = new Philosopher(c2, c1);\n        Thread thread1 = ThreadUtil.forkJoinable(philo1);\n        //@ close exists(nil);\n        Philosopher philo2 = new Philosopher(c3, c2);\n        Thread thread2 = ThreadUtil.forkJoinable(philo2);\n        //@ close exists(nil);\n        Philosopher philo3 = new Philosopher(c3, c1);\n        Thread thread3 = ThreadUtil.forkJoinable(philo3);\n\n        thread1.join();\n        thread2.join();\n        thread3.join();\n        \n        //@ open philo1.post();\n        //@ open philo2.post();\n        //@ open philo3.post();\n        \n        //@ c1.lock.destroy();\n        //@ c2.lock.destroy();\n        //@ c3.lock.destroy();\n        int total = c1.n + c2.n + c3.n;\n    }\n",
        "methodStartingLine": 75,
        "methodEndingLine": 112,
        "jml": "//@ requires obs(nil);\n//@ ensures obs(nil);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/JavaCard.java",
        "code": "    public static void install(byte[] array, short offset, byte length)\n        /*@\n        requires\n            class_init_token(MyApplet.class) &*&\n            array_slice(array, offset, offset + length, ?values) &*&\n            length_value_record(values, 0, ?oInfo) &*&\n            length_value_record(values, oInfo, ?oAppData) &*&\n            element(values, oAppData, _) &*&\n            element(values, oAppData + 1, ?bufferSize) &*&\n            20 <= bufferSize &*&\n            offset + length <= 32767 &*&\n            system();\n        @*/\n        \n    {\n        //@ init_class(MyApplet.class);\n        \n        // make all my allocations here, so I do not run\n        // out of memory later\n        MyApplet theApplet = new MyApplet();\n        \n        // check incoming parameter data\n        //@ open length_value_record(values, 0, oInfo);\n        byte iLen = array[offset]; // aid length\n        offset = (short)(offset + iLen + 1);\n        //@ open length_value_record(values, oInfo, oAppData);\n        byte cLen = array[offset]; // info length\n        offset = (short)(offset + cLen + 1);\n        //@ open element(values, oAppData, _);\n        byte aLen = array[offset]; // applet data length\n        //@ open element(values, oAppData + 1, _);\n        // read first applet data byte\n        byte bLen = array[(short)(offset + 1)];\n        //@ assert 20 <= bLen;\n        if (bLen != 0) {\n            someByteArray = new byte[bLen];\n            //@ close theApplet.valid();\n            theApplet.register();\n            return;\n        } else\n            ISOException.throwIt(ISO7816.SW_FUNC_NOT_SUPPORTED); //~allow_dead_code\n    }\n",
        "methodStartingLine": 32,
        "methodEndingLine": 73,
        "jml": "//@ ensures true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/JavaCard.java",
        "code": "    public boolean select()\n        \n        \n    {\n        // selection initialization\n        JCSystem.beginTransaction();\n        //@ open valid();\n        someByteArray[17] = 42; // set selection state\n        //@ close valid();\n        JCSystem.commitTransaction();\n        return true;\n    }\n",
        "methodStartingLine": 75,
        "methodEndingLine": 86,
        "jml": "//@ requires current_applet(this) &*& [1/2]this.valid();\n//@ ensures current_applet(this) &*& [1/2]this.valid();"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/JavaCard.java",
        "code": "    public void process(APDU apdu)\n        \n        \n    {\n        byte[] buffer = apdu.getBuffer();\n        // .. process the incoming data and reply\n        if (buffer[ISO7816.OFFSET_CLA] == (byte)0) {\n            switch (buffer[ISO7816.OFFSET_INS]) {\n                case ISO7816.INS_SELECT:\n                    // ...\n                    // send response data to select command\n                    short length = apdu.setOutgoing();\n                    byte[] replyData = new byte[10];\n                    // assume data containing response bytes in replyData[] array.\n                    if (length < 20) ISOException.throwIt(ISO7816.SW_WRONG_LENGTH);\n                    apdu.setOutgoingLength((short)replyData.length);\n                    apdu.sendBytesLong(replyData, (short)0, (short)replyData.length);\n                    break;\n                //case ...\n            }\n        }\n    }\n",
        "methodStartingLine": 88,
        "methodEndingLine": 109,
        "jml": "//@ requires current_applet(this) &*& [1/2]this.valid() &*& APDU(apdu, ?buffer0) &*& array_slice(buffer0, 0, buffer0.length, _);\n//@ ensures current_applet(this) &*& [1/2]this.valid() &*& APDU(apdu, buffer0) &*& array_slice(buffer0, 0, buffer0.length, _);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/termination/SumFunc.java",
        "code": "    static int apply(Func f, int x)\n        \n        \n        //@ terminates;\n    {\n        //@ open Func(_, _);\n        //@ assert [_]f.valid(?level0);\n        //@ call_perm_weaken(2, level0);\n        //@ f.getClass_le_level();\n        //@ consume_call_perm_for(f.getClass());\n        return f.apply(x);\n    }\n",
        "methodStartingLine": 17,
        "methodEndingLine": 28,
        "jml": "//@ requires [_]Func(f, ?level) &*& [2]call_perm(currentThread, level);\n//@ ensures true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/termination/SumFunc.java",
        "code": "    static int deriv(Func f, int x)\n        \n        \n        //@ terminates;\n    {\n        //@ call_perm_weaken_and_dup(4);\n        return apply(f, x + 1) - apply(f, x);\n    }\n",
        "methodStartingLine": 30,
        "methodEndingLine": 37,
        "jml": "//@ requires [_]Func(f, ?level) &*& call_perm(currentThread, cons(Util.class, level));\n//@ ensures true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/termination/SumFunc.java",
        "code": "    static int sum(Func f1, Func f2, int x)\n        \n        \n        //@ terminates;\n    {\n        //@ call_perm_weaken_and_dup(4);\n        //@ call_perm_weaken(2, f1Level);\n        int y1 = apply(f1, x);\n        //@ call_perm_weaken(2, f2Level);\n        int y2 = apply(f2, x);\n        return y1 + y2;\n    }\n",
        "methodStartingLine": 39,
        "methodEndingLine": 50,
        "jml": "//@ requires [_]Func(f1, ?f1Level) &*& [_]Func(f2, ?f2Level) &*& call_perm(currentThread, cons(Util.class, level_max(f1Level, f2Level)));\n//@ ensures true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/termination/SumFunc.java",
        "code": "    static int double_(Func f, int x)\n        \n        \n        //@ terminates;\n    {\n        return sum(f, f, x);\n    }\n",
        "methodStartingLine": 52,
        "methodEndingLine": 58,
        "jml": "//@ requires [_]Func(f, ?fLevel) &*& call_perm(currentThread, cons(Util.class, fLevel));\n//@ ensures true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/termination/SumFunc.java",
        "code": "    public int apply(int x)\n        \n        \n        //@ terminates;\n    {\n        return 0;\n    }\n",
        "methodStartingLine": 78,
        "methodEndingLine": 84,
        "jml": "//@ requires [_]valid(?level) &*& call_perm(currentThread, level);\n//@ ensures true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/termination/SumFunc.java",
        "code": "    public static Func create()\n        \n        \n        //@ terminates;\n    {\n        Func f = new ZeroFunc();\n        //@ close Func(f, {ZeroFunc.class});\n        return f;\n    }\n",
        "methodStartingLine": 85,
        "methodEndingLine": 93,
        "jml": "//@ requires true;\n//@ ensures Func(result, {ZeroFunc.class});"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/termination/SumFunc.java",
        "code": "    public int apply(int x)\n        \n        \n        //@ terminates;\n    {\n        //@ open valid(_);\n        //@ call_perm_weaken_and_dup(2);\n        return Util.apply(f, x) + 1;\n    }\n",
        "methodStartingLine": 116,
        "methodEndingLine": 124,
        "jml": "//@ requires [_]valid(?level) &*& call_perm(currentThread, level);\n//@ ensures true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/termination/SumFunc.java",
        "code": "    public static Func create(Func f)\n        \n        \n        //@ terminates;\n    {\n        return new PlusOneFunc(f);\n    }\n",
        "methodStartingLine": 125,
        "methodEndingLine": 131,
        "jml": "//@ requires [_]Func(f, ?fLevel) &*& call_perm(currentThread, cons(PlusOneFunc.class, fLevel));\n//@ ensures Func(result, cons(PlusOneFunc.class, fLevel));"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/termination/SumFunc.java",
        "code": "    public int apply(int x)\n        \n        \n        //@ terminates;\n    {\n        //@ open [_]valid(_);\n        //@ level_cons_mono_l(Util.class, SumFunc.class, level_max(f1Level, f2Level));\n        //@ call_perm_weaken(1, cons(Util.class, level_max(f1Level, f2Level)));\n        return Util.sum(f1, f2, x);\n    }\n",
        "methodStartingLine": 167,
        "methodEndingLine": 176,
        "jml": "//@ requires [_]valid(?level) &*& call_perm(currentThread, level);\n//@ ensures true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/termination/SumFunc.java",
        "code": "    public static Func create(Func f1, Func f2)\n        \n        \n        //@ terminates;\n    {\n        return new SumFunc(f1, f2);\n    }\n",
        "methodStartingLine": 178,
        "methodEndingLine": 184,
        "jml": "//@ requires [_]Func(f1, ?f1Level) &*& [_]Func(f2, ?f2Level) &*& call_perm(currentThread, cons(SumFunc.class, level_max(f1Level, f2Level)));\n//@ ensures Func(result, cons(SumFunc.class, level_max(f1Level, f2Level)));"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/termination/SumFunc.java",
        "code": "    public static void main(String[] args)\n        \n        \n        //@ terminates;\n    {\n        //@ produce_call_below_perm_();\n        //@ list<Class> level = {Util.class, SumFunc.class, PlusOneFunc.class, ZeroFunc.class};\n        //@ call_below_perm__elim(3, level);\n        Func f1 = ZeroFunc.create();\n        //@ leak Func(f1, _);\n        //@ call_perm_weaken(1, {PlusOneFunc.class, ZeroFunc.class});\n        Func f2 = PlusOneFunc.create(f1);\n        //@ level_max_def({ZeroFunc.class}, {PlusOneFunc.class, ZeroFunc.class});\n        //@ call_perm_weaken(1, cons(SumFunc.class, level_max({ZeroFunc.class}, {PlusOneFunc.class, ZeroFunc.class})));\n        Func f3 = SumFunc.create(f1, f2);\n        Util.deriv(f3, 0);\n    }\n",
        "methodStartingLine": 188,
        "methodEndingLine": 204,
        "jml": "//@ requires true;\n//@ ensures true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/channels_raw/client.java",
        "code": "    public void run()\n        \n        \n    {\n        String m = \"Hello\";\n        int i;\n        for(i = 0; i < Program.sendMaxCount; i++)\n            /*@\n            invariant\n                [_]Program_channel(?c) &*& [_]c.Channel() &*& [_]atomic_space(client_inv(c)) &*&\n                [_]Program_sendMaxCount(?smc) &*& i <= smc &*&\n                [_]Program_senders(?s) &*& [_]this.myIndex |-> ?myIndex &*&\n                [_]Program_sendersCount(?sc) &*& myIndex < sc &*&\n                [1/3]array_slice_deep(s, myIndex, myIndex + 1, senderWorkerInv, unit, cons(this, nil), cons(i, nil));\n            @*/\n        {\n            for (;;)\n                /*@\n                invariant\n                    [_]Program_channel(c) &*& [_]c.Channel() &*& [_]atomic_space(client_inv(c)) &*&\n                    [_]Program_sendMaxCount(smc) &*& i < smc &*&\n                    [_]Program_senders(s) &*& [_]this.myIndex |-> myIndex &*&\n                    [_]Program_sendersCount(sc) &*& myIndex < sc &*&\n                    [1/3]array_slice_deep(s, myIndex, myIndex + 1, senderWorkerInv, unit, cons(this, nil), cons(i, nil));\n                @*/\n            {\n                \n                /*@\n                predicate P() =\n                    [_]Program_sendMaxCount(smc) &*&\n                    [_]Program_senders(s) &*& [_]this.myIndex |-> myIndex &*&\n                    [_]Program_sendersCount(sc) &*& myIndex < sc &*&\n                    [1/3]array_slice_deep(s, myIndex, myIndex + 1, senderWorkerInv, unit, cons(this, nil), cons(i, nil));\n                predicate Q(boolean r) =\n                    [_]Program_sendMaxCount(smc) &*&\n                    [_]Program_senders(s) &*& [_]this.myIndex |-> myIndex &*&\n                    [_]Program_sendersCount(sc) &*& myIndex < sc &*&\n                    [1/3]array_slice_deep(s, myIndex, myIndex + 1, senderWorkerInv, unit, cons(this, nil), (r ? cons(i+1, nil) : cons(i, nil)));\n                \n                lemma void my_send(boolean r)\n                    requires i < smc &*& P() &*& my_unsep_pred(c)(?items, ?qms);\n                    ensures Q(r) &*& my_unsep_pred(c)(r ? append(items, cons(m, nil)) : items, qms);\n                {\n                    open P();\n                    open my_unsep_pred(c)(items, qms);\n                    SenderThread[] senders = Program.senders;\n                    int sendersCount = Program.sendersCount;\n                    int k = myIndex;\n                    assert [1/3]array_slice_deep(senders, 0, sendersCount, senderWorkerInv, unit, _, ?oldSenderCounts);\n                    array_slice_deep_split(Program.senders, 0, myIndex);\n                    array_slice_deep_split_precise(1/3, Program.senders, myIndex, Program.sendersCount, senderWorkerInv, unit, myIndex + 1);\n                    array_slice_deep_open_precise(2/3, Program.senders, myIndex);\n                    int myOldSendCount = senderSendCount;\n                    if (r) {\n                        senderSendCount++;\n                    }\n                    int myNewSendCount = senderSendCount;\n                    array_slice_deep_close(Program.senders, myIndex, senderWorkerInv, unit);\n                    array_slice_deep_join_precise(1/3, Program.senders, myIndex, myIndex + 1, senderWorkerInv, unit, Program.sendersCount);\n                    array_slice_deep_join_precise(1/3, Program.senders, 0, myIndex, senderWorkerInv, unit, Program.sendersCount);\n                    \n                    forall_append(items, cons(m, nil), non_null);\n                    length_append(items, cons(m, nil));\n                    assert [1/3]array_slice_deep(senders, 0, sendersCount, senderWorkerInv, unit, _, ?newSenderCounts);\n                    assert newSenderCounts == append(take(k, oldSenderCounts), cons(myNewSendCount, drop(1, drop(k, oldSenderCounts))));\n                    assert length(oldSenderCounts) == sendersCount;\n                    assert 0 <= 1 &*& 0 <= k &*& 1 + k <= length(oldSenderCounts);\n                    drop_drop(1, k, oldSenderCounts);\n                    assert newSenderCounts == append(take(k, oldSenderCounts), cons(myNewSendCount, drop(k + 1, oldSenderCounts)));\n                    sum_take_cons_drop(k, oldSenderCounts, myNewSendCount);\n                    assert sum(newSenderCounts) == sum(oldSenderCounts) + myNewSendCount - myOldSendCount;\n                    close my_unsep_pred(c)(r ? append(items, cons(m, nil)) : items, qms);\n                    close Q(r);\n                }\n                @*/\n                //@ produce_lemma_function_pointer_chunk(my_sep) : channel_sep(client_inv(c), c, my_sep_pred, my_unsep_pred(c))() { close exists(c); call(); };\n                //@ produce_lemma_function_pointer_chunk(my_unsep) : channel_unsep(client_inv(c), c, my_sep_pred, my_unsep_pred(c))() { close exists(c); call(); };\n                //@ close my_sep_pred();\n                //@ produce_lemma_function_pointer_chunk(my_send) : channel_send(client_inv(c), c, my_unsep_pred(c), m, P, Q)(r) { call(); };\n                //@ close P();\n                boolean success = Program.channel.send(m);\n                //@ open Q(success);\n                if (success) break;\n            }\n        }\n        //@ assert i == Program.sendMaxCount;\n        //@ close post();\n    }\n",
        "methodStartingLine": 157,
        "methodEndingLine": 244,
        "jml": "//@ requires pre();\n//@ ensures post();"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/channels_raw/client.java",
        "code": "    public void run()\n        \n        \n    {\n        int i;\n        for (i=0; i < Program.receiveMaxCount; i++)\n            /*@\n            invariant\n                [_]Program_channel(?c) &*& [_]c.Channel() &*& [_]atomic_space(client_inv(c)) &*&\n                [_]Program_receiveMaxCount(?rmc) &*& i <= rmc &*&\n                [_]Program_receivers(?r) &*& [_]this.myIndex |-> ?myIndex &*&\n                [_]Program_receiversCount(?rc) &*& myIndex < rc &*&\n                [1/3]array_slice_deep(r, myIndex, myIndex + 1, receiverWorkerInv, unit, cons(this, nil), cons(i, nil));\n            @*/\n        {\n            for (;;)\n                /*@\n                invariant\n                    [_]Program_channel(c) &*& [_]c.Channel() &*& [_]atomic_space(client_inv(c)) &*&\n                    [_]Program_receiveMaxCount(rmc) &*& i < rmc &*&\n                    [_]Program_receivers(r) &*& [_]this.myIndex |-> myIndex &*&\n                    [_]Program_receiversCount(rc) &*& myIndex < rc &*&\n                    [1/3]array_slice_deep(r, myIndex, myIndex + 1, receiverWorkerInv, unit, cons(this, nil), cons(i, nil));\n                @*/\n            {\n                /*@\n                predicate P() =  \n                    [_]Program_receiveMaxCount(rmc) &*&\n                    [_]Program_receivers(r) &*& [_]this.myIndex |-> myIndex &*&\n                    [_]Program_receiversCount(rc) &*& myIndex < rc &*&\n                    [1/3]array_slice_deep(r, myIndex, myIndex + 1, receiverWorkerInv, unit, cons(this, nil), cons(i, nil));\n                predicate Q(Object result) = \n                    [_]Program_receiveMaxCount(rmc) &*& \n                    [_]Program_receivers(r) &*& [_]this.myIndex |-> myIndex &*& \n                    [_]Program_receiversCount(rc) &*& myIndex < rc &*&\n                    [1/3]array_slice_deep(r, myIndex, myIndex + 1, receiverWorkerInv, unit, cons(this, nil), (result != null ? cons(i + 1, nil) : cons(i , nil)));\n                \n                lemma void my_channel_receive()\n                    requires i < rmc &*& P() &*& my_unsep_pred(c)(?items, ?qms);\n                    ensures Q(items != nil ? head(items) : null) &*& my_unsep_pred(c)(tail(items), qms);\n                {\n                    open P();\n                    open my_unsep_pred(c)(items, qms);\n                    ReceiverThread[] receivers = Program.receivers;\n                    int receiversCount = Program.receiversCount;\n                    int k = myIndex;\n                    assert [1/3]array_slice_deep(receivers, 0, receiversCount, receiverWorkerInv, unit, _, ?oldReceiverCounts);\n                    array_slice_deep_split(Program.receivers, 0, myIndex);\n                    array_slice_deep_split_precise(1/3, Program.receivers, myIndex, Program.receiversCount, receiverWorkerInv, unit, myIndex + 1);\n                    array_slice_deep_open_precise(2/3, Program.receivers, myIndex);\n                    int myOldReceiveCount = receiverReceiveCount;\n                    switch (items) {\n                    case nil:\n                    case cons(head, tail):\n                        receiverReceiveCount++;\n                    }\n                    int myNewReceiverCount = receiverReceiveCount;\n                    array_slice_deep_close(Program.receivers, myIndex, receiverWorkerInv, unit);\n                    array_slice_deep_join_precise(1/3, Program.receivers, myIndex, myIndex + 1, receiverWorkerInv, unit, Program.receiversCount);\n                    array_slice_deep_join_precise(1/3, Program.receivers, 0, myIndex, receiverWorkerInv, unit, Program.receiversCount);\n                    \n                    assert [1/3]array_slice_deep(receivers, 0, receiversCount, receiverWorkerInv, unit, _, ?newReceiverCounts);\n                    assert newReceiverCounts == append(take(k, oldReceiverCounts), cons(myNewReceiverCount, drop(1, drop(k, oldReceiverCounts))));\n                    assert length(oldReceiverCounts) == receiversCount;\n                    assert 0 <= 1 &*& 0 <= k &*& 1 + k <= length(oldReceiverCounts);\n                    drop_drop(1, k, oldReceiverCounts);\n                    assert newReceiverCounts == append(take(k, oldReceiverCounts), cons(myNewReceiverCount, drop(k + 1, oldReceiverCounts)));\n                    sum_take_cons_drop(k, oldReceiverCounts, myNewReceiverCount);\n                    assert sum(newReceiverCounts) == sum(oldReceiverCounts) + myNewReceiverCount - myOldReceiveCount;\n                    \n                    switch (items) {\n                    case nil:\n                        close my_unsep_pred(c)(items, qms);\n                        close Q(null);\n                    case cons(head, tail):\n                        close my_unsep_pred(c)(tail, qms);\n                        close Q(head);\n                    }\n                }\n                @*/\n                //@ produce_lemma_function_pointer_chunk(my_sep) : channel_sep(client_inv(c), c, my_sep_pred, my_unsep_pred(c))() { close exists(c); call(); };\n                //@ produce_lemma_function_pointer_chunk(my_unsep) : channel_unsep(client_inv(c), c, my_sep_pred, my_unsep_pred(c))() { close exists(c); call(); };\n                //@ close my_sep_pred();\n                //@ produce_lemma_function_pointer_chunk(my_channel_receive) : channel_receive(client_inv(c), c, my_unsep_pred(c), P, Q)() { call(); };\n                //@ close P();\n                String m = Program.channel.receive();\n                //@ open Q(m);\n                if (m != null) break;\n            }\n        }\n        //@ close post();\n    }\n",
        "methodStartingLine": 289,
        "methodEndingLine": 380,
        "jml": "//@ requires pre();\n//@ ensures post();"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/channels_raw/client.java",
        "code": "    public static void main(String[] args)\n        \n        \n    {\n        //@ init_class();\n        Program.sendersCount = 1000;\n        Program.receiversCount = 1000;\n        Program.sendMaxCount = 2000;\n        Program.receiveMaxCount = 2000;\n        Program.work();\n        //@assert Program.sendCount == 2000000;\n        //@assert Program.receiveCount == 2000000;\n    }\n",
        "methodStartingLine": 396,
        "methodEndingLine": 408,
        "jml": "//@ requires class_init_token(Program.class);\n//@ ensures true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/channels_raw/client.java",
        "code": "    public static void work()\n        /*@\n        requires\n            Program_channel(?channel) &*&\n            Program_senders(_) &*& Program_receivers(_) &*&\n            [_]Program_sendersCount(?sendersCount) &*& [_]Program_receiversCount(?receiversCount) &*&\n            0 < sendersCount &*& 0 < receiversCount &*&\n            Program_sendCount(?psc) &*& Program_receiveCount(?prc) &*& psc==0 &*& prc==0 &*&\n            Program_sendMaxCount(?smc) &*& 0 < smc  &*& Program_receiveMaxCount(?rmc) &*& 0 < rmc;\n        @*/\n        \n     {\n        Program.senders = new SenderThread[Program.sendersCount];\n        //@ SenderThread[] s = Program.senders;\n        //@ leak Program_senders(s);\n        //@ array_slice_deep_empty_close(s, 0, senderWorker, unit);\n        for (int i = 0; i < Program.sendersCount; i++)\n            /*@\n            invariant\n                0 <= i &*& i <= sendersCount &*&\n                [_]Program_senders(s) &*& [_]Program_sendersCount(sendersCount) &*&\n                [1/3]Program_sendMaxCount(smc) &*& 0 < smc &*&\n                array_slice(s, i, sendersCount, ?elems) &*& all_eq(elems, null) == true &*&\n                [1/3]array_slice_deep(s, 0, i, senderWorkerInv, unit, _, ?v) &*& all_eq(v, 0) == true &*&\n                [2/3]array_slice_deep(s, 0, i, senderWorkerNull, unit, _, _);\n            @*/\n        {\n            Program.senders[i] = new SenderThread();\n            //@ Program.senders[i].myIndex = i;\n            //@ array_slice_split(senders, i, i + 1);\n            //@ close [2/3]senderWorkerNull(unit, senders[i], unit);\n            //@ close [1/3]senderWorkerInv(unit, senders[i], _);\n            //@ array_slice_deep_close_precise(2/3, senders, i, senderWorkerNull, unit);\n            //@ array_slice_deep_close_precise(1/3, senders, i, senderWorkerInv, unit);\n            \n        }\n        \n        Program.receivers = new ReceiverThread[Program.receiversCount];\n        //@ ReceiverThread[] r = Program.receivers;\n        //@ leak Program_receivers(r);\n        //@ array_slice_deep_empty_close(r, 0, receiverWorker, unit);\n        for (int i = 0; i < Program.receiversCount; i++)\n            /*@\n            invariant\n                0 <= i &*& i <= receiversCount &*&\n                [_]Program_receivers(r) &*& [_]Program_receiversCount(receiversCount) &*&\n                [1/3]Program_receiveMaxCount(rmc) &*& 0 < rmc &*&\n                array_slice(r, i, receiversCount, ?elems) &*& all_eq(elems, null) == true &*&\n                [1/3]array_slice_deep(r, 0, i, receiverWorkerInv, unit, _, ?v) &*& all_eq(v, 0) == true &*&\n                [2/3]array_slice_deep(r, 0, i, receiverWorkerNull, unit, _, _);\n            @*/\n        {\n            receivers[i] = new ReceiverThread();\n            //@ Program.receivers[i].myIndex = i;\n            //@ array_slice_split(receivers, i, i + 1);\n            //@ close [2/3]receiverWorkerNull(unit, receivers[i], unit);\n            //@ close [1/3]receiverWorkerInv(unit, receivers[i], _);\n            //@ array_slice_deep_close_precise(2/3, receivers, i, receiverWorkerNull, unit);\n            //@ array_slice_deep_close_precise(1/3, receivers, i, receiverWorkerInv, unit);\n        }\n        Program.channel = new Channel(2);\n        \n        //@ close client_inv(Program.channel)();\n        //@ create_atomic_space(client_inv(Program.channel));\n        //@ close foreach_i(0, nil, senderWorkerIndex);\n        \n        for (int i = 0; i < Program.sendersCount; i++)\n            /*@\n            invariant\n                0 <= i &*& i <= sendersCount &*&\n                [_]Program_sendersCount(sendersCount) &*& [_]Program_senders(s) &*&\n                [_]Program_channel(?c) &*& [_]c.Channel() &*& [_]atomic_space(client_inv(c)) &*& [_]Program_sendMaxCount(smc) &*& 0 < smc &*&\n                [2/3]array_slice_deep(s, i, sendersCount, senderWorkerNull, unit, _, _) &*&\n                [1/3]array_slice_deep(s, 0, i, senderWorker, unit, ?elements, _) &*& foreach_i(0, elements, senderWorkerIndex);\n            @*/\n        {\n            //@ array_slice_deep_split(s, i, i + 1);\n            //@ array_slice_deep_open_precise(2/3, s, i);\n            SenderThread sender = senders[i];\n            //@ close [1/3]senderWorkerInv(unit, sender, _);\n            //@ array_slice_deep_close_precise(1/3, s, i, senderWorkerInv, unit);\n            JoinableRunnable j = ThreadingHelper.createJoinableRunnable(sender);\n            //@ sender.myIndex = i;\n            //@ leak sender.myIndex |-> i;\n            //@ close sender.pre();\n            //@ j.closeIt();\n            Thread t = new Thread(j);\n            t.start();\n            \n            sender.thread = t;\n            sender.joinable = j;\n            //@ close [1/3]senderWorker(unit, sender, unit);\n            //@ array_slice_deep_close_precise(1/3, senders, i, senderWorker, unit);\n            \n            //@ close foreach_i(i + 1, nil, senderWorkerIndex);\n            //@ close senderWorkerIndex(i, sender);\n            //@ close foreach_i(i, cons(sender, nil), senderWorkerIndex);\n            //@ foreach_i_append(0, elements, cons(sender, nil));\n        }\n        //@ close foreach_i(0, nil, receiverWorkerIndex);\n        for (int i = 0; i < Program.receiversCount; i++)\n            /*@\n            invariant\n                0 <= i &*& i <= receiversCount &*&\n                [_]Program_receiversCount(receiversCount) &*& [_]Program_receivers(r) &*&\n                [_]Program_channel(?c) &*& [_]c.Channel() &*& [_]atomic_space(client_inv(c)) &*& [_]Program_receiveMaxCount(rmc) &*& 0 < rmc &*&\n                [2/3]array_slice_deep(r, i, receiversCount, receiverWorkerNull, unit, _, _) &*&\n                [1/3]array_slice_deep(r, 0, i, receiverWorker, unit, ?elements, _) &*& foreach_i(0, elements, receiverWorkerIndex);\n            @*/\n        {\n            //@ array_slice_deep_split(r, i, i + 1);\n            //@ array_slice_deep_open_precise(2/3, r, i);\n            ReceiverThread receiver = receivers[i];\n            //@ close [1/3]receiverWorkerInv(unit, receiver, _);\n            //@ array_slice_deep_close_precise(1/3, r, i, receiverWorkerInv, unit);\n            JoinableRunnable j = ThreadingHelper.createJoinableRunnable(receiver);\n            //@ receiver.myIndex = i;\n            //@ leak receiver.myIndex |-> i;\n            //@ close receiver.pre();\n            //@ j.closeIt();\n            Thread t = new Thread(j);\n            t.start();\n            \n            receiver.thread = t;\n            receiver.joinable = j;\n            //@ close [1/3]receiverWorker(unit, receiver, unit);\n            //@ array_slice_deep_close_precise(1/3, receivers, i, receiverWorker, unit);\n            \n            //@ close foreach_i(i + 1, nil, receiverWorkerIndex);\n            //@ close receiverWorkerIndex(i, receiver);\n            //@ close foreach_i(i, cons(receiver, nil), receiverWorkerIndex);\n            //@ foreach_i_append(0, elements, cons(receiver, nil));\n        }\n        \n        int j;\n        for (j = 0; j < Program.sendersCount; j++)\n            /*@\n            invariant\n                0 <= j &*& j <= sendersCount &*&\n                [_]Program_sendersCount(sendersCount) &*& [_]Program_senders(s) &*&\n                [_]Program_channel(?c) &*& [_]c.Channel() &*& [_]atomic_space(client_inv(c)) &*&\n                Program_sendCount(j * smc) &*& [_]Program_sendMaxCount(smc) &*&\n                [1/3]array_slice_deep(s, j, sendersCount, senderWorker, unit, ?elements, _) &*& foreach_i(j, elements, senderWorkerIndex);\n            @*/\n        {\n            SenderThread sw = senders[j];\n            ThreadingHelper.join(sw.thread, sw.joinable);\n            //@ open sw.post();\n            //@ open foreach_i(j, elements, senderWorkerIndex);\n            //@ open senderWorkerIndex(j, sw);\n            //@ int jj = sw.myIndex;\n            //@ assert j == jj;\n            //@ array_slice_deep_open_precise(1/3, s, j);\n            //@ open senderWorkerInv(unit, sw, _);\n            //@ Program.sendCount += sw.senderSendCount;\n        }\n        //@ assert Program.sendCount == Program.sendMaxCount * j;\n        //@ assert j == sendersCount;\n        //@ assert Program.sendCount == Program.sendMaxCount * sendersCount;\n        for (j = 0; j < Program.receiversCount; j++)\n            /*@\n            invariant\n                0 <= j &*& j <= receiversCount &*&\n                [_]Program_receiversCount(receiversCount) &*& [_]Program_receivers(r) &*&\n                [_]Program_channel(?c) &*& [_]c.Channel() &*& [_]atomic_space(client_inv(c)) &*&\n                Program_receiveCount(j * rmc) &*& [_]Program_receiveMaxCount(rmc) &*&\n                [1/3]array_slice_deep(r, j, receiversCount, receiverWorker, unit, ?elements, _) &*& foreach_i(j, elements, receiverWorkerIndex);\n            @*/\n        {\n            ReceiverThread rw = receivers[j];\n            ThreadingHelper.join(rw.thread, rw.joinable);\n            //@ open rw.post();\n            //@ open foreach_i(j, elements, receiverWorkerIndex);\n            //@ open receiverWorkerIndex(j, rw);\n            //@ int jj = rw.myIndex;\n            //@ assert j == jj;\n            //@ array_slice_deep_open_precise(1/3, r, j);\n            //@ open receiverWorkerInv(unit, rw, _);\n            //@ Program.receiveCount += rw.receiverReceiveCount;\n        }\n        //@ assert Program.receiveCount == Program.receiveMaxCount * j;\n        //@ assert j == receiversCount;\n        //@ assert Program.receiveCount == Program.receiveMaxCount * receiversCount;\n    }\n",
        "methodStartingLine": 410,
        "methodEndingLine": 593,
        "jml": "//@ ensures Program_sendCount(smc * sendersCount) &*& Program_receiveCount(rmc * receiversCount);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/termination/Reverse.java",
        "code": "    static List reverseAppend(List l, List other)\n        \n        \n        //@ terminates;\n    {\n        //@ open List(l, _, _);\n        //@ assert l.valid(_, ?level0);\n        //@ call_perm_weaken(2, level0);\n        //@ consume_call_perm_for(l.getClass());\n        List result = l.reverseAppend(other);\n        //@ level_append_mono_l(level0, level, otherLevel);\n        //@ List_weaken(result, append(level, otherLevel));\n        return result;\n    }\n",
        "methodStartingLine": 60,
        "methodEndingLine": 73,
        "jml": "//@ requires List(l, ?elems, ?level) &*& List_opt(other, ?otherElems, ?otherLevel) &*& [2]call_perm(currentThread, level);\n//@ ensures List(result, append(reverse(elems), otherElems), append(level, otherLevel));"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/termination/Reverse.java",
        "code": "    static List reverseAppend_opt(List l, List other)\n        \n        \n        //@ terminates;\n    {\n        //@ open List_opt(l, elems, level);\n        if (l == null) {\n            //@ level_le_append_r(level, otherLevel);\n            //@ List_opt_weaken(other, append(level, otherLevel));\n            return other;\n        } else {\n            //@ call_perm_weaken_and_dup(2);\n            List result = reverseAppend(l, other);\n            //@ close List_opt(result, append(reverse(elems), otherElems), append(level, otherLevel));\n            return result;\n        }\n    }\n",
        "methodStartingLine": 74,
        "methodEndingLine": 90,
        "jml": "//@ requires List_opt(l, ?elems, ?level) &*& List_opt(other, ?otherElems, ?otherLevel) &*& call_perm(currentThread, cons(ListUtil.class, level));\n//@ ensures List_opt(result, append(reverse(elems), otherElems), append(level, otherLevel));"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/termination/Reverse.java",
        "code": "    static List reverse_(List l)\n        \n        \n        //@ terminates;\n    {\n        //@ close List_opt(null, nil, nil);\n        return reverseAppend_opt(l, null);\n    }\n",
        "methodStartingLine": 91,
        "methodEndingLine": 98,
        "jml": "//@ requires List_opt(l, ?elems, ?level) &*& call_perm(currentThread, cons(ListUtil.class, level));\n//@ ensures List_opt(result, reverse(elems), level);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/termination/Reverse.java",
        "code": "    List reverseAppend(List other)\n        \n        \n        //@ terminates;\n    {\n        //@ int v = value;\n        List t = tail;\n        //@ list<int> tElems = tailElems;\n        //@ list<Class> tLevel = tailLevel;\n        tail = other;\n        //@ tailElems = otherElems;\n        //@ tailLevel = otherLevel;\n        //@ close List_opt(this, cons(v, otherElems), cons(Cons.class, otherLevel));\n        //@ level_cons_mono_l(ListUtil.class, Cons.class, tLevel);\n        //@ call_perm_weaken(1, cons(ListUtil.class, tLevel));\n        List result = ListUtil.reverseAppend_opt(t, this);\n        //@ length_append(reverse(tElems), cons(v, otherElems));\n        //@ open List_opt(result, _, _);\n        //@ append_assoc(reverse(tElems), {v}, otherElems);\n        //@ level_le_append_flip(tLevel, {Cons.class});\n        //@ append_assoc(tLevel, {Cons.class}, otherLevel);\n        //@ level_append_mono_l(append(tLevel, {Cons.class}), level, otherLevel);\n        //@ List_weaken(result, append(level, otherLevel));\n        return result;\n    }\n",
        "methodStartingLine": 121,
        "methodEndingLine": 145,
        "jml": "//@ requires valid(?elems, ?level) &*& List_opt(other, ?otherElems, ?otherLevel) &*& call_perm(currentThread, level);\n//@ ensures List(result, append(reverse(elems), otherElems), append(level, otherLevel));"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/termination/Reverse.java",
        "code": "    int getHead()\n        \n        \n        //@ terminates;\n    {\n        return value;\n    }\n",
        "methodStartingLine": 146,
        "methodEndingLine": 152,
        "jml": "//@ requires [?f]valid(cons(?h, ?t), ?level) &*& call_perm(currentThread, level);\n//@ ensures [f]valid(cons(h, t), level) &*& result == h;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/termination/Reverse.java",
        "code": "    List getTail()\n        \n        \n        //@ terminates;\n    {\n        //@ open [_]valid(_, _);\n        //@ assert [f]List_opt(_, t, ?tailLevel);\n        //@ level_lt_cons(Cons.class, tailLevel);\n        //@ List_opt_weaken(tail, level);\n        return tail;\n    }\n",
        "methodStartingLine": 153,
        "methodEndingLine": 163,
        "jml": "//@ requires [?f]valid(cons(?h, ?t), ?level) &*& call_perm(currentThread, level);\n//@ ensures [f]List_opt(result, t, level);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/termination/Reverse.java",
        "code": "    static void main()\n        \n        \n        //@ terminates;\n    {\n        //@ produce_call_below_perm_();\n        //@ call_below_perm__elim(1, {ListUtil.class, Cons.class, Cons.class, Cons.class});\n        //@ close List_opt(null, nil, nil);\n        Cons c3 = new Cons(3, null);\n        //@ close List_opt(c3, _, _);\n        Cons c2 = new Cons(2, c3);\n        //@ close List_opt(c2, _, _);\n        Cons c1 = new Cons(1, c2);\n        //@ close List_opt(c1, _, _);\n        List rev = ListUtil.reverse_(c1);\n        //@ assert List_opt(rev, {3, 2, 1}, _);\n    }\n",
        "methodStartingLine": 167,
        "methodEndingLine": 183,
        "jml": "//@ requires true;\n//@ ensures true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/CompoundAssignments.java",
        "code": "  void test1() \n    \n    \n  {\n    int x = 0;\n    x += (++x) + (++x) + (x+=1);\n    //@ assert x == 6;\n    int y = 0;\n    int z = 0;\n    int t = (x = 2) + (y = 3) + (z = 4);\n    assert t == 9 && x == 2 && y == 3 && z == 4;\n  }\n",
        "methodStartingLine": 4,
        "methodEndingLine": 15,
        "jml": "//@ requires true;\n//@ ensures true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/CompoundAssignments.java",
        "code": "  void test2() \n    \n    \n  {\n    this.f += ++this.f;\n  }\n",
        "methodStartingLine": 17,
        "methodEndingLine": 22,
        "jml": "//@ requires this.f |-> 1;\n//@ ensures this.f |-> 3;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/CompoundAssignments.java",
        "code": "  int consumef() \n    \n    \n  {\n   return 0;\n  }\n",
        "methodStartingLine": 24,
        "methodEndingLine": 29,
        "jml": "//@ requires this.f |-> _;\n//@ ensures result ==  0;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/CompoundAssignments.java",
        "code": "  void test3() \n    \n    \n  {\n    this.f += consumef(); //~ should_fail\n  }\n",
        "methodStartingLine": 31,
        "methodEndingLine": 36,
        "jml": "//@ requires this.f |-> 0;\n//@ ensures true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/ConstantExpressions.java",
        "code": "  void m()\n    \n    \n  {\n    short x = 20 + f;\n    //@ assert x == 30;\n  }\n",
        "methodStartingLine": 4,
        "methodEndingLine": 10,
        "jml": "//@ requires true;\n//@ ensures true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/termination/ProdCons.java",
        "code": "    void run()\n        \n        \n        //@ terminates;\n    {\n        //@ open pre(_, O);\n        Channel c = c;\n        for (int i = 0; i < 10; i++)\n            //@ invariant obs(nil) &*& [_]c.channel(True) &*& credits(c, 10 - i);\n            //@ decreases 10 - i;\n        {\n            c.receive();\n        }\n    }\n",
        "methodStartingLine": 9,
        "methodEndingLine": 22,
        "jml": "//@ requires obs(?O) &*& pre(call_perm_scope_of(currentThread), O);\n//@ ensures obs(nil);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/termination/ProdCons.java",
        "code": "    static void main()\n        \n        \n        //@ terminates;\n    {\n        //@ produce_call_below_perm_();\n        //@ call_below_perm__elim(1, {Consumer.class});\n        \n        //@ close exists(pair(True, pair({ProdCons.class}, 0r)));\n        Channel c = new Channel();\n        //@ c.create_obs(10);\n        //@ assert obs(?O0);\n        Consumer cons = new Consumer();\n        //@ cons.callPermScope = call_perm_scope_of(currentThread);\n        cons.c = c;\n        //@ close cons.pre(_, nil);\n        //@ close exists(O0);\n        ThreadUtil.fork(cons);\n\n        for (int i = 0; i < 10; i++)\n            //@ invariant repeat<Object>(c, 10 - i, ?O) &*& obs(O) &*& [_]c.channel(True);\n            //@ decreases 10 - i;\n        {\n            //@ close True(null);\n            c.send(null);\n            //@ open repeat(_, _, _);\n            //@ c.destroy_ob();\n        }\n        //@ open repeat(_, _, _);\n    }\n",
        "methodStartingLine": 27,
        "methodEndingLine": 56,
        "jml": "//@ requires obs(nil);\n//@ ensures obs(nil);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/Addressbook.java",
        "code": "    public static void install(byte[] bArray, short bOffset, byte bLength)\n    \n    \n    {\n        Addressbook addressbook = new Addressbook();\n        addressbook.register();\n    }\n",
        "methodStartingLine": 62,
        "methodEndingLine": 68,
        "jml": "//@ requires class_init_token(Addressbook.class) &*& system();\n//@ ensures true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/Addressbook.java",
        "code": "    private void search(APDU apdu)\n    \n    \n    {\n        byte[] abuffer = apdu.getBuffer();\n\n        if((short)abuffer[ISO7816.OFFSET_LC] != NAME_LENGTH)\n            ISOException.throwIt(ISO7816.SW_DATA_INVALID);\n\n        //@open [1/2]valid();\n        short length = (short) emptyPhoneNbs.length;\n        //@close [1/2]valid();\n        boolean found = false;\n        //Search each record of phoneNbs\n        for(short i=0;i<length;i++)\n        //@ invariant APDU(apdu,buffer) &*& array_slice(buffer,0,buffer.length,_) &*& current_applet(this) &*& [1/2]valid() &*& i >= 0;\n        {\n            //@ open [1/2]valid();\n            short item = emptyPhoneNbs[i];\n            //@close [1/2]valid();\n            //If there exists a record on index & record not found\n            if(item == 1 && found == false){\n            \t//@ open [1/2]valid();\n                //If names of the record in phoneNbs and incoming apdu match\n                if(Util.arrayCompare(abuffer, (short)ISO7816.OFFSET_CDATA, phoneNbs, (short)(i * RECORD_LENGTH), NAME_LENGTH) == 0){\n                    found = true;\n                    apdu.setOutgoing();\n                    apdu.setOutgoingLength(NR_LENGTH);\n                    apdu.sendBytesLong(phoneNbs, (short)((i * RECORD_LENGTH)+NAME_LENGTH), NR_LENGTH);\n                }\n                //@ close [1/2]valid();\n            }\n        }\n        \n        if(found == false){\n            ISOException.throwIt(SW_PERSON_NOT_FOUND);\n        }\n    }\n",
        "methodStartingLine": 218,
        "methodEndingLine": 255,
        "jml": "//@ requires APDU(apdu,?buffer) &*& array_slice(buffer,0,buffer.length,_) &*& current_applet(this) &*& [1/2]valid();\n//@ ensures APDU(apdu,buffer) &*& array_slice(buffer,0,buffer.length,_) &*& current_applet(this) &*& [1/2]valid();"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/Addressbook.java",
        "code": "    private void addGroup (APDU apdu)\n    \n    \n    {\n        byte[] abuffer = apdu.getBuffer();\n\n        if((short)abuffer[ISO7816.OFFSET_LC] != GROUPNAME_LENGTH)\n            ISOException.throwIt(ISO7816.SW_DATA_INVALID);\n\n        //@open [1/2]valid();\n        short length = (short) emptyGroups.length;\n        //@close [1/2]valid();\n\n        boolean added = false;\n        //Search empty space in groupnames\n        for(short i=0;i<length;i++)\n        //@ invariant APDU(apdu,buffer) &*& array_slice(buffer,0,buffer.length,_) &*& current_applet(this) &*& [1/2]valid() &*& 0 <= i;\n        {\n            //@ open [1/2]valid();\n            short item = emptyGroups[i];\n            //@close [1/2]valid();\n            //If groupname space empty and groupname not stored\n            if(item == 0 && added==false){\n                JCSystem.beginTransaction();\n                added = true;\n\n  \t\t//@open valid();\n                //Mark space used\n                emptyGroups[i] = 1;\n                //Copy groupname date in empty space groupnames\n                Util.arrayCopy(abuffer,(short)ISO7816.OFFSET_CDATA,groupnames,(short)(i * GROUPNAME_LENGTH),(short) GROUPNAME_LENGTH);\n                //@close valid();\n                JCSystem.commitTransaction();\n            }\n        }\n       \n        if(added == false){\n            ISOException.throwIt(SW_GROUPBOOK_FULL);\n        }\n    }\n",
        "methodStartingLine": 257,
        "methodEndingLine": 296,
        "jml": "//@ requires APDU(apdu,?buffer) &*& array_slice(buffer,0,buffer.length,_) &*& current_applet(this) &*& [1/2]this.valid();\n//@ ensures APDU(apdu,buffer) &*& array_slice(buffer,0,buffer.length,_) &*& current_applet(this) &*& [1/2]this.valid();"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/Addressbook.java",
        "code": "    private void addContactToGroup (APDU apdu)\n    \n    \n    {\n        byte[] abuffer = apdu.getBuffer();\n\n        if((short)abuffer[ISO7816.OFFSET_LC] != (NAME_LENGTH + GROUPNAME_LENGTH))\n            ISOException.throwIt(ISO7816.SW_DATA_INVALID);\n\n        //@open [1/2]valid();\n        short length = (short) emptyPhoneNbs.length;\n        //@close [1/2]valid();\n\n        boolean found = false;\n        byte contactnb = 0;\n        //Search each record in phoneNbs\n        for(short i=0;i<length;i++)\n        //@ invariant APDU(apdu,buffer) &*& array_slice(buffer,0,buffer.length,_) &*& current_applet(this) &*& [1/2]valid() &*& i >= 0 &*& 0 <= contactnb &*& contactnb <= 20;\n        {\n            //@ open [1/2]valid();\n            //Match contact name from phoneNbs and incoming apdu\n            short equal = Util.arrayCompare(abuffer, (short)ISO7816.OFFSET_CDATA, phoneNbs, (short)(i * RECORD_LENGTH), NAME_LENGTH);\n            //@ close [1/2]valid();\n            //If contact not yet found & record name equals\n            if(found==false && equal == 0 ){\n                found = true;\n                //Store index of contactrecord\n                contactnb = (byte)(short)(i+1);\n            }\n        }\n\n        if(found == false)\n            ISOException.throwIt(SW_PERSON_NOT_FOUND);\n\n        //@open [1/2]valid();\n        short g_length = (short) emptyGroups.length;\n        //@close [1/2]valid();\n\n        boolean g_found = false;\n        boolean added = false;\n\n        //Search for group in groupnames\n        for(short i=0;i<g_length;i++)\n        //@ invariant APDU(apdu,buffer) &*& array_slice(buffer,0,buffer.length,_) &*& current_applet(this) &*& [1/2]valid() &*& i >= 0;\n        {\n            //@ open [1/2]valid();\n            //Match groupname of groupnames and incoming apdu\n            short equal = Util.arrayCompare(abuffer, (short)(ISO7816.OFFSET_CDATA + NAME_LENGTH), groupnames, (short)(i * GROUPNAME_LENGTH), GROUPNAME_LENGTH);\n            //@ close [1/2]valid();\n            //If group not found & groupname equals\n            if(g_found==false && equal == 0 ){\n                g_found = true;\n\n                //begin and end of nbs in groupnbs for searched group\n                short begin = (short)(i * GROUPNUMBERS_LENGTH);\n                short end = (short)(begin + GROUPNUMBERS_LENGTH);\n\n                //Search empty contactnb-space in space of groupname in groupnbs\n                for(short a=begin;a<end;a++)\n                //@ invariant APDU(apdu,buffer) &*& array_slice(buffer,0,buffer.length,_) &*& current_applet(this) &*& [1/2]valid() &*& a >= 0;\n                {\n                    //@ open [1/2]valid();\n                    byte openplace = groupnbs[a];\n                    //@ close groupnbs_element(0,openplace,openplace);\n                    //@ array_slice_deep_close(groupnbs,a,groupnbs_element,0);\n                    //@ close [1/2]valid();\n                    //If contact not yet added & empty space found\n                    if(added == false && openplace == 0){\n                        JCSystem.beginTransaction();\n                        added = true;\n                        //@ open valid();\n                        //Write contactnb in empty space\n                        groupnbs[a] = contactnb;\n                        //@ close groupnbs_element(0,contactnb,contactnb);\n                        //@ close valid();\n                        JCSystem.commitTransaction();\n                    }\n                }\n            }\n        }\n\n        if(g_found == false)\n            ISOException.throwIt(SW_GROUP_NOT_FOUND);\n        if(added == false)\n            ISOException.throwIt(SW_GROUP_FULL);\n    }\n",
        "methodStartingLine": 298,
        "methodEndingLine": 383,
        "jml": "//@ requires APDU(apdu,?buffer) &*& array_slice(buffer,0,buffer.length,_) &*& current_applet(this) &*& [1/2]valid();\n//@ ensures APDU(apdu,buffer) &*& array_slice(buffer,0,buffer.length,_) &*& current_applet(this) &*& [1/2]valid();"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/Addressbook.java",
        "code": "    private void removeContactFromGroup (APDU apdu)\n    \n    \n    {\n        byte[] abuffer = apdu.getBuffer();\n\n        if((short)abuffer[ISO7816.OFFSET_LC] != (NAME_LENGTH + GROUPNAME_LENGTH))\n            ISOException.throwIt(ISO7816.SW_DATA_INVALID);\n\n        //@open [1/2]valid();\n        short length = (short) emptyPhoneNbs.length;\n        //@close [1/2]valid();\n\n        boolean found = false;\n        byte contactnb = 0;\n        //Search each record in phoneNbs\n        for(short i=0;i<length;i++)\n        //@ invariant APDU(apdu,buffer) &*& array_slice(buffer,0,buffer.length,_) &*& current_applet(this) &*& [1/2]valid() &*& i >= 0;\n        {\n            //@ open [1/2]valid();\n            //Match contact name in phoneNbs and incoming apdu\n            short equal = Util.arrayCompare(abuffer, (short)ISO7816.OFFSET_CDATA, phoneNbs, (short)(i * RECORD_LENGTH), NAME_LENGTH);\n            //@ close [1/2]valid();\n            //If record not yet found & contact name equals\n            if(found==false && equal == 0 ){\n                found = true;\n                //Store index nb of contact in phoneNbs into contactnb\n                contactnb = (byte)(short)(i+1);\n            }\n        }\n\n        if(found == false)\n            ISOException.throwIt(SW_PERSON_NOT_FOUND);\n\n        //@open [1/2]valid();\n        short g_length = (short) emptyGroups.length;\n        //@close [1/2]valid();\n\n        boolean g_found = false;\n\n        //Search for group in groupnames\n        for(short i=0;i<g_length;i++)\n        //@ invariant APDU(apdu,buffer) &*& array_slice(buffer,0,buffer.length,_) &*& current_applet(this) &*& [1/2]valid() &*& i >= 0;\n        {\n            //@ open [1/2]valid();\n            //Match groupname in groupnames and incoming apdu\n            short equal = Util.arrayCompare(abuffer, (short)(ISO7816.OFFSET_CDATA + NAME_LENGTH), groupnames, (short)(i * GROUPNAME_LENGTH), GROUPNAME_LENGTH);\n            //@ close [1/2]valid();\n            //If group not yet found & groupname equals\n            if(g_found==false && equal == 0 ){\n                g_found = true;\n\n                //begin and end of nbs in groupnbs of searched group\n                short begin = (short)(i * GROUPNUMBERS_LENGTH);\n                short end = (short)(begin + GROUPNUMBERS_LENGTH);\n\n                //Search contactnb in space of groupname in groupnbs\n                for(short a=begin;a<end;a++)\n                //@ invariant APDU(apdu,buffer) &*& array_slice(buffer,0,buffer.length,_) &*& current_applet(this) &*& [1/2]valid() &*& a >= 0;\n                {\n                    //@ open [1/2]valid();\n                    byte contactequal = groupnbs[a];\n                    //@ close groupnbs_element(0,contactequal,contactequal);\n                    //@ array_slice_deep_close(groupnbs,a,groupnbs_element,0);\n                    //@ close [1/2]valid();\n                    //If calculated contactnb en contactnb in groupnbs match\n                    if(contactequal == contactnb){\n                        JCSystem.beginTransaction();\n                        //@ open valid();\n                        //Erase contactnb\n                        groupnbs[a] = (byte)0;\n                        //@ close groupnbs_element(0,0,0);\n                        //@ array_slice_deep_close(groupnbs,a,groupnbs_element,0);\n                        //@ close valid();\n                        JCSystem.commitTransaction();\n                    }\n                }\n            }\n        }\n\n        if(g_found == false)\n            ISOException.throwIt(SW_GROUP_NOT_FOUND);\n    }\n",
        "methodStartingLine": 385,
        "methodEndingLine": 467,
        "jml": "//@ requires APDU(apdu,?buffer) &*& array_slice(buffer,0,buffer.length,_) &*& current_applet(this) &*& [1/2]valid();\n//@ ensures APDU(apdu,buffer) &*& array_slice(buffer,0,buffer.length,_) &*& current_applet(this) &*& [1/2]valid();"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/Addressbook.java",
        "code": "    private void deleteGroup (APDU apdu)\n    \n    \n    {\n         byte[] abuffer = apdu.getBuffer();\n\n        if((short)abuffer[ISO7816.OFFSET_LC] != GROUPNAME_LENGTH)\n            ISOException.throwIt(ISO7816.SW_DATA_INVALID);\n\n\t//@open [1/2]valid();\n        short length = (short) emptyGroups.length;\n        //@close [1/2]valid();\n\n        //Search for group in groupnames\n        for(short i=0;i<length;i++)\n        //@ invariant APDU(apdu,buffer) &*& array_slice(buffer,0,buffer.length,_) &*& current_applet(this) &*& [1/2]valid() &*& 0 <= i;\n        {\n            //@ open [1/2]valid();\n            short item = emptyGroups[i];\n            //@close [1/2]valid();\n            //If groupname stored on index\n            if(item == 1){\n                //@ open [1/2]valid();\n                //Match groupname in groupnames and incoming apdu\n                short equal = (short)Util.arrayCompare(abuffer, (short)ISO7816.OFFSET_CDATA, groupnames, (short)(i * GROUPNAME_LENGTH), GROUPNAME_LENGTH);\n                //@ close [1/2]valid();\n                //If groupname matches\n                if(equal == 0){\n                    JCSystem.beginTransaction();\n                    //@ open valid();\n                    //Mark space in groupnames empty\n                    emptyGroups[i] = 0;\n                    //Erase groupname in groupnames\n                    Util.arrayCopy(zeros,(short)0,groupnames,(short)(i * GROUPNAME_LENGTH),(short) GROUPNAME_LENGTH);\n                    //@ close valid();\n                    short begin = (short)(i * GROUPNUMBERS_LENGTH);\n                    short end = (short)(begin + GROUPNUMBERS_LENGTH);\n                    //Erase contactnbs in contactnb-space in space of groupname in groupnbs\n                    for(short a = begin; a < end; a++)\n                    //@ invariant begin <= a &*& valid();\n                    {\n                        //@ open valid();\n                        groupnbs[a] = (byte)0;\n                        //@ close groupnbs_element(0,0,0);\n                        //@ array_slice_deep_close(groupnbs,a,groupnbs_element,0);\n                        //@ close valid();\n                    }\n                    JCSystem.commitTransaction();\n                }\n            }\n        }\n    }\n",
        "methodStartingLine": 469,
        "methodEndingLine": 520,
        "jml": "//@ requires APDU(apdu,?buffer) &*& array_slice(buffer,0,buffer.length,_) &*& current_applet(this) &*& [1/2]valid();\n//@ ensures APDU(apdu,buffer) &*& array_slice(buffer,0,buffer.length,_) &*& current_applet(this) &*& [1/2]valid();"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/Addressbook.java",
        "code": "    private void searchInGroup (APDU apdu)\n    \n    \n    {\n        byte[] abuffer = apdu.getBuffer();\n\n        if(abuffer[ISO7816.OFFSET_LC] != GROUPNAME_LENGTH + NAME_LENGTH)\n            ISOException.throwIt(ISO7816.SW_DATA_INVALID);\n\n        //@open [1/2]valid();\n        short length = (short) emptyGroups.length;\n        //@close [1/2]valid();\n\n        boolean found = false;\n        //Search group in groupnames\n        for(short i=0;i<length;i++)\n        //@ invariant APDU(apdu,buffer) &*& array_slice(buffer,0,buffer.length,_) &*& current_applet(this) &*& [1/2]valid() &*& i >= 0;\n        {\n            //@ open [1/2]valid();\n            short item = emptyGroups[i];\n            //@close [1/2]valid();\n            //If index in groupnames not empty\n            if(item == 1){\n                //@ open [1/2]valid();\n                //Match groupname in groupnames and incoming apdu\n                short equal = (short)Util.arrayCompare(abuffer, (short)ISO7816.OFFSET_CDATA, groupnames, (short)(i * GROUPNAME_LENGTH), GROUPNAME_LENGTH);\n                //@ close [1/2]valid();\n                //If groupname matches\n                if(equal == 0){\n\n                    //begin and end of nbs in groupnbs of searched group\n                    short begin = (short)(i * GROUPNUMBERS_LENGTH);\n                    short end = (short)(begin + GROUPNUMBERS_LENGTH);\n                    //Search contact in space of groupname in groupnbs\n                    for(short a=begin;a<end;a++)\n                    //@ invariant APDU(apdu,buffer) &*& array_slice(buffer,0,buffer.length,_) &*& current_applet(this) &*& [1/2]valid() &*& a >= 0;\n                    {\n                        //@ open [1/2]valid();\n                        byte contactnb = groupnbs[a];\n                        //@ close groupnbs_element(0,contactnb,contactnb);\n                        //@ array_slice_deep_close(groupnbs,a,groupnbs_element,0);\n                        //@ close [1/2]valid();\n                        //If contactnb on index of groupnbs contains contactnb en contact not found\n                        if(contactnb > (byte)0 && found == false){\n                            //@ open [1/2]valid();\n                            //Match contactname in phoneNbs and incoming apdu\n                            //contact in phoneNbs can be found by contactnb (contactnb = index contact in phoneNbs)\n                            short same_name = (short)Util.arrayCompare(abuffer, (short)(ISO7816.OFFSET_CDATA + GROUPNAME_LENGTH), phoneNbs, (short)((contactnb-1) * RECORD_LENGTH), NAME_LENGTH);\n                            //@ close [1/2]valid();\n                            //If contactname matches send contact phone nb\n                            if(same_name == 0){\n                                found = true;\n                                apdu.setOutgoing();\n                                apdu.setOutgoingLength(NR_LENGTH);\n                                //@ open [1/2]valid();\n                                apdu.sendBytesLong(phoneNbs, (short)(((contactnb-1) * RECORD_LENGTH) + NAME_LENGTH), NR_LENGTH);\n                                //@ close [1/2]valid();\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        if(found == false)\n            ISOException.throwIt(SW_PERSON_NOT_FOUND);\n    }\n",
        "methodStartingLine": 522,
        "methodEndingLine": 587,
        "jml": "//@ requires APDU(apdu,?buffer) &*& array_slice(buffer,0,buffer.length,_) &*& current_applet(this) &*& [1/2]valid();\n//@ ensures APDU(apdu,buffer) &*& array_slice(buffer,0,buffer.length,_) &*& current_applet(this) &*& [1/2]valid();"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/Addressbook.java",
        "code": "    private void filterContacts(APDU apdu)\n    \n    \n    {\n        byte[] abuffer = apdu.getBuffer();\n\n        short filterlength = (short)(abuffer[ISO7816.OFFSET_LC] & 0xff);\n        if(filterlength > NAME_LENGTH)\n            ISOException.throwIt(ISO7816.SW_DATA_INVALID);\n\n        //@open [1/2]valid();\n        short length = (short) emptyPhoneNbs.length;\n        //@close [1/2]valid();\n        boolean found = false;\n\n        //index of filteredNames\n        short index = (short)0;\n        //@ close filter_index(index);\n        //Loop to fetch all filtered names\n        //match every record in phoneNbs\n        for(short i=0;i<length;i++)\n        //@ invariant APDU(apdu,buffer) &*& array_slice(buffer,0,buffer.length,_) &*& current_applet(this) &*& [1/2]valid() &*& i >= 0 &*& filter_index(index);\n        {\n            //@ open [1/2]valid();\n            short item = emptyPhoneNbs[i];\n            //@close [1/2]valid();\n            //If phoneNbs record not empty\n            if(item == 1){\n            \t//@ open [1/2]valid();\n                //Match contactname with filter on filterlength\n            \tshort compare = Util.arrayCompare(abuffer, (short)ISO7816.OFFSET_CDATA, phoneNbs, (short)(i * RECORD_LENGTH), filterlength);\n            \t//@ close [1/2]valid();\n                //If filter matches\n                if(compare == 0){\n                    found = true;\n                    JCSystem.beginTransaction();\n                    //@ open valid();\n                    //@ open filter_index(index);\n                    if(i > 0 && index < 19){\n                    \tindex++;\n                    }\n                    //Store contact in filteredNames\n                    Util.arrayCopy(phoneNbs, (short)(i*RECORD_LENGTH), filteredNames,(short)(index * NAME_LENGTH), NAME_LENGTH);\n                    //@ close filter_index(index);\n                    //@ close valid();\n                    JCSystem.commitTransaction();\n                }\n            }\n        }\n\n        if(found == false){\n            ISOException.throwIt(SW_NO_PERSON_FOUND);\n        }\n\n        apdu.setOutgoing();\n        //@ open [1/2]filter_index(index);\n        apdu.setOutgoingLength((short)((index + 1)*NAME_LENGTH));\n        //@ close [1/2]filter_index(index);\n        //Loop for sending filtered names\n        for(short i=0;i<=index;i++)\n        //@ invariant APDU(apdu,buffer) &*& array_slice(buffer,0,buffer.length,_) &*& current_applet(this) &*& [1/2]valid() &*& i >= 0;\n        {\n            //@ open [1/2]valid();\n            apdu.sendBytesLong(filteredNames, (short)(i*NAME_LENGTH), NAME_LENGTH);\n            //@ close [1/2]valid();\n        }\n\n    }\n",
        "methodStartingLine": 589,
        "methodEndingLine": 656,
        "jml": "//@ requires APDU(apdu,?buffer) &*& array_slice(buffer,0,buffer.length,_) &*& current_applet(this) &*& [1/2]valid();\n//@ ensures APDU(apdu,buffer) &*& array_slice(buffer,0,buffer.length,_) &*& current_applet(this) &*& [1/2]valid();"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/FailboxedQueueExample.java",
        "code": "    public void enter(FailboxedBlock block)\n        \n        \n    {\n        //@ assume(false);\n    }\n",
        "methodStartingLine": 24,
        "methodEndingLine": 29,
        "jml": "//@ requires obligations(currentThread, ?outerObs, ?outerFailbox, ?obs) &*& block.pre(currentThread, append(outerObs, obs), this);\n//@ ensures obligations(currentThread, outerObs, outerFailbox, obs) &*& block.post();"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/FailboxedQueueExample.java",
        "code": "    public void put(Object element) throws InterruptedException /*@ ensures true; @*/\n        \n        \n    {\n        //@ assume(false);\n    }\n",
        "methodStartingLine": 42,
        "methodEndingLine": 47,
        "jml": "//@ requires [_]LinkedBlockingQueue(?failbox, ?level, ?inv) &*& inv(element);\n//@ ensures credit();"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/FailboxedQueueExample.java",
        "code": "    public Object take() throws InterruptedException /*@ ensures true; @*/\n        \n        \n    {\n        //@ assume(false);\n    }\n",
        "methodStartingLine": 48,
        "methodEndingLine": 53,
        "jml": "//@ requires obligations(currentThread, ?outerObs, ?failbox, ?obs) &*& [_]LinkedBlockingQueue(failbox, ?level, ?inv) &*& credit() &*& level_below_all(level, append(outerObs, obs)) == true;\n//@ ensures obligations(currentThread, outerObs, failbox, obs) &*& inv(result);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/FailboxedQueueExample.java",
        "code": "    public void start()\n        /*@\n        requires\n            FailboxedThread(?failbox, ?thisObs) &*&\n            obligations(currentThread, ?outerObs, failbox, ?obs) &*& subbag(thisObs, obs) == true;\n        @*/\n        \n    {\n        //@ assume(false);\n    }\n",
        "methodStartingLine": 98,
        "methodEndingLine": 107,
        "jml": "//@ ensures obligations(currentThread, outerObs, failbox, remove_all(thisObs, obs));"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/FailboxedQueueExample.java",
        "code": "    public void run()\n        \n        \n    {\n        try {\n            String hello = \"hello\";\n            //@ close queue_inv(hello);\n            queue.put(hello);\n        } catch (InterruptedException e) {\n            throw new RuntimeException(e);\n        }\n        //@ queue.destroyDebit();\n    }\n",
        "methodStartingLine": 121,
        "methodEndingLine": 133,
        "jml": "//@ requires pre(?failbox, ?obs) &*& obligations(currentThread, nil, failbox, obs);\n//@ ensures obligations(currentThread, nil, failbox, nil);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/FailboxedQueueExample.java",
        "code": "    public void run()\n        \n        \n    {\n        //@ open pre(_, _, _);\n        //@ close exists<Failbox>(failbox);\n        //@ level level = level(0);\n        //@ close exists<level>(level);\n        //@ close exists<predicate(Object)>(queue_inv);\n        LinkedBlockingQueue queue = new LinkedBlockingQueue();\n        //@ queue.createDebit();\n        new FailboxedThread(new MyFailboxedRunnable(queue)).start();\n        try {\n            queue.take();\n        } catch (InterruptedException e) {\n            throw new RuntimeException(e);\n        }\n        //@ close post();\n    }\n",
        "methodStartingLine": 148,
        "methodEndingLine": 166,
        "jml": "//@ requires pre(currentThread, ?obs, ?failbox) &*& obligations(currentThread, obs, failbox, nil);\n//@ ensures post() &*& obligations(currentThread, obs, failbox, nil);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/FailboxedQueueExample.java",
        "code": "    public static void main(String[] args)\n        \n        \n    {\n        Failbox failbox = new Failbox();\n        //@ close exists(failbox);\n        failbox.enter(new MyFailboxedBlock());\n    }\n",
        "methodStartingLine": 170,
        "methodEndingLine": 177,
        "jml": "//@ requires obligations(currentThread, nil, null, nil);\n//@ ensures obligations(currentThread, nil, null, nil);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/termination/SqrtCache.java",
        "code": "    boolean containsKey(double key)\n        \n        \n        //@ terminates;\n    { throw new RuntimeException(); }\n",
        "methodStartingLine": 10,
        "methodEndingLine": 14,
        "jml": "//@ requires valid() &*& obs(?O) &*& wait_level_below_obs(pair({DoubleMap.class}, 0r), O) == true;\n//@ ensures valid() &*& obs(O);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/termination/SqrtCache.java",
        "code": "    double get(double key)\n        \n        \n        //@ terminates;\n    { throw new RuntimeException(); }\n",
        "methodStartingLine": 16,
        "methodEndingLine": 20,
        "jml": "//@ requires valid() &*& obs(?O) &*& wait_level_below_obs(pair({DoubleMap.class}, 0r), O) == true;\n//@ ensures valid() &*& obs(O);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/termination/SqrtCache.java",
        "code": "    void put(double key, double value)\n        \n        \n        //@ terminates;\n    { throw new RuntimeException(); }\n",
        "methodStartingLine": 22,
        "methodEndingLine": 26,
        "jml": "//@ requires valid() &*& obs(?O) &*& wait_level_below_obs(pair({DoubleMap.class}, 0r), O) == true;\n//@ ensures valid() &*& obs(O);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/termination/SqrtCache.java",
        "code": "    private static double sqrt_(double x)\n        \n        \n        //@ terminates;\n    {\n        throw new RuntimeException();\n    }\n",
        "methodStartingLine": 54,
        "methodEndingLine": 60,
        "jml": "//@ requires true;\n//@ ensures true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/termination/SqrtCache.java",
        "code": "    double sqrt(double x)\n        \n        \n        //@ terminates;\n    {\n        return sqrt_(x);\n    }\n",
        "methodStartingLine": 62,
        "methodEndingLine": 68,
        "jml": "//@ requires [_]valid() &*& obs(?O) &*& wait_level_below_obs(pair({Math.class}, 0r), O) == true;\n//@ ensures obs(O);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/termination/SqrtCache.java",
        "code": "    double sqrtCached(double x)\n        \n        \n        //@ terminates;\n    {\n        //@ wait_level_lt_below_obs(pair({DoubleMap.class}, 0r), pair({Math.class}, 0r), O);\n        sqrtCacheLock.acquire();\n        //@ open Math_inv(this)();\n        if (!sqrtCache.containsKey(x))\n            sqrtCache.put(x, sqrt_(x));\n        double result = sqrtCache.get(x);\n        //@ close Math_inv(this)();\n        sqrtCacheLock.release();\n        return result;\n    }\n",
        "methodStartingLine": 70,
        "methodEndingLine": 84,
        "jml": "//@ requires [_]valid() &*& obs(?O) &*& wait_level_below_obs(pair({Math.class}, 0r), O) == true;\n//@ ensures obs(O);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/termination/SqrtCache.java",
        "code": "    static void main(double x)\n        \n        \n        //@ terminates;\n    {\n        //@ wait_level_lt_below_obs(pair({Math.class}, 0r), pair({Main.class}, 0r), O);\n        Math math = new Math();\n        math.sqrtCached(x);\n    }\n",
        "methodStartingLine": 88,
        "methodEndingLine": 96,
        "jml": "//@ requires obs(?O) &*& wait_level_below_obs(pair({Main.class}, 0r), O) == true;\n//@ ensures obs(O);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/termination/Ackermann.java",
        "code": "    static int ackermannIter(int m, int n)\n        \n        \n        //@ terminates;\n    {\n        if (m == 0)\n            return n + 1;\n        if (n == 0) {\n            //@ call_perm_rec_weaken(2, pair(m - 1, 1));\n            //@ call_perm_rec_elim(1);\n            //@ consume_call_perm_for(MathImpl.class);\n            return ackermannIter(m - 1, 1);\n        }\n        //@ call_perm_rec_weaken(3, pair(m, n - 1));\n        //@ call_perm_rec_elim(1);\n        //@ consume_call_perm_for(MathImpl.class);\n        int n1 = ackermannIter(m, n - 1);\n        //@ call_perm_rec_weaken(2, pair(m - 1, n1));\n        //@ call_perm_rec_elim(1);\n        //@ consume_call_perm_for(MathImpl.class);\n        return ackermannIter(m - 1, n1);\n    }\n",
        "methodStartingLine": 2,
        "methodEndingLine": 23,
        "jml": "//@ requires 0 <= m &*& 0 <= n &*& call_perm_rec(currentThread, {MathImpl.class}, (pair_lt)(int_lt, int_lt), pair(m, n));\n//@ ensures 0 <= result;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/termination/Ackermann.java",
        "code": "    public static int ackermann(int m, int n)\n        \n        \n        //@ terminates;\n    {\n        //@ produce_call_below_perm_();\n        //@ is_wf_int_lt();\n        //@ is_wf_pair_lt(int_lt, int_lt);\n        //@ call_below_perm__elim_rec(1, {MathImpl.class}, (pair_lt)(int_lt, int_lt), pair(m, n));\n        return MathImpl.ackermannIter(m, n);\n    }\n",
        "methodStartingLine": 27,
        "methodEndingLine": 37,
        "jml": "//@ requires 0 <= m &*& 0 <= n;\n//@ ensures true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Iterator/IteratorUtil.java",
        "code": "    public static Object getLast(Iterator iterator)\n        \n        \n    {\n        Object value = null;\n        boolean more = iterator.hasNext();\n        while (more)\n            //@ invariant iterator.valid(?ys) &*& more == (ys != nil) &*& objects_last(cons(value,ys)) == objects_last(xs);\n        {\n            value = iterator.next();\n            more = iterator.hasNext();\n            //@ switch (ys) { case nil: case cons(y, ys0): }\n        }\n        return value;\n    }\n",
        "methodStartingLine": 7,
        "methodEndingLine": 21,
        "jml": "//@ requires iterator != null &*& iterator.valid(?xs);\n//@ ensures iterator.valid(nil) &*& result == objects_last(xs);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/termination/ThreadPool.java",
        "code": "    static void work(ThreadPool pool)\n        \n        \n        //@ terminates;\n    {\n        //@ open [_]pool.valid(_, ?O);\n        Item item = (Item)pool.channel.receive();\n        //@ open ThreadPool_inv(call_perm_scope_of(currentThread))(item);\n        //@ open Item(item, call_perm_scope_of(currentThread));\n        //@ consume_call_perm_for(item.getClass());\n        item.run();\n    }\n",
        "methodStartingLine": 29,
        "methodEndingLine": 40,
        "jml": "//@ requires obs(nil) &*& [_]pool.valid(call_perm_scope_of(currentThread), _) &*& [_]pool.channel |-> ?channel &*& channel.credit() &*& call_perm(currentThread, {ShutdownItem.class});\n//@ ensures obs(nil);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/termination/ThreadPool.java",
        "code": "    void run()\n        \n        \n        //@ terminates;\n    {\n        //@ open validItem(_);\n        //@ call_perm_transfer(currentThread);\n        //@ call_perm_weaken_and_dup(3);\n        //@ open Task(_, _);\n        Task task = task;\n        //@ assert task.valid(?taskLevel0);\n        //@ level_le_trans({task.getClass()}, taskLevel0, taskLevel);\n        //@ level_lt_cons(ShutdownItem.class, taskLevel);\n        //@ level_le_trans({task.getClass()}, taskLevel, cons(ShutdownItem.class, taskLevel));\n        //@ consume_call_perm_for(task.getClass());\n        //@ call_perm_weaken_and_dup(1);\n        //@ call_perm_weaken(1, taskLevel0);\n        task.run();\n        //@ call_perm_weaken(1, {ShutdownItem.class});\n        ThreadPoolHelper.work(pool);\n    }\n",
        "methodStartingLine": 62,
        "methodEndingLine": 82,
        "jml": "//@ requires obs(nil) &*& validItem(call_perm_scope_of(currentThread));\n//@ ensures obs(nil);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/termination/ThreadPool.java",
        "code": "    void run()\n        \n        \n        //@ terminates;\n    {\n    }\n",
        "methodStartingLine": 91,
        "methodEndingLine": 96,
        "jml": "//@ requires obs(nil) &*& validItem(_);\n//@ ensures obs(nil);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/termination/ThreadPool.java",
        "code": "    void run()\n        \n        \n        //@ terminates;\n    {\n        //@ produce_call_below_perm_();\n        //@ call_below_perm__elim(1, {ShutdownItem.class});\n        ThreadPoolHelper.work(pool);\n    }\n",
        "methodStartingLine": 114,
        "methodEndingLine": 122,
        "jml": "//@ requires pre(call_perm_scope_of(currentThread), ?O) &*& obs(O);\n//@ ensures obs(nil);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/termination/ThreadPool.java",
        "code": "    public void addTask(Task task)\n        \n        \n        //@ terminates;\n    {\n        TaskItem item = new TaskItem(this, task);\n        //@ item.thread = thread;\n        //@ item.taskLevel = taskLevel;\n        //@ channel.create_obs(1);\n        //@ level_append_mono_l({TaskItem.class, ShutdownItem.class}, {ThreadPool.class}, taskLevel);\n        //@ call_perm_weaken(1, append({TaskItem.class, ShutdownItem.class}, taskLevel));\n        //@ call_perm_transfer(thread);\n        //@ close item.validItem(scope);\n        //@ close Item(item, scope);\n        //@ close ThreadPool_inv(scope)(item);\n        channel.send(item);\n        //@ open repeat(_, _, _);\n        //@ open repeat(_, _, _);\n        //@ channel.destroy_ob();\n    }\n",
        "methodStartingLine": 178,
        "methodEndingLine": 197,
        "jml": "//@ requires obs(?O) &*& [_]valid(?scope, ?Op) &*& Task(task, ?taskLevel) &*& call_perm(?thread, cons(ThreadPool.class, taskLevel)) &*& wait_level_below_obs(pair({ThreadPool.class}, 0r), O) == true &*& call_perm_scope_of(thread) == scope;\n//@ ensures obs(O);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/termination/ThreadPool.java",
        "code": "    public void shutDown()\n        \n        \n        //@ terminates;\n    {\n        ShutdownItem item = new ShutdownItem();\n        //@ item.scope = scope;\n        //@ close item.validItem(scope);\n        //@ close Item(item, scope);\n        //@ close ThreadPool_inv(scope)(item);\n        channel.send(item);\n        //@ channel.destroy_ob();\n    }\n",
        "methodStartingLine": 199,
        "methodEndingLine": 211,
        "jml": "//@ requires [_]valid(?scope, ?Op) &*& exists<list<Object> >(?O) &*& obs(append(Op, O)) &*& wait_level_below_obs(pair({ThreadPool.class}, 0r), append(Op, O)) == true;\n//@ ensures obs(O);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/termination/ThreadPool.java",
        "code": "    void run()\n        \n        \n        //@ terminates;\n    {\n    }\n",
        "methodStartingLine": 228,
        "methodEndingLine": 233,
        "jml": "//@ requires obs(?O) &*& valid(?level) &*& call_perm(currentThread, level) &*& wait_level_below_obs(pair(level, 0r), O) == true;\n//@ ensures obs(O);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/termination/ThreadPool.java",
        "code": "    static void doWork(ThreadPool pool)\n        \n        \n        //@ terminates;\n    {\n        //@ produce_call_below_perm_();\n        //@ call_below_perm__elim(2, {ThreadPool.class, MyTask.class});\n        //@ wait_level_lt_below_obs(pair({ThreadPool.class}, 0r), pair({MyModule.class}, 0r), O);\n        pool.addTask(new MyTask());\n        pool.addTask(new MyTask());\n    }\n",
        "methodStartingLine": 239,
        "methodEndingLine": 249,
        "jml": "//@ requires obs(?O) &*& [_]pool.valid(call_perm_scope_of(currentThread), _) &*& wait_level_below_obs(pair({MyModule.class}, 0r), O) == true;\n//@ ensures obs(O);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/termination/ThreadPool.java",
        "code": "    static void main()\n        \n        \n        //@ terminates;\n    {\n        //@ wait_level_lt_below_obs(pair({ThreadPool.class}, 0r), pair({Main.class}, 0r), O);\n        //@ close wait_level_range({Main.class}, -1, 0);\n        ThreadPool pool = new ThreadPool();\n        //@ assert [_]pool.valid(call_perm_scope_of(currentThread), ?Op);\n        //@ wait_level_lt_below_obs(pair({MyModule.class}, 0r), pair({Main.class}, 0r), O);\n        //@ wait_level_below_object_wait_levels_within_range({Main.class}, -1, 0, Op);\n        //@ wait_level_lt_below_obs(pair({MyModule.class}, 0r), pair({Main.class}, -1r), Op);\n        //@ forall_append(Op, O, (wait_level_below_object)(pair({MyModule.class}, 0r)));\n        MyModule.doWork(pool);\n        //@ close exists(O);\n        //@ wait_level_lt_below_obs(pair({ThreadPool.class}, 0r), pair({Main.class}, -1r), Op);\n        //@ forall_append(Op, O, (wait_level_below_object)(pair({ThreadPool.class}, 0r)));\n        pool.shutDown();\n    }\n",
        "methodStartingLine": 255,
        "methodEndingLine": 273,
        "jml": "//@ requires obs(?O) &*& wait_level_below_obs(pair({Main.class}, 0r), O) == true;\n//@ ensures obs(O);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/vstte2012/problem2/problem2.java",
        "code": "  static Term createK()\n    \n    \n  {\n    Term res = new Term(1, null, null);\n    //@ close term(res, K);\n    return res;\n  }\n",
        "methodStartingLine": 123,
        "methodEndingLine": 130,
        "jml": "//@ requires true;\n//@ ensures result != null &*& term(result, K);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/vstte2012/problem2/problem2.java",
        "code": "  static Term createS()\n    \n    \n  {\n    Term res = new Term(2, null, null);\n    //@ close term(res, S);\n    return res;\n  }\n",
        "methodStartingLine": 132,
        "methodEndingLine": 139,
        "jml": "//@ requires true;\n//@ ensures result != null &*& term(result, S);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/vstte2012/problem2/problem2.java",
        "code": "  static Term createApply(Term left, Term right)\n    \n    \n  {\n    //@ open [?f1]term(left, state1);\n    //@ close [f1]term(left, state1);\n    //@ open [?f2]term(right, state2);\n    //@ close [f2]term(right, state2);\n    Term res = new Term(3, left, right);\n    //@ close [1]term(res, apply(state1, state2));\n    return res;\n  }\n",
        "methodStartingLine": 141,
        "methodEndingLine": 152,
        "jml": "//@ requires [_]term(left, ?state1) &*& [_]term(right, ?state2);\n//@ ensures result != null &*& [_]term(result, apply(state1, state2));"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/vstte2012/problem2/problem2.java",
        "code": "  static Term do_step(Term t)\n    \n    \n  {\n    if(t.type == K_TERM) {\n      return null;\n    } else if(t.type == S_TERM) {\n      return null;\n    } else { // (_, _)\n      if(t.left.type == K_TERM || t.left.type == S_TERM) {\n        Term reduced = do_step(t.right);\n        if(reduced == null) {\n          return null;\n        } else {\n          return createApply(t.left, reduced);\n        }\n      } else { // ((_, _), _)\n        if(t.left.left.type == K_TERM) {\n          Term reduced = do_step(t.left.right);\n          if(reduced == null) {\n            reduced = do_step(t.right);\n            if(reduced == null) {\n              return t.left.right;\n            } else {\n              return createApply(t.left, reduced);\n            }\n          } else {\n            return createApply(createApply(t.left.left, reduced), t.right);\n          }\n        } else if(t.left.left.type == S_TERM) {\n          Term reduced = do_step(t.left.right);\n          if(reduced == null) {\n            reduced = do_step(t.right);\n            if(reduced == null) {\n              return null;\n            } else {\n              return createApply(createApply(t.left.left, t.left.right), reduced);\n            }\n          } else {\n            return createApply(createApply(t.left.left, reduced), t.right);\n          }\n        } else { // (((_, _), _), _)\n          if(t.left.left.left.type == K_TERM) {\n            Term reduced = do_step(t.left);\n            if(reduced == null) {\n               reduced = do_step(t.right);\n               if(reduced == null) {\n                 return null;\n               } else {\n                 return createApply(t.left, reduced);\n               }\n            } else {\n              return createApply(reduced, t.right);\n            }\n          } else if(t.left.left.left.type == S_TERM) {\n             Term reduced = do_step(t.left.left.right);\n             if(reduced == null) {\n               reduced = do_step(t.left.right);\n               if(reduced == null) {\n                 reduced = do_step(t.right);\n                 if(reduced == null) {\n                   return createApply(createApply(t.left.left.right, t.right), createApply(t.left.right, t.right));\n                 } else {\n                   return createApply(t.left, reduced);\n                 }\n               } else {\n                  return createApply(createApply(createApply(t.left.left.left, t.left.left.right), reduced), t.right);\n               }\n             } else {\n               return createApply(createApply(createApply(t.left.left.left, reduced), t.left.right), t.right);\n             }\n          } else { // ((((_, _), _), _))\n            Term reduced = do_step(t.left);\n            if(reduced == null) {\n               reduced = do_step(t.right);\n               if(reduced == null) {\n                 return null;\n               } else {\n                 return createApply(t.left, reduced);\n               }\n            } else {\n              return createApply(reduced, t.right);\n            }\n          }\n        }\n      }\n    }\n  }\n",
        "methodStartingLine": 154,
        "methodEndingLine": 241,
        "jml": "//@ requires [_]term(t, ?state);\n//@ ensures result == null ? step(state) == none : [_]term(result, ?state2) &*& step(state) == some(state2);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/vstte2012/problem2/problem2.java",
        "code": "  static Term reduction(Term t)\n    \n    \n  {\n    //@ nat count = zero;\n    Term curr = t;\n    while(true) \n      //@ invariant [_]term(curr, ?state2) &*& nsteps(count, state) == state2;\n    {\n      Term newCur = do_step(curr);\n      if(newCur == null) { \n        return curr;\n        //@ close exists(count);\n      }\n      //@ count = succ(count); \n      curr = newCur;\n    }\n  }\n",
        "methodStartingLine": 243,
        "methodEndingLine": 260,
        "jml": "//@ requires [_]term(t, ?state);\n//@ ensures [_]term(result, ?state2) &*& exists(?n) &*& nsteps(n, state) == state2 &*& step(state2) == none;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/vstte2012/problem2/problem2.java",
        "code": "  static Term reduction_terminating(Term t)\n    \n    \n  {\n    //@ nat count = zero;\n    Term curr = t;\n    while(true) \n      //@ invariant [_]term(curr, ?state2) &*& noS(state2) == true &*& nsteps(count, state) == state2;\n      //@ decreases size(state2);\n    {\n      Term newCur = Term.do_step(curr);\n      if(newCur == null) { \n        return curr;\n        //@ close exists(count);\n      }\n      //@ count = succ(count); \n      curr = newCur;\n      //@ step_preserves_noS(state2);\n      //@ step_with_noS_decreases_size(state2);\n    }\n  }\n",
        "methodStartingLine": 405,
        "methodEndingLine": 425,
        "jml": "//@ requires [_]term(t, ?state) &*& noS(state) == true;\n//@ ensures [_]term(result, ?state2) &*& exists(?n) &*& nsteps(n, state) == state2 &*& step(state2) == none;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/vstte2012/problem2/problem2.java",
        "code": "  static void test_parity(Term t) \n    \n    \n  {\n    Term reduced = Term.reduction(t);\n    //@ assert [_]term(reduced, ?reducedstate);\n    //@ ks_step_parity(n);\n    //@ nsteps_converges(n);\n    /*@\n    if(is_even(n)) {\n      assert reducedstate == K;\n    } else {\n      assert reducedstate == apply(K, K);\n    }\n    @*/\n  }\n",
        "methodStartingLine": 680,
        "methodEndingLine": 695,
        "jml": "//@ requires exists<nat>(?n) &*& term(t, ks(n));\n//@ ensures true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/termination/IsEvenFunc.java",
        "code": "    static boolean isEven(IsEvenFunc e, IsOddFunc o, int n)\n        \n        \n        //@ terminates;\n    {\n        //@ is_wf_int_lt();\n        //@ create_call_perm_rec(2, level_max(eLevel, oLevel), int_lt, n);\n        //@ call_perm_rec_elim(1);\n        //@ e.getClass_le_level();\n        //@ level_le_append_l(eLevel, oLevel);\n        //@ level_le_trans({e.getClass()}, eLevel, level_max(eLevel, oLevel));\n        //@ consume_call_perm_for(e.getClass());\n        return e.isEven(o, n);\n    }\n",
        "methodStartingLine": 28,
        "methodEndingLine": 41,
        "jml": "//@ requires [_]e.valid(?eLevel) &*& [_]o.valid(?oLevel) &*& 0 <= n &*& call_perm(currentThread, cons(Util.class, level_max(eLevel, oLevel)));\n//@ ensures true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/termination/IsEvenFunc.java",
        "code": "    boolean isEven(IsOddFunc f, int n)\n        \n        \n        //@ terminates;\n    {\n        /*@\n        if (0 < n) {\n            call_perm_rec_weaken(2, n - 1);\n            call_perm_rec_elim(1);\n            f.getClass_le_level();\n            level_le_append_r(level, fLevel);\n            level_le_trans({f.getClass()}, fLevel, level_max(level, fLevel));\n            consume_call_perm_for(f.getClass());\n        }\n        @*/\n        return n == 0 || f.isOdd(this, n - 1);\n    }\n",
        "methodStartingLine": 61,
        "methodEndingLine": 77,
        "jml": "//@ requires [_]valid(?level) &*& [_]f.valid(?fLevel) &*& 0 <= n &*& call_perm_rec(currentThread, level_max(level, fLevel), int_lt, n);\n//@ ensures true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/termination/IsEvenFunc.java",
        "code": "    boolean isOdd(IsEvenFunc f, int n)\n        \n        \n        //@ terminates;\n    {\n        /*@\n        if (0 < n) {\n            call_perm_rec_weaken(2, n - 1);\n            call_perm_rec_elim(1);\n            f.getClass_le_level();\n            level_le_append_l(fLevel, level);\n            level_le_trans({f.getClass()}, fLevel, level_max(fLevel, level));\n            consume_call_perm_for(f.getClass());\n        }\n        @*/\n        return n != 0 && f.isEven(this, n - 1);\n    }\n",
        "methodStartingLine": 97,
        "methodEndingLine": 113,
        "jml": "//@ requires [_]valid(?level) &*& [_]f.valid(?fLevel) &*& 0 <= n &*& call_perm_rec(currentThread, level_max(fLevel, level), int_lt, n);\n//@ ensures true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/termination/IsEvenFunc.java",
        "code": "    static void main()\n        \n        \n        //@ terminates;\n    {\n        IsEvenFunc e = new MyIsEvenFunc();\n        IsOddFunc o = new MyIsOddFunc();\n        //@ produce_call_below_perm_();\n        //@ level_max_def({MyIsEvenFunc.class}, {MyIsOddFunc.class});\n        //@ call_below_perm__elim(1, {Util.class, MyIsOddFunc.class});\n        Util.isEven(e, o, 42);\n    }\n",
        "methodStartingLine": 117,
        "methodEndingLine": 128,
        "jml": "//@ requires true;\n//@ ensures true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/verifythis2016/tree_barrier.java",
        "code": "    boolean get()\n        \n        \n    {\n        throw new RuntimeException();\n    }\n",
        "methodStartingLine": 21,
        "methodEndingLine": 26,
        "jml": "//@ requires [_]valid(?inv) &*& is_get_op(?op, inv, ?pre, ?post) &*& pre();\n//@ ensures post(result);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/verifythis2016/tree_barrier.java",
        "code": "    void set(boolean value)\n        \n        \n    {\n        throw new RuntimeException();\n    }\n",
        "methodStartingLine": 27,
        "methodEndingLine": 32,
        "jml": "//@ requires [_]valid(?inv) &*& is_set_op(?op, inv, value, ?pre, ?post) &*& pre();\n//@ ensures post();"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/verifythis2016/tree_barrier.java",
        "code": "\tstatic void grab(Node child)\n\t    \n\t    \n\t{\n\t\tif(child != null)\n\t  \t    for (;;)\n\t  \t        //@ invariant child(parent, child);\n\t  \t    {\n\t  \t        /*@\n\t  \t        predicate pre() = child(parent, child);\n\t  \t        predicate post(boolean value) = value ? child_grabbed(parent, child) : child(parent, child); \n\t  \t        lemma void get_op()\n\t  \t            requires Node_inv(child)(?value) &*& pre();\n\t  \t            ensures Node_inv(child)(value) &*& post(value);\n\t  \t        {\n\t  \t            open pre();\n\t  \t            open Node_inv(child)(value);\n\t  \t            if (value) child.grabbed = true;\n\t  \t            close Node_inv(child)(value);\n\t  \t            close post(value);\n\t  \t        }\n\t  \t        @*/\n\t  \t        //@ open [_]tree1(child, _, _);\n\t  \t        //@ produce_lemma_function_pointer_chunk(get_op) : get_op(Node_inv(child), pre, post)() { call(); };\n\t  \t        //@ close pre();\n\t  \t        boolean result = child.sense.get();\n\t  \t        //@ open post(result);\n\t  \t        if (result) break;\n\t  \t    }\n\t\t\n\t\t//@ if (child == null) { open child(parent, child); }\n\t}\n",
        "methodStartingLine": 135,
        "methodEndingLine": 166,
        "jml": "//@ requires child(?parent, child);\n//@ ensures child_grabbed(parent, child);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/verifythis2016/tree_barrier.java",
        "code": "\tvoid ungrab(Node child)\n\t    \n\t    \n\t{\n\t    if (child != null) {\n\t        \n\t            /*@\n\t            predicate pre() = [_]child.parent |-> parent &*& child_grabbed(parent, child) &*& child != null;\n\t            predicate post() = child(parent, child);\n\t            lemma void set_op()\n\t                requires Node_inv(child)(?value) &*& pre();\n\t                ensures Node_inv(child)(false) &*& post();\n\t            {\n\t                open Node_inv(child)(value);\n\t                open pre();\n\t                child.grabbed = false;\n\t                open tree1(child, _, _);\n\t                open senseValuesTrue(_);\n\t                child.senseValue = false;\n\t                close post();\n\t                close Node_inv(child)(false);\n\t            }\n\t            @*/\n\t            //@ produce_lemma_function_pointer_chunk(set_op) : set_op(Node_inv(child), false, pre, post)() { call(); };\n\t            //@ close pre();\n\t            child.sense.set(false);\n\t            //@ open post();\n\t        \n\t    }\n\t    //@ if (child == null) { open child_grabbed(parent, child); }\n\t}\n",
        "methodStartingLine": 168,
        "methodEndingLine": 198,
        "jml": "//@ requires child_grabbed(?parent, child);\n//@ ensures child(parent, child);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/verifythis2016/tree_barrier.java",
        "code": "\tvoid barrier()\n\t\t\n\t\t\n\t{\n\t\t// synchronization phase\n\t\tgrab(left);\n\t\tgrab(right);\n\t\t\n\t\t{\n\t\t    /*@\n\t\t    predicate pre() =\n\t\t        [1/2]this.senseValue |-> false &*&\n\t\t        [1/2]this.takenBack |-> true &*&\n\t\t        [_]tree1(this, _, _) &*&\n\t\t        [_]this.left |-> ?left &*& child_grabbed(this, left) &*&\n\t\t        [_]this.right |-> ?right &*& child_grabbed(this, right);\n\t\t    predicate post() =\n\t\t        [1/2]takenBack |-> false &*&\n\t\t        [_]this.left |-> ?left &*& child_grabbed0(this, left) &*&\n\t\t        [_]this.right |-> ?right &*& child_grabbed0(this, right) &*&\n\t\t        [_]tree1(this, ?parent, ?thisTree) &*& parent == null ? senseValuesTrue(thisTree) : true;\n\t\t    lemma void set_op()\n\t\t        requires Node_inv(this)(?value0) &*& pre();\n\t\t        ensures Node_inv(this)(true) &*& post();\n\t\t    {\n\t\t        open Node_inv(this)(_);\n\t\t        open pre();\n\t\t        open child_grabbed(this, left);\n\t\t        open child_grabbed(this, right);\n\t\t        assert [_]tree1(this, _, ?thisTree);\n\t\t        open tree1(this, _, thisTree);\n\t\t        open tree(this.left, _, _);\n\t\t        open tree(this.right, _, _);\n\t\t        this.senseValue = true;\n\t\t        close senseValuesTrue0(thisTree);\n\t\t        close senseValuesTrue(thisTree);\n\t\t        \n\t\t        assert senseValuesTrue(thisTree); /// <<--- property requested established here.\n\t\t        takenBack = false;\n\t\t        close Node_inv(this)(true);\n\t\t        close post();\n\t\t    }\n\t\t    @*/\n\t\t    //@ produce_lemma_function_pointer_chunk(set_op) : set_op(Node_inv(this), true, pre, post)() { call(); };\n\t\t    //@ close pre();\n\t\t    sense.set(true);\n\t\t    //@ open post();\n\t\t}\n\t\t\n\t\t//@ assert [_]parent |-> ?p &*& p == null ? [_]tree1(this, null, ?thisTree) &*& senseValuesTrue(thisTree) : true;\n\n\t\t// wake-up phase\n\t\tif(parent == null) {\n\t\t    /*@\n\t\t    predicate pre() =\n\t\t        [1/2]takenBack |-> false &*&\n\t\t        [_]this.left |-> ?left &*& child_grabbed0(this, left) &*&\n\t\t        [_]this.right |-> ?right &*& child_grabbed0(this, right) &*&\n\t\t        [_]tree1(this, null, ?thisTree) &*& senseValuesTrue(thisTree);\n\t\t    predicate post() =\n\t\t        [1/2]takenBack |-> true &*&\n\t\t        [1/2]senseValue |-> false &*&\n\t\t        [_]this.left |-> ?left &*& child_grabbed(this, left) &*&\n\t\t        [_]this.right |-> ?right &*& child_grabbed(this, right);\n\t\t    lemma void set_op()\n\t\t        requires Node_inv(this)(?value0) &*& pre();\n\t\t        ensures Node_inv(this)(false) &*& post();\n\t\t    {\n\t\t        open Node_inv(this)(value0);\n\t\t        open pre();\n\t\t        open tree1(this, null, ?thisTree);\n\t\t        open senseValuesTrue(thisTree);\n\t\t        senseValue = false;\n\t\t        open senseValuesTrue0(thisTree);\n\t\t        close child_grabbed(this, left);\n\t\t        close child_grabbed(this, right);\n\t\t        takenBack = true;\n\t\t        close post();\n\t\t        close Node_inv(this)(false);\n\t\t    }\n\t\t    @*/\n\t\t    //@ produce_lemma_function_pointer_chunk(set_op) : set_op(Node_inv(this), false, pre, post)() { call(); };\n\t\t    //@ close pre();\n\t  \t    sense.set(false);\n\t  \t    //@ open post();\n\t  \t} else {\n\t  \t\n\t  \t//@ assert [_]tree1(this, ?parent, ?thisTree);\n\n\t\tfor (;;)\n\t\t    //@ requires [_]tree1(this, parent, thisTree) &*& [1/2]takenBack |-> false;\n\t\t    //@ ensures [1/2]takenBack |-> true &*& [1/2]this.senseValue |-> false &*& senseValuesTrue0(thisTree);\n\t\t{\n\t\t    {\n\t\t    /*@\n\t\t    predicate pre() = [_]tree1(this, parent, thisTree) &*& [1/2]takenBack |-> false;\n\t\t    predicate post(boolean value) =\n\t\t        [1/2]takenBack |-> !value &*&\n\t\t        value ? true :\n\t\t            [1/2]this.senseValue |-> false &*& senseValuesTrue0(thisTree);\n\t\t    lemma void get_op()\n\t\t        requires Node_inv(this)(?value) &*& pre();\n\t\t        ensures Node_inv(this)(value) &*& post(value);\n\t\t    {\n\t\t        open Node_inv(this)(value);\n\t\t        open pre();\n\t\t        if (value) {\n\t\t        } else {\n\t\t            takenBack = true;\n\t\t        }\n\t\t        close post(value);\n\t\t        close Node_inv(this)(value);\n\t\t    }\n\t\t    @*/\n\t\t    //@ produce_lemma_function_pointer_chunk(get_op) : get_op(Node_inv(this), pre, post)() { call(); };\n\t\t    //@ close pre();\n\t\t    boolean result = sense.get();\n\t\t    //@ open post(result);\n\t\t    if (!result)\n\t\t        break;\n\t\t    }\n\t\t}\n\t\t\n\t\t//@ open [_]tree1(this, parent, thisTree);\n\t\t//@ open senseValuesTrue0(thisTree);\n\t\t//@ close child_grabbed(this, left);\n\t\t//@ close child_grabbed(this, right);\n\t\t\n\t\t}\n\t\t\n\t\tungrab(left);\n\t\tungrab(right);\n\t}\n",
        "methodStartingLine": 200,
        "methodEndingLine": 332,
        "jml": "//@ requires valid();\n//@ ensures  valid();"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/vstte2012/problem1/problem1.java",
        "code": "  static void swap(boolean[] a, int i, int j) \n    \n    \n  {\n    boolean tmp = a[i];\n    a[i] = a[j];\n    a[j] = tmp;\n  }\n",
        "methodStartingLine": 85,
        "methodEndingLine": 92,
        "jml": "//@ requires array_slice(a, 0, a.length, ?vs) &*& 0 <= i &*& i < a.length &*& 0 <= j &*& j < a.length;\n//@ ensures array_slice(a, 0, a.length, update(j, nth(i, vs), update(i, nth(j, vs), vs)));"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/vstte2012/problem1/problem1.java",
        "code": "  static void two_way_sort(boolean[] a) \n    \n    \n  {\n    int i = 0;\n    int j = a.length - 1;\n    //@ close exists(nil);\n    //@ close is_perm(vs, vs);\n    while(i <= j) \n      /*@ invariant 0 <= i && i <= a.length &*& -1 <= j &*& j < a.length &*& j - i >= -1 &*&\n          array_slice(a, 0, a.length, ?xs) &*& \n          all_eq(take(i, xs), false) == true &*&\n          all_eq(drop(j + 1, xs), true) == true &*&\n          is_perm(vs, xs); \n          @*/\n      //@ decreases j - i + 1;\n    {\n      if(! a[i]) {\n        //@ take_one_more(i, xs);\n        i++;\n      } else if (a[j]) {\n        //@ drop_n_plus_one(j, xs);\n        j--;\n      } else {\n        swap(a, i, j);\n        //@ assert array_slice(a, 0, a.length, ?ys);\n        //@ open is_perm(vs, xs);\n        //@ open exists(?swaps);\n        //@ close exists(cons(pair(i, j), swaps));\n        //@ close is_perm(vs, ys);\n        //@ take_one_more(i, ys);\n        //@ drop_n_plus_one(j, ys);\n        //@ update_drop(xs, i, nth(j, xs), j+1);\n        i++;       \n        j--;\n      }\n    }\n    //@ is_sorted_lemma(xs, i);\n  }\n",
        "methodStartingLine": 94,
        "methodEndingLine": 132,
        "jml": "//@ requires array_slice(a, 0, a.length, ?vs);\n//@ ensures array_slice(a, 0, a.length, ?vs2) &*& is_sorted(vs2) == true &*& is_perm(vs, vs2);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/frontend/assert/Assert.java",
        "code": "  public static void main(String[] args)\n    \n    \n  {\n    int i = 99;\n    assert (i > 0);\n    assert i > 0;\n    char c = 'a';\n    assert (c + 4 == 'e');\n    assert c + 4 == 'e' : \"foobar\";\n  }\n",
        "methodStartingLine": 3,
        "methodEndingLine": 13,
        "jml": "//@ requires true;\n//@ ensures  true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/frontend/assign/Assign.java",
        "code": "  public static void main(String[] args)\n    \n    \n  {\n    int i = 0;\n    //@ assert i == 0;\n    i = i + 100;\n    //@ assert i == 100;\n    i += 100;\n    //@ assert i == 200;\n    i -= 1;\n    //@ assert i == 199;\n    i %= 99;\n    //@ assert i == 1;\n  }\n",
        "methodStartingLine": 3,
        "methodEndingLine": 17,
        "jml": "//@ requires true;\n//@ ensures true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/frontend/boxing/Boxing.java",
        "code": "  public static void main(String[] args)\n    \n    \n  {\n    //Integers\n    Integer i1 = 5;\n    int i2 = i1;\n    Integer i3 = i2;\n    \n    //Booleans\n    Boolean bool1 = true;\n    boolean bool2 = bool1;\n    Boolean bool3 = bool2;\n  }\n",
        "methodStartingLine": 5,
        "methodEndingLine": 18,
        "jml": "//@ requires true;\n//@ ensures true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/frontend/switch/Switch.java",
        "code": "  public static void main(String[] args) \n    \n    \n  {\n    int day = 4;\n    \n    int i = 0;\n    switch (day) \n    {\n      case 1:  i = 1;\n               break;\n      case 2:  i = 10;\n               break;\n      case 3:  i = 100;\n               break;\n      case 4:  i = 1000;\n               break;\n      default: i = 0;\n               break;\n    }\n    \n    //@ assert i == 1000;\n  }\n",
        "methodStartingLine": 3,
        "methodEndingLine": 25,
        "jml": "//@ requires true;\n//@ ensures  true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/termination/PlusOneFunc.java",
        "code": "    static int deriv(Func f, int x)\n        \n        \n        //@ terminates;\n    {\n        //@ call_perm_weaken_and_dup(4);\n        //@ f.getClass_le_level();\n        //@ consume_call_perm_for(f.getClass());\n        //@ consume_call_perm_for(f.getClass());\n        return f.apply(x + 1) - f.apply(x);\n    }\n",
        "methodStartingLine": 15,
        "methodEndingLine": 25,
        "jml": "//@ requires [_]f.valid(?level) &*& call_perm(currentThread, cons(Util.class, level));\n//@ ensures true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/termination/PlusOneFunc.java",
        "code": "    public int apply(int x)\n        \n        \n        //@ terminates;\n    {\n        return 0;\n    }\n",
        "methodStartingLine": 45,
        "methodEndingLine": 51,
        "jml": "//@ requires [_]valid(?level) &*& call_perm(currentThread, level);\n//@ ensures true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/termination/PlusOneFunc.java",
        "code": "    public int apply(int x)\n        \n        \n        //@ terminates;\n    {\n        //@ open valid(_);\n        //@ call_perm_weaken_and_dup(2);\n        //@ f.getClass_le_level();\n        //@ consume_call_perm_for(f.getClass());\n        return f.apply(x) + 1;\n    }\n",
        "methodStartingLine": 72,
        "methodEndingLine": 82,
        "jml": "//@ requires [_]valid(?level) &*& call_perm(currentThread, level);\n//@ ensures true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/termination/PlusOneFunc.java",
        "code": "    public static void main(String[] args)\n        \n        \n        //@ terminates;\n    {\n        Func f1 = new ZeroFunc();\n        Func f2 = new PlusOneFunc(f1);\n        Func f3 = new PlusOneFunc(f2);\n        //@ produce_call_below_perm_();\n        //@ call_below_perm__elim(1, {Util.class, PlusOneFunc.class, PlusOneFunc.class, ZeroFunc.class});\n        Util.deriv(f3, 0);\n    }\n",
        "methodStartingLine": 86,
        "methodEndingLine": 97,
        "jml": "//@ requires true;\n//@ ensures true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/instanceof/instanceof_1.java",
        "code": "  public static void test(A x, A y)\n    \n    \n  {\n    A tst = null;\n    if (x instanceof C){\n      if(x instanceof B){\n        //@ assert false;\n        //tst.StringRep();\n      }\n    }\n    if (x instanceof E){\n      if (!(x instanceof C)){\n        //@ assert false;\n        //tst.StringRep();\n      }\n      if (!(x instanceof iA)){\n        //@ assert false;\n        //tst.StringRep();\n      }\n    }\n    B u = new B();\n    if (!(u instanceof iX)){\n       //@ assert false;\n       //u.intRep();\n    }\n    //@produce_instanceof(x);\n    if(!(x instanceof iA)){\n      //@ assert false;\n      //x.intRep();\n    }\n    //@ A w = y;\n    //@produce_instanceof(w);\n    /*@\n    if(!(w instanceof iA)){\n      assert false;\n      //y.intRep();\n    } @*/\n  }\n",
        "methodStartingLine": 26,
        "methodEndingLine": 64,
        "jml": "//@ requires x != null &*& y != null;\n//@ ensures true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/instanceof/instanceof_3.java",
        "code": "  public static void test_fail1(A x)\n    \n    \n  {\n    iA tst = null;\n    if (x instanceof iC){\n      if(x instanceof iB){\n        tst.toString(); //~\n      }\n    }\n  }\n",
        "methodStartingLine": 14,
        "methodEndingLine": 24,
        "jml": "//@ requires true;\n//@ ensures true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/instanceof/instanceof_4.java",
        "code": "  public static void test_fail2(A x)\n    \n    \n  {\n    iA tst = null;\n    if (x instanceof C){\n      if(x instanceof iB){\n        tst.toString(); //~\n      }\n    }\n  }\n",
        "methodStartingLine": 12,
        "methodEndingLine": 22,
        "jml": "//@ requires true;\n//@ ensures true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/verifythis2016/tree_traversal.java",
        "code": "\tstatic void markTree(Tree root)\n\t    \n\t    \n\t{\n\t\tTree x, y;\n\t\tx = root;\n\t\t//@ tree_nonnull(x);\n\t\t//@ close stack(null, root, rootShape, root, rootShape, 0);\n\t\t//@ close inv(true, x, root, rootShape, _);\n\t\tdo\n\t\t    //@ invariant inv(?xIsNew, x, root, rootShape, ?stepsLeft) &*& x != null;\n\t\t    //@ decreases stepsLeft;\n\t\t{\n\t\t\t//@ open inv(_, _, _, _, _);\n\t\t\t//@ if (!xIsNew) open stack(x, _, _, _, _, _);\n\t  \t\tx.mark = true;\n\t  \t\tif (x.left == null && x.right == null) {\n\t    \t\t  \ty = x.parent;\n\t    \t\t  \t//@ close inv(false, y, root, rootShape, _);\n\t  \t\t} else {\n\t    \t\t\ty = x.left;\n\t    \t\t\tx.left = x.right;\n\t    \t\t\tx.right = x.parent;\n\t    \t\t\tx.parent = y;\n\t    \t\t\t/*@\n\t    \t\t\tif (xIsNew) {\n\t    \t\t\t    assert tree(y, false, x, ?leftShape);\n\t    \t\t\t    close exists(true);\n\t    \t\t\t    close stack(x, y, leftShape, root, rootShape, _);\n\t    \t\t\t    close inv(true, y, root, rootShape, _);\n\t    \t\t\t} else {\n\t    \t\t\t    open exists(?markedLeftSubtree);\n\t    \t\t\t    if (markedLeftSubtree) {\n\t    \t\t\t        close exists(false);\n\t    \t\t\t        assert tree(y, false, x, ?rightShape);\n\t    \t\t\t        tree_nonnull(x.right);\n\t    \t\t\t        close stack(x, y, rightShape, root, rootShape, _);\n\t    \t\t\t        close inv(true, y, root, rootShape, _);\n\t    \t\t\t    } else {\n\t    \t\t\t        close inv(false, y, root, rootShape, _);\n\t    \t\t\t    }\n\t    \t\t\t}\n\t    \t\t\t@*/\n\t  \t\t}\n\t\t \tx = y;\n\t\t} while (x != null);\n\t\t//@ open inv(_, _, _, _, _);\n\t\t//@ open stack(null, _, _, _, _, _);\n\t}\n",
        "methodStartingLine": 80,
        "methodEndingLine": 128,
        "jml": "//@ requires tree(root, false, null, ?rootShape);\n//@ ensures tree(root, true, null, rootShape);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/frontend/varargs/Varargs.java",
        "code": "  public static void addAll(List<Object> l, Object ... xs)\n    \n    \n  {\n    List<Object> temp = Arrays.asList(xs);\n    //@ close listIsCollection(temp, temp);\n    l.addAll(temp);\n  }\n",
        "methodStartingLine": 5,
        "methodEndingLine": 12,
        "jml": "//@ requires l.List(?l_es) &*& [?f]xs[..] |-> ?l_xs; \n//@ ensures l.List(append(l_es, l_xs)) &*& [f]xs[..] |-> l_xs; "
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/frontend/varargs/Varargs.java",
        "code": "  public static void main(String... args)\n    \n    \n  {\n    List<Object> l = new ArrayList<Object>();\n    addAll(l, new Object(), new Object(), new Object());\n  }\n",
        "methodStartingLine": 14,
        "methodEndingLine": 20,
        "jml": "//@ requires true;\n//@ ensures true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/frontend/many_files/Main.java",
        "code": "  public static void main(String[] args) \n    \n    \n  {\n    int add1 = Add1.add();\n    int add2 = Add2.add();\n    int add3 = Add3.add();\n    int add  = add1 + add2 + add3;\n    //@ assert add == 11 + 21 + 22 + 31 + 32 + 33;\n    \n    int mul1 = Multiply1.multiply();\n    int mul2 = Multiply2.multiply();\n    int mul3 = Multiply3.multiply();\n    int mul  = mul1 * mul2 * mul3;\n    //@ assert mul == 11 * 21 * 22 * 31 * 32 * 33;\n  }\n",
        "methodStartingLine": 7,
        "methodEndingLine": 22,
        "jml": "//@ requires true;\n//@ ensures true; "
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/frontend/foreach/Foreach.java",
        "code": "  public static void main(String[] args)\n    \n    \n  {\n    List<Integer> ints = new ArrayList<Integer>();\n    Integer i1 = new Integer(1);\n    Integer i2 = new Integer(2);\n    Integer i3 = new Integer(3);\n    Integer i4 = new Integer(4);\n    ints.add(i1); ints.add(i2); ints.add(i3); ints.add(i4);\n\n    //@ assert ints.List(?es);\n    int result = 0;\n    //@ ints.listToIterable();\n    for (Integer x : ints)\n      //@ requires i$.Iterator((seq_of_list)(es), _, ?n) &*& n >= 0 &*& n <= length(es);\n      //@ ensures  i$.Iterator((seq_of_list)(es), _, length(es));\n    {\n      result += x.intValue();\n    }\n  }\n",
        "methodStartingLine": 5,
        "methodEndingLine": 25,
        "jml": "//@ requires true;\n//@ ensures true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/NewEidCard/File.java",
        "code": "\tpublic short getFileID() \n\t    \n\t    \n\t{\n\t\t//@ open [f]valid_id(this);\n\t\treturn fileID;\n\t\t//@ close [f]valid_id(this);\n\t}\n",
        "methodStartingLine": 30,
        "methodEndingLine": 37,
        "jml": "//@ requires [?f]valid_id(this);\n//@ ensures [f]valid_id(this);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/NewEidCard/File.java",
        "code": "\tpublic void setActive(boolean b)\n\t    \n\t    \n\t{\n\t\t//@ open File(fid, _, info);\n\t\tactive = b;\n\t\t//@ close File(fid, b, info);\n\t}\n",
        "methodStartingLine": 39,
        "methodEndingLine": 46,
        "jml": "//@ requires File(?fid, _, ?info);\n//@ ensures File(fid, b, info);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/NewEidCard/File.java",
        "code": "\tpublic boolean isActive() \n\t    \n\t    \n\t{\n\t\t//@ open [f]File(fid, state, info);\n\t\treturn active;\n\t\t//@ close [f]File(fid, state, info);\n\t}\n",
        "methodStartingLine": 49,
        "methodEndingLine": 56,
        "jml": "//@ requires [?f]File(?fid, ?state, ?info);\n//@ ensures [f]File(fid, state, info) &*& result == state;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Iterator/SingletonIterator.java",
        "code": "    public boolean hasNext()\n        \n        \n    {\n        //@ open valid(ys);\n        boolean result = !this.done;\n        //@ close valid(ys);\n        return result;\n    }\n",
        "methodStartingLine": 27,
        "methodEndingLine": 35,
        "jml": "//@ requires valid(?ys);\n//@ ensures valid(ys) &*& result == (ys != nil);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Iterator/SingletonIterator.java",
        "code": "    public Object next()\n        \n        \n    {\n        //@ open valid(ys);\n        this.done = true;\n        Object result = this.value;\n        //@ close valid(nil);\n        return result;\n    }\n",
        "methodStartingLine": 37,
        "methodEndingLine": 46,
        "jml": "//@ requires valid(?ys) &*& ys != nil;\n//@ ensures valid(tail(ys)) &*& result == head(ys) &*& result != null;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/MyApplet-with-auto.java",
        "code": "  public static void install(byte[] byaBuffer, short shOffset, byte byLength) throws ISOException /*@ ensures true; @*/\n    /*@\n    requires\n      system() &*& class_init_token(MyApplet.class) &*&\n      byaBuffer != null &*&\n      shOffset >= 0 &*&\n      array_slice(byaBuffer, shOffset, shOffset + byLength, ?values) &*&\n      length_value_record(values, 0, ?privilegesStart) &*&\n      length_value_record(values, privilegesStart, ?paramsStart) &*&\n      element(values, paramsStart + 1, ?paramsLength) &*&\n      element(values, paramsStart + 2, ?maxNbRecord) &*& maxNbRecord >= 0 &*&\n      element(values, paramsStart + 3, ?maxSizeRecord) &*& maxSizeRecord >= 6 &*&\n      shOffset + paramsStart + 3 <= 32767;\n    @*/\n    \n  {\n    //@ init_class();\n    short shIndex = shOffset;\n    byte byMaxNbRecord   = DEF_MAX_ENTRIES ;\n    byte byMaxSizeRecord = DEF_MAX_ENTRY_SIZE;\n\n    //@ open length_value_record(values, 0, privilegesStart);\n    //@ open length_value_record(values, privilegesStart, _);\n    shIndex += (byaBuffer[shIndex]+1);\n    shIndex += (byaBuffer[shIndex]+1);\n\n    ++shIndex;\n    // BUG: byte byOffRecParam = (byte)shIndex ; The Java Card spec does not guarantee that the offset fits in a byte.\n    short byOffRecParam = shIndex ;\n    //@ open element(values, shIndex - shOffset, _);\n    //@ open element(values, shIndex + 1 - shOffset, _);\n    //@ open element(values, shIndex + 2 - shOffset, _);\n    byte byLenRecParam = byaBuffer[shIndex] ;\n    //\n    if (byLenRecParam != 0)\n    {\n      ++byOffRecParam;\n      byMaxNbRecord    = (byaBuffer[byOffRecParam] != 0) ? byaBuffer[byOffRecParam] : DEF_MAX_ENTRIES;\n      ++byOffRecParam;\n      byMaxSizeRecord  = (byaBuffer[byOffRecParam] != 0) ? byaBuffer[byOffRecParam] : DEF_MAX_ENTRY_SIZE;\n    }\n\n    new MyApplet(byaBuffer, (short)(shOffset+1), byaBuffer[shOffset], byMaxNbRecord, byMaxSizeRecord);\n  }\n",
        "methodStartingLine": 161,
        "methodEndingLine": 204,
        "jml": "//@ ensures true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/MyApplet-with-auto.java",
        "code": "  private void processSelectCmd(APDU oApdu)\n    \n    \n  {\n    if ( !selectingApplet() )\n      ISOException.throwIt(ISO7816.SW_FILE_NOT_FOUND);\n    byte[] byaApdu = checkIncomingData(oApdu, true, false);\n    short shCurrentOffset = 0;\n    if (sh(byaApdu[ISO7816.OFFSET_LC]) == (short)0)\n      ISOException.throwIt(ISO7816.SW_WRONG_LENGTH);\n    if((byaApdu[ISO7816.OFFSET_P1]) != 0x04)\n      ISOException.throwIt(ISO7816.SW_INCORRECT_P1P2);\n    ////@ open valid(); // auto\n    ////@ open MyApplet_(this, _, _); // auto\n    byte[] byaOptionalData = bya_OptionalData;\n    shCurrentOffset = Util.arrayCopyNonAtomic( bya_FCI, shCurrentOffset, byaApdu, (short)0, (short)bya_FCI.length );\n    byte k,j;\n    //@ int i = 2;\n    //@ optional_data_records_split(byaOptionalData, 0, i);\n\n\n    for(k=26,j=28 ; k>=0 ; k-=13,j-=13)\n      /*@\n      invariant\n          -13 <= k &*& k <= 26 &*& j == k + 2 &*& k == 13 * i &*&\n          array_slice(byaApdu, 0, byaApdu.length, _) &*&\n          23 <= shCurrentOffset &*&\n          shCurrentOffset <= 23 + 13 * (2 - i) &*&\n          k < 0 ?\n              [1/2]optional_data_records(byaOptionalData, 0, 3)\n          :\n              [1/2]optional_data_records(byaOptionalData, 0, i) &*& [1/2]optional_data_records(byaOptionalData, k, 3 - i);\n      @*/\n    {\n      //@ open optional_data_records(byaOptionalData, k, _); // auto\n      shCurrentOffset = Util.arrayCopyNonAtomic( byaOptionalData, k,\n          byaApdu, shCurrentOffset,\n          (byaOptionalData[j] != 0)? (short)(byaOptionalData[j] + 3): (short)0);\n      //@ close [1/2]optional_data_records(byaOptionalData, k, 3 - i);\n      //@ i--;\n      /*@\n      if (0 <= i) {\n          optional_data_records_split(byaOptionalData, 0, i);\n          open optional_data_records(byaOptionalData, k - 13, _);\n          close [1/2]optional_data_records(byaOptionalData, k - 13, 3 - i);\n      }\n      @*/\n    }\n    shCurrentOffset -= /**/bya_FCI.length;\n    //@ assume(bya_FCI[3] == 14);\n    byaApdu[bya_FCI[3]+5] = (byte)(shCurrentOffset + 3);\n    byaApdu[1] = (byte)(shCurrentOffset + 3+2 + bya_FCI[3]+2);\n    oApdu.setOutgoingAndSend((short)0, (short)(sh(byaApdu[1]) + (short)2));\n    ////@ close [1/2]MyApplet_(this, _, _); // auto\n    ////@ close [1/2]valid(); // auto\n  }\n",
        "methodStartingLine": 275,
        "methodEndingLine": 330,
        "jml": "//@ requires [1/2]valid() &*& oApdu != null &*& APDU(oApdu, ?buffer) &*& array_slice(buffer, 0, buffer.length, _);\n//@ ensures [1/2]valid() &*& oApdu != null &*& APDU(oApdu, buffer) &*& array_slice(buffer, 0, buffer.length, _);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/MyApplet-with-auto.java",
        "code": "  private byte[] checkIncomingData(APDU oApdu, boolean bReceive, boolean bCheckPersoState)\n    \n    \n  {\n    if (bCheckPersoState && OPSystem.getCardContentState() != OPSystem.APPLET_PERSONALIZED )\n      ISOException.throwIt(ISO7816.SW_CONDITIONS_NOT_SATISFIED);\n    if (bReceive) oApdu.setIncomingAndReceive();\n    return oApdu.getBuffer();\n  }\n",
        "methodStartingLine": 332,
        "methodEndingLine": 340,
        "jml": "//@ requires oApdu != null &*& APDU(oApdu, ?buffer_) &*& array_slice(buffer_, 0, buffer_.length, _);\n//@ ensures APDU(oApdu, buffer_) &*& array_slice(buffer_, 0, buffer_.length, _) &*& result == buffer_;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/MyApplet-with-auto.java",
        "code": "  private void processPutData(APDU oApdu)\n    \n    \n  {\n    byte[] byaApdu = checkIncomingData(oApdu, true, true); // true => personalization must have previously been done\n    short shLC = sh(byaApdu[ISO7816.OFFSET_LC]) ;\n\n    if (shLC > MAX_LEN_OPTIONAL_DATA)\n      ISOException.throwIt(ISO7816.SW_WRONG_LENGTH);\n\n    byte byIndex = getOptionalDataIndex(Util.getShort( byaApdu, ISO7816.OFFSET_P1 ));\n\n    JCSystem.beginTransaction(); // Inserted for VeriFast\n    ////@ open valid(); // auto\n    ////@ open MyApplet_(this, _, _); // auto\n    byte[] byaOptionalData = bya_OptionalData;\n    //@ optional_data_records_split(byaOptionalData, 0, byIndex);\n    //@ open optional_data_records(byaOptionalData, byIndex * MAX_LEN_OPTIONAL_DATA_AND_HEADER, 3 - byIndex);\n    Util.arrayCopy( byaApdu, ISO7816.OFFSET_P1,\n        byaOptionalData,\n        (short) (byIndex * MAX_LEN_OPTIONAL_DATA_AND_HEADER),\n        (short) (shLC + (short)3));\n    //@ assert byaOptionalData[byIndex * 13 + 2] |-> ?length;\n    //@ assume(0 <= length && length <= MyApplet.MAX_LEN_OPTIONAL_DATA);\n    //@ close optional_data_records(byaOptionalData, byIndex * MAX_LEN_OPTIONAL_DATA_AND_HEADER, 3 - byIndex);\n    //@ optional_data_records_merge(byaOptionalData, 0);\n    ////@ close MyApplet_(this, _, _); // auto\n    ////@ close valid(); // auto\n    JCSystem.commitTransaction(); // Inserted for VeriFast\n  }\n",
        "methodStartingLine": 342,
        "methodEndingLine": 371,
        "jml": "//@ requires current_applet(this) &*& [1/2]valid() &*& oApdu != null &*& APDU(oApdu, ?buffer) &*& array_slice(buffer, 0, buffer.length, _);\n//@ ensures current_applet(this) &*& [1/2]valid() &*& oApdu != null &*& APDU(oApdu, buffer) &*& array_slice(buffer, 0, buffer.length, _);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/MyApplet-with-auto.java",
        "code": "  private byte getOptionalDataIndex(short tag)\n    \n    \n  {\n    switch (tag)\n    {\n    case TAG_FCI_ISSUER_DISCRETIONARY_DATA : return 0 ;\n    case TAG_ISSUER_CODE_TABLE_INDEX : return 1;\n    case TAG_LANGUAGE_PREFERENCE : return 2;\n    default :\n      ISOException.throwIt(ISO7816.SW_INCORRECT_P1P2);\n    }\n  }\n",
        "methodStartingLine": 373,
        "methodEndingLine": 385,
        "jml": "//@ requires true;\n//@ ensures 0 <= result &*& result <= 2;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/MyApplet-with-auto.java",
        "code": "  private void processAppendRecord(APDU oApdu)\n    \n    \n  {\n    ////@ open valid(); // auto\n    ////@ open MyApplet_(this, _, _); // auto\n    byte[] byaApdu = checkIncomingData(oApdu, true, false);\n    short shLC = sh(byaApdu[ISO7816.OFFSET_LC]) ;\n    if((byaApdu[ISO7816.OFFSET_P1] != 0)\n        || (byaApdu[ISO7816.OFFSET_P2]&0x07) != 0)\n      ISOException.throwIt(ISO7816.SW_INCORRECT_P1P2);\n    if((byaApdu[ISO7816.OFFSET_P2]>>3) != 1)\n      ISOException.throwIt(ISO7816.SW_FILE_NOT_FOUND);\n     if ( shLC > sh(by_MaxSizeRecord) )\n      ISOException.throwIt( ISO7816.SW_FILE_FULL );\n     //@ byte maxSizeRecord = by_MaxSizeRecord;\n    //@ assert 0 <= shLC &*& shLC <= maxSizeRecord;\n\n    if (byaApdu[ISO7816.OFFSET_CDATA] != (byte)0x70)\n      ISOException.throwIt( ISO7816.SW_CONDITIONS_NOT_SATISFIED );\n\n    //@ assume(0 <= byaApdu[ADF_LEN_OFFSET] && byaApdu[ADF_LEN_OFFSET] <= 133 - ADF_OFFSET);\n    if (JCSystem.lookupAID( byaApdu, ADF_OFFSET, byaApdu[ADF_LEN_OFFSET] )== null)\n      ISOException.throwIt( ISO7816.SW_CONDITIONS_NOT_SATISFIED );\n\n    byte byFreeRecord = (byte)0x7F ;\n    byte [] byaRecordData ;\n\n    ////@ close [1/2]MyApplet_(this, _, _); // auto\n    for (byte i = 0; i < by_NbRecords; i++)\n      /*@\n      invariant\n        [1/2]MyApplet_(this, ?nbRecords, maxSizeRecord) &*&\n        array_slice(byaApdu, 0, byaApdu.length, _) &*& 133 <= byaApdu.length &*&\n        0 <= i &*& i <= nbRecords &*&\n        (byFreeRecord != 0x7F ? 0 <= byFreeRecord &*& byFreeRecord < i : true);\n      @*/\n    {\n      byaRecordData = (byte[]) (o_Records[i]);\n      //@ assume(0 <= byaApdu[ADF_LEN_OFFSET] && byaApdu[ADF_LEN_OFFSET] <= 133 - ADF_OFFSET && byaApdu[ADF_LEN_OFFSET] <= byaRecordData.length - ADF_OFFSET);\n      if ((byaRecordData[0] != 0x00)\n          && Util.arrayCompare(byaApdu, ADF_OFFSET, byaRecordData, (short)(OFF_DATA_IN_RECORD+6), byaApdu[ADF_LEN_OFFSET]) == 0)\n        ISOException.throwIt( ISO7816.SW_CONDITIONS_NOT_SATISFIED );\n      if (byaRecordData[0] == 0x00)\n      {\n        byFreeRecord = i ;\n      }\n      //@ close [1/2]record(by_MaxSizeRecord, byaRecordData, unit);\n      ////@ close [1/2]MyApplet_(this, _, _); // auto\n    }\n    //@ assume(11 <= shLC);\n\n    if (byFreeRecord != 0x7F)\n    {\n      //@ close [1/2]MyApplet_(this, _, _); // todo\n      JCSystem.beginTransaction();\n      //@ open valid(); // todo\n\n      byaRecordData = (byte[])o_Records[byFreeRecord];\n      //@ open record(by_MaxSizeRecord, byaRecordData, _);\n      Util.arrayCopy(byaApdu, ISO7816.OFFSET_CDATA, byaRecordData, OFF_DATA_IN_RECORD, shLC);\n      //@ assume(0 <= byaRecordData[6] && byaRecordData[6] <= by_MaxSizeRecord - 6);\n      byaRecordData[0] = (byte)shLC ;\n      //@ close record(by_MaxSizeRecord, byaRecordData, _);\n      ////@ close MyApplet_(this, _, _); // auto\n      ////@ close valid(); // auto\n      JCSystem.commitTransaction();\n    }\n    else\n    {\n\n      ////@ close [1/2]MyApplet_(this, _, _); // auto\n      JCSystem.beginTransaction();\n      //@ open valid();\n      //@ open MyApplet_(this, _, _);\n      if (by_NbRecords >= by_MaxNbRecord)\n        ISOException.throwIt( ISO7816.SW_FILE_FULL );\n      o_Records[by_NbRecords] = new byte[by_MaxSizeRecord + LEN_RECORD_LEN_BYTE];\n      byaRecordData = (byte[])(o_Records[by_NbRecords]);\n      by_NbRecords++ ;\n\n      Util.arrayCopy(byaApdu, ISO7816.OFFSET_CDATA, byaRecordData, OFF_DATA_IN_RECORD, shLC);\n      //@ assume(0 <= byaRecordData[6] && byaRecordData[6] <= by_MaxSizeRecord - 6);\n      byaRecordData[0] = (byte)shLC ;\n      //@ close record(by_MaxSizeRecord, byaRecordData, unit);\n      ////@ close my_record(by_MaxSizeRecord, byaRecordData, unit); // auto\n      //@ array_slice_deep_close(o_Records, by_NbRecords - 1, my_record, maxSizeRecord);\n      ////@ close MyApplet_(this, _, _); // auto\n      ////@ close valid(); // auto\n      JCSystem.commitTransaction();\n    }\n    ////@ open valid(); // auto\n    ////@ open MyApplet_(this, _, _); // auto\n    if ((byFreeRecord == (byte)0x7F) && (by_NbRecords == 1))\n      OPSystem.setCardContentState( OPSystem.APPLET_PERSONALIZED );\n    ////@ close [1/2]MyApplet_(this, _, _); // auto\n    ////@ close [1/2]valid(); // auto\n  }\n",
        "methodStartingLine": 387,
        "methodEndingLine": 484,
        "jml": "//@ requires current_applet(this) &*& [1/2]valid() &*& oApdu != null &*& APDU(oApdu, ?buffer) &*& array_slice(buffer, 0, buffer.length, _);\n//@ ensures current_applet(this) &*& [1/2]valid() &*& oApdu != null &*& APDU(oApdu, buffer) &*& array_slice(buffer, 0, buffer.length, _);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/MyApplet-with-auto.java",
        "code": "  private void processDeleteRecord(APDU oApdu)\n    \n    \n  {\n    byte[] byaApdu = checkIncomingData(oApdu, true, false);\n\n    byte byMode = MODE_DELETE_UNSET ;\n    switch(byaApdu[ISO7816.OFFSET_P2]&0x07)\n    {\n    case 0x00:\n      switch(byaApdu[ISO7816.OFFSET_P1])\n      {\n      case 0x00 :\n        byMode = MODE_DELETE_BY_AID ;\n        break ;\n      case 0x01 :\n        byMode = MODE_DELETE_BY_REFRESH ;\n        break ;\n      default:\n        ISOException.throwIt(ISO7816.SW_INCORRECT_P1P2);\n      }\n      break ;\n    case 0x04:\n      byMode = MODE_DELETE_BY_NUMBER ;\n      break ;\n    default:\n      ISOException.throwIt(ISO7816.SW_INCORRECT_P1P2);\n    }\n\n    if((byaApdu[ISO7816.OFFSET_P2]>>3) != 1)\n      ISOException.throwIt(ISO7816.SW_FILE_NOT_FOUND);\n    byte [] byaRecordData = null ;\n    if (byMode == MODE_DELETE_BY_NUMBER)\n    {\n\n      byte byRecordToDelete = /*@ truncating @*/ (byte)(byaApdu[ISO7816.OFFSET_P1]-1) ;\n      JCSystem.beginTransaction();\n      ////@ open valid(); // auto\n      ////@ open MyApplet_(this, _, _); // auto\n      if ((byRecordToDelete < by_NbRecords) && (byRecordToDelete >= 0))\n        byaRecordData = (byte[])(o_Records[byRecordToDelete]) ;\n      //\n      if (byaRecordData == null\n          || byaRecordData[0] == (byte)0)\n        ISOException.throwIt(ISO7816.SW_RECORD_NOT_FOUND);\n      //\n      byaRecordData[0] = (byte)0 ;\n      //@ close record(by_MaxSizeRecord, byaRecordData, unit); // auto\n      ////@ close MyApplet_(this, _, _); // auto\n      ////@ close valid(); // auto\n      JCSystem.commitTransaction();\n\n    }\n    else if (byMode == MODE_DELETE_BY_AID)\n    {\n\n            JCSystem.beginTransaction(); // Inserted for VeriFast\n            ////@ open valid(); // auto\n            //@ open MyApplet_(this, _, _);\n            ////@ close MyApplet_(this, _, _); // auto\n      for(byte i=0 ; i<by_NbRecords ; i++)\n        /*@\n        invariant\n          MyApplet_(this, ?nbRecords, _) &*&\n          array_slice(byaApdu, 0, byaApdu.length, _) &*& 133 <= byaApdu.length &*&\n          0 <= i &*& i <= nbRecords;\n        @*/\n      {\n        byaRecordData = (byte[])(o_Records[i]) ;\n\n        if (Util.arrayCompare(byaApdu, ISO7816.OFFSET_CDATA,\n            byaRecordData, (short)(OFF_DATA_IN_RECORD+6), byaRecordData[OFF_DATA_IN_RECORD+5]) == 0)\n        {\n          byaRecordData[0] = (byte)0 ;\n          //@ close record(by_MaxSizeRecord, byaRecordData, unit);\n          ////@ close MyApplet_(this, _, _);  // auto\n          break;\n        }\n        //@ close record(by_MaxSizeRecord, byaRecordData, unit);\n      }\n      ////@ close valid();  // auto\n      JCSystem.commitTransaction(); // Inserted for VeriFast. TODO: Move closer to update.\n    }\n    else if (byMode == MODE_DELETE_BY_REFRESH)\n    {\n      JCSystem.beginTransaction(); // Inserted for VeriFast\n      ////@ open valid();  // auto\n      ////@ open MyApplet_(this, _, _);  // auto\n      //@ close MyApplet_(this, _, _);\n      for(short i=0 ; i<by_NbRecords ; i++)\n        /*@\n        invariant\n          MyApplet_(this, ?nbRecords, _) &*&\n          array_slice(byaApdu, 0, byaApdu.length, _) &*& 133 <= byaApdu.length &*&\n          0 <= i &*& i <= nbRecords;\n        @*/\n      {\n        byaRecordData = (byte[])(o_Records[i]) ;\n          if (JCSystem.lookupAID( byaRecordData, (byte)(OFF_DATA_IN_RECORD+6), byaRecordData[OFF_DATA_IN_RECORD+5] )== null)\n        {\n          byaRecordData[0] = (byte)0;\n        }\n        //@ close record(by_MaxSizeRecord, byaRecordData, unit);\n      }\n      ////@ close valid();  // auto\n      JCSystem.commitTransaction();\n    }\n  }\n",
        "methodStartingLine": 491,
        "methodEndingLine": 598,
        "jml": "//@ requires current_applet(this) &*& [1/2]valid() &*& oApdu != null &*& APDU(oApdu, ?buffer) &*& array_slice(buffer, 0, buffer.length, _);\n//@ ensures current_applet(this) &*& [1/2]valid() &*& oApdu != null &*& APDU(oApdu, buffer) &*& array_slice(buffer, 0, buffer.length, _);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/MyApplet-with-auto.java",
        "code": "  private void processReadRecord(APDU oApdu)\n    \n    \n  {\n    ////@ open valid();  // auto\n    byte[] byaApdu = checkIncomingData(oApdu, false, true);\n    short shIndexRecord = (short)(sh(byaApdu[ISO7816.OFFSET_P1]) - (short)1);\n\n    if ((shIndexRecord < (short)0) || (shIndexRecord >= by_NbRecords))\n      ISOException.throwIt(ISO7816.SW_RECORD_NOT_FOUND);\n    if((byaApdu[ISO7816.OFFSET_P2]&0x07) != 4)\n      ISOException.throwIt(ISO7816.SW_INCORRECT_P1P2);\n\n    if((byaApdu[ISO7816.OFFSET_P2]>>3) != 1)\n      ISOException.throwIt(ISO7816.SW_FILE_NOT_FOUND);\n\n    byte [] byaRecordData = (byte[])(o_Records[shIndexRecord]) ;\n    short shLenRecord = sh(byaRecordData[0]);\n\n    if (shLenRecord == (short)0)\n      ISOException.throwIt(ISO7816.SW_RECORD_NOT_FOUND);\n\n    Util.arrayCopyNonAtomic(byaRecordData, OFF_DATA_IN_RECORD, byaApdu, ISO7816.OFFSET_CDATA, shLenRecord);\n\n    short shLE = oApdu.setOutgoing() ;\n\n    if (shLE == (short)0 || shLE > shLenRecord) shLE = shLenRecord ;\n\n    oApdu.setOutgoingLength(shLE);\n    oApdu.sendBytes((short)0, (short)shLE);\n    //@ close [1/2]record(by_MaxSizeRecord, byaRecordData, unit);\n    ////@ close [1/2]MyApplet_(this, _, _); // auto\n    ////@ close [1/2]valid(); // auto\n  }\n",
        "methodStartingLine": 600,
        "methodEndingLine": 633,
        "jml": "//@ requires [1/2]valid() &*& oApdu != null &*& APDU(oApdu, ?buffer) &*& array_slice(buffer, 0, buffer.length, _);\n//@ ensures [1/2]valid() &*& oApdu != null &*& APDU(oApdu, buffer) &*& array_slice(buffer, 0, buffer.length, _);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/MyApplet-with-auto.java",
        "code": "  private short sh(byte byByte)\n    \n    \n  {\n    short res = (short) (byByte & 0xFF);\n    return res;\n    //@ assume (byByte < 0 ? res == 256 + byByte : res == byByte);\n  }\n",
        "methodStartingLine": 635,
        "methodEndingLine": 642,
        "jml": "//@ requires true;\n//@ ensures is_short_of_byte(result, byByte) == true &*& 0 <= result &*& result <= 255;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/io/template_method/TemplateMethod.java",
        "code": "  public void template()\n    /*@ requires this.token(?t1)\n      &*& m1_io(this.getClass())(t1, ?t2) // This is the calculation that the subclass will perform.\n      &*& m1_io(this.getClass())(t2, ?t3)\n      &*& m2_io(this.getClass())(t3, ?t4);\n    @*/\n    \n  {\n    // We delegate some steps to subclasses:\n    m1();\n    m1();\n    m2();\n  }\n",
        "methodStartingLine": 56,
        "methodEndingLine": 68,
        "jml": "//@ ensures this.token(t4);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/io/template_method/TemplateMethod.java",
        "code": "  public void m1()\n    \n    \n  {\n    //@ open token(t1);\n    //@ open m1_io(Adder.class)(_, _);\n    if (x != Short.MAX_VALUE){\n      x = (short)(x + 1);\n    }\n    //@ close token(t2);\n  }\n",
        "methodStartingLine": 113,
        "methodEndingLine": 123,
        "jml": "//@ requires token(?t1) &*& m1_io(Adder.class)(t1, ?t2);\n//@ ensures token(t2);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/io/template_method/TemplateMethod.java",
        "code": "  public void m2()\n    \n    \n  {\n    //@ open token(t1);\n    //@ open m2_io(Adder.class)(_, _);\n    if (x <= Short.MAX_VALUE - 20){\n      x = (short)(x + 20);\n    }\n    //@ close token(t2);\n  }\n",
        "methodStartingLine": 125,
        "methodEndingLine": 135,
        "jml": "//@ requires token(?t1) &*& m2_io(Adder.class )(t1, ?t2);\n//@ ensures token(t2);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/io/template_method/TemplateMethod.java",
        "code": "  public int getValue()\n    \n    \n  {\n    return x;\n  }\n",
        "methodStartingLine": 137,
        "methodEndingLine": 142,
        "jml": "//@ requires token(?t) &*& exists<int>(?v) &*& t == adder_place(v);\n//@ ensures token(t) &*& result == v;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/io/template_method/TemplateMethod.java",
        "code": "  public void m1()\n    \n    \n  {\n    //@ open token(t1);\n    //@ open m1_io(Multiplier.class)(_, _);\n    if (value <= Integer.MAX_VALUE / 2){\n      value = value * 2;\n    }\n    //@ close token(t2);\n  } \n",
        "methodStartingLine": 183,
        "methodEndingLine": 193,
        "jml": "//@ requires token(?t1) &*& m1_io(Multiplier.class)(t1, ?t2);\n//@ ensures token(t2);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/io/template_method/TemplateMethod.java",
        "code": "  public void m2()\n    \n    \n  {\n    //@ open token(t1);\n    //@ open m2_io(Multiplier.class)(_, _);\n    if (value <= Integer.MAX_VALUE / 3){\n      value = value * 3;\n    }\n    //@ close token(t2);\n  } \n",
        "methodStartingLine": 195,
        "methodEndingLine": 205,
        "jml": "//@ requires token(?t1) &*& m2_io(Multiplier.class)(t1, ?t2);\n//@ ensures token(t2);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/io/template_method/TemplateMethod.java",
        "code": "  public int getValue()\n    \n    \n  {\n    return value;\n    //@ close exists(value);\n  }\n",
        "methodStartingLine": 207,
        "methodEndingLine": 213,
        "jml": "//@ requires token(?t);\n//@ ensures token(t) &*& exists<int>(?x) &*& t == multiplier_place(x) &*& result == x;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/io/template_method/TemplateMethod.java",
        "code": "  public static void main(String[] args)\n  \n  \n  {\n    Adder calc1 = new Adder();\n    //@ close m1_io(Adder.class)(adder_place(0), ?t2);\n    //@ close m1_io(Adder.class)(t2, ?t3);\n    //@ close m2_io(Adder.class)(t3, ?t4);\n    calc1.template();\n    //@ close exists(22);\n    int should_be_22 = calc1.getValue();\n     assert should_be_22 == 22;\n    // Or a ghost assert: (both are statically checked by VeriFast)\n    //@ assert should_be_22 == 22;\n    \n    Multiplier calc2 = new Multiplier();\n    //@ assert calc2.token(?calc2_t1);\n    //@ close m1_io(Multiplier.class)(multiplier_place(1), ?calc2_t2);\n    //@ close m1_io(Multiplier.class)(calc2_t2, ?calc2_t3);\n    //@ close m2_io(Multiplier.class)(calc2_t3, ?calc2_t4);\n    calc2.template();\n    int should_be_12 = calc2.getValue();\n    assert should_be_12 == 12;\n    \n  }\n",
        "methodStartingLine": 217,
        "methodEndingLine": 241,
        "jml": "//@ requires true;\n//@ ensures true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/frontend/multiple_files/Main.java",
        "code": "  public static void main(String[] args) \n    \n    \n  {\n    Multiply mul = new Multiply();\n    int i = mul.multiply();\n    //@ assert i == 30;\n  }\n",
        "methodStartingLine": 5,
        "methodEndingLine": 12,
        "jml": "//@ requires true;\n//@ ensures true; "
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/frontend/exceptions/Exceptions.java",
        "code": "  private static void test(boolean throw_or_not) throws MyException /*@ ensures throw_or_not == true; @*/ \n    \n    \n  {\n    int i;\n    \n    if (throw_or_not)\n      throw new MyException();\n  }\n",
        "methodStartingLine": 7,
        "methodEndingLine": 15,
        "jml": "//@ requires true;\n//@ ensures throw_or_not == false;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/frontend/exceptions/Exceptions.java",
        "code": "  public static void main(String[] args)\n    \n    \n  {\n    //@ int branch = 0;\n    \n    //Unchecked\n    Object i = null;\n    try\n    {\n      if (i == null)\n        throw new NullPointerException();\n      \n      //@ branch = 1;\n    }\n    catch (NullPointerException e)\n    {\n      //@ branch = 2;\n    }    \n    //@ assert (branch == 2);\n    \n    //Checked\n    //@ branch = 0;\n    try\n    {\n      test(false);\n      //@ branch = 1;\n    }\n    catch (MyException e)\n    {\n      //@ branch = 2;\n    }\n    //@ assert (branch == 1);\n    \n    //@ branch = 0;\n    try\n    {\n      test(true);\n      //@ branch = 1;\n    }\n    catch (MyException e)\n    {\n      //@ branch = 2;\n    }\n    //@ assert (branch == 2);\n  }\n",
        "methodStartingLine": 17,
        "methodEndingLine": 62,
        "jml": "//@ requires true;\n//@ ensures true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/NewEidCard/NewEidCard.java",
        "code": "    public static void install(byte[] bArray, short bOffset, byte bLength) \n          \n              \n    {\n        // create a eID card applet instance\n        new NewEidCard();\n    }\n",
        "methodStartingLine": 369,
        "methodEndingLine": 375,
        "jml": "//@ requires class_init_token(NewEidCard.class) &*& system();\n//@ ensures true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/NewEidCard/NewEidCard.java",
        "code": "    private void eraseBinary(APDU apdu, byte[] buffer) \n          \n              \n    {\n        // check if access to this file is allowed\n        if (!fileAccessAllowed(ERASE_BINARY))\n            ISOException.throwIt(ISO7816.SW_SECURITY_STATUS_NOT_SATISFIED);\n        // use P1 and P2 as offset\n        short offset = Util.makeShort(buffer[ISO7816.OFFSET_P1], buffer[ISO7816.OFFSET_P2]);\n        JCSystem.beginTransaction();\n        //@ open valid();\n        if (selectedFile == masterFile)\n            ISOException.throwIt(ISO7816.SW_FILE_INVALID); //~allow_dead_code\n        // impossible to start erasing from offset large than size of file\n        //@ open selected_file_types(_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _);\n        short size = ((ElementaryFile)selectedFile).getCurrentSize();\n        if (offset > size || offset < 0)\n            ISOException.throwIt(ISO7816.SW_WRONG_P1P2);\n        ((ElementaryFile) selectedFile).eraseData(offset);\n        //@ close valid();\n        JCSystem.commitTransaction();\n    }\n",
        "methodStartingLine": 466,
        "methodEndingLine": 487,
        "jml": "//@ requires current_applet(this) &*& [1/2]valid() &*& APDU(apdu, buffer) &*& array_slice(buffer, 0, buffer.length, _);\n//@ ensures current_applet(this) &*& [1/2]valid() &*& APDU(apdu, buffer) &*& array_slice(buffer, 0, buffer.length, _);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/NewEidCard/NewEidCard.java",
        "code": "    private void updateBinary(APDU apdu, byte[] buffer) \n          \n              \n    {\n        // check if access to this file is allowed\n        if (!fileAccessAllowed(UPDATE_BINARY))\n            ISOException.throwIt(ISO7816.SW_SECURITY_STATUS_NOT_SATISFIED);\n        // use P1 and P2 as offset\n        short offset = Util.makeShort(buffer[ISO7816.OFFSET_P1], buffer[ISO7816.OFFSET_P2]);\n        // impossible to start updating from offset larger than max size of file\n        // this however does not imply that the file length can not change\n        JCSystem.beginTransaction();\n        //@ open valid();\n        if (selectedFile == masterFile)\n            ISOException.throwIt(ISO7816.SW_FILE_INVALID); //~allow_dead_code\n        //@ open selected_file_types(_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _);\n        short size = ((ElementaryFile) selectedFile).getMaxSize();\n        if (offset > size)\n            ISOException.throwIt(ISO7816.SW_WRONG_P1P2);\n        // number of bytes in file starting from offset\n        // short remaining = (short) (size - offset);\n        // get the new data\n        short byteRead = apdu.setIncomingAndReceive();\n        // check Lc\n        //@ positive_and(buffer[ISO7816.OFFSET_LC], 0x00FF);\n        short lc = (short) (buffer[ISO7816.OFFSET_LC] & 0x00FF);\n        if ((lc == 0) || (byteRead == 0))\n            ISOException.throwIt(ISO7816.SW_WRONG_LENGTH);\n        // update file\n        if (offset < 0 || (short) (ISO7816.OFFSET_CDATA + lc) > (short) (buffer.length) || (short) (offset + lc) > size)\n            ISOException.throwIt(ISO7816.SW_WRONG_P1P2);\n        ((ElementaryFile) selectedFile).updateData(offset, buffer, ISO7816.OFFSET_CDATA, lc);\n        //@ close valid();\n        JCSystem.commitTransaction();\n    }\n",
        "methodStartingLine": 491,
        "methodEndingLine": 525,
        "jml": "//@ requires current_applet(this) &*& [1/2]valid() &*& APDU(apdu, buffer) &*& array_slice(buffer, 0, buffer.length, _);\n//@ ensures current_applet(this) &*& [1/2]valid() &*& APDU(apdu, buffer) &*& array_slice(buffer, 0, buffer.length, _);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/NewEidCard/NewEidCard.java",
        "code": "    private boolean fileAccessAllowed(byte mode) \n          \n              \n    {\n            // if selected file is not an EF, throw \"no current EF\" exception\n        if (!(selectedFile instanceof ElementaryFile))\n            ISOException.throwIt(ISO7816.SW_COMMAND_NOT_ALLOWED);\n        // always allow READ BINARY\n        if (mode == READ_BINARY) {\n                return true;\n        }\n        // allow write access to the preference file if the cardholder pin was\n        // entered correctly\n        if ((selectedFile == preferencesFile) && cardholderPin.isValidated()) {\n                return true;\n        }\n        // we abuse the activation pin to update some of the large files (photo\n        // + certificates)\n        if (GPSystem.getCardContentState() == GPSystem.APPLICATION_SELECTABLE) {\n                return true;            \n        }\n            // default to false\n        return false;\n    }\n",
        "methodStartingLine": 538,
        "methodEndingLine": 561,
        "jml": "//@ requires [?f]selectedFile |-> ?theSelectedFile &*& [f]this.preferencesFile |-> ?thePreferencesFile &*& [f]this.cardholderPin |-> ?theCardHolderPin &*& theCardHolderPin != null &*& [f]OwnerPIN(theCardHolderPin, _, _);\n//@ ensures [f]selectedFile |-> theSelectedFile &*& [f]this.preferencesFile |-> thePreferencesFile &*& [f]this.cardholderPin |-> theCardHolderPin &*& [f]OwnerPIN(theCardHolderPin, _, _) &*& theSelectedFile instanceof ElementaryFile;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/NewEidCard/NewEidCard.java",
        "code": "    private void getCardData(APDU apdu, byte[] buffer) \n          \n              \n    {\n        // check P1 and P2\n        if (buffer[ISO7816.OFFSET_P1] != (byte) 0x00 || buffer[ISO7816.OFFSET_P2] != (byte) 0x00)\n            ISOException.throwIt(ISO7816.SW_INCORRECT_P1P2);\n        // inform the JCRE that the applet has data to return\n        apdu.setOutgoing();\n        \n        //@ open [1/2]valid();\n                                \n        byte[] data = identityFile.getData(); \n        // Only the chip number is of importance: get this at tag position 2\n        short pos = 1;\n        //@ open [1/2]identityFile.ElementaryFile(_, _, ?identityFileData, _, _, ?info);\n        short dataLen = (short) data[pos];\n        pos = (short) (pos + 1 + dataLen + 1);\n        //@ close [1/2]identityFile.ElementaryFile(_, _, identityFileData, _, _, info);\n        if (dataLen <= (short)0 || (short)(dataLen + pos + 2) >= (short)(identityFile.getCurrentSize()))\n            ISOException.throwIt(ISO7816.SW_DATA_INVALID);\n        //@ open [1/2]identityFile.ElementaryFile(_, _, identityFileData, _, _, info);\n        dataLen = (short) data[pos];\n        pos = (short) (pos + 1);\n        //@ close [1/2]identityFile.ElementaryFile(_, _, identityFileData, _, _, info);\n        if (dataLen < (short)0 || (short) (pos + dataLen) >= (short) (identityFile.getCurrentSize()))\n            ISOException.throwIt(ISO7816.SW_DATA_INVALID);\n        //@ open [1/2]identityFile.ElementaryFile(_, _, identityFileData, _, _, info);\n        // check Le\n        // if (le != dataLen)\n        // ISOException.throwIt((short)(ISO7816.SW_WRONG_LENGTH));\n        /*VF*byte version[] = { (byte) 0xA5, (byte) 0x03, (byte) 0x01, (byte) 0x01, (byte) 0x01, (byte) 0x11, (byte) 0x00, (byte) 0x02, (byte) 0x00, (byte) 0x01, (byte) 0x01, (byte) 0x0F };*/\n        byte version[] = new byte[] { (byte) 0xA5, (byte) 0x03, (byte) 0x01, (byte) 0x01, (byte) 0x01, (byte) 0x11, (byte) 0x00, (byte) 0x02, (byte) 0x00, (byte) 0x01, (byte) 0x01, (byte) 0x0F };\n        byte chipNumber[] = new byte[(short) (dataLen + 12)];\n        Util.arrayCopy(data, pos, chipNumber, (short) 0, dataLen);\n        Util.arrayCopy(version, (short) 0, chipNumber, dataLen, (short) 12);\n        // //Set serial number\n        // Util.arrayCopy(tokenInfo.getData(), (short) 7, tempBuffer, (short) 0,\n        // (short) 16);\n        //        \n        // //Set component code: TODO\n        //        \n        //        \n        // //Set OS number: TODO\n        //        \n        //        \n        // //Set OS version: TODO\n        // JCSystem.getVersion();\n        //        \n        // //Set softmask number: TODO\n        //        \n        // //Set softmask version: TODO\n        //        \n        // //Set applet version: TODO : 4 bytes in file system\n        //        \n        //        \n        // //Set Interface version: TODO\n        //        \n        // //Set PKCS#15 version: TODO\n        //        \n        // //Set applet life cycle\n        // tempBuffer[(short)(le-1)] = GPSystem.getCardState();\n        // set the actual number of outgoing data bytes\n        apdu.setOutgoingLength((short) chipNumber.length);\n        // send content of buffer in apdu\n        apdu.sendBytesLong(chipNumber, (short) 0, (short) chipNumber.length);\n                                \n        //@ close [1/2]identityFile.ElementaryFile(_, _, identityFileData, _, _, info);\n        //@ close [1/2]valid();\n    }\n",
        "methodStartingLine": 568,
        "methodEndingLine": 637,
        "jml": "//@ requires [1/2]valid() &*& APDU(apdu, buffer) &*& array_slice(buffer, 0, buffer.length, _);\n//@ ensures [1/2]valid() &*& APDU(apdu, buffer) &*& array_slice(buffer, 0, buffer.length, _);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/NewEidCard/NewEidCard.java",
        "code": "    private void readBinary(APDU apdu, byte[] buffer) \n          \n              \n    {\n        //@ open [1/2]valid();\n        // check if access to this file is allowed\n        if (!fileAccessAllowed(READ_BINARY))\n            ISOException.throwIt(ISO7816.SW_SECURITY_STATUS_NOT_SATISFIED);\n        // use P1 and P2 as offset\n        short offset = Util.makeShort(buffer[ISO7816.OFFSET_P1], buffer[ISO7816.OFFSET_P2]);\n        if (offset < 0)\n            ISOException.throwIt(ISO7816.SW_INCORRECT_P1P2);\n        // inform the JCRE that the applet has data to return\n        short le = apdu.setOutgoing();\n        // impossible to start reading from offset large than size of file                \n        if (selectedFile == masterFile)\n            ISOException.throwIt(ISO7816.SW_FILE_INVALID); //~allow_dead_code\n        //@ open selected_file_types(_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _);\n        short size = ((ElementaryFile) selectedFile).getCurrentSize();\n        if (offset > size)\n            ISOException.throwIt(ISO7816.SW_WRONG_P1P2);\n        // number of bytes in file starting from offset\n        short remaining = (short) (size - offset);\n        if (le == 0) {\n            if (remaining < 256) {\n                // wrong Le field\n                // SW2 encodes the exact number of available data bytes\n                short sw = (short) (ISO7816.SW_CORRECT_LENGTH_00 | remaining);\n                ISOException.throwIt(sw);\n            } else\n                // Le = 0 is interpreted as 256 bytes\n                le = 256;\n        }\n        // only read out the remaining bytes\n        if (le > remaining) {\n            le = remaining;\n        }\n        // set the actual number of outgoing data bytes\n        apdu.setOutgoingLength(le);\n        // write selected file in APDU\n        //VF bug; was   apdu.sendBytesLong(((ElementaryFile) selectedFile).getData(), offset, le);\n        //VF probleem: originele lijn was    apdu.sendBytesLong(ef.getData(), offset, le);\n        // het probleem hiermee is dat de getData()-methode een ElementaryFile nodig heeft, en dat\n        // sendBytesLong vereist dat het resultaat niet null is. De niet-null vereiste zit geencodeerd\n        // in ElementaryFile, dus als je dat predicaat opent, dan weet VF dat de data niet-null is, maar\n        // dan werkt de call op getData niet. Als je de ElementaryFile gesloten laat, dan lukt de call naar\n        // getData, maar weet je niet dat het niet-null is.\n        ElementaryFile ef = (ElementaryFile)selectedFile;\n        byte[] bf = ef.getData();\n        //@ open [1/2]ef.ElementaryFile(?d1, ?d2, ?d3, ?d4, ?d5, ?info);\n        apdu.sendBytesLong(bf, offset, le);\n        //@ close [1/2]ef.ElementaryFile(d1, d2, d3, d4, d5, info);\n        //@ close [1/2]valid();\n    }\n",
        "methodStartingLine": 642,
        "methodEndingLine": 695,
        "jml": "//@ requires current_applet(this) &*& [1/2]valid() &*& APDU(apdu, buffer) &*& array_slice(buffer, 0, buffer.length, _);\n//@ ensures current_applet(this) &*& [1/2]valid() &*& APDU(apdu, buffer) &*& array_slice(buffer, 0, buffer.length, _);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/NewEidCard/NewEidCard.java",
        "code": "    private void activateFile(APDU apdu, byte[] buffer) \n          \n              \n    {\n        // check P2\n        if (buffer[ISO7816.OFFSET_P2] != (byte) 0x0C)\n            ISOException.throwIt(ISO7816.SW_WRONG_P1P2);\n        // P1 determines the select method\n        switch (buffer[ISO7816.OFFSET_P1]) {\n        case (byte) 0x02:\n            selectByFileIdentifier(apdu, buffer);\n            break;\n        case (byte) 0x08:\n            selectByPath(apdu, buffer);\n            break;\n        default:\n            ISOException.throwIt(ISO7816.SW_INCORRECT_P1P2);\n            break; //~allow_dead_code\n        }\n        // check if activating this file is allowed\n        if (!fileAccessAllowed(UPDATE_BINARY))\n            ISOException.throwIt(ISO7816.SW_SECURITY_STATUS_NOT_SATISFIED);\n        JCSystem.beginTransaction();\n        //@ open valid();\n        //@ open selected_file_types(_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, ?sf2);\n        //@ sf2.castElementaryToFile();\n        selectedFile.setActive(true);\n        //@ sf2.castFileToElementary();\n        //@ close valid();\n        JCSystem.commitTransaction();\n    }    \n",
        "methodStartingLine": 701,
        "methodEndingLine": 731,
        "jml": "//@ requires current_applet(this) &*& [1/2]valid() &*& APDU(apdu, buffer) &*& array_slice(buffer, 0, buffer.length, _);\n//@ ensures current_applet(this) &*& [1/2]valid() &*& APDU(apdu, buffer) &*& array_slice(buffer, 0, buffer.length, _);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/NewEidCard/NewEidCard.java",
        "code": "    private void clear() \n            \n              \n    {\n        JCSystem.beginTransaction();\n        \n        //@ open valid();\n\n        // clear signature and random data buffer\n        Util.arrayFillNonAtomic(randomBuffer, (short) 0, (short) 256, (byte) 0);\n        Util.arrayFillNonAtomic(responseBuffer, (short) 0, (short) 128, (byte) 0);\n        // no EF and DF selected yet; select MF by default\n        selectedFile = masterFile;\n        // invalidate cardholder PIN\n        cardholderPin.reset();\n        /*\n         * clear text message buffer, signature and previous ADPU type are\n         * transient so no need to reset these manually\n         */\n\n        // open selectedFile.File(?d1, ?d2);\n        //@ close valid();\n\n        JCSystem.commitTransaction();\n    }\n",
        "methodStartingLine": 748,
        "methodEndingLine": 772,
        "jml": "//@ requires current_applet(this) &*& [1/2]valid();\n//@ ensures current_applet(this) &*& [1/2]valid();"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/NewEidCard/NewEidCard.java",
        "code": "    private void initializeKeyPairs() \n          \n              /*@ ensures nonRepKeyPair |-> ?theNonRepKeyPair &*& theNonRepKeyPair != null &*&\n                  authKeyPair |-> ?theAuthKeyPair &*& theAuthKeyPair != null &*&\n                  basicKeyPair |-> ?theBasicKeyPair &*& theBasicKeyPair != null;\n        @*/\n    {\n        /*\n         * basicKeyPair is static (so same for all applets) so only allocate\n         * memory once\n         */\n        if (NewEidCard.basicKeyPair != null && authKeyPair != null && nonRepKeyPair != null) {\n            return;\n        }\n        \n        \n        basicKeyPair = new KeyPair(KeyPair.ALG_RSA_CRT, (short) 1024);\n        basicKeyPair.genKeyPair();\n        \n        authKeyPair = new KeyPair(KeyPair.ALG_RSA_CRT, (short) (1024));\n        authKeyPair.genKeyPair();\n        \n        \n    \n        //authPrivateKey = (RSAPrivateCrtKey) KeyBuilder.buildKey(KeyBuilder.TYPE_RSA_CRT_PRIVATE, KeyBuilder.LENGTH_RSA_1024, false);\n        \n\n        nonRepKeyPair = new KeyPair(KeyPair.ALG_RSA_CRT, (short) (1024));\n        nonRepKeyPair.genKeyPair();\n    \n        //nonRepPrivateKey = (RSAPrivateCrtKey) KeyBuilder.buildKey(KeyBuilder.TYPE_RSA_CRT_PRIVATE, KeyBuilder.LENGTH_RSA_1024, false);\n    }\n",
        "methodStartingLine": 817,
        "methodEndingLine": 848,
        "jml": "//@ requires nonRepKeyPair |-> _ &*& authKeyPair |-> _ &*& basicKeyPair |-> _;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/NewEidCard/NewEidCard.java",
        "code": "    private void selectByFileIdentifier(APDU apdu, byte[] buffer) \n          \n              \n    {\n        // receive the data to see which file needs to be selected\n        short byteRead = apdu.setIncomingAndReceive();\n        // check Lc\n        short lc = (short) (buffer[ISO7816.OFFSET_LC] & 0x00FF);\n        if ((lc != 2) || (byteRead != 2))\n            ISOException.throwIt(ISO7816.SW_WRONG_LENGTH);\n        // get the file identifier out of the APDU\n        short fid = Util.makeShort(buffer[ISO7816.OFFSET_CDATA], buffer[ISO7816.OFFSET_CDATA + 1]);\n        JCSystem.beginTransaction();\n        //@ open valid();\n        //@ assert selected_file_types(_, ?f1, ?f2, ?f3, ?f4, ?f5, ?f6, ?f7, ?f8, ?f9, ?f10, ?f11, ?f12, ?f13, ?f14, ?f15, ?f16, ?f17, ?f18, ?f19, ?f20, ?f21, _);\n        // if file identifier is the master file, select it immediately\n        if (fid == MF)\n            selectedFile = masterFile;        \n        else {\n            // check if the requested file exists under the current DF\n            ////@ close masterFile.DedicatedFile();\n            //@ MasterFile theMasterFile = masterFile;\n            //@ assert theMasterFile.MasterFile(16128, null, ?x1, ?x2, ?x3);\n            //@ close theMasterFile.DedicatedFile(16128, null, x1, x2, x3);\n            File s = ((DedicatedFile) masterFile).getSibling(fid);\n            //@ open theMasterFile.DedicatedFile(16128, null, x1, x2, x3);\n            //VF /bug\n            if (s != null) {\n                selectedFile = s;\n            //the fid is an elementary file:\n            } else {\n                s = belpicDirectory.getSibling(fid);\n                if (s != null) {\n                    selectedFile = s;\n                } else {\n                    s = idDirectory.getSibling(fid);\n                    if (s != null) {\n                        selectedFile = s;\n                        \n                    } else {\n                        ISOException.throwIt(ISO7816.SW_FILE_NOT_FOUND);\n                    }\n                }\n                \n            }\n            //@ close selected_file_types(s, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14, f15, f16, f17, f18, f19, f20, f21, _);    \n        }    \n        \n        //@ close valid();\n        JCSystem.commitTransaction();\n    }\n",
        "methodStartingLine": 852,
        "methodEndingLine": 902,
        "jml": "//@ requires current_applet(this) &*& [1/2]valid() &*& APDU(apdu, buffer) &*& array_slice(buffer, 0, buffer.length, _);\n//@ ensures current_applet(this) &*& [1/2]valid() &*& APDU(apdu, buffer) &*& array_slice(buffer, 0, buffer.length, _);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/NewEidCard/NewEidCard.java",
        "code": "    private void selectByPath(APDU apdu, byte[] buffer) \n          \n              \n    {\n        // receive the path name\n        short byteRead = apdu.setIncomingAndReceive();\n        // check Lc\n        //@ masking_and(buffer[ISO7816.OFFSET_LC], 0x00FF);\n        short lc = (short) (buffer[ISO7816.OFFSET_LC] & 0x00FF);\n        // it must be a multiple of 2\n        if (((lc & 1) == 1) || ((byteRead & 1) == 1))\n            ISOException.throwIt(SW_INCONSISTENT_P1P2);\n        if ((short) (buffer.length) < (short) (ISO7816.OFFSET_CDATA + lc + 1))\n            ISOException.throwIt(ISO7816.SW_INCORRECT_P1P2);\n        //@ open [1/2]valid();\n        // use the path name in the APDU data to select a file\n        File f = masterFile;\n        //@ assert lc <= 255;\n        ////@ assert [1/2]masterFile |-> ?theMasterFile;\n        for (byte i = 0; i < lc; i += 2) \n            /*@ invariant array_slice(buffer, 0, buffer.length, _) &*& i >= 0 &*& i < (lc + 2) &*& \n                        [1/2]randomBuffer |-> ?theRandomBuffer &*& theRandomBuffer != null &*& [1/2]array_slice(theRandomBuffer, 0, theRandomBuffer.length, _) &*& theRandomBuffer.length == 256 &*&\n                    [1/2]responseBuffer |-> ?theResponseBuffer &*& theResponseBuffer != null &*& [1/2]array_slice(theResponseBuffer, 0, theResponseBuffer.length, _) &*& theResponseBuffer.length == 128 &*&\n                    [1/2]randomData |-> ?theRandomData &*& theRandomData != null &*&\n                    [1/2]cipher |-> ?theCipher &*& theCipher != null &*&\n                    [1/2]messageBuffer |-> ?theMessageBuffer &*& theMessageBuffer != null &*& theMessageBuffer.length == 128 &*& is_transient_byte_array(theMessageBuffer) == true &*&\n                    [1/2]previousApduType |-> ?thePreviousApduType &*& thePreviousApduType != null &*& thePreviousApduType.length == 1 &*& is_transient_byte_array(thePreviousApduType) == true &*&\n                    [1/2]signatureType |-> ?theSignatureType &*& theSignatureType != null &*& theSignatureType.length == 1 &*& is_transient_byte_array(theSignatureType) == true &*&\n                    [1/2]masterFile |-> ?theMasterFile &*& [1/2]theMasterFile.MasterFile(0x3F00, null, _, ?masterSibs, _) &*& theMasterFile != null &*& theMasterFile.getClass() == MasterFile.class &*&\n                    [1/2]cardholderPin |-> ?theCardholderPin &*& [1/2]OwnerPIN(theCardholderPin, _, _) &*& theCardholderPin != null &*& \n                    [1/2]resetPin |-> ?theResetPin &*& [1/2]OwnerPIN(theResetPin, _, _) &*& theResetPin != null &*&\n                    [1/2]unblockPin |-> ?theUnblockPin &*& [1/2]OwnerPIN(theUnblockPin, _, _) &*& theUnblockPin != null &*&\n                    [1/2]activationPin |-> ?theActivationPin &*& [1/2]OwnerPIN(theActivationPin, _, _) &*& theActivationPin != null &*&\n                    [1/2]identityFile |-> ?theIdentityFile &*& [1/2]theIdentityFile.ElementaryFile(_, _, ?identityData, _, _, _) &*& theIdentityFile != null &*& identityData != null &*& identityData.length == 0xD0 &*& theIdentityFile.getClass() == ElementaryFile.class &*&\n                    [1/2]identityFileSignature |-> ?theIdentityFileSignature &*& [1/2]theIdentityFileSignature.ElementaryFile(_, _, ?theIdentityFileSignatureData, _, _, _) &*& theIdentityFileSignature != null &*& theIdentityFileSignatureData != null &*& theIdentityFileSignatureData.length == 0x80 &*& theIdentityFileSignature.getClass() == ElementaryFile.class &*&\n                    [1/2]addressFile |-> ?theAddressFile &*& [1/2]theAddressFile.ElementaryFile(_, _, ?theAddressFileData, _, _, _) &*& theAddressFile != null &*& theAddressFileData != null &*& theAddressFileData.length == 117 &*& theAddressFile.getClass() == ElementaryFile.class &*&\n                    [1/2]addressFileSignature |-> ?theAddressFileSignature &*& [1/2]theAddressFileSignature.ElementaryFile(_, _, ?theAddressFileSignatureData, _, _, _) &*& theAddressFileSignature != null &*& theAddressFileSignatureData != null &*& theAddressFileSignatureData.length == 128 &*& theAddressFileSignature.getClass() == ElementaryFile.class &*&\n                    [1/2]photoFile |-> ?thePhotoFile &*& [1/2]thePhotoFile.ElementaryFile(_, _, _, _, _, _) &*& thePhotoFile != null &*& thePhotoFile.getClass() == ElementaryFile.class &*&\n                    [1/2]caRoleIDFile |-> ?thecaRoleIDFile &*& [1/2]thecaRoleIDFile.ElementaryFile(_, _, ?theCaRoleIDFileData, _, _, _) &*& thecaRoleIDFile != null &*& theCaRoleIDFileData != null &*& theCaRoleIDFileData.length == 0x20 &*& thecaRoleIDFile.getClass() == ElementaryFile.class &*&\n                    [1/2]dirFile |-> ?theDirFile &*& [1/2]theDirFile.ElementaryFile(_, _, ?theDirFileData, _, _, _) &*& theDirFile != null &*& theDirFileData != null &*& theDirFileData.length ==  0x25 &*& theDirFile.getClass() == ElementaryFile.class &*&\n                    [1/2]tokenInfo |-> ?theTokenInfo &*& [1/2]theTokenInfo.ElementaryFile(_, _, ?theTokenInfoData, _, _, _) &*& theTokenInfo != null &*& theTokenInfoData != null &*& theTokenInfoData.length == 0x30 &*& theTokenInfo.getClass() == ElementaryFile.class &*&\n                    [1/2]objectDirectoryFile |-> ?theObjectDirectoryFile &*& [1/2]theObjectDirectoryFile.ElementaryFile(_, _, ?theObjectDirectoryFileData, _, _, _) &*& theObjectDirectoryFile != null &*& theObjectDirectoryFileData != null &*& theObjectDirectoryFileData.length == 40 &*& theObjectDirectoryFile.getClass() == ElementaryFile.class &*&\n                    [1/2]authenticationObjectDirectoryFile |-> ?theAuthenticationObjectDirectoryFile &*& [1/2]theAuthenticationObjectDirectoryFile.ElementaryFile(_, _, ?theAuthenticationObjectDirectoryFileData, _, _, _) &*& theAuthenticationObjectDirectoryFile != null &*& theAuthenticationObjectDirectoryFileData != null &*& theAuthenticationObjectDirectoryFileData.length == 0x40 &*&  theAuthenticationObjectDirectoryFile.getClass() == ElementaryFile.class &*&\n                    [1/2]privateKeyDirectoryFile |-> ?thePrivateKeyDirectoryFile &*& [1/2]thePrivateKeyDirectoryFile.ElementaryFile(_, _, ?thePrivateKeyDirectoryFileData, _, _, _) &*& thePrivateKeyDirectoryFile != null &*& thePrivateKeyDirectoryFileData != null &*& thePrivateKeyDirectoryFileData.length == 0xB0 &*& thePrivateKeyDirectoryFile.getClass() == ElementaryFile.class &*&\n                    [1/2]certificateDirectoryFile |-> ?theCertificateDirectoryFile &*& [1/2]theCertificateDirectoryFile.ElementaryFile(_, _, ?theCertificateDirectoryFileData, _, _, _) &*& theCertificateDirectoryFile != null &*& theCertificateDirectoryFileData != null &*& theCertificateDirectoryFileData.length == 0xB0 &*& theCertificateDirectoryFile.getClass() == ElementaryFile.class &*&\n                    [1/2]belpicDirectory |-> ?theBelpicDirectory &*& [1/2]theBelpicDirectory.DedicatedFile(_, _, _, ?belpicSibs, _) &*& theBelpicDirectory != null &*& theBelpicDirectory.getClass() == DedicatedFile.class &*&\n                    [1/2]idDirectory |-> ?theIdDirectory &*& [1/2]theIdDirectory.DedicatedFile(_, _, _, ?idSibs, _) &*& theIdDirectory != null &*& theIdDirectory.getClass() == DedicatedFile.class &*&\n                    [1/2]caCertificate |-> ?theCaCertificate &*& [1/2]theCaCertificate.ElementaryFile(_, _, _, _, _, _) &*& theCaCertificate.getClass() == ElementaryFile.class &*&\n                    [1/2]selectedFile |-> ?theSelectedFile &*& theSelectedFile != null &*&\n                    masterSibs == cons<File>(theDirFile, cons(theBelpicDirectory, cons(theIdDirectory, nil))) &*&\n                    [1/2]rootCaCertificate |-> ?theRootCaCertificate &*& [1/2]theRootCaCertificate.ElementaryFile(_, _, _, _, _, _) &*& theRootCaCertificate.getClass() == ElementaryFile.class &*&\n                    [1/2]rrnCertificate |-> ?theRrnCertificate &*& [1/2]theRrnCertificate.ElementaryFile(_, _, _, _, _, _) &*& theRrnCertificate.getClass() == ElementaryFile.class &*&\n                    [1/2]authenticationCertificate |-> ?theAuthenticationCertificate &*& [1/2]theAuthenticationCertificate.ElementaryFile(_, _, _, _, _, _) &*& theAuthenticationCertificate.getClass() == ElementaryFile.class &*&\n                    [1/2]nonRepudiationCertificate |-> ?theNonRepudiationCertificate &*& [1/2]theNonRepudiationCertificate.ElementaryFile(_, _, _, _, _, _) &*& theNonRepudiationCertificate.getClass() == ElementaryFile.class &*&\n                    [1/2]preferencesFile |-> ?thePreferencesFile &*& thePreferencesFile != theCaCertificate &*& thePreferencesFile != theRrnCertificate &*& [1/2]thePreferencesFile.ElementaryFile(_, _, ?thePreferencesFileData, _, _, _) &*& thePreferencesFile != null &*& thePreferencesFileData != null &*& thePreferencesFileData.length == 100 &*& thePreferencesFile.getClass() == ElementaryFile.class &*&\n                    belpicSibs == cons<File>(theTokenInfo, cons(theObjectDirectoryFile, cons(theAuthenticationObjectDirectoryFile, cons(thePrivateKeyDirectoryFile, cons(theCertificateDirectoryFile, cons(theCaCertificate, cons(theRrnCertificate, cons(theRootCaCertificate, cons(theAuthenticationCertificate, cons(theNonRepudiationCertificate, nil)))))))))) &*&\n                    idSibs == cons<File>(theIdentityFile, cons(theIdentityFileSignature, cons(theAddressFile, cons(theAddressFileSignature, cons(thecaRoleIDFile, cons(thePreferencesFile, cons(thePhotoFile, nil))))))) &*&\n                    [1/2]selected_file_types(theSelectedFile, theMasterFile, theBelpicDirectory, theIdDirectory, theIdentityFile, theIdentityFileSignature, theAddressFile, theAddressFileSignature, thePhotoFile, thecaRoleIDFile, theDirFile, theTokenInfo, theObjectDirectoryFile, theAuthenticationObjectDirectoryFile, thePrivateKeyDirectoryFile, theCaCertificate, theCertificateDirectoryFile, theRrnCertificate, theRootCaCertificate, theAuthenticationCertificate, theNonRepudiationCertificate, thePreferencesFile, _) &*&\n                        [1/2]selected_file_class(theSelectedFile) &*&\n                    [1/2]signatureAlgorithm |-> ?theSignatureAlgorithm &*&\n                    [1/2]nonRepKeyPair |-> ?theNonRepKeyPair &*& theNonRepKeyPair != null &*&\n                    [1/2]authKeyPair |-> ?theAuthKeyPair &*& theAuthKeyPair != null &*&\n                    [1/2]basicKeyPair |-> ?theBasicKeyPair &*&\n                    [1/2]PKCS1_HEADER |-> ?thePKCS1HEADER &*& thePKCS1HEADER != null &*& [1/2]array_slice(thePKCS1HEADER, 0, thePKCS1HEADER.length, _) &*& thePKCS1HEADER.length == 1 &*&\n                    [1/2]PKCS1_SHA1_HEADER |-> ?thePKCS1SHA1HEADER &*& thePKCS1SHA1HEADER != null &*& [1/2]array_slice(thePKCS1SHA1HEADER, 0, thePKCS1SHA1HEADER.length, _) &*& thePKCS1SHA1HEADER.length == 16 &*&\n                    [1/2]PKCS1_MD5_HEADER |-> ?thePKCS1MD5HEADER &*& thePKCS1MD5HEADER != null &*& [1/2]array_slice(thePKCS1MD5HEADER, 0, thePKCS1MD5HEADER.length, _) &*& thePKCS1MD5HEADER.length == 19 &*&\n                    theDirFile != thePreferencesFile &*& theTokenInfo != thePreferencesFile &*& thePreferencesFile != theObjectDirectoryFile &*& thePreferencesFile != theAuthenticationObjectDirectoryFile &*& thePreferencesFile != thePrivateKeyDirectoryFile &*&\n                    (f == null ? \n                      true \n                        : \n                      selected_file_types(f, theMasterFile, theBelpicDirectory, theIdDirectory, theIdentityFile, theIdentityFileSignature, theAddressFile, theAddressFileSignature, thePhotoFile, thecaRoleIDFile, theDirFile, theTokenInfo, theObjectDirectoryFile, theAuthenticationObjectDirectoryFile, thePrivateKeyDirectoryFile, theCaCertificate, theCertificateDirectoryFile, theRrnCertificate, theRootCaCertificate, theAuthenticationCertificate, theNonRepudiationCertificate, thePreferencesFile, _) &*&\n                      f.getClass() == ElementaryFile.class || f.getClass() == MasterFile.class || f.getClass() == DedicatedFile.class                             \n                    ) &*&\n                    (i == 0 ? \n                      f == theMasterFile \n                        :\n                      (i <= 2 ?\n                        f == null || f == theMasterFile || mem(f, masterSibs) \n                          :\n                        (i <= 4 ?\n                          f == null || mem(f, masterSibs) || mem(f, belpicSibs) || mem(f, idSibs)\n                        :\n                          (i <= 6 ?\n                            f == null || mem(f, belpicSibs) || mem(f, idSibs)\n                              :\n                            false\n                          )\n                        )\n                      )\n                    ); @*/\n        {\n            short fid = Util.makeShort(buffer[(short) (ISO7816.OFFSET_CDATA + i)], buffer[(short) (ISO7816.OFFSET_CDATA + i + 1)]);\n            // MF can be explicitely or implicitely in the path name\n            if ((i == 0) && (fid == MF))\n                f = masterFile;\n            else {\n                    \n                if ((f instanceof ElementaryFile) || f == null)\n                    ISOException.throwIt(ISO7816.SW_FILE_NOT_FOUND);\n                //@ open selected_file_types(f, theMasterFile, theBelpicDirectory, theIdDirectory, theIdentityFile, theIdentityFileSignature, theAddressFile, theAddressFileSignature, thePhotoFile, thecaRoleIDFile, theDirFile, theTokenInfo, theObjectDirectoryFile, theAuthenticationObjectDirectoryFile, thePrivateKeyDirectoryFile, theCaCertificate, theCertificateDirectoryFile, theRrnCertificate, theRootCaCertificate, theAuthenticationCertificate, theNonRepudiationCertificate, thePreferencesFile, _);\n                //@ File oldf = f;\n                /*@ \n                if(f == masterFile) \n                {} else if (f == idDirectory) {} else {}\n                @*/\n                /*@\n                if(f == masterFile) {\n                  masterFile.castMasterToDedicated();\n                  }              \n                  @*/\n                f = ((DedicatedFile) f).getSibling(fid);\n                /*@ if(oldf == masterFile) {\n                        masterFile.castDedicatedToMaster();\n                        assert f == null || (f == idDirectory && f.getClass() == DedicatedFile.class) || (f == belpicDirectory && f.getClass() == DedicatedFile.class)|| (f == dirFile && f.getClass() == ElementaryFile.class);\n                    } \n                @*/\n                /*@\n                  if(f != null) {\n                    close selected_file_types(f, theMasterFile, theBelpicDirectory, theIdDirectory, theIdentityFile, theIdentityFileSignature, theAddressFile, theAddressFileSignature, thePhotoFile, thecaRoleIDFile, theDirFile, theTokenInfo, theObjectDirectoryFile, theAuthenticationObjectDirectoryFile, thePrivateKeyDirectoryFile, theCaCertificate, theCertificateDirectoryFile, theRrnCertificate, theRootCaCertificate, theAuthenticationCertificate, theNonRepudiationCertificate, thePreferencesFile, _);\n                  }\n                @*/\n                \n            }\n        }\n        if (f == null)\n            ISOException.throwIt(ISO7816.SW_FILE_NOT_FOUND);\n\n        JCSystem.beginTransaction();\n        //@ open [1/2]valid();\n        ////@ open selected_file_types(f, ?g1, ?g2, ?g3, ?g4, ?g5, ?g6, ?g7, ?g8, ?g9, ?g10, ?g11, ?g12, ?g13, ?g14, ?g15, ?g16, ?g17, ?g18, ?g19, ?g20, ?g21, _);\n        selectedFile = f;\n        ////@ close selected_file_types(f, g1, g2, g3, g4, g5, g6, g7, g8, g9, g10, g11, g12, g13, g14, g15, g16, g17, g18, g19, g20, g21, _);\n        //@ close valid();\n        JCSystem.commitTransaction();\n    }\n",
        "methodStartingLine": 906,
        "methodEndingLine": 1040,
        "jml": "//@ requires current_applet(this) &*& [1/2]valid() &*& APDU(apdu, buffer) &*& array_slice(buffer, 0, buffer.length, _);\n//@ ensures current_applet(this) &*& [1/2]valid() &*& APDU(apdu, buffer) &*& array_slice(buffer, 0, buffer.length, _);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/NewEidCard/NewEidCard.java",
        "code": "    public boolean select() \n            \n            \n    {\n        // Clear data and set default selectedFile to masterFile\n        clear();\n        return true;\n    }\n",
        "methodStartingLine": 1161,
        "methodEndingLine": 1168,
        "jml": "//@ requires current_applet(this) &*& [1/2]valid();\n//@ ensures current_applet(this) &*& [1/2]valid();"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/NewEidCard/NewEidCard.java",
        "code": "    public void deselect() \n            \n            \n    {\n        clear();\n        return;\n    }\n",
        "methodStartingLine": 1172,
        "methodEndingLine": 1178,
        "jml": "//@ requires current_applet(this) &*& [1/2]valid();\n//@ ensures current_applet(this) &*& [1/2]valid();"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/NewEidCard/NewEidCard.java",
        "code": "    public void process(APDU apdu) \n            \n            \n    {\n        byte[] buffer = apdu.getBuffer();\n        /*\n         * - non repudiation signatures can only be generated if the previous\n         * APDU verified the cardholder PIN - administrator PIN change is only\n         * possible if the previous APDU verified the reset PIN\n         * \n         * so only the \"generate signature\" and PIN Change APDU needs to check\n         * the previous APDU type; in all other cases overwrite the previous\n         * APDU type, because this information is not needed; we do this as\n         * early as possible to cope with exceptions being thrown during\n         * processing of APDU\n         * \n         * IMPORTANT : we have to set the previous APDU type in the processing\n         * of a PIN Verify APDU (because the type gets overwritten to a wrong\n         * value) and at the end of a \"generate signature\" and PIN Change APDU\n         */\n        JCSystem.beginTransaction();\n        //@ open valid();\n        if ((buffer[ISO7816.OFFSET_INS] != INS_GENERATE_SIGNATURE) && (buffer[ISO7816.OFFSET_INS] != INS_CHANGE_PIN) && (buffer[ISO7816.OFFSET_INS] != INS_GET_KEY))\n            setPreviousApduType(OTHER);\n        //@ close valid();\n        JCSystem.commitTransaction();\n        // return if the APDU is the applet SELECT command\n        if (selectingApplet()) {\n            return;\n        }\n        if (buffer[ISO7816.OFFSET_CLA] == EIDCARD_CLA_1)\n            // check the INS byte to decide which service method to call\n            switch (buffer[ISO7816.OFFSET_INS]) {\n            // case INS_CHANGE_ATR :\n            // changeATR(apdu);\n            // break;\n            case INS_VERIFY_PIN:\n                verifyPin(apdu, buffer);\n                break;\n            case INS_CHANGE_PIN:\n                changePin(apdu, buffer);\n                break;\n            case INS_UNBLOCK:\n                unblock(apdu, buffer);\n                break;\n            case INS_GET_CHALLENGE:\n                getChallenge(apdu, buffer);\n                break;\n            case INS_PREPARE_SIGNATURE:\n                prepareForSignature(apdu, buffer);\n                break;\n            case INS_GENERATE_SIGNATURE:\n                generateSignature(apdu, buffer);\n                break;\n            case INS_GENERATE_KEYPAIR:\n                generateKeyPair(apdu);\n                break;\n            case INS_INTERNAL_AUTHENTICATE:\n                internalAuthenticate(apdu, buffer);\n                break;\n            case INS_GET_RESPONSE:\n                // if only T=0 supported: remove\n                // not possible in case of T=0 protocol\n                if (APDU.getProtocol() == APDU.PROTOCOL_T1)\n                    getResponse(apdu, buffer);\n                else\n                    ISOException.throwIt(ISO7816.SW_INS_NOT_SUPPORTED);\n                break;\n            case INS_SELECT_FILE:\n                selectFile(apdu, buffer);\n                break;\n            case INS_ACTIVATE_FILE:\n                activateFile(apdu, buffer);\n                break;\n            case INS_DEACTIVATE_FILE:\n                deactivateFile(apdu, buffer);\n                break;\n            case INS_READ_BINARY:\n                readBinary(apdu, buffer);\n                break;\n            case INS_UPDATE_BINARY:\n                updateBinary(apdu, buffer);\n                break;\n            case INS_ERASE_BINARY:\n                eraseBinary(apdu, buffer);\n                break;\n            case INS_Credit:\n                askForCharge();\n                break;\n            default:\n                ISOException.throwIt(ISO7816.SW_INS_NOT_SUPPORTED);\n                break; //~allow_dead_code\n            }\n        else if (buffer[ISO7816.OFFSET_CLA] == EIDCARD_CLA_2)\n            switch (buffer[ISO7816.OFFSET_INS]) {\n            case INS_GET_KEY:\n                getPublicKey(apdu);\n                break;\n            case INS_PUT_KEY:\n                putPublicKey(apdu, buffer);\n                break;\n            case INS_ERASE_KEY:\n                eraseKey(apdu, buffer);\n                break;\n            case INS_ACTIVATE_KEY:\n                activateKey(apdu, buffer);\n                break;\n            case INS_DEACTIVATE_KEY:\n                deactivateKey(apdu, buffer);\n                break;\n            case INS_GET_CARD_DATA:\n                getCardData(apdu, buffer);\n                break;\n            case INS_LOG_OFF:\n                logOff(apdu, buffer);\n                break;\n            case INS_Credit:\n                askForCharge();\n                break;\n            // case INS_BLOCK :\n            // blockCard(apdu, buffer);\n            // break;\n            }\n        else\n            ISOException.throwIt(ISO7816.SW_CLA_NOT_SUPPORTED);\n    }\n",
        "methodStartingLine": 1182,
        "methodEndingLine": 1307,
        "jml": "//@ requires current_applet(this) &*& [1/2]valid() &*& APDU(apdu, ?buffer_) &*& array_slice(buffer_, 0, buffer_.length, _);\n//@ ensures current_applet(this) &*& [1/2]valid() &*& APDU(apdu, buffer_) &*& array_slice(buffer_, 0, buffer_.length, _);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/NewEidCard/NewEidCard.java",
        "code": "    private void verifyPin(APDU apdu, byte[] buffer) \n          \n              \n    {\n        \n        // check P1\n        if (buffer[ISO7816.OFFSET_P1] != (byte) 0x00)\n            ISOException.throwIt(ISO7816.SW_INCORRECT_P1P2);\n        // receive the PIN data for validation\n        apdu.setIncomingAndReceive();\n        // check PIN depending on value of P2\n        JCSystem.beginTransaction();\n        //@ open valid();\n        switch (buffer[ISO7816.OFFSET_P2]) {\n        case CARDHOLDER_PIN:\n            // overwrite previous APDU type\n            setPreviousApduType(VERIFY_CARDHOLDER_PIN);\n            // check the cardholder PIN\n            checkPin(cardholderPin, buffer);\n            break;\n        case ACTIVATE_PIN:\n            // check the activation PIN\n            checkPin(activationPin, buffer);\n            // if the activation PIN was entered correctly\n            if (GPSystem.getCardContentState() == GPSystem.APPLICATION_SELECTABLE)\n                // set the applet status to personalized\n                GPSystem.setCardContentState(GPSystem.CARD_SECURED);\n            // reset internal authenticate counter\n            //internalAuthenticateCounter = 5000;\n            break;\n        case RESET_PIN:\n            // overwrite previous APDU type\n            setPreviousApduType(VERIFY_RESET_PIN);\n            // check the reset PIN\n            checkPin(resetPin, buffer);\n            break;\n        case UNBLOCK_PIN:\n            // check the unblock PIN: after this, the pin will be 'activated'\n            checkPin(unblockPin, buffer);\n            break;\n        default:\n            ISOException.throwIt(SW_REFERENCE_DATA_NOT_FOUND);\n        }\n        //@ close valid();\n        JCSystem.commitTransaction();\n    }\n",
        "methodStartingLine": 1311,
        "methodEndingLine": 1356,
        "jml": "//@ requires current_applet(this) &*& [1/2]valid() &*& APDU(apdu, buffer) &*& array_slice(buffer, 0, buffer.length, _);\n//@ ensures current_applet(this) &*& [1/2]valid() &*& APDU(apdu, buffer) &*& array_slice(buffer, 0, buffer.length, _);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/NewEidCard/NewEidCard.java",
        "code": "    private void checkPin(OwnerPIN pin, byte[] buffer) \n          \n              \n    {\n        if (pin.check(buffer, OFFSET_PIN_HEADER, PIN_SIZE) == true)\n            return;\n        short tries = pin.getTriesRemaining();\n        // the eID card throws this exception, SW=0x63C0 would make more sense\n        if (tries == 0) {\n            // if the cardholder PIN is no longer valid (too many tries)\n            if (pin == cardholderPin)\n                // set the applet status to blocked\n                GPSystem.setCardContentState(GPSystem.CARD_LOCKED);\n            ISOException.throwIt(ISO7816.SW_FILE_INVALID);\n        }\n        /*\n         * create the correct exception the status word is of the form 0x63Cx\n         * with x the number of tries left\n         */\n//@          or_limits(SW_WRONG_PIN_0_TRIES_LEFT, tries, nat_of_pos(p1(p1(p1(p1_)))));\n        short sw = (short) (SW_WRONG_PIN_0_TRIES_LEFT | tries);\n        ISOException.throwIt(sw);\n    }\n",
        "methodStartingLine": 1360,
        "methodEndingLine": 1382,
        "jml": "//@ requires [1/2]cardholderPin |-> ?theCardholderPin &*& [1/2]OwnerPIN(pin, _, _) &*& pin != null &*& buffer != null &*& array_slice(buffer, 0, buffer.length, _) &*& buffer.length >= 13;\n//@ ensures [1/2]cardholderPin |-> theCardholderPin &*& [1/2]OwnerPIN(pin, _, _) &*& pin != null &*& array_slice(buffer, 0, buffer.length, _) &*& buffer != null &*& buffer.length >= 13;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/NewEidCard/NewEidCard.java",
        "code": "    private void changePin(APDU apdu, byte[] buffer) \n          \n              \n    {\n        /*\n         * IMPORTANT: in all other APDUs the previous APDU type gets overwritten\n         * in process() function; this is not the case here because the\n         * information is needed when processing to verify the security\n         * condition for administrator PIN change\n         * \n         * the previous APDU type has to be overwritten in every possible exit\n         * path out of this function\n         */\n        JCSystem.beginTransaction();\n        //@ open valid();\n        // check P2\n        if (buffer[ISO7816.OFFSET_P2] != (byte) 0x01) {\n            setPreviousApduType(OTHER);\n            ISOException.throwIt(ISO7816.SW_INCORRECT_P1P2);\n        }\n        // P1 determines whether it is user or administrator PIN change\n        switch (buffer[ISO7816.OFFSET_P1]) {\n        case (byte) 0x00:\n            setPreviousApduType(OTHER);\n            //@ close valid();\n            JCSystem.commitTransaction();\n            userChangePin(apdu, buffer);\n            break;\n        case (byte) 0x01:\n            //@ close valid();\n            JCSystem.commitTransaction();\n            administratorChangePin(apdu, buffer);\n            break;\n        default:\n            setPreviousApduType(OTHER);\n            //@ close valid();\n            JCSystem.commitTransaction();\n            ISOException.throwIt(ISO7816.SW_INCORRECT_P1P2);\n            break; //~allow_dead_code\n        }\n        \n    }\n",
        "methodStartingLine": 1386,
        "methodEndingLine": 1427,
        "jml": "//@ requires current_applet(this) &*& [1/2]valid() &*& APDU(apdu, buffer) &*& array_slice(buffer, 0, buffer.length, _);\n//@ ensures current_applet(this) &*& [1/2]valid() &*& APDU(apdu, buffer) &*& array_slice(buffer, 0, buffer.length, _);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/NewEidCard/NewEidCard.java",
        "code": "    private void userChangePin(APDU apdu, byte[] buffer) \n          \n              \n    {\n        //@ open [1/2]valid();\n        // receive the PIN data\n        short byteRead = apdu.setIncomingAndReceive();\n        // check Lc\n        short lc = (short) (buffer[ISO7816.OFFSET_LC] & 0x00FF);\n        if ((lc != 16) || (byteRead != 16))\n            ISOException.throwIt(ISO7816.SW_WRONG_LENGTH);\n        // first check old cardholder PIN\n        checkPin(cardholderPin, buffer);\n        // do some checks on the new PIN header and data\n        if (!isNewPinFormattedCorrectly(buffer, OFFSET_SECOND_PIN_HEADER))\n            ISOException.throwIt(ISO7816.SW_WRONG_DATA);\n        // include header as well in PIN object\n        cardholderPin.update(buffer, OFFSET_SECOND_PIN_HEADER, PIN_SIZE);\n        // validate cardholder PIN immediately after change PIN\n        // so that cardholder access rights are immediately granted\n        cardholderPin.check(buffer, OFFSET_SECOND_PIN_HEADER, PIN_SIZE);\n        //@ close [1/2]valid();\n    }\n",
        "methodStartingLine": 1431,
        "methodEndingLine": 1453,
        "jml": "//@ requires [1/2]valid() &*& APDU(apdu, buffer) &*& array_slice(buffer, 0, buffer.length, _) &*& buffer.length > OFFSET_SECOND_PIN_HEADER + PIN_SIZE;\n//@ ensures [1/2]valid() &*& APDU(apdu, buffer) &*& array_slice(buffer, 0, buffer.length, _) &*& buffer.length > OFFSET_SECOND_PIN_HEADER + PIN_SIZE;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/NewEidCard/NewEidCard.java",
        "code": "    private void administratorChangePin(APDU apdu, byte[] buffer) \n          \n              \n    {\n        // The previous getChallenge() should ask for at least the length of the\n        // new administrator pin. Otherwise exception is thrown\n        /*\n         * IMPORTANT: the previous APDU type has to be overwritten in every\n         * possible exit path out of this function; therefore we check the\n         * security conditions as early as possible\n         */\n        JCSystem.beginTransaction();\n        //@ open valid();\n        // previous APDU must have checked the reset PIN\n        if ((!resetPin.isValidated()) || (getPreviousApduType() != VERIFY_RESET_PIN)) {\n            setPreviousApduType(OTHER);\n            ISOException.throwIt(ISO7816.SW_SECURITY_STATUS_NOT_SATISFIED);\n        }\n        // overwrite previous ADPU type as soon as possible\n        setPreviousApduType(OTHER);\n        // receive the PIN data\n        short byteRead = apdu.setIncomingAndReceive();\n        // check Lc\n        short lc = (short) (buffer[ISO7816.OFFSET_LC] & 0x00FF);\n        if ((lc != 8) || (byteRead != 8))\n            ISOException.throwIt(ISO7816.SW_WRONG_LENGTH);\n        // do some checks on the new PIN header and data\n        if (!isNewPinFormattedCorrectly(buffer, OFFSET_PIN_HEADER))\n            ISOException.throwIt(ISO7816.SW_WRONG_DATA);\n        // compare the new PIN with the last generated random challenge\n        if (!isNewPinCorrectValue(buffer))\n            ISOException.throwIt(ISO7816.SW_WRONG_DATA);\n        // include header as well in PIN object\n        cardholderPin.update(buffer, OFFSET_PIN_HEADER, PIN_SIZE);\n        //@ close valid();\n        JCSystem.commitTransaction();\n    }\n",
        "methodStartingLine": 1457,
        "methodEndingLine": 1493,
        "jml": "//@ requires current_applet(this) &*& [1/2]valid() &*& APDU(apdu, buffer) &*& array_slice(buffer, 0, buffer.length, _);\n//@ ensures current_applet(this) &*& [1/2]valid() &*& APDU(apdu, buffer) &*& array_slice(buffer, 0, buffer.length, _);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/NewEidCard/NewEidCard.java",
        "code": "    private boolean isNewPinFormattedCorrectly(byte[] buffer, byte offset) \n          \n              \n    {\n        // 1st nibble of new PIN header should be 2\n        if ((buffer[offset] >> 4) != 2)\n            return false;\n        // 2nd nibble of new PIN header is the length (in digits)\n        //@ and_limits(buffer[offset], 0x0F, nat_of_pos(p1(p1(p1_))));\n        byte pinLength = (byte) (buffer[offset] & 0x0F);\n        // the new PIN should be between 4 and 12 digits\n        if (pinLength < 4 || pinLength > 12)\n            return false;\n        // divide PIN length by 2 to get the length in bytes\n        //@ shr_limits(pinLength, 1, nat_of_pos(p1(p1(p1_))));\n        byte pinLengthInBytes = (byte) (pinLength >> 1);\n        \n        // check if PIN length is odd\n        if ((pinLength & (byte) 0x01) == (byte) 0x01)\n            pinLengthInBytes++;\n        // check if PIN data is padded with 0xFF\n        byte i = (byte) (offset + PIN_SIZE - 1);\n        for (; i > offset + pinLengthInBytes; i--) \n            /*@ invariant array_slice(buffer, 0, buffer.length, _) &*& i >= offset + pinLengthInBytes\n                &*& i <= offset + PIN_SIZE - 1;\n            @*/\n        {\n            if (buffer[i] != (byte) 0xFF)\n                return false;\n        }\n        // if PIN length is odd, check if last PIN data nibble is F\n        if ((pinLength & (byte) 0x01) == (byte) 0x01) {\n            if (/*@truncating@*/ (byte) (buffer[i] << 4) != (byte) 0xF0)\n                return false;\n        }\n        return true;\n    }\n",
        "methodStartingLine": 1499,
        "methodEndingLine": 1535,
        "jml": "//@ requires buffer != null &*& array_slice(buffer, 0, buffer.length, _) &*& offset >= 0 &*& offset < buffer.length - PIN_SIZE &*& offset + PIN_SIZE <= Byte.MAX_VALUE;\n//@ ensures array_slice(buffer, 0, buffer.length, _);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/NewEidCard/NewEidCard.java",
        "code": "    private boolean isNewPinCorrectValue(byte[] buffer) \n          /*@ requires buffer != null &*& array_slice(buffer, 0, buffer.length, _) &*& buffer.length >= OFFSET_PIN_DATA + 8\n                &*& randomBuffer |-> ?theRandomBuffer &*& theRandomBuffer != null &*& array_slice(theRandomBuffer, 0, theRandomBuffer.length, _) &*& theRandomBuffer.length == 256;\n          @*/\n              \n    {\n        // 2nd nibble of the PIN header is the length (in digits)\n        byte tmp = buffer[OFFSET_PIN_HEADER];\n        if(tmp < 0) { // BUG\n          return false;\n        }\n        byte pinLength = (byte) (buffer[OFFSET_PIN_HEADER] & 0x0F);\n        // check if PIN length is odd\n        byte oldLength = (byte) (pinLength & 0x01);\n        // divide PIN length by 2 to get the length in bytes\n        byte pinLengthInBytes = (byte) (pinLength >> 1);\n        //@ assert 0 <= pinLengthInBytes && pinLengthInBytes < 8;\n        byte i;\n        for (i = 0; i < pinLengthInBytes; i++) \n            /*@ invariant array_slice(buffer, 0, buffer.length, _) &*& i >= 0 &*& i <= pinLengthInBytes \n                   &*& randomBuffer |-> ?theRandomBuffer2 &*& theRandomBuffer == theRandomBuffer2 &*& theRandomBuffer2 != null &*& array_slice(theRandomBuffer2, 0, theRandomBuffer2.length, _) &*& theRandomBuffer2.length >= pinLengthInBytes;\n            @*/\n        {\n            if (buffer[OFFSET_PIN_DATA + i] != (randomBuffer[i] & 0x77))\n                return false;\n        }\n        if (oldLength == (byte) 0x01) {\n            if ((buffer[OFFSET_PIN_DATA + pinLengthInBytes] >> 4) != ((randomBuffer[i] & 0x7F) >> 4))\n                return false;\n        }\n        return true;\n    }\n",
        "methodStartingLine": 1539,
        "methodEndingLine": 1570,
        "jml": "//@ ensures array_slice(buffer, 0, buffer.length, _) &*& randomBuffer |-> theRandomBuffer &*& array_slice(theRandomBuffer, 0, theRandomBuffer.length, _);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/NewEidCard/NewEidCard.java",
        "code": "    private void logOff(APDU apdu, byte[] buffer) \n          \n              \n    {\n        // check P1 and P2\n        if (buffer[ISO7816.OFFSET_P1] != (byte) 0x00 || buffer[ISO7816.OFFSET_P2] != (byte) 0x00)\n            ISOException.throwIt(ISO7816.SW_INCORRECT_P1P2);\n        // remove previous access conditions:\n        JCSystem.beginTransaction();\n        //@ open valid();\n        setPreviousApduType(OTHER);\n        setSignatureType(NO_SIGNATURE);\n        cardholderPin.reset();\n        resetPin.reset();\n        unblockPin.reset();\n        activationPin.reset();\n        //@ close valid();\n        JCSystem.commitTransaction();\n    }\n",
        "methodStartingLine": 1574,
        "methodEndingLine": 1592,
        "jml": "//@ requires current_applet(this) &*& [1/2]valid() &*& APDU(apdu, buffer) &*& array_slice(buffer, 0, buffer.length, _);\n//@ ensures current_applet(this) &*& [1/2]valid() &*& APDU(apdu, buffer) &*& array_slice(buffer, 0, buffer.length, _);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/NewEidCard/NewEidCard.java",
        "code": "    private void unblock(APDU apdu, byte[] buffer) \n          \n              \n    {\n        // check P1 and P2\n        if (buffer[ISO7816.OFFSET_P1] != (byte) 0x00 || buffer[ISO7816.OFFSET_P2] != (byte) 0x01)\n            ISOException.throwIt(ISO7816.SW_INCORRECT_P1P2);\n        // receive the PUK data for validation\n        apdu.setIncomingAndReceive();\n        // check PUK\n        //@ open valid();\n        checkPin(unblockPin, buffer);\n        // if PUK is correct, then unblock cardholder PINs\n        cardholderPin.resetAndUnblock();\n        // set the applet status back to personalized\n        GPSystem.setCardContentState(GPSystem.CARD_SECURED);\n        //@ close [1/2]valid();\n    }\n",
        "methodStartingLine": 1596,
        "methodEndingLine": 1613,
        "jml": "//@ requires [1/2]valid() &*& APDU(apdu, buffer) &*& array_slice(buffer, 0, buffer.length, _);\n//@ ensures [1/2]valid() &*& APDU(apdu, buffer) &*& array_slice(buffer, 0, buffer.length, _);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/NewEidCard/NewEidCard.java",
        "code": "    private void prepareForSignature(APDU apdu, byte[] buffer) \n          \n              \n    {\n        // check P1 and P2\n        if (buffer[ISO7816.OFFSET_P1] != (byte) 0x41 || buffer[ISO7816.OFFSET_P2] != (byte) 0xB6)\n            ISOException.throwIt(ISO7816.SW_WRONG_P1P2);\n        // receive the data to see which kind of signature\n        short byteRead = apdu.setIncomingAndReceive();\n        // check Lc\n        short lc = (short) (buffer[ISO7816.OFFSET_LC] & 0x00FF);\n        if ((lc != 5) || (byteRead != 5))\n            ISOException.throwIt(ISO7816.SW_WRONG_LENGTH);\n        // the first 2 bytes of the data part should be 0x04 0x80\n        // the fourth byte should be 0x84\n        if ((buffer[ISO7816.OFFSET_CDATA] != (byte) 0x04) || (buffer[ISO7816.OFFSET_CDATA + 1] != (byte) 0x80) || (buffer[ISO7816.OFFSET_CDATA + 3] != (byte) 0x84))\n            ISOException.throwIt(ISO7816.SW_WRONG_DATA);\n        // initialize signature object depending on hash function type\n        \n        JCSystem.beginTransaction();\n        //@ open valid();\n        switch (buffer[ISO7816.OFFSET_CDATA + 2]) {\n        case ALG_SHA1_PKCS1:\n            signatureAlgorithm = ALG_SHA1_PKCS1;\n            break;\n        case ALG_MD5_PKCS1:\n            signatureAlgorithm = ALG_MD5_PKCS1;\n            break;\n        case ALG_PKCS1:\n            signatureAlgorithm = ALG_PKCS1;\n            break;\n        default: // algorithm not supported (SW=9484)\n            ISOException.throwIt(SW_ALGORITHM_NOT_SUPPORTED);\n            break; //~allow_dead_code\n        }\n        // signature type is determined by the the last byte\n        switch (buffer[ISO7816.OFFSET_CDATA + 4]) {\n        case BASIC:\n            setSignatureType(BASIC);\n            break;\n        case AUTHENTICATION: // use authentication private key\n            setSignatureType(AUTHENTICATION);\n            break;\n        case NON_REPUDIATION: // use non repudiation private key\n            setSignatureType(NON_REPUDIATION);\n            break;\n        case CA_ROLE:\n            setSignatureType(NO_SIGNATURE);\n            ISOException.throwIt(ISO7816.SW_WRONG_DATA);\n            break; //~allow_dead_code\n        default:\n            setSignatureType(NO_SIGNATURE);\n            ISOException.throwIt(SW_REFERENCE_DATA_NOT_FOUND);\n            break; //~allow_dead_code\n        }\n        //@ close valid();\n        JCSystem.commitTransaction();\n    }\n",
        "methodStartingLine": 1617,
        "methodEndingLine": 1674,
        "jml": "//@ requires current_applet(this) &*& [1/2]valid() &*& APDU(apdu, buffer) &*& array_slice(buffer, 0, buffer.length, _);\n//@ ensures current_applet(this) &*& [1/2]valid() &*& APDU(apdu, buffer) &*& array_slice(buffer, 0, buffer.length, _);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/NewEidCard/NewEidCard.java",
        "code": "    private void generateSignature(APDU apdu, byte[] buffer) \n          \n              \n    {\n        /*\n         * IMPORTANT: in all other APDUs the previous APDU type gets overwritten\n         * in process() function; this is not the case here because the\n         * information is needed when processing to verify the security\n         * condition for non repudiation signature\n         * \n         * the previous APDU type has to be overwritten in every possible exit\n         * path out of this function; therefore we check the security conditions\n         * of the non repudiation signature as early as possible, but we have to\n         * overwrite the previous APDU type in the 2 possible exceptions before\n         */\n        JCSystem.beginTransaction();\n        //@ open valid();\n        // check P1 and P2        \n        if (buffer[ISO7816.OFFSET_P1] != (byte) 0x9E || buffer[ISO7816.OFFSET_P2] != (byte) 0x9A) {\n            setPreviousApduType(OTHER);\n            ISOException.throwIt(ISO7816.SW_WRONG_P1P2);\n        }\n        // generate signature without prepare signature results:\n        // \"conditions of use not satisfied\"\n        if (getSignatureType() == NO_SIGNATURE) {\n            setPreviousApduType(OTHER);\n            ISOException.throwIt(ISO7816.SW_CONDITIONS_NOT_SATISFIED);\n        }\n        /*\n         * verify authentication information throw\n         * \"security condition not satisfied\" if something is wrong\n         */\n        // check if previous APDU did a cardholder PIN verification\n        if ((getSignatureType() == NON_REPUDIATION) && (getPreviousApduType() != VERIFY_CARDHOLDER_PIN)) {\n            setPreviousApduType(OTHER);\n            ISOException.throwIt(ISO7816.SW_SECURITY_STATUS_NOT_SATISFIED);\n        }\n        // overwrite previous ADPU type as soon as possible\n        setPreviousApduType(OTHER);\n\n        // it is impossible to generate basic signatures with this command\n        if (getSignatureType() == BASIC)\n            ISOException.throwIt(ISO7816.SW_SECURITY_STATUS_NOT_SATISFIED);\n        // check if cardholder PIN was entered correctly\n        if (!cardholderPin.isValidated())\n            ISOException.throwIt(ISO7816.SW_SECURITY_STATUS_NOT_SATISFIED);\n        \n        //@ close valid();\n        JCSystem.commitTransaction();\n        //@ open [1/2]valid();\n        switch (signatureAlgorithm) {\n        case ALG_MD5_PKCS1:\n            //@ close [1/2]valid();\n            generatePkcs1Md5Signature(apdu, buffer);\n            //@ open [1/2]valid();\n            break;\n        case ALG_SHA1_PKCS1:\n            //@ close [1/2]valid();\n            generatePkcs1Sha1Signature(apdu, buffer);\n            //@ open [1/2]valid();\n            break;\n        case ALG_PKCS1:\n            //@ close [1/2]valid();\n            generatePkcs1Signature(apdu, buffer);\n            //@ open [1/2]valid();\n            break;\n        }\n        //@ close [1/2]valid();\n        // if T=1, store signature in sigBuffer so that it can latter be sent\n        if (APDU.getProtocol() == APDU.PROTOCOL_T1) {\n            JCSystem.beginTransaction();\n            //@ open valid();\n            Util.arrayCopy(buffer, (short) 0, responseBuffer, (short) 0, (short) 128);\n            //@ close valid();\n            JCSystem.commitTransaction();\n            \n            // in case T=0 protocol, send the signature immediately in a\n            // response APDU\n        } else {\n            // send first 128 bytes (= 1024 bit) of buffer\n            apdu.setOutgoingAndSend((short) 0, (short) 128);\n        }\n    }\n",
        "methodStartingLine": 1678,
        "methodEndingLine": 1760,
        "jml": "//@ requires current_applet(this) &*& [1/2]valid() &*& APDU(apdu, buffer) &*& array_slice(buffer, 0, buffer.length, _);\n//@ ensures current_applet(this) &*& [1/2]valid() &*& APDU(apdu, buffer) &*& array_slice(buffer, 0, buffer.length, _);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/NewEidCard/NewEidCard.java",
        "code": "    private void generatePkcs1Md5Signature(APDU apdu, byte[] buffer) \n          \n              \n    {\n        // receive the data that needs to be signed\n        short byteRead = apdu.setIncomingAndReceive();\n        // check Lc\n        short lc = (short) (buffer[ISO7816.OFFSET_LC] & 0x00FF);\n        if ((lc != 16) || (byteRead != 16))\n            ISOException.throwIt(ISO7816.SW_WRONG_LENGTH);\n        // use the correct key\n        //@ open [1/2]valid();\n        \n        if (getSignatureType() == NON_REPUDIATION) {        \n            cipher.init((RSAPrivateCrtKey)nonRepKeyPair.getPrivate(), Cipher.MODE_ENCRYPT);\n        }\n        if (getSignatureType() == AUTHENTICATION) {\n            cipher.init((RSAPrivateCrtKey)authKeyPair.getPrivate(), Cipher.MODE_ENCRYPT);\n        }\n        //@ close [1/2]valid();\n        JCSystem.beginTransaction();\n        \n        //@ open valid();\n        \n        //@ transient_byte_arrays_mem(messageBuffer);\n        //@ assert transient_byte_arrays(?as);\n        //@ foreachp_remove(messageBuffer, as);\n        //@ open transient_byte_array(messageBuffer);\n        \n        // prepare the message buffer to the PKCS#1 (v1.5) structure\n        preparePkcs1ClearText(messageBuffer, ALG_MD5_PKCS1, lc);\n        // copy the MD5 hash from the APDU to the message buffer\n        Util.arrayCopy(buffer, (short) (ISO7816.OFFSET_CDATA), messageBuffer, (short) (128 - lc), lc);\n\n        //@ close transient_byte_array(messageBuffer);\n        //@ foreachp_unremove(messageBuffer, as);\n\n        //@ close valid();\n        JCSystem.commitTransaction();\n        //@ open [1/2]valid();\n        // generate signature\n        //@ transient_byte_arrays_mem(messageBuffer);\n        //@ assert transient_byte_arrays(?as1);\n        //@ foreachp_remove(messageBuffer, as1);\n        //@ open transient_byte_array(messageBuffer);\n        cipher.doFinal(messageBuffer, (short) 0, (short) 128, buffer, (short) 0);\n        //@ close transient_byte_array(messageBuffer);\n        //@ foreachp_unremove(messageBuffer, as1);\n\n        //@ close [1/2]valid();\n\n\n    }\n",
        "methodStartingLine": 1764,
        "methodEndingLine": 1816,
        "jml": "//@ requires current_applet(this) &*& [1/2]valid() &*& APDU(apdu, buffer) &*& array_slice(buffer, 0, buffer.length, _);\n//@ ensures current_applet(this) &*& [1/2]valid() &*& APDU(apdu, buffer) &*& array_slice(buffer, 0, buffer.length, _);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/NewEidCard/NewEidCard.java",
        "code": "    private void generatePkcs1Sha1Signature(APDU apdu, byte[] buffer) \n          \n              \n    {\n        // receive the data that needs to be signed\n        short byteRead = apdu.setIncomingAndReceive();\n        // check Lc\n        \n        \n        short lc = (short) (buffer[ISO7816.OFFSET_LC] & 0x00FF);\n        if ((lc != 20) || (byteRead != 20))\n            ISOException.throwIt(ISO7816.SW_WRONG_LENGTH);\n        \n        \n        //@ open [1/2]valid();\n        // use the correct key\n        if (getSignatureType() == NON_REPUDIATION) {\n            ////cipher.init(nonRepPrivateKey, Cipher.MODE_ENCRYPT); // stond al in comments\n            cipher.init((RSAPrivateCrtKey)nonRepKeyPair.getPrivate(), Cipher.MODE_ENCRYPT);\n        }\n        \n        if (getSignatureType() == AUTHENTICATION) {\n            cipher.init((RSAPrivateCrtKey)authKeyPair.getPrivate(), Cipher.MODE_ENCRYPT);\n        }\n        \n        //@ close [1/2]valid();\n        JCSystem.beginTransaction();\n        //@ open valid();\n        \n        //@ transient_byte_arrays_mem(messageBuffer);\n        //@ assert transient_byte_arrays(?as);\n        //@ foreachp_remove(messageBuffer, as);\n        //@ open transient_byte_array(messageBuffer);\n\n        // prepare the message buffer to the PKCS#1 (v1.5) structure\n        preparePkcs1ClearText(messageBuffer, ALG_SHA1_PKCS1, lc);\n        // copy the SHA1 hash from the APDU to the message buffer\n        Util.arrayCopy(buffer, (short) (ISO7816.OFFSET_CDATA), messageBuffer, (short) (128 - lc), lc);\n\n        //@ close transient_byte_array(messageBuffer);\n        //@ foreachp_unremove(messageBuffer, as);\n\n        //@ close valid();\n        JCSystem.commitTransaction();\n        //@ open [1/2]valid();\n        // generate signature\n        //@ transient_byte_arrays_mem(messageBuffer);\n        //@ assert transient_byte_arrays(?as1);\n        //@ foreachp_remove(messageBuffer, as1);\n        //@ open transient_byte_array(messageBuffer);\n        cipher.doFinal(messageBuffer, (short) 0, (short) 128, buffer, (short) 0);\n        //@ close transient_byte_array(messageBuffer);\n        //@ foreachp_unremove(messageBuffer, as1);\n        //@ close [1/2]valid();\n    }\n",
        "methodStartingLine": 1820,
        "methodEndingLine": 1874,
        "jml": "//@ requires current_applet(this) &*& [1/2]valid() &*& APDU(apdu, buffer) &*& array_slice(buffer, 0, buffer.length, _);\n//@ ensures current_applet(this) &*& [1/2]valid() &*& APDU(apdu, buffer) &*& array_slice(buffer, 0, buffer.length, _);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/NewEidCard/NewEidCard.java",
        "code": "    private void generatePkcs1Signature(APDU apdu, byte[] buffer) \n          \n              \n    {\n        // receive the data that needs to be signed\n        short byteRead = apdu.setIncomingAndReceive();\n        // check Lc\n        //@ positive_and(buffer[ISO7816.OFFSET_LC], 0x00FF);\n        short lc = (short) (buffer[ISO7816.OFFSET_LC] & 0x00FF);\n        if ((lc > 117) || (byteRead > 117))\n            ISOException.throwIt(ISO7816.SW_WRONG_LENGTH);\n        // use the correct key\n        //@ open [1/2]valid();\n        if (getSignatureType() == NON_REPUDIATION) {\n            cipher.init((RSAPrivateCrtKey)nonRepKeyPair.getPrivate(), Cipher.MODE_ENCRYPT);\n        }\n        if (getSignatureType() == AUTHENTICATION) {\n            cipher.init((RSAPrivateCrtKey)authKeyPair.getPrivate(), Cipher.MODE_ENCRYPT);\n        }\n        //@ close [1/2]valid();\n        JCSystem.beginTransaction();\n        //@ open valid();\n\n        //@ transient_byte_arrays_mem(messageBuffer);\n        //@ assert transient_byte_arrays(?as);\n        //@ foreachp_remove(messageBuffer, as);\n        //@ open transient_byte_array(messageBuffer);\n\n        // prepare the message buffer to the PKCS#1 (v1.5) structure\n        preparePkcs1ClearText(messageBuffer, ALG_PKCS1, lc);\n        // copy the clear text from the APDU to the message buffer\n        Util.arrayCopy(buffer, (short) (ISO7816.OFFSET_CDATA), messageBuffer, (short) (128 - lc), lc);\n        //@ close transient_byte_array(messageBuffer);\n        //@ foreachp_unremove(messageBuffer, as);\n\n        //@ close valid();\n        JCSystem.commitTransaction();\n        //@ open [1/2]valid();\n        //@ transient_byte_arrays_mem(messageBuffer);\n        //@ assert transient_byte_arrays(?as1);\n        //@ foreachp_remove(messageBuffer, as1);\n        //@ open transient_byte_array(messageBuffer);\n        // generate signature\n        cipher.doFinal(messageBuffer, (short) 0, (short) 128, buffer, (short) 0);\n        //@ close transient_byte_array(messageBuffer);\n        //@ foreachp_unremove(messageBuffer, as1);\n        //@ close [1/2]valid();\n    }\n",
        "methodStartingLine": 1878,
        "methodEndingLine": 1925,
        "jml": "//@ requires current_applet(this) &*& [1/2]valid() &*& APDU(apdu, buffer) &*& array_slice(buffer, 0, buffer.length, _);\n//@ ensures current_applet(this) &*& [1/2]valid() &*& APDU(apdu, buffer) &*& array_slice(buffer, 0, buffer.length, _);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/NewEidCard/NewEidCard.java",
        "code": "    private void generateKeyPair(APDU apdu) \n          \n              \n    {\n        apdu.setIncomingAndReceive();// If this was removed, function will not\n        // work: no data except for command will be read\n        byte[] buffer = apdu.getBuffer();\n        // check if access to this method is allowed\n        if (GPSystem.getCardContentState() != GPSystem.APPLICATION_SELECTABLE)\n            ISOException.throwIt(ISO7816.SW_SECURITY_STATUS_NOT_SATISFIED);\n        // check P1 and P2\n        if (buffer[ISO7816.OFFSET_P1] != (byte) 0x00)\n            ISOException.throwIt(ISO7816.SW_WRONG_P1P2);\n        // check Lc\n        short lc = (short) (buffer[ISO7816.OFFSET_LC] & 0x00FF);\n        if (lc != (short) 11)\n            ISOException.throwIt(ISO7816.SW_WRONG_LENGTH);\n        byte offset = (ISO7816.OFFSET_CDATA + 0x01);\n        //byte offset = (byte)(ISO7816.OFFSET_CDATA + 0x01);\n        // create keypair using parameters given:\n        // short keyLength = Util.makeShort(buffer[ISO7816.OFFSET_CDATA],\n        // buffer[offset]);\n        if (buffer[offset] != (byte) 0x80)\n            ISOException.throwIt(ISO7816.SW_WRONG_LENGTH);\n        \n        \n        \n        // This is commented out as changing exponent makes getting modulus\n        // impossible on some java cards\n        // ((RSAPublicKey)tempkp.getPublic()).setExponent(buffer, (short)(13),\n        // (short)3);\n        JCSystem.beginTransaction();\n        //@ open valid();\n        setPreviousApduType(GENERATE_KEY_PAIR);\n        switch (buffer[ISO7816.OFFSET_P2]) {\n        case BASIC:\n            basicKeyPair = new KeyPair(KeyPair.ALG_RSA_CRT, (short) (1024));\n            basicKeyPair.genKeyPair();\n            \n            break;\n        case AUTHENTICATION: // use authentication private key\n            authKeyPair = new KeyPair(KeyPair.ALG_RSA_CRT, (short) (1024));\n            authKeyPair.genKeyPair();\n            \n            break;\n        case NON_REPUDIATION: // use non repudiation private key\n            nonRepKeyPair = new KeyPair(KeyPair.ALG_RSA_CRT, (short) (1024));\n            nonRepKeyPair.genKeyPair();\n            \n            break;\n        default:\n            \n            ISOException.throwIt(SW_REFERENCE_DATA_NOT_FOUND);\n            break; //~allow_dead_code\n        }\n        //@ close valid();\n        JCSystem.commitTransaction();\n    }\n",
        "methodStartingLine": 1969,
        "methodEndingLine": 2026,
        "jml": "//@ requires current_applet(this) &*& [1/2]valid() &*& APDU(apdu, ?theBuffer) &*& array_slice(theBuffer, 0, theBuffer.length, _);\n//@ ensures current_applet(this) &*& [1/2]valid() &*& APDU(apdu, theBuffer) &*& array_slice(theBuffer, 0, theBuffer.length, _);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/NewEidCard/NewEidCard.java",
        "code": "    private void getPublicKey(APDU apdu) \n          \n              \n    {\n        \n        \n        byte[] buffer = apdu.getBuffer();\n        // if this is thrown: problem accesses getPreviousapdu\n        // check P1\n        if (buffer[ISO7816.OFFSET_P1] != (byte) 0x00)\n            ISOException.throwIt(ISO7816.SW_WRONG_P1P2);\n        // inform the JCRE that the applet has data to return\n        short le = apdu.setOutgoing();\n        // Le = 0 is not allowed\n        if (le != (short) (5 + 8 + 128))\n            ISOException.throwIt((short) (SW_WRONG_LENGTH_00 + (5 + 8 + 128)));\n        byte[] tempBuffer = new byte[le];\n        tempBuffer[(short) 0] = (byte) 0x02;\n        tempBuffer[(short) 1] = (byte) 0x08;\n        tempBuffer[(short) 10] = (byte) 0x03;\n        tempBuffer[(short) 11] = (byte) 0x81;\n        tempBuffer[(short) 12] = (byte) 0x80;\n        //@ open [1/2]valid();\n        if (buffer[ISO7816.OFFSET_P2] == AUTHENTICATION){\n            if (getPreviousApduType() != GENERATE_KEY_PAIR) {\n                authKeyPair.getPublic().clearKey();\n                    //@ close [1/2]valid();\n                JCSystem.beginTransaction();\n                    //@ open valid();\n                setPreviousApduType(OTHER);\n                    //@ close valid();\n                JCSystem.commitTransaction();\n                    //@ open [1/2]valid();\n                ISOException.throwIt(ISO7816.SW_CONDITIONS_NOT_SATISFIED);\n            }\n            ((RSAPublicKey) authKeyPair.getPublic()).getExponent(tempBuffer, (short) 7);\n            ((RSAPublicKey) authKeyPair.getPublic()).getModulus(tempBuffer, (short) 13);\n        }else if (buffer[ISO7816.OFFSET_P2] == NON_REPUDIATION) { \n            if (getPreviousApduType() != GENERATE_KEY_PAIR) {\n                nonRepKeyPair.getPublic().clearKey();\n                    //@ close [1/2]valid();\n                JCSystem.beginTransaction();\n                    //@ open valid();\n                setPreviousApduType(OTHER);\n                //@ close valid();\n                JCSystem.commitTransaction();\n                //@ open [1/2]valid();\n                ISOException.throwIt(ISO7816.SW_CONDITIONS_NOT_SATISFIED);\n            }            \n            ((RSAPublicKey) nonRepKeyPair.getPublic()).getExponent(tempBuffer, (short) 7);\n            ((RSAPublicKey) nonRepKeyPair.getPublic()).getModulus(tempBuffer, (short) 13);\n        }else if (buffer[ISO7816.OFFSET_P2] == BASIC) {        \n            if (basicKeyPair == null)\n                ISOException.throwIt(SW_REFERENCE_DATA_NOT_FOUND);\n            ((RSAPublicKey) basicKeyPair.getPublic()).getExponent(tempBuffer, (short) 7);\n            ((RSAPublicKey) basicKeyPair.getPublic()).getModulus(tempBuffer, (short) 13);\n        } else {\n            ISOException.throwIt(SW_REFERENCE_DATA_NOT_FOUND);\n        }\n            //@ close [1/2]valid();\n        JCSystem.beginTransaction();\n            //@ open valid();\n        setPreviousApduType(OTHER);\n        //@ close valid();\n        JCSystem.commitTransaction();\n        //@ open [1/2]valid();\n        authKeyPair.getPublic().clearKey();\n        nonRepKeyPair.getPublic().clearKey();\n        // set the actual number of outgoing data bytes\n        apdu.setOutgoingLength(le);\n        // send content of buffer in apdu\n        apdu.sendBytesLong(tempBuffer, (short) 0, le);\n        //@ close [1/2]valid();\n    }\n",
        "methodStartingLine": 2032,
        "methodEndingLine": 2105,
        "jml": "//@ requires current_applet(this) &*& [1/2]valid() &*& APDU(apdu, ?theBuffer) &*& array_slice(theBuffer, 0, theBuffer.length, _);\n//@ ensures current_applet(this) &*& [1/2]valid() &*& APDU(apdu, theBuffer) &*& array_slice(theBuffer, 0, theBuffer.length, _);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/NewEidCard/NewEidCard.java",
        "code": "    private void putPublicKey(APDU apdu, byte[] buffer) \n          \n              \n    {\n        ISOException.throwIt(SW_REFERENCE_DATA_NOT_FOUND);\n    }\n",
        "methodStartingLine": 2109,
        "methodEndingLine": 2114,
        "jml": "//@ requires [1/2]valid();\n//@ ensures [1/2]valid();"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/NewEidCard/NewEidCard.java",
        "code": "    private void eraseKey(APDU apdu, byte[] buffer) \n          \n              \n    {\n        // check P1\n        if (buffer[ISO7816.OFFSET_P1] != (byte) 0x00)\n            ISOException.throwIt(ISO7816.SW_WRONG_P1P2);\n        switch (buffer[ISO7816.OFFSET_P2]) {\n        case BASIC:\n            JCSystem.beginTransaction();\n            //@ open valid();\n            basicKeyPair = null;\n            //@ close valid();\n            JCSystem.commitTransaction();\n            break;\n        default:\n            ISOException.throwIt(SW_REFERENCE_DATA_NOT_FOUND);\n            break; //~allow_dead_code\n        }\n    }\n",
        "methodStartingLine": 2118,
        "methodEndingLine": 2137,
        "jml": "//@ requires current_applet(this) &*& [1/2]valid() &*& APDU(apdu, buffer) &*& array_slice(buffer, 0, buffer.length, _);\n//@ ensures current_applet(this) &*& [1/2]valid() &*& APDU(apdu, buffer) &*& array_slice(buffer, 0, buffer.length, _);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/NewEidCard/NewEidCard.java",
        "code": "    private void activateKey(APDU apdu, byte[] buffer) \n          \n              \n    {\n        // check P1\n        if (buffer[ISO7816.OFFSET_P1] != (byte) 0x00)\n            ISOException.throwIt(ISO7816.SW_WRONG_P1P2);\n        switch (buffer[ISO7816.OFFSET_P2]) {\n        case AUTHENTICATION:\n            // activate key: key always active, do nothing\n            break;\n        case NON_REPUDIATION:\n            // activate key: key always active, do nothing\n            break;\n        default:\n            ISOException.throwIt(SW_REFERENCE_DATA_NOT_FOUND);\n            break; //~allow_dead_code\n        }\n    }\n",
        "methodStartingLine": 2142,
        "methodEndingLine": 2160,
        "jml": "//@ requires current_applet(this) &*& [1/2]valid() &*& APDU(apdu, buffer) &*& array_slice(buffer, 0, buffer.length, _);\n//@ ensures current_applet(this) &*& [1/2]valid() &*& APDU(apdu, buffer) &*& array_slice(buffer, 0, buffer.length, _);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/NewEidCard/NewEidCard.java",
        "code": "    private void deactivateKey(APDU apdu, byte[] buffer) \n          \n              \n    {\n        ISOException.throwIt(ISO7816.SW_CONDITIONS_NOT_SATISFIED);\n    }\n",
        "methodStartingLine": 2165,
        "methodEndingLine": 2170,
        "jml": "//@ requires current_applet(this) &*& [1/2]valid() &*& APDU(apdu, buffer) &*& array_slice(buffer, 0, buffer.length, _);\n//@ ensures current_applet(this) &*& [1/2]valid() &*& APDU(apdu, buffer) &*& array_slice(buffer, 0, buffer.length, _);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/NewEidCard/NewEidCard.java",
        "code": "    private void internalAuthenticate(APDU apdu, byte[] buffer) \n          \n              \n    {\n        // check P1 and P2\n        if ((buffer[ISO7816.OFFSET_P1] != ALG_SHA1_PKCS1) || buffer[ISO7816.OFFSET_P2] != BASIC)\n            ISOException.throwIt(ISO7816.SW_WRONG_P1P2);\n        // receive the data that needs to be signed\n        short byteRead = apdu.setIncomingAndReceive();\n        // check Lc\n        short lc = (short) (buffer[ISO7816.OFFSET_LC] & 0x00FF);\n        // we do not support Lc=0x97, only Lc=0x16\n        if ((lc == 0x97) || (byteRead == 0x97))\n            ISOException.throwIt(ISO7816.SW_SECURITY_STATUS_NOT_SATISFIED);\n        if ((lc != 0x16) || (byteRead != 0x16))\n            ISOException.throwIt(ISO7816.SW_WRONG_LENGTH);\n        // the first data byte must be \"94\" and the second byte is the length\n        // (20 bytes)\n        if ((buffer[ISO7816.OFFSET_CDATA] != (byte) 0x94) || (buffer[ISO7816.OFFSET_CDATA + 1] != (byte) 0x14))\n            ISOException.throwIt(ISO7816.SW_WRONG_DATA);\n        // use the basic private key\n        JCSystem.beginTransaction();\n        //@ open valid();\n        \n        //@ transient_byte_arrays_mem(messageBuffer);\n        //@ assert transient_byte_arrays(?as);\n        //@ foreachp_remove(messageBuffer, as);\n        //@ open transient_byte_array(messageBuffer);\n\n        if (basicKeyPair == null)\n            ISOException.throwIt(ISO7816.SW_CONDITIONS_NOT_SATISFIED);\n\n        //VF: bovenstaande is mogelijk bug in programma!\n        cipher.init(basicKeyPair.getPrivate(), Cipher.MODE_ENCRYPT);\n        // prepare the message buffer to the PKCS#1 (v1.5) structure\n        preparePkcs1ClearText(messageBuffer, ALG_SHA1_PKCS1, lc);\n        // copy the challenge (SHA1 hash) from the APDU to the message buffer\n        Util.arrayCopy(buffer, (short) (ISO7816.OFFSET_CDATA + 2), messageBuffer, (short) 108, (short) 20);\n        // generate signature\n        cipher.doFinal(messageBuffer, (short) 0, (short) 128, buffer, (short) 0);\n        // if T=0, store signature in sigBuffer so that it can latter be sent\n        if (APDU.getProtocol() == APDU.PROTOCOL_T1) {\n            Util.arrayCopy(buffer, (short) 0, responseBuffer, (short) 0, (short) 128);\n            // in case T=1 protocol, send the signature immediately in a\n            // response APDU\n        } else {\n            // send first 128 bytes (= 1024 bit) of buffer\n            apdu.setOutgoingAndSend((short) 0, (short) 128);\n        }\n        // decrement internal authenticate counter\n        //internalAuthenticateCounter--;\n        //@ close transient_byte_array(messageBuffer);\n        //@ foreachp_unremove(messageBuffer, as);\n        \n        //@ close valid();\n        JCSystem.commitTransaction();\n    }\n",
        "methodStartingLine": 2176,
        "methodEndingLine": 2232,
        "jml": "//@ requires current_applet(this) &*& [1/2]valid() &*& APDU(apdu, buffer) &*& array_slice(buffer, 0, buffer.length, _);\n//@ ensures current_applet(this) &*& [1/2]valid() &*& APDU(apdu, buffer) &*& array_slice(buffer, 0, buffer.length, _);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/NewEidCard/NewEidCard.java",
        "code": "    private void getResponse(APDU apdu, byte[] buffer) \n          \n              \n    {\n        //@ open [1/2]valid();\n        // use P1 and P2 as offset\n        short offset = Util.makeShort(buffer[ISO7816.OFFSET_P1], buffer[ISO7816.OFFSET_P2]);\n        if (offset > responseBuffer.length)\n            ISOException.throwIt(ISO7816.SW_WRONG_P1P2);\n        // inform the JCRE that the applet has data to return\n        short le = apdu.setOutgoing();\n        // if Le = 0, then return the complete signature (128 bytes = 1024 bits)\n        // Le = 256 possible on real card\n        if ((le == 0) || (le == 256))\n            le = 128;\n        // set the actual number of outgoing data bytes\n        apdu.setOutgoingLength(le);\n        // send content of sigBuffer in apdu\n        if ((short) (offset + le) > (short)128 || offset < (short)0)\n            ISOException.throwIt(ISO7816.SW_WRONG_P1P2);\n        apdu.sendBytesLong(responseBuffer, offset, le);\n        //@ close [1/2]valid();\n    }\n",
        "methodStartingLine": 2236,
        "methodEndingLine": 2258,
        "jml": "//@ requires current_applet(this) &*& [1/2]valid() &*& APDU(apdu, buffer) &*& array_slice(buffer, 0, buffer.length, _);\n//@ ensures current_applet(this) &*& [1/2]valid() &*& APDU(apdu, buffer) &*& array_slice(buffer, 0, buffer.length, _);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/NewEidCard/NewEidCard.java",
        "code": "    private void getChallenge(APDU apdu, byte[] buffer) \n          \n              \n    {\n        // check P1 and P2\n        if (buffer[ISO7816.OFFSET_P1] != (byte) 0x00 || buffer[ISO7816.OFFSET_P2] != (byte) 0x00)\n            ISOException.throwIt(ISO7816.SW_WRONG_P1P2);\n        // inform the JCRE that the applet has data to return\n        short le = apdu.setOutgoing();\n        // Le = 0 is not allowed\n        if (le == 0)\n            ISOException.throwIt(ISO7816.SW_WRONG_LENGTH);\n        JCSystem.beginTransaction();\n        //@ open valid();\n        RandomData random = NewEidCard.randomData;\n        // generate random data and put it into buffer\n        random.generateData(randomBuffer, (short) 0, le);\n        // set the actual number of outgoing data bytes\n        apdu.setOutgoingLength(le);\n        // send content of buffer in apdu\n        apdu.sendBytesLong(randomBuffer, (short) 0, le);\n        //@ close valid();\n        JCSystem.commitTransaction();\n    }\n",
        "methodStartingLine": 2262,
        "methodEndingLine": 2285,
        "jml": "//@ requires current_applet(this) &*& [1/2]valid() &*& APDU(apdu, buffer) &*& array_slice(buffer, 0, buffer.length, _);\n//@ ensures current_applet(this) &*& [1/2]valid() &*& APDU(apdu, buffer) &*& array_slice(buffer, 0, buffer.length, _);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/NewEidCard/NewEidCard.java",
        "code": "    private void selectFile(APDU apdu, byte[] buffer) \n          \n              \n    {\n        // check P2\n        if (buffer[ISO7816.OFFSET_P2] != (byte) 0x0C)\n            ISOException.throwIt(ISO7816.SW_WRONG_P1P2);\n        // P1 determines the select method\n        switch (buffer[ISO7816.OFFSET_P1]) {\n        case (byte) 0x02:\n            selectByFileIdentifier(apdu, buffer);\n            break;\n        case (byte) 0x08:\n            selectByPath(apdu, buffer);\n            break;\n        default:\n            ISOException.throwIt(ISO7816.SW_INCORRECT_P1P2);\n            break; //~allow_dead_code\n        }\n    }\n",
        "methodStartingLine": 2291,
        "methodEndingLine": 2310,
        "jml": "//@ requires current_applet(this) &*& [1/2]valid() &*& APDU(apdu, buffer) &*& array_slice(buffer, 0, buffer.length, _);\n//@ ensures current_applet(this) &*& [1/2]valid() &*& APDU(apdu, buffer) &*& array_slice(buffer, 0, buffer.length, _);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/NewEidCard/NewEidCard.java",
        "code": "    private void setPreviousApduType(byte type) \n          \n              \n    {\n        //@ transient_byte_arrays_mem(thePreviousApduType);\n        //@ foreachp_remove(thePreviousApduType, ta);\n        //@ open transient_byte_array(thePreviousApduType);\n        previousApduType[0] = type;\n        //@ close transient_byte_array(thePreviousApduType);\n        //@ foreachp_unremove(thePreviousApduType, ta);\n    }\n",
        "methodStartingLine": 2314,
        "methodEndingLine": 2324,
        "jml": "//@ requires previousApduType |-> ?thePreviousApduType &*& thePreviousApduType != null &*& thePreviousApduType.length == 1 &*& is_transient_byte_array(thePreviousApduType) == true &*& transient_byte_arrays(?ta) &*& foreachp(ta, transient_byte_array);\n//@ ensures previousApduType |-> thePreviousApduType &*& thePreviousApduType != null &*& transient_byte_arrays(ta) &*& foreachp(ta, transient_byte_array);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/NewEidCard/NewEidCard.java",
        "code": "    private byte getPreviousApduType() \n          \n          \n    {\n        //@ transient_byte_arrays_mem(thePreviousApduType);\n        //@ foreachp_remove(thePreviousApduType, ta);\n        //@ open transient_byte_array(thePreviousApduType);\n        return previousApduType[0];\n        //@ close transient_byte_array(thePreviousApduType);\n        //@ foreachp_unremove(thePreviousApduType, ta);\n    }\n",
        "methodStartingLine": 2328,
        "methodEndingLine": 2338,
        "jml": "//@ requires [?f]previousApduType |-> ?thePreviousApduType &*& thePreviousApduType != null &*& thePreviousApduType.length == 1 &*& is_transient_byte_array(thePreviousApduType) == true &*& transient_byte_arrays(?ta) &*& foreachp(ta, transient_byte_array);\n//@ ensures [f]previousApduType |-> thePreviousApduType &*& transient_byte_arrays(ta) &*& foreachp(ta, transient_byte_array);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/NewEidCard/NewEidCard.java",
        "code": "    private void setSignatureType(byte type) \n          \n              \n    {\n        //@ transient_byte_arrays_mem(theSignatureType);\n        //@ foreachp_remove(theSignatureType, ta);\n        //@ open transient_byte_array(theSignatureType);\n        signatureType[0] = type;\n        //@ close transient_byte_array(theSignatureType);\n        //@ foreachp_unremove(theSignatureType, ta);\n    }\n",
        "methodStartingLine": 2342,
        "methodEndingLine": 2352,
        "jml": "//@ requires signatureType |-> ?theSignatureType &*& theSignatureType != null &*& theSignatureType.length == 1 &*& is_transient_byte_array(theSignatureType) == true &*& transient_byte_arrays(?ta) &*& foreachp(ta, transient_byte_array);\n//@ ensures signatureType |-> theSignatureType &*& is_transient_byte_array(theSignatureType) == true &*& transient_byte_arrays(ta) &*& foreachp(ta, transient_byte_array);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/NewEidCard/NewEidCard.java",
        "code": "    private byte getSignatureType() \n          \n              \n    {\n        //@ transient_byte_arrays_mem(theSignatureType);\n        //@ foreachp_remove(theSignatureType, ta);\n        //@ open transient_byte_array(theSignatureType);\n        return signatureType[0];\n        //@ close transient_byte_array(theSignatureType);\n        //@ foreachp_unremove(theSignatureType, ta);\n    }\n",
        "methodStartingLine": 2356,
        "methodEndingLine": 2366,
        "jml": "//@ requires [?f]signatureType |-> ?theSignatureType &*& theSignatureType != null &*& theSignatureType.length == 1 &*& is_transient_byte_array(theSignatureType) == true &*& transient_byte_arrays(?ta) &*& foreachp(ta, transient_byte_array);\n//@ ensures [f]signatureType |-> theSignatureType &*& transient_byte_arrays(ta) &*& foreachp(ta, transient_byte_array);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/NewEidCard/NewEidCard.java",
        "code": "    private void deactivateFile(APDU apdu, byte[] buffer) \n          \n              \n    {\n        // check P2\n        if (buffer[ISO7816.OFFSET_P2] != (byte) 0x0C)\n            ISOException.throwIt(ISO7816.SW_WRONG_P1P2);\n        // P1 determines the select method\n        switch (buffer[ISO7816.OFFSET_P1]) {\n        case (byte) 0x02:\n            selectByFileIdentifier(apdu, buffer);\n            break;\n        case (byte) 0x08:\n            selectByPath(apdu, buffer);\n            break;\n        default:\n            ISOException.throwIt(ISO7816.SW_INCORRECT_P1P2);\n            break; //~allow_dead_code\n        }\n        // check if deactivating this file is allowed\n        if (!fileAccessAllowed(UPDATE_BINARY))\n            ISOException.throwIt(ISO7816.SW_SECURITY_STATUS_NOT_SATISFIED);\n        JCSystem.beginTransaction();\n        //@ open valid();\n          //@ open selected_file_types(_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, ?sf2);\n        //@ sf2.castElementaryToFile();\n        selectedFile.setActive(false);\n        //@ sf2.castFileToElementary();\n        //@ close valid();\n        JCSystem.commitTransaction();\n    }\n",
        "methodStartingLine": 2373,
        "methodEndingLine": 2403,
        "jml": "//@ requires current_applet(this) &*& [1/2]valid() &*& APDU(apdu, buffer) &*& array_slice(buffer, 0, buffer.length, _);\n//@ ensures current_applet(this) &*& [1/2]valid() &*& APDU(apdu, buffer) &*& array_slice(buffer, 0, buffer.length, _);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/NewEidCard/NewEidCard.java",
        "code": "    public Shareable getShareableInterfaceObject(AID oAid, byte bArg)\n        \n        \n    {\n        \n        //check if AID is allowed\n        //@ NewEidPointsObject.getShareable();\n        \n        if (bArg == (byte)0x0) // Based on argument, return\n                                                // object reference\n            return (Shareable) (NewEidPointsObject);\n\n            else \n                ISOException.throwIt(ISO7816.SW_WRONG_DATA);\n        \n        return null; //~allow_dead_code\n    }    \n",
        "methodStartingLine": 2405,
        "methodEndingLine": 2421,
        "jml": "//@ requires [1/2]this.valid() &*& registered_applets(?as) &*& foreachp(remove<Applet>(this, as), semi_valid) &*& mem<Applet>(this, as) == true &*& AID(oAid);\n//@ ensures [1/2]this.valid() &*& registered_applets(as) &*& foreachp(remove<Applet>(this, as), semi_valid) &*& AID(oAid) &*& result == null ? true : result.Shareable(?a) &*& mem<Applet>(a, as) == true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/NewEidCard/NewEidCard.java",
        "code": "    private void askForCharge()\n        \n        \n    {\n                AID Purse_AID = JCSystem.lookupAID(NewEPurseAID,(short)0, (byte)NewEPurseAID.length);\n        \n        if (Purse_AID == null)\n            ISOException.throwIt(ISO7816.SW_CONDITIONS_NOT_SATISFIED);\n        \n        JCSystem.beginTransaction(); // Added for VeriFast\n        IEPurseServicesCredit NewEPurseCreditObject = (IEPurseServicesCredit)\n            (JCSystem.getAppletShareableInterfaceObject(Purse_AID, (byte)0x01));\n        short points = Points;\n        if (NewEPurseCreditObject != null) {\n\t    //@ Shareable epurseServiceSIO = NewEPurseCreditObject;\n\t    //@ assert epurseServiceSIO.Shareable(?epurseApplet);\n\t    //@ mem_registered_applets_is(this);\n\t    //@ assert registered_applets(?as1);\n\t    //@ foreachp_unremove<Applet>(this, as1);\n\t    //@ set_current_applet(epurseApplet);\n\t    //@ foreachp_remove(epurseApplet, as1);\n            NewEPurseCreditObject.charge(points);\n            //@ is_registered_applets_mem(this);\n            //@ assert registered_applets(?as2);\n            //@ foreachp_unremove(epurseApplet, as2);\n            //@ set_current_applet(this);\n            //@ foreachp_remove<Applet>(this, as2);\n        }\n        JCSystem.commitTransaction(); // Added for VeriFast\n        \n    }\n",
        "methodStartingLine": 2423,
        "methodEndingLine": 2453,
        "jml": "//@ requires current_applet(this) &*& [1/2]valid();\n//@ ensures current_applet(this) &*& [1/2]valid();"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/NewEidCard/MasterFile.java",
        "code": "\tpublic DedicatedFile getParent() \n\t    \n\t    \n\t{\n\t\t//@ open DedicatedFile(fid, parentfile, active, siblist, info);\n\t\t//@ open MasterFile(fid, parentfile, active, siblist, ?info2);\n\t\t//@ open this.DedicatedFile(DedicatedFile.class)(fid, parentfile, active, siblist, ?info3);\n\t\treturn parentFile;\n\t\t//@ close this.DedicatedFile(DedicatedFile.class)(fid, parentfile, active, siblist, info3);\n\t\t//@ close MasterFile(fid, parentfile, active, siblist, info2);\n\t\t//@ close DedicatedFile(fid, parentfile, active, siblist, info);\n\t}\n",
        "methodStartingLine": 18,
        "methodEndingLine": 29,
        "jml": "//@ requires DedicatedFile(?fid, ?parentfile, ?active, ?siblist, ?info);\n//@ ensures DedicatedFile(fid, parentfile, active, siblist, info) &*& result == parentfile;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/NewEidCard/MasterFile.java",
        "code": "\tpublic File getSibling(short fid) \n  \t    \n      \t    \n\t{\n\t\t//@ open [f]DedicatedFile(fileID, parentFile, activeState, siblist, info);\n\t\t//@ open [f]MasterFile(fileID, parentFile, activeState, siblist, info);\n\t\treturn super.getSibling(fid);\n\t\t//@ close [f]MasterFile(fileID, parentFile, activeState, siblist, info);\n\t\t//@ close [f]DedicatedFile(fileID, parentFile, activeState, siblist, info);\n\t}\n",
        "methodStartingLine": 32,
        "methodEndingLine": 41,
        "jml": "//@ requires [?f]DedicatedFile(?fileID, ?parentFile, ?activeState, ?siblist, ?info);\n//@ ensures [f]DedicatedFile(fileID, parentFile, activeState, siblist, info) &*& result == null ? true : mem(result, siblist) == true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/NewEidCard/MasterFile.java",
        "code": "\tpublic short getFileID() \n\t    \n\t    \n\t{\n\t\t//@ open [f]valid_id(this);\n\t\treturn fileID;\n\t\t//@ close [f]valid_id(this);\n\t}\n",
        "methodStartingLine": 44,
        "methodEndingLine": 51,
        "jml": "//@ requires [?f]valid_id(this);\n//@ ensures [f]valid_id(this);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/NewEidCard/MasterFile.java",
        "code": "\tpublic void setActive(boolean b)\n\t    \n\t    \n\t{\n\t\t//@ open File(fid, _, info);\n\t\t//@ open MasterFile(fid, ?d0, _, ?d1, ?info2);\n\t\t//@ open this.DedicatedFile(DedicatedFile.class)(fid, null, _, d1, ?info3);\n\t\t//@ open this.File(File.class)(fid, _, ?info4);\n\t\tactive = b;\n\t\t//@ close this.File(File.class)(fid, b, info4);\n\t\t//@ close this.DedicatedFile(DedicatedFile.class)(fid, null, b, d1, info3);\n\t\t//@ close MasterFile(fid, null, b, d1, info2);\n\t\t//@ close File(fid, b, info);\n\t}\n",
        "methodStartingLine": 53,
        "methodEndingLine": 66,
        "jml": "//@ requires File(?fid, _, ?info);\n//@ ensures File(fid, b, info);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/NewEidCard/MasterFile.java",
        "code": "\tpublic boolean isActive() \n\t    \n\t    \n\t{\n\t\t//@ open [f]File(fid, state, info);\n\t\t//@ open [f]MasterFile(fid, ?d0, state, ?d1, ?info2);\n\t\t//@ open [f]this.DedicatedFile(DedicatedFile.class)(fid, null, state, d1, ?info3);\n\t\t//@ open [f]this.File(File.class)(fid, state, ?info4);\n\t\treturn active;\n\t\t//@ close [f]this.File(File.class)(fid, state, info4);\n\t\t//@ close [f]this.DedicatedFile(DedicatedFile.class)(fid, null, state, d1, info3);\n\t\t//@ close [f]MasterFile(fid, null, state, d1, info2);\n\t\t//@ close [f]File(fid, state, info);\n\t}\n",
        "methodStartingLine": 68,
        "methodEndingLine": 81,
        "jml": "//@ requires [?f]File(?fid, ?state, ?info);\n//@ ensures [f]File(fid, state, info) &*& result == state;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/NewEidCard/MasterFile.java",
        "code": "\tprotected void addSibling(File s) \n  \t    \n  \t    /*@ ensures DedicatedFile(fileID, parentFile, activeState, ?newSibList, info)\n  \t    \t\t&*& newSibList == (length(siblist) < MAX_SIBLINGS ? append(siblist, cons(s, nil)) : siblist)\n  \t    \t\t&*& length(siblist) < MAX_SIBLINGS ? mem(s, newSibList) == true : true; @*/\n \t{\n\t\t\n\t\t//@ open DedicatedFile(fileID, parentFile, activeState, siblist, info);\n\t\t//@ open MasterFile(fileID, parentFile, activeState, siblist, ?info2);\n\t\tsuper.addSibling(s);\n\t\t//@ close MasterFile(fileID, parentFile, activeState, (length(siblist) < MAX_SIBLINGS ? append(siblist, cons(s, nil)) : siblist), info2);\n\t\t//@ close DedicatedFile(fileID, parentFile, activeState, (length(siblist) < MAX_SIBLINGS ? append(siblist, cons(s, nil)) : siblist), info);\n\t}\n",
        "methodStartingLine": 83,
        "methodEndingLine": 95,
        "jml": "//@ requires DedicatedFile(?fileID, ?parentFile, ?activeState, ?siblist, ?info) &*& valid_id(s);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/frontend/inner_class/LocalClass.java",
        "code": "  public static void main(String[] args)\n    \n    \n  {\n    class InnerClass\n    {\n      //@ predicate LocalClass$InnerClass(int x) = this.x |-> x;\n      \n      int x = 1;\n      \n      InnerClass()\n      \n      //@ ensures  LocalClass$InnerClass(1);\n      {\n        //@ close LocalClass$InnerClass(1);\n      }\n        \n      int getX()    \n        //@ requires LocalClass$InnerClass(?x);\n        //@ ensures LocalClass$InnerClass(x) &*& result == x;\n      {\n        //@ open LocalClass$InnerClass(x);\n        return this.x;\n      }\n        \n      void setX(int i)    \n        //@ requires LocalClass$InnerClass(_);\n        //@ ensures LocalClass$InnerClass(i);\n      {\n        x = i;\n      }\n    }  \n  \n    InnerClass first = new InnerClass();\n    \n    //Non-static stuff\n    first.setX(111);\n    int i = first.getX();\n    //@ assert i == 111;\n }\n",
        "methodStartingLine": 3,
        "methodEndingLine": 42,
        "jml": "//@ requires true;\n//@ ensures true; "
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/frontend/inner_class/LocalClass.java",
        "code": "      int getX()    \n        \n        \n      {\n        //@ open LocalClass$InnerClass(x);\n        return this.x;\n      }\n",
        "methodStartingLine": 20,
        "methodEndingLine": 26,
        "jml": "//@ requires LocalClass$InnerClass(?x);\n//@ ensures LocalClass$InnerClass(x) &*& result == x;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/frontend/inner_class/LocalClass.java",
        "code": "      void setX(int i)    \n        \n        \n      {\n        x = i;\n      }\n",
        "methodStartingLine": 28,
        "methodEndingLine": 33,
        "jml": "//@ requires LocalClass$InnerClass(_);\n//@ ensures LocalClass$InnerClass(i);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/vstte2012/problem2/values/Combinators.java",
        "code": "    static Term mkApp(Term arg1, Term arg2)\n        \n        \n    {\n        return new Term(tagAPP, arg1, arg2);\n    }\n",
        "methodStartingLine": 133,
        "methodEndingLine": 138,
        "jml": "//@ requires [_]arg1.Term(?t1) &*& [_]arg2.Term(?t2);\n//@ ensures [_]result.Term(app(t1, t2));"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/vstte2012/problem2/values/Combinators.java",
        "code": "    static Term K0()\n        \n        \n    {\n        return new Term(tagK0, null, null);\n    }\n",
        "methodStartingLine": 140,
        "methodEndingLine": 145,
        "jml": "//@ requires true;\n//@ ensures [_]result.Value(K0);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/vstte2012/problem2/values/Combinators.java",
        "code": "    static Term mkK1(Term arg)\n        \n        \n    {\n        return new Term(tagK1, arg, null);\n    }\n",
        "methodStartingLine": 147,
        "methodEndingLine": 152,
        "jml": "//@ requires [_]arg.Value(?v);\n//@ ensures [_]result.Value(K1(v));"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/vstte2012/problem2/values/Combinators.java",
        "code": "    static Term S0()\n        \n        \n    {\n        return new Term(tagS0, null, null);\n    }\n",
        "methodStartingLine": 154,
        "methodEndingLine": 159,
        "jml": "//@ requires true;\n//@ ensures [_]result.Value(S0);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/vstte2012/problem2/values/Combinators.java",
        "code": "    static Term S1(Term arg)\n        \n        \n    {\n        return new Term(tagS1, arg, null);\n    }\n",
        "methodStartingLine": 161,
        "methodEndingLine": 166,
        "jml": "//@ requires [_]arg.Value(?v);\n//@ ensures result.Value(S1(v));"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/vstte2012/problem2/values/Combinators.java",
        "code": "    static Term S2(Term arg1, Term arg2)\n        \n        \n    {\n        return new Term(tagS2, arg1, arg2);\n    }\n",
        "methodStartingLine": 168,
        "methodEndingLine": 173,
        "jml": "//@ requires [_]arg1.Value(?v1) &*& [_]arg2.Value(?v2);\n//@ ensures [_]result.Value(S2(v1, v2));"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/vstte2012/problem2/values/Combinators.java",
        "code": "    Term apply_(Term v)\n        \n        \n    {\n        //@ close reduces_to(apply(vf, vv), apply(vf, vv));\n        switch (tag) {\n            case tagK0: return mkK1(v);\n            case tagK1: return arg1;\n            case tagS0: return S1(v);\n            case tagS1: return S2(arg1, v);\n            case tagS2:\n                /*@ { arg1.asTerm(); arg2.asTerm(); v.asTerm(); } @*/\n                return mkApp(mkApp(arg1, v), mkApp(arg2, v)).eval();\n            default:\n        }\n    }\n",
        "methodStartingLine": 175,
        "methodEndingLine": 190,
        "jml": "//@ requires [_]Value(?vf) &*& [_]v.Value(?vv);\n//@ ensures [_]result.Value(?vr) &*& [_]reduces_to(apply(vf, vv), val(vr));"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/vstte2012/problem2/values/Combinators.java",
        "code": "    Term eval()\n        \n        \n    {\n        if (tag != tagAPP) {\n            //@ close reduces_to(t, t);\n            return this;\n        }\n        //@ assert [_]arg1 |-> ?a1 &*& [_]a1.Term(?t1) &*& [_]arg2 |-> ?a2 &*& [_]a2.Term(?t2);\n        Term f = arg1.eval();\n        //@ assert [_]f.Value(?vf);\n        //@ reduces_to_app_l(t1, val(vf), t2);\n        Term v = arg2.eval();\n        //@ assert [_]v.Value(?vv);\n        //@ reduces_to_app_r(vf, t2, val(vv));\n        //@ reduces_to_trans(app(t1, t2), app(val(vf), t2), app(val(vf), val(vv)));\n        Term r = f.apply_(v);\n        //@ assert [_]r.Value(?vr);\n        //@ close reduces_to(app(val(vf), val(vv)), val(vr));\n        //@ reduces_to_trans(app(t1, t2), app(val(vf), val(vv)), val(vr));\n        return r;\n    }\n",
        "methodStartingLine": 192,
        "methodEndingLine": 213,
        "jml": "//@ requires [_]Term(?t);\n//@ ensures [_]result.Value(?v) &*& [_]reduces_to(t, val(v));"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/frontend/inner_class/MemberClass.java",
        "code": "    int getX()    \n      \n      \n    {\n      //@ open OuterClass$InnerClass(x);\n      return this.x;\n    }\n",
        "methodStartingLine": 16,
        "methodEndingLine": 22,
        "jml": "//@ requires OuterClass$InnerClass(?x);\n//@ ensures OuterClass$InnerClass(x) &*& result == x;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/frontend/inner_class/MemberClass.java",
        "code": "    void setX(int i)    \n      \n      \n    {\n      x = i;\n    }\n",
        "methodStartingLine": 24,
        "methodEndingLine": 29,
        "jml": "//@ requires OuterClass$InnerClass(_);\n//@ ensures OuterClass$InnerClass(i);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/frontend/inner_class/MemberClass.java",
        "code": "  public static void main(String[] args)\n    \n    \n  {\n    //@ init_class(OuterClass$InnerClass.class);\n    \n    OuterClass first = new OuterClass();\n    OuterClass.InnerClass second = first.new InnerClass();\n    \n    //Non-static stuff\n    second.setX(111);\n    int i = second.getX();\n    //@ assert i == 111;\n }\n",
        "methodStartingLine": 35,
        "methodEndingLine": 48,
        "jml": "//@ requires class_init_token(OuterClass$InnerClass.class);\n//@ ensures true; "
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/frontend/overloaded_methods/Main.java",
        "code": "  public static void main(String[] args) \n    \n    \n  {\n    int i = 0;\n    \n    Overloaded3 o3 = new Overloaded3();\n    Overloaded2 o2 = o3;\n    Overloaded1 o1 = o3;\n\n    i = method1(o1);\n    //@ assert i == 1;\n    i = method1(o2);\n    //@ assert i == 2;\n    i = method1(o3);\n    //@ assert i == 3;\n    \n    i = method2(o1, o1);\n    //@ assert i == 11;\n    i = method2(o1, o2);\n    //@ assert i == 12;\n    i = method2(o1, o3);\n    //@ assert i == 13;\n    \n    i = method2(o2, o1);\n    //@ assert i == 11;\n    i = method2(o2, o2);\n    //@ assert i == 12;\n    i = method2(o2, o3);\n    //@ assert i == 13;\n    \n    i = method2(o3, o1);\n    //@ assert i == 11;\n    i = method2(o3, o2);\n    //@ assert i == 12;\n    i = method2(o3, o3);\n    //@ assert i == 13;\n  }\n",
        "methodStartingLine": 3,
        "methodEndingLine": 40,
        "jml": "//@ requires true;\n//@ ensures true; "
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/frontend/overloaded_methods/Main.java",
        "code": "  static int method1(Overloaded1 x)\n    \n    \n  {\n    return 1;\n  }\n",
        "methodStartingLine": 42,
        "methodEndingLine": 47,
        "jml": "//@ requires true;\n//@ ensures  result == 1;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/frontend/overloaded_methods/Main.java",
        "code": "  static int method1(Overloaded2 x)\n    \n    \n  {\n    return 2;\n  }\n",
        "methodStartingLine": 49,
        "methodEndingLine": 54,
        "jml": "//@ requires true;\n//@ ensures  result == 2;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/frontend/overloaded_methods/Main.java",
        "code": "  static int method1(Overloaded3 x)\n    \n    \n  {\n    return 3;\n  }\n",
        "methodStartingLine": 56,
        "methodEndingLine": 61,
        "jml": "//@ requires true;\n//@ ensures  result == 3;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/frontend/overloaded_methods/Main.java",
        "code": "  static int method2(Overloaded1 x, Overloaded1 y)\n    \n    \n  {\n    return 11;\n  }\n",
        "methodStartingLine": 63,
        "methodEndingLine": 68,
        "jml": "//@ requires true;\n//@ ensures  result == 11;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/frontend/overloaded_methods/Main.java",
        "code": "  static int method2(Overloaded1 x, Overloaded2 y)\n    \n    \n  {\n    return 12;\n  }\n",
        "methodStartingLine": 70,
        "methodEndingLine": 75,
        "jml": "//@ requires true;\n//@ ensures  result == 12;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/frontend/overloaded_methods/Main.java",
        "code": "  static int method2(Overloaded1 x, Overloaded3 y)\n    \n    \n  {\n    return 13;\n  }\n",
        "methodStartingLine": 77,
        "methodEndingLine": 82,
        "jml": "//@ requires true;\n//@ ensures  result == 13;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/frontend/should_fail/ShouldFail1.java",
        "code": "  public static void test()\n    \n    \n  {\n    Inner o;\n    String foo = o.test(); //~\n  }\n",
        "methodStartingLine": 8,
        "methodEndingLine": 14,
        "jml": "//@ requires true;\n//@ ensures true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/out_of_order_jarsrc/in_order/Sub.java",
        "code": "  public int increment(int i)\n    \n    \n  {\n    int j = i;\n    j++;\n    return j;\n  }\n",
        "methodStartingLine": 3,
        "methodEndingLine": 10,
        "jml": "//@ requires i < 100;\n//@ ensures result == i + 1;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/out_of_order_jarsrc/in_order/Sub.java",
        "code": "  public int dummy(int i)\n    \n    \n  {\n    return i;\n  }\n",
        "methodStartingLine": 12,
        "methodEndingLine": 17,
        "jml": "//@ requires true;\n//@ ensures result == i;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/frontend/should_fail/ShouldFail2.java",
        "code": "  public static void test()\n    \n    \n  {\n    int i = 0;\n    //@ assert i == 0;\n    i++;\n    /*@\n      {\n        assert i == 2; //~\n      }\n    @*/\n  }\n",
        "methodStartingLine": 3,
        "methodEndingLine": 15,
        "jml": "//@ requires true;\n//@ ensures true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/frontend/assert/Assert_desugared.java",
        "code": "  public static void main(String[] args)\n    \n    \n  {\n    int i = 99;\n    assert (i > 0);\n    assert i > 0;\n    char c = 'a';\n    assert (c + 4 == 'e');\n    assert c + 4 == 'e';\n  }\n",
        "methodStartingLine": 3,
        "methodEndingLine": 13,
        "jml": "//@ requires true;\n//@ ensures  true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/frontend/boxing/Boxing_desugared.java",
        "code": "  public static void main(String[] args)\n    \n    \n  {\n    //Integers\n    Integer i1 = Integer.valueOf(5);\n    int i2 = i1.intValue();\n    Integer i3 = Integer.valueOf(i2);\n    \n    //Booleans\n    Boolean bool1 = Boolean.valueOf(true);\n    boolean bool2 = bool1.booleanValue();\n    Boolean bool3 = Boolean.valueOf(bool2);\n  }\n",
        "methodStartingLine": 5,
        "methodEndingLine": 18,
        "jml": "//@ requires true;\n//@ ensures true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/NewMyApplet/NewMyApplet.java",
        "code": "  public static void install(byte[] byaBuffer, short shOffset, byte byLength) throws ISOException /*@ ensures true; @*/\n    /*@\n    requires\n      system() &*& class_init_token(NewMyApplet.class) &*&\n      byaBuffer != null &*&\n      shOffset >= 0 &*&\n      array_slice(byaBuffer, shOffset, shOffset + byLength, ?values) &*&\n      length_value_record(values, 0, ?privilegesStart) &*&\n      length_value_record(values, privilegesStart, ?paramsStart) &*&\n      element(values, paramsStart + 1, ?paramsLength) &*&\n      element(values, paramsStart + 2, ?maxNbRecord) &*& maxNbRecord >= 0 &*&\n      element(values, paramsStart + 3, ?maxSizeRecord) &*& maxSizeRecord >= 6 &*&\n      shOffset + paramsStart + 3 <= 32767;\n    @*/\n    \n  {\n    //@ init_class();\n    short shIndex = shOffset;\n    byte byMaxNbRecord   = DEF_MAX_ENTRIES ;\n    byte byMaxSizeRecord = DEF_MAX_ENTRY_SIZE;\n\n    //@ open length_value_record(values, 0, privilegesStart);\n    //@ open length_value_record(values, privilegesStart, _);\n    shIndex += (byaBuffer[shIndex]+1);\n    shIndex += (byaBuffer[shIndex]+1);\n\n    ++shIndex;\n    // BUG: byte byOffRecParam = (byte)shIndex ; The Java Card spec does not guarantee that the offset fits in a byte.\n    short byOffRecParam = shIndex ;\n    //@ open element(values, shIndex - shOffset, _);\n    //@ open element(values, shIndex + 1 - shOffset, _);\n    //@ open element(values, shIndex + 2 - shOffset, _);\n    byte byLenRecParam = byaBuffer[shIndex] ;\n    //\n    if (byLenRecParam != 0)\n    {\n      ++byOffRecParam;\n      byMaxNbRecord    = (byaBuffer[byOffRecParam] != 0) ? byaBuffer[byOffRecParam] : DEF_MAX_ENTRIES;\n      ++byOffRecParam;\n      byMaxSizeRecord  = (byaBuffer[byOffRecParam] != 0) ? byaBuffer[byOffRecParam] : DEF_MAX_ENTRY_SIZE;\n    }\n\n    new NewMyApplet(byaBuffer, (short)(shOffset+1), byaBuffer[shOffset], byMaxNbRecord, byMaxSizeRecord);\n  }\n",
        "methodStartingLine": 187,
        "methodEndingLine": 230,
        "jml": "//@ ensures true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/NewMyApplet/NewMyApplet.java",
        "code": "  private void processSelectCmd(APDU oApdu)\n    \n    \n  {\n    if ( !selectingApplet() )\n      ISOException.throwIt(ISO7816.SW_FILE_NOT_FOUND);\n    byte[] byaApdu = checkIncomingData(oApdu, true, false);\n    short shCurrentOffset = 0;\n    if (sh(byaApdu[ISO7816.OFFSET_LC]) == (short)0)\n      ISOException.throwIt(ISO7816.SW_WRONG_LENGTH);\n    if((byaApdu[ISO7816.OFFSET_P1]) != 0x04)\n      ISOException.throwIt(ISO7816.SW_INCORRECT_P1P2);\n    //@ open valid();\n    //@ open MyApplet_(this, _, _);\n    byte[] byaOptionalData = bya_OptionalData;\n    shCurrentOffset = Util.arrayCopyNonAtomic( bya_FCI, shCurrentOffset, byaApdu, (short)0, (short)bya_FCI.length );\n    byte k,j;\n    //@ int i = 2;\n    //@ optional_data_records_split(byaOptionalData, 0, i);\n\n\n    for(k=26,j=28 ; k>=0 ; k-=13,j-=13)\n      /*@\n      invariant\n          -13 <= k &*& k <= 26 &*& j == k + 2 &*& k == 13 * i &*&\n          array_slice(byaApdu, 0, byaApdu.length, _) &*&\n          23 <= shCurrentOffset &*&\n          shCurrentOffset <= 23 + 13 * (2 - i) &*&\n          k < 0 ?\n              [1/2]optional_data_records(byaOptionalData, 0, 3)\n          :\n              [1/2]optional_data_records(byaOptionalData, 0, i) &*& [1/2]optional_data_records(byaOptionalData, k, 3 - i);\n      @*/\n    {\n        //@ open optional_data_records(byaOptionalData, k, _);\n      shCurrentOffset = Util.arrayCopyNonAtomic( byaOptionalData, k,\n          byaApdu, shCurrentOffset,\n          (byaOptionalData[j] != 0)? (short)(byaOptionalData[j] + 3): (short)0);\n      //@ close [1/2]optional_data_records(byaOptionalData, k, 3 - i);\n      //@ i--;\n      /*@\n      if (0 <= i) {\n          optional_data_records_split(byaOptionalData, 0, i);\n          open optional_data_records(byaOptionalData, k - 13, _);\n          close [1/2]optional_data_records(byaOptionalData, k - 13, 3 - i);\n      }\n      @*/\n    }\n    shCurrentOffset -= /**/bya_FCI.length;\n    //@ assume(bya_FCI[3] == 14);\n    byaApdu[bya_FCI[3]+5] = (byte)(shCurrentOffset + 3);\n    byaApdu[1] = (byte)(shCurrentOffset + 3+2 + bya_FCI[3]+2);\n    oApdu.setOutgoingAndSend((short)0, (short)(sh(byaApdu[1]) + (short)2));\n    //@ close [1/2]MyApplet_(this, _, _);\n    //@ close [1/2]valid();\n  }\n",
        "methodStartingLine": 313,
        "methodEndingLine": 368,
        "jml": "//@ requires [1/2]valid() &*& oApdu != null &*& APDU(oApdu, ?buffer) &*& array_slice(buffer, 0, buffer.length, _);\n//@ ensures [1/2]valid() &*& oApdu != null &*& APDU(oApdu, buffer) &*& array_slice(buffer, 0, buffer.length, _);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/NewMyApplet/NewMyApplet.java",
        "code": "  private byte[] checkIncomingData(APDU oApdu, boolean bReceive, boolean bCheckPersoState)\n    \n    \n  {\n    if (bCheckPersoState && GPSystem.getCardContentState() != GPSystem.SECURITY_DOMAIN_PERSONALIZED )\n      ISOException.throwIt(ISO7816.SW_CONDITIONS_NOT_SATISFIED);\n    if (bReceive) oApdu.setIncomingAndReceive();\n    return oApdu.getBuffer();\n  }\n",
        "methodStartingLine": 370,
        "methodEndingLine": 378,
        "jml": "//@ requires oApdu != null &*& APDU(oApdu, ?buffer_) &*& array_slice(buffer_, 0, buffer_.length, _);\n//@ ensures APDU(oApdu, buffer_) &*& array_slice(buffer_, 0, buffer_.length, _) &*& result == buffer_;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/NewMyApplet/NewMyApplet.java",
        "code": "  private void processPutData(APDU oApdu)\n    \n    \n  {\n    byte[] byaApdu = checkIncomingData(oApdu, true, true); // true => personalization must have previously been done\n    short shLC = sh(byaApdu[ISO7816.OFFSET_LC]) ;\n    //@ open is_short_of_byte(_, _);\n\n    if (shLC > MAX_LEN_OPTIONAL_DATA)\n      ISOException.throwIt(ISO7816.SW_WRONG_LENGTH);\n\n    byte byIndex = getOptionalDataIndex(Util.getShort( byaApdu, ISO7816.OFFSET_P1 ));\n\n    JCSystem.beginTransaction(); // Inserted for VeriFast\n    //@ open valid();\n    //@ open MyApplet_(this, _, _);\n    byte[] byaOptionalData = bya_OptionalData;\n    //@ optional_data_records_split(byaOptionalData, 0, byIndex);\n    //@ open optional_data_records(byaOptionalData, byIndex * MAX_LEN_OPTIONAL_DATA_AND_HEADER, 3 - byIndex);\n    Util.arrayCopy( byaApdu, ISO7816.OFFSET_P1,\n        byaOptionalData,\n        (short) (byIndex * MAX_LEN_OPTIONAL_DATA_AND_HEADER),\n        (short) (shLC + (short)3));\n    //@ assert byaOptionalData[byIndex * 13 + 2] |-> ?length;\n    //@ assume(0 <= length && length <= NewMyApplet.MAX_LEN_OPTIONAL_DATA);\n    //@ close optional_data_records(byaOptionalData, byIndex * MAX_LEN_OPTIONAL_DATA_AND_HEADER, 3 - byIndex);\n    //@ optional_data_records_merge(byaOptionalData, 0);\n    //@ close MyApplet_(this, _, _);\n    //@ close valid();\n    JCSystem.commitTransaction(); // Inserted for VeriFast\n  }\n",
        "methodStartingLine": 380,
        "methodEndingLine": 410,
        "jml": "//@ requires current_applet(this) &*& [1/2]valid() &*& oApdu != null &*& APDU(oApdu, ?buffer) &*& array_slice(buffer, 0, buffer.length, _);\n//@ ensures current_applet(this) &*& [1/2]valid() &*& oApdu != null &*& APDU(oApdu, buffer) &*& array_slice(buffer, 0, buffer.length, _);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/NewMyApplet/NewMyApplet.java",
        "code": "  private byte getOptionalDataIndex(short tag)\n    \n    \n  {\n    switch (tag)\n    {\n    case TAG_FCI_ISSUER_DISCRETIONARY_DATA : return 0 ;\n    case TAG_ISSUER_CODE_TABLE_INDEX : return 1;\n    case TAG_LANGUAGE_PREFERENCE : return 2;\n    default :\n      ISOException.throwIt(ISO7816.SW_INCORRECT_P1P2);\n    }\n    return -1; //~allow_dead_code\n  }\n",
        "methodStartingLine": 412,
        "methodEndingLine": 425,
        "jml": "//@ requires true;\n//@ ensures 0 <= result &*& result <= 2;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/NewMyApplet/NewMyApplet.java",
        "code": "  private void processAppendRecord(APDU oApdu)\n    \n    \n  {\n      //@ open valid();\n      //@ open MyApplet_(this, _, _);\n    byte[] byaApdu = checkIncomingData(oApdu, true, false);\n    short shLC = sh(byaApdu[ISO7816.OFFSET_LC]) ;\n    if((byaApdu[ISO7816.OFFSET_P1] != 0)\n        || (byaApdu[ISO7816.OFFSET_P2]&0x07) != 0)\n      ISOException.throwIt(ISO7816.SW_INCORRECT_P1P2);\n    if((byaApdu[ISO7816.OFFSET_P2]>>3) != 1)\n      ISOException.throwIt(ISO7816.SW_FILE_NOT_FOUND);\n    //@ open is_short_of_byte(_, _);\n    if ( shLC > sh(by_MaxSizeRecord) )\n      ISOException.throwIt( ISO7816.SW_FILE_FULL );\n    //@ open is_short_of_byte(_, _);\n    //@ byte maxSizeRecord = by_MaxSizeRecord;\n    //@ assert 0 <= shLC &*& shLC <= maxSizeRecord;\n\n    if (byaApdu[ISO7816.OFFSET_CDATA] != (byte)0x70)\n      ISOException.throwIt( ISO7816.SW_CONDITIONS_NOT_SATISFIED );\n\n    //@ assume(0 <= byaApdu[ADF_LEN_OFFSET] && byaApdu[ADF_LEN_OFFSET] <= 133 - ADF_OFFSET);\n    if (JCSystem.lookupAID( byaApdu, ADF_OFFSET, byaApdu[ADF_LEN_OFFSET] )== null)\n      ISOException.throwIt( ISO7816.SW_CONDITIONS_NOT_SATISFIED );\n\n    byte byFreeRecord = (byte)0x7F ;\n    byte [] byaRecordData ;\n\n    //@ close [1/2]MyApplet_(this, _, _);\n    for (byte i = 0; i < by_NbRecords; i++)\n      /*@\n      invariant\n        [1/2]MyApplet_(this, ?nbRecords, maxSizeRecord) &*&\n        array_slice(byaApdu, 0, byaApdu.length, _) &*& 133 <= byaApdu.length &*&\n        0 <= i &*& i <= nbRecords &*&\n        (byFreeRecord != 0x7F ? 0 <= byFreeRecord &*& byFreeRecord < i : true);\n      @*/\n    {\n      byaRecordData = (byte[]) (o_Records[i]);\n      //@ assume(0 <= byaApdu[ADF_LEN_OFFSET] && byaApdu[ADF_LEN_OFFSET] <= 133 - ADF_OFFSET && byaApdu[ADF_LEN_OFFSET] <= byaRecordData.length - ADF_OFFSET);\n      if ((byaRecordData[0] != 0x00)\n          && Util.arrayCompare(byaApdu, ADF_OFFSET, byaRecordData, (short)(OFF_DATA_IN_RECORD+6), byaApdu[ADF_LEN_OFFSET]) == 0)\n        ISOException.throwIt( ISO7816.SW_CONDITIONS_NOT_SATISFIED );\n      if (byaRecordData[0] == 0x00)\n      {\n        byFreeRecord = i ;\n      }\n      //@ close [1/2]record(by_MaxSizeRecord, byaRecordData, unit);\n      //@ close [1/2]MyApplet_(this, _, _);\n    }\n    //@ assume(11 <= shLC);\n\n    if (byFreeRecord != 0x7F)\n    {\n      //@ close [1/2]MyApplet_(this, _, _);\n      JCSystem.beginTransaction();\n      //@ open valid();\n\n      byaRecordData = (byte[])o_Records[byFreeRecord];\n      //@ open record(by_MaxSizeRecord, byaRecordData, _);\n      Util.arrayCopy(byaApdu, ISO7816.OFFSET_CDATA, byaRecordData, OFF_DATA_IN_RECORD, shLC);\n      //@ assume(0 <= byaRecordData[6] && byaRecordData[6] <= by_MaxSizeRecord - 6);\n      byaRecordData[0] = (byte)shLC ;\n      //@ close record(by_MaxSizeRecord, byaRecordData, _);\n      //@ close MyApplet_(this, _, _);\n      //@ close valid();\n      JCSystem.commitTransaction();\n    }\n    else\n    {\n\n      //@ close [1/2]MyApplet_(this, _, _);\n      JCSystem.beginTransaction();\n      //@ open valid();\n      //@ open MyApplet_(this, _, _);\n      if (by_NbRecords >= by_MaxNbRecord)\n        ISOException.throwIt( ISO7816.SW_FILE_FULL );\n      o_Records[by_NbRecords] = new byte[by_MaxSizeRecord + LEN_RECORD_LEN_BYTE];\n      byaRecordData = (byte[])(o_Records[by_NbRecords]);\n      by_NbRecords++ ;\n\n      Util.arrayCopy(byaApdu, ISO7816.OFFSET_CDATA, byaRecordData, OFF_DATA_IN_RECORD, shLC);\n      //@ assume(0 <= byaRecordData[6] && byaRecordData[6] <= by_MaxSizeRecord - 6);\n      byaRecordData[0] = (byte)shLC ;\n      //@ close record(by_MaxSizeRecord, byaRecordData, unit);\n      //@ close my_record(by_MaxSizeRecord, byaRecordData, unit);\n      //@ array_slice_deep_close(o_Records, by_NbRecords - 1, my_record, maxSizeRecord);\n      //@ close MyApplet_(this, _, _);\n      //@ close valid();\n      JCSystem.commitTransaction();\n    }\n    //@ open valid();\n    //@ open MyApplet_(this, _, _);\n    if ((byFreeRecord == (byte)0x7F) && (by_NbRecords == 1))\n      GPSystem.setCardContentState( GPSystem.SECURITY_DOMAIN_PERSONALIZED );\n      //@ close [1/2]MyApplet_(this, _, _);\n      //@ close [1/2]valid();\n  }\n",
        "methodStartingLine": 427,
        "methodEndingLine": 526,
        "jml": "//@ requires current_applet(this) &*& [1/2]valid() &*& oApdu != null &*& APDU(oApdu, ?buffer) &*& array_slice(buffer, 0, buffer.length, _);\n//@ ensures current_applet(this) &*& [1/2]valid() &*& oApdu != null &*& APDU(oApdu, buffer) &*& array_slice(buffer, 0, buffer.length, _);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/NewMyApplet/NewMyApplet.java",
        "code": "  private void processDeleteRecord(APDU oApdu)\n    \n    \n  {\n    byte[] byaApdu = checkIncomingData(oApdu, true, false);\n\n    byte byMode = MODE_DELETE_UNSET ;\n    switch(byaApdu[ISO7816.OFFSET_P2]&0x07)\n    {\n    case 0x00:\n      switch(byaApdu[ISO7816.OFFSET_P1])\n      {\n      case 0x00 :\n        byMode = MODE_DELETE_BY_AID ;\n        break ;\n      case 0x01 :\n        byMode = MODE_DELETE_BY_REFRESH ;\n        break ;\n      default:\n        ISOException.throwIt(ISO7816.SW_INCORRECT_P1P2);\n      }\n      break ;\n    case 0x04:\n      byMode = MODE_DELETE_BY_NUMBER ;\n      break ;\n    default:\n      ISOException.throwIt(ISO7816.SW_INCORRECT_P1P2);\n    }\n\n    if((byaApdu[ISO7816.OFFSET_P2]>>3) != 1)\n      ISOException.throwIt(ISO7816.SW_FILE_NOT_FOUND);\n    byte [] byaRecordData = null ;\n    if (byMode == MODE_DELETE_BY_NUMBER)\n    {\n\n      byte byRecordToDelete = /*@ truncating @*/ (byte)(byaApdu[ISO7816.OFFSET_P1]-1) ;\n      JCSystem.beginTransaction();\n      //@ open valid();\n      //@ open MyApplet_(this, _, _);\n      if ((byRecordToDelete < by_NbRecords) && (byRecordToDelete >= 0))\n        byaRecordData = (byte[])(o_Records[byRecordToDelete]) ;\n      //\n      if (byaRecordData == null\n          || byaRecordData[0] == (byte)0)\n        ISOException.throwIt(ISO7816.SW_RECORD_NOT_FOUND);\n      //\n      byaRecordData[0] = (byte)0 ;\n      //@ close record(by_MaxSizeRecord, byaRecordData, unit);\n      //@ close MyApplet_(this, _, _);\n      //@ close valid();\n      JCSystem.commitTransaction();\n\n    }\n    else if (byMode == MODE_DELETE_BY_AID)\n    {\n\n            JCSystem.beginTransaction(); // Inserted for VeriFast\n            //@ open valid();\n            //@ open MyApplet_(this, _, _);\n            //@ close MyApplet_(this, _, _);\n      for(byte i=0 ; i<by_NbRecords ; i++)\n        /*@\n        invariant\n          MyApplet_(this, ?nbRecords, _) &*&\n          array_slice(byaApdu, 0, byaApdu.length, _) &*& 133 <= byaApdu.length &*&\n          0 <= i &*& i <= nbRecords;\n        @*/\n      {\n        byaRecordData = (byte[])(o_Records[i]) ;\n\n        if (Util.arrayCompare(byaApdu, ISO7816.OFFSET_CDATA,\n            byaRecordData, (short)(OFF_DATA_IN_RECORD+6), byaRecordData[OFF_DATA_IN_RECORD+5]) == 0)\n        {\n          byaRecordData[0] = (byte)0 ;\n          //@ close record(by_MaxSizeRecord, byaRecordData, unit);\n          //@ close MyApplet_(this, _, _);\n          break;\n        }\n        //@ close record(by_MaxSizeRecord, byaRecordData, unit);\n      }\n      //@ close valid();\n      JCSystem.commitTransaction(); // Inserted for VeriFast. TODO: Move closer to update.\n    }\n    else if (byMode == MODE_DELETE_BY_REFRESH)\n    {\n      JCSystem.beginTransaction(); // Inserted for VeriFast\n      //@ open valid();\n      //@ open MyApplet_(this, _, _);\n      //@ close MyApplet_(this, _, _);\n      for(short i=0 ; i<by_NbRecords ; i++)\n        /*@\n        invariant\n          MyApplet_(this, ?nbRecords, _) &*&\n          array_slice(byaApdu, 0, byaApdu.length, _) &*& 133 <= byaApdu.length &*&\n          0 <= i &*& i <= nbRecords;\n        @*/\n      {\n        byaRecordData = (byte[])(o_Records[i]) ;\n          if (JCSystem.lookupAID( byaRecordData, (byte)(OFF_DATA_IN_RECORD+6), byaRecordData[OFF_DATA_IN_RECORD+5] )== null)\n        {\n          byaRecordData[0] = (byte)0;\n        }\n        //@ close record(by_MaxSizeRecord, byaRecordData, unit);\n      }\n      //@ close valid();\n      JCSystem.commitTransaction();\n    }\n  }\n",
        "methodStartingLine": 533,
        "methodEndingLine": 640,
        "jml": "//@ requires current_applet(this) &*& [1/2]valid() &*& oApdu != null &*& APDU(oApdu, ?buffer) &*& array_slice(buffer, 0, buffer.length, _);\n//@ ensures current_applet(this) &*& [1/2]valid() &*& oApdu != null &*& APDU(oApdu, buffer) &*& array_slice(buffer, 0, buffer.length, _);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/NewMyApplet/NewMyApplet.java",
        "code": "  private void processReadRecord(APDU oApdu)\n    \n    \n  {\n      //@ open valid();\n    byte[] byaApdu = checkIncomingData(oApdu, false, true);\n    short shIndexRecord = (short)(sh(byaApdu[ISO7816.OFFSET_P1]) - (short)1);\n\n    if ((shIndexRecord < (short)0) || (shIndexRecord >= by_NbRecords))\n      ISOException.throwIt(ISO7816.SW_RECORD_NOT_FOUND);\n    if((byaApdu[ISO7816.OFFSET_P2]&0x07) != 4)\n      ISOException.throwIt(ISO7816.SW_INCORRECT_P1P2);\n\n    if((byaApdu[ISO7816.OFFSET_P2]>>3) != 1)\n      ISOException.throwIt(ISO7816.SW_FILE_NOT_FOUND);\n\n    byte [] byaRecordData = (byte[])(o_Records[shIndexRecord]) ;\n    short shLenRecord = sh(byaRecordData[0]);\n\n    if (shLenRecord == (short)0)\n      ISOException.throwIt(ISO7816.SW_RECORD_NOT_FOUND);\n\n    //@ open is_short_of_byte(shLenRecord, _);\n    Util.arrayCopyNonAtomic(byaRecordData, OFF_DATA_IN_RECORD, byaApdu, ISO7816.OFFSET_CDATA, shLenRecord);\n\n    short shLE = oApdu.setOutgoing() ;\n\n    if (shLE == (short)0 || shLE > shLenRecord) shLE = shLenRecord ;\n\n    oApdu.setOutgoingLength(shLE);\n    oApdu.sendBytes((short)0, (short)shLE);\n    //@ close [1/2]record(by_MaxSizeRecord, byaRecordData, unit);\n    //@ close [1/2]MyApplet_(this, _, _);\n    //@ close [1/2]valid();\n  }\n",
        "methodStartingLine": 642,
        "methodEndingLine": 676,
        "jml": "//@ requires [1/2]valid() &*& oApdu != null &*& APDU(oApdu, ?buffer) &*& array_slice(buffer, 0, buffer.length, _);\n//@ ensures [1/2]valid() &*& oApdu != null &*& APDU(oApdu, buffer) &*& array_slice(buffer, 0, buffer.length, _);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/NewMyApplet/NewMyApplet.java",
        "code": "  private short sh(byte byByte)\n    \n    \n  {\n    short res = (short) (byByte & 0xFF);\n    return res;\n    //@ assume (byByte < 0 ? res == 256 + byByte : res == byByte);\n    //@ close is_short_of_byte((short) (byByte & 0xFF), byByte);\n  }\n",
        "methodStartingLine": 678,
        "methodEndingLine": 686,
        "jml": "//@ requires true;\n//@ ensures is_short_of_byte(result, byByte) &*& 0 <= result &*& result <= 255;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/NewMyApplet/NewMyApplet.java",
        "code": "  private void askForSharingPoints()\n    \n    \n  {\n\tAID NewEid_AID = JCSystem.lookupAID(NewEidAID,(short)0, (byte)NewEidAID.length);\n\t\t\n\tif (NewEid_AID == null)\n\t\tISOException.throwIt(ISO7816.SW_CONDITIONS_NOT_SATISFIED);\n\t\t\n\tJCSystem.beginTransaction(); // Added for VeriFast\n\tNewEidPointsObject = (INewEidPoints)\n\t\t(JCSystem.getAppletShareableInterfaceObject(NewEid_AID, (byte) 0x00));\n\t\t\n\tINewEidPoints newEidPoints = NewEidPointsObject;\n\tbyte points = Points;\n\t\n\tif (newEidPoints != null) {\n\t    points = newEidPoints.sharePoints(points);\n\t}\n\t\n\tPoints = points;\n\tJCSystem.commitTransaction(); // Added for VeriFast\n\t\t\n  }\n",
        "methodStartingLine": 687,
        "methodEndingLine": 710,
        "jml": "//@ requires current_applet(this) &*& [1/2]valid();\n//@ ensures current_applet(this) &*& [1/2]valid();"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/NewMyApplet/NewMyApplet.java",
        "code": "  private void askForPayment()\n    \n    \n  {\n\tAID NewEPurse_AID = JCSystem.lookupAID(NewEPurseAID,(short)0, (byte)NewEPurseAID.length);\n\t\t\n\tif (NewEPurse_AID == null)\n\t\tISOException.throwIt(ISO7816.SW_CONDITIONS_NOT_SATISFIED);\n\t\t\n\tJCSystem.beginTransaction(); // Added for VeriFast\n\tNewEPurseDebitObject = (IEPurseServicesDebit)\n\t\t(JCSystem.getAppletShareableInterfaceObject(NewEPurse_AID, (byte) 0x00));\n\tIEPurseServicesDebit newEPurseDebitObject = NewEPurseDebitObject;\n\tbyte points = Points;\n\t\t\n\tif (newEPurseDebitObject != null) {\n        //@ Shareable epurseServiceSIO = newEPurseDebitObject;\n        //@ assert epurseServiceSIO.Shareable(?epurseApplet1);\n        //@ mem_registered_applets_is(this);\n        //@ assert registered_applets(?as1);\n        //@ foreachp_unremove<Applet>(this, as1);\n        //@ set_current_applet(epurseApplet1);\n        //@ foreachp_remove(epurseApplet1, as1);\n\tnewEPurseDebitObject.debit(points);\n        //@ is_registered_applets_mem(this);\n        //@ assert registered_applets(?as2);\n        //@ foreachp_unremove(epurseApplet1, as2);\n        //@ set_current_applet(this);\n        //@ foreachp_remove<Applet>(this, as2);\n        }\n\t\n\tNewEPurseCreditObject = (IEPurseServicesCredit)\n\t(JCSystem.getAppletShareableInterfaceObject(NewEPurse_AID, (byte) 0x01));\n\tIEPurseServicesCredit newEPurseCreditObject = NewEPurseCreditObject;\n\t\n\tif (newEPurseCreditObject != null) {\n        //@ Shareable epurseServiceSIO = newEPurseCreditObject;\n        //@ assert epurseServiceSIO.Shareable(?epurseApplet2);\n        //@ mem_registered_applets_is(this);\n        //@ assert registered_applets(?as1);\n        //@ foreachp_unremove<Applet>(this, as1);\n        //@ set_current_applet(epurseApplet2);\n        //@ foreachp_remove(epurseApplet2, as1);\n\tnewEPurseCreditObject.transaction(points);\n        //@ is_registered_applets_mem(this);\n        //@ assert registered_applets(?as2);\n        //@ foreachp_unremove(epurseApplet2, as2);\n        //@ set_current_applet(this);\n        //@ foreachp_remove<Applet>(this, as2);\n        }\n\t\n\tJCSystem.commitTransaction(); // Added for VeriFast\n  }\n",
        "methodStartingLine": 712,
        "methodEndingLine": 764,
        "jml": "//@ requires current_applet(this) &*& [1/2]valid();\n//@ ensures current_applet(this) &*& [1/2]valid();"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/NewMyApplet/NewMyApplet.java",
        "code": "  public Shareable getShareableInterfaceObject(AID oAid, byte bArg)\n        \n        \n  {\n\t\t\n\t\t//check if AID is allowed\n\t\t//@ NewMyAppletPointsObject.getShareable();\n\t\t\n\t\tif (bArg == (byte)0x0) // Based on argument, return\n\t\t\t\t\t\t\t\t\t\t\t\t// object reference\n\t\t\treturn (Shareable) (NewMyAppletPointsObject);\n\n          else \n\t\t\t    ISOException.throwIt(ISO7816.SW_WRONG_DATA);\n\t\t\n\t\treturn null; //~allow_dead_code\n\t}\n",
        "methodStartingLine": 766,
        "methodEndingLine": 782,
        "jml": "//@ requires [1/2]this.valid() &*& registered_applets(?as) &*& foreachp(remove<Applet>(this, as), semi_valid) &*& mem<Applet>(this, as) == true &*& AID(oAid);\n//@ ensures [1/2]this.valid() &*& registered_applets(as) &*& foreachp(remove<Applet>(this, as), semi_valid) &*& AID(oAid) &*& result == null ? true : result.Shareable(?a) &*& mem<Applet>(a, as) == true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/io/template_method/TemplateMethodWhile.java",
        "code": "  public void template()\n    /*@ requires this.token(?t1)\n      &*& template_io(t1, this.getClass(), ?t2);\n    @*/\n    \n  {\n    //@ open template_io(_, _, _);\n    while (m1())\n        /*@ invariant\n            this.token(?t_cur)\n            &*& m1_io(this.getClass())(t_cur, ?return_val, ?t_m1)\n            &*& return_val ?\n              m2_io(this.getClass())(t_m1, ?t_m2)\n              &*& template_io(t_m2, this.getClass(), t2)\n            :\n              t2 == t_m1;\n        @*/\n    {\n      m2();\n      //@ open template_io(_, this.getClass(), t2);\n    }\n  }\n",
        "methodStartingLine": 26,
        "methodEndingLine": 47,
        "jml": "//@ ensures this.token(t2);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/io/template_method/TemplateMethodWhile.java",
        "code": "  public void template_guard_is_expression()\n    /*@ requires this.token(?t1)\n      &*& template_io(t1, this.getClass(), ?t2);\n    @*/\n    \n  {\n    //@ open template_io(_, _, ?t_open1);\n    boolean return_val = m1();\n    while (return_val)\n        /*@ invariant\n          this.token(?t_cur)\n          &*& return_val ?\n            m2_io(this.getClass())(t_cur, ?t_m2)\n            &*& template_io(t_m2, this.getClass(), t2)\n          : t2 == t_cur;\n        @*/\n    {\n      m2();\n      //@ open template_io(_, this.getClass(), t2);\n      return_val = m1();\n    }\n  }\n",
        "methodStartingLine": 51,
        "methodEndingLine": 72,
        "jml": "//@ ensures this.token(t2);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/io/template_method/TemplateMethodWhile.java",
        "code": "  public boolean m1()\n    \n    \n  {\n    //@ open token(t1);\n    //@ open m1_io(Adder.class)(_, _, _);\n    if (x != Short.MAX_VALUE){\n      x = (short)(x + 1);\n      return true;\n    }else{\n      return false;\n    }\n  }\n",
        "methodStartingLine": 117,
        "methodEndingLine": 129,
        "jml": "//@ requires token(?t1) &*& m1_io(Adder.class)(t1, ?return_value, ?t2);\n//@ ensures token(t2) &*& result == return_value;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/io/template_method/TemplateMethodWhile.java",
        "code": "  public void m2()\n    \n    \n  {\n    //@ open token(t1);\n    //@ open m2_io(Adder.class)(_, _);\n    if (x <= Short.MAX_VALUE - 20){\n      x = (short)(x + 20);\n    }\n    //@ close token(t2);\n  }\n",
        "methodStartingLine": 131,
        "methodEndingLine": 141,
        "jml": "//@ requires token(?t1) &*& m2_io(Adder.class )(t1, ?t2);\n//@ ensures token(t2);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/io/template_method/TemplateMethodWhile.java",
        "code": "  public int getValue()\n    \n    \n  {\n    return x;\n  }\n",
        "methodStartingLine": 143,
        "methodEndingLine": 148,
        "jml": "//@ requires token(?t) &*& exists<int>(?v) &*& t == adder_place(v);\n//@ ensures token(t) &*& result == v;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/io/template_method/TemplateMethodWhile.java",
        "code": "  public boolean m1()\n    \n    \n  {\n    //@ open token(t1);\n    //@ open m1_io(Multiplier.class)(_, _, _);\n    if (value <= Integer.MAX_VALUE / 2){\n      value = value * 2;\n      return true;\n    }else{\n      return false;\n    }\n  } \n",
        "methodStartingLine": 191,
        "methodEndingLine": 203,
        "jml": "//@ requires token(?t1) &*& m1_io(Multiplier.class)(t1, ?return_value, ?t2);\n//@ ensures token(t2) &*& result == return_value;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/io/template_method/TemplateMethodWhile.java",
        "code": "  public void m2()\n    \n    \n  {\n    //@ open token(t1);\n    //@ open m2_io(Multiplier.class)(_, _);\n    if (value <= Integer.MAX_VALUE / 3){\n      value = value * 3;\n    }\n    //@ close token(t2);\n  } \n",
        "methodStartingLine": 205,
        "methodEndingLine": 215,
        "jml": "//@ requires token(?t1) &*& m2_io(Multiplier.class)(t1, ?t2);\n//@ ensures token(t2);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/io/template_method/TemplateMethodWhile.java",
        "code": "  public int getValue()\n    \n    \n  {\n    return value;\n    //@ close exists(value);\n  }\n",
        "methodStartingLine": 217,
        "methodEndingLine": 223,
        "jml": "//@ requires token(?t);\n//@ ensures token(t) &*& exists<int>(?x) &*& t == multiplier_place(x) &*& result == x;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/reduced_annotations/java_language/Main.java",
        "code": "  public static void main(String[] args) \n    \n    \n  {\n    int i = 1;\n    PartiallyAnnotated1 o1 = new PartiallyAnnotated1(0);\n    PartiallyAnnotatedInterface1 o1_i = o1;\n    PartiallyAnnotated2 o2 = new PartiallyAnnotated2(0);\n    PartiallyAnnotatedInterface2 o2_i = o2;\n    i = annotatedIncMain(i);\n    //@ open incPredicateMain(1,i);\n    //@ assert i == 2;\n    i = o1.annotatedIncInterface1_1(i);\n    //@ assert i == 3;\n    i = o1_i.annotatedIncInterface1_2(i);\n    //@ assert i == 4;\n    i = o1.annotatedIncClass1(i);\n    //@ assert i == 5;\n    i = o2.annotatedIncInterface2_1(i);\n    //@ assert i == 6;\n    i = o2_i.annotatedIncInterface2_2(i);\n    //@ assert i == 7;\n    i = o2.annotatedIncClass2(i);\n    //@ assert i == 8;\n\n//     System.out.println(\"Final value   \" + i);\n//     i = notAnnotatedIncMain(i);\n//     System.out.println(\"Final value++ \" + i);\n  }\n",
        "methodStartingLine": 14,
        "methodEndingLine": 42,
        "jml": "//@ requires true;\n//@ ensures true; "
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/reduced_annotations/java_language/Main.java",
        "code": "  static int annotatedIncMain(int i)\n  \n  \n  {\n    //@ close incPredicateMain(i, i + 1);\n    return ++i;\n  }\n",
        "methodStartingLine": 55,
        "methodEndingLine": 61,
        "jml": "//@ requires i < 100;\n//@ ensures incPredicateMain(i, result);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/frontend/big_example/Java7Program.java",
        "code": "  public static <T> void addAll(List<T> l, T... xs) throws EmptyException /*@ ensures xs.length == 0; @*/\n    \n    \n  {\n    if (xs.length > 0)\n    {\n      List<T> temp = Arrays.asList(xs);\n      //@ close listIsCollection(temp, temp);\n      l.addAll(temp);\n    }\n    else\n    {\n      throw new EmptyException();\n    }\n  }\n",
        "methodStartingLine": 64,
        "methodEndingLine": 78,
        "jml": "//@ requires l.List(?l_es) &*& [?f]xs[..] |-> ?xs_es;\n//@ ensures l.List(append(l_es, xs_es)) &*& [f]xs[..] |-> xs_es &*& xs.length > 0;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/frontend/big_example/Java7Program.java",
        "code": "  public static <A, T> T fold(FoldFunc<A, T> f, List<A> xs, T acc0)\n    \n    \n  {\n    T acc = acc0;\n    \n    //@ xs.listToIterable();\n    for (A x : xs) \n      //@ requires i$.Iterator((seq_of_list)(es), _, ?n) &*& FoldFunc(f.getClass())(f, drop(n, es), acc, info) &*& f != null &*& n >= 0 &*& n <= length(es);\n      //@ ensures FoldFunc(f.getClass())(f, nil, acc, info) &*& i$.Iterator((seq_of_list)(es), _, length(es));\n    {\n      //@ drop_n_plus_one(n, es);\n      acc = f.fold(acc, x);\n    }\n    //@ xs.destroyIterator();\n    //@ xs.iterableToList();\n    \n    return acc;\n  }\n",
        "methodStartingLine": 80,
        "methodEndingLine": 98,
        "jml": "//@ requires xs.List(?es) &*& FoldFunc(f.getClass())(f, es, acc0, ?info) &*& f != null;\n//@ ensures xs.List(es) &*& FoldFunc(f.getClass())(f, nil, result, info);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/frontend/big_example/Java7Program.java",
        "code": "  public static void main(String... args)\n    \n    \n  {\n    List<Integer> xs = new ArrayList<Integer>();\n    Integer i1 = 3;\n    Integer i2 = 5;\n    Integer i3 = 7;\n\n    try\n    {\n      addAll(xs, i1, i2, i3);\n    }\n    catch (EmptyException e)\n    {\n      //@ assert false;\n    }\n    \n    //@ list<Integer> exs = {i1, i2, i3};\n    \n    FoldFunc func = new FoldFunc<Integer, Integer>() \n    {\n      public Integer fold(Integer x0, Integer x1) \n        //@ requires FoldFunc(Java7Program$1.class)(this, cons(x1, ?r), x0, ?info);\n        //@ ensures FoldFunc(Java7Program$1.class)(this, r, result, info);\n      { \n        //@ open FoldFunc(Java7Program$1.class)(this, cons(?_o, ?_r), x0, ?_info);\n        Integer res = x0 + x1;\n        return res;\n         //@ close FoldFunc(Java7Program$1.class)(this, _r, res, _info);\n      }\n    }; \n    Integer acc = 2;\n    //@ close FoldFunc(Java7Program$1.class)(func, exs, acc, cons(acc, exs));\n    Integer vi = fold(func, xs, acc);\n    //@ open FoldFunc(Java7Program$1.class)(_, _, _, _);\n    int v = vi;\n    \n    //@ assert v == 17;\n    \n    //@ boolean is_thrown = false;\n    try\n    {\n      addAll(xs);\n    }\n    catch (EmptyException e)\n    {\n      //@ is_thrown = true;\n    }\n    //@ assert is_thrown;\n    \n    Object i = null;\n    //@ is_thrown = false;\n    try\n    {\n      if (i == null)\n        throw new NullPointerException();\n      else\n      {}\n    }\n    catch (NullPointerException e)\n    {\n      //@ is_thrown = true;\n    }\n    //@ assert is_thrown;\n  }\n",
        "methodStartingLine": 100,
        "methodEndingLine": 165,
        "jml": "//@ requires true;\n//@ ensures true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/frontend/big_example/Java7Program.java",
        "code": "      public Integer fold(Integer x0, Integer x1) \n        \n        \n      { \n        //@ open FoldFunc(Java7Program$1.class)(this, cons(?_o, ?_r), x0, ?_info);\n        Integer res = x0 + x1;\n        return res;\n         //@ close FoldFunc(Java7Program$1.class)(this, _r, res, _info);\n      }\n",
        "methodStartingLine": 122,
        "methodEndingLine": 130,
        "jml": "//@ requires FoldFunc(Java7Program$1.class)(this, cons(x1, ?r), x0, ?info);\n//@ ensures FoldFunc(Java7Program$1.class)(this, r, result, info);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/NewEidCard/NewEidPoints.java",
        "code": "\t\tpublic byte sharePoints(byte points)\n\t\t    \n\t\t    \n\t\t{\n\t        return points <= 125 ? (byte) (points + 2) : points;\n\t\t}\n",
        "methodStartingLine": 8,
        "methodEndingLine": 13,
        "jml": "//@ requires true;\n//@ ensures true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/out_of_order_jarsrc/in_order/Main.java",
        "code": "  public static void main(String[] args) \n    \n    \n  {\n    Super o = new Sub();\n    int i = 0;\n    i = o.increment(i);\n    //@ assert i == 1;\n  }\n",
        "methodStartingLine": 3,
        "methodEndingLine": 11,
        "jml": "//@ requires true;\n//@ ensures true; "
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/shareable-applets/EPhone.java",
        "code": "    public static void install(byte[] bArray, short bOffset, byte bLength)\n    \n    \n    {\n        EPhone Ephone = new EPhone();\n        Ephone.register();\n    }\n",
        "methodStartingLine": 27,
        "methodEndingLine": 33,
        "jml": "//@ requires class_init_token(EPhone.class) &*& system();\n//@ ensures true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/shareable-applets/EPhone.java",
        "code": "    private void makeBankcardDebit(short amount)\n    \n    \n    {\n    \t//@ open valid();\n        AID ewallet_aid = JCSystem.lookupAID(ewallet_aid_bytes,(short)0,(byte)ewallet_aid_bytes.length);\n\t//@ close valid();\n        if(ewallet_aid == null)\n           ISOException.throwIt(SW_EWALLET_AID_NOT_EXIST);\n\n        Shareable sio = JCSystem.getAppletShareableInterfaceObject(ewallet_aid, (byte)0x01);\n\t        \n        if(sio == null)\n          ISOException.throwIt(SW_FAILED_TO_OBTAIN_SIO);\n\n        if(sio instanceof EWalletInterface){\n          EWalletInterface WalletInterface = (EWalletInterface)sio;\n        \n          byte[] pin = new byte[] {(byte)1,(byte)1,(byte)1,(byte)1};\n          //@ close full_valid(this);\n          //@ assert registered_applets(?as);\n          //@ foreachp_unremove<Applet>(this,as);\n          //@ mem_registered_applets_is(this);\n          //@ assert sio.Shareable(?a);\n          //@ set_current_applet(a);\n          //@ foreachp_remove<Applet>(a,as);\n          //@ open full_valid(a);\n          WalletInterface.verify(pin, (short)0, (byte)(short)pin.length);\n          WalletInterface.debit((byte)amount);\n          //@ close full_valid(a);\n          //@ open in_transaction0(a);\n          //@ assert registered_applets(?as1);\n          //@ foreachp_unremove<Applet>(a, as1);\n          //@ is_registered_applets_mem(this);\n          //@ set_current_applet(this);\n          //@ foreachp_remove<Applet>(this, as1);\n          //@ open full_valid(this);\n          \n        }else\n          ISOException.throwIt(SW_DOES_NOT_IMPLEMENT_INTERFACE);\n    }\n",
        "methodStartingLine": 126,
        "methodEndingLine": 166,
        "jml": "//@ requires 0 <= amount &*& amount <= max_transaction_amount &*& this.valid() &*& in_transaction(this);\n//@ ensures in_transaction(this) &*& this.valid();"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/NewEidCard/DedicatedFile.java",
        "code": "\tpublic DedicatedFile getParent() \n\t    \n\t    \n\t{\n\t\t//@ open DedicatedFile(fid, parentfile, active, siblist, info);\n\t\treturn parentFile;\n\t\t//@ close DedicatedFile(fid, parentfile, active, siblist, info);\n\t}\n",
        "methodStartingLine": 51,
        "methodEndingLine": 58,
        "jml": "//@ requires DedicatedFile(?fid, ?parentfile, ?active, ?siblist, ?info);\n//@ ensures DedicatedFile(fid, parentfile, active, siblist, info) &*& result == parentfile;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/NewEidCard/DedicatedFile.java",
        "code": "\tprotected void addSibling(File s) \n  \t    \n  \t    /*@ ensures DedicatedFile(fileID, parentFile, activeState, ?newSibList, info)\n  \t    \t\t&*& newSibList == (length(siblist) < MAX_SIBLINGS ? append(siblist, cons(s, nil)) : siblist)\n  \t    \t\t&*& length(siblist) < MAX_SIBLINGS ? mem(s, newSibList) == true : true; @*/\n\t{\n\t\t//@ open DedicatedFile(fileID, parentFile, activeState, siblist, info);\n\t\t//@ assert array_slice(?thesiblings, _, _, ?sb);\n\t\t//@ int snumber = length(siblist);\n\t\tif (number < MAX_SIBLINGS) {\n\t\t\tsiblings[number++] = s;\n\t\t\t//@ take_one_more(snumber, update(snumber, s, sb));\n\t\t\t//@ assert array_slice(thesiblings, _, _, ?sb2);\n\t\t\t//@ assert sb2 == update(snumber, s, sb);\n\t\t\t//@ assert nth(snumber, update(snumber, s, sb)) == s;\n\t\t\t//@ assert take(snumber, sb) == take(snumber, update(snumber, s, sb));\n\t\t\t//@ assert take(snumber + 1, update(snumber, s, sb)) == append(take(snumber, update(snumber, s, sb)), cons(nth(snumber, update(snumber, s, sb)), nil));\n\t\t\t//@ close foreachp(nil, valid_id);\n\t\t\t//@ close foreachp(cons(s, nil), valid_id);\n\t\t\t//@ foreachp_append(take(snumber, sb), cons(s, nil));\t\n\t\t}\n\t\t\n\t\t/*@ close DedicatedFile(fileID, parentFile, activeState,\t\t \n\t\t\tsnumber < MAX_SIBLINGS ? append(take(snumber, siblist), cons(s, nil)) : siblist, \n\t\t\tinfo); @*/\n\t}\n",
        "methodStartingLine": 60,
        "methodEndingLine": 85,
        "jml": "//@ requires DedicatedFile(?fileID, ?parentFile, ?activeState, ?siblist, ?info) &*& valid_id(s);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/NewEidCard/DedicatedFile.java",
        "code": "\tpublic File getSibling(short fid) \n  \t    \n      \t    \n\t{\n\t\t//@ open DedicatedFile(fileID, parentFile, activeState, siblist, info);\n\t\t//@ assert [f]array_slice(?thesiblings, _, _, ?sb);\n\t\t//@ int snumber = length(siblist);\n\t\tfor (byte i = 0; i < number; i++) \n\t\t/*@ invariant i >= 0 &*& [f]this.File(File.class)(fileID, activeState, _) &*& [f]this.parentFile |-> parentFile &*& [f]number |-> (byte) length(siblist) &*& [f]this.siblings |-> thesiblings &*& [f]array_slice(thesiblings, 0, thesiblings.length, sb)\n\t\t      &*& [f]foreachp(siblist, valid_id); @*/\n\t\t{\n\t\t\t//@ assert 0 <= i &*& i < thesiblings.length;\n\t\t\tFile fl = siblings[i];\n\t\t\t//@ assert nth(i, siblist) == fl;\n\t\t\t//@ int tmp = thesiblings.length;\n\t\t\t//@ assert snumber <= tmp;\n\t\t\t//@ nth_take(i, snumber, sb);\n\t\t\t//@ assert nth(i, take(snumber, sb)) == nth(i, sb);\n\t\t\t//@ assert nth(i, take(snumber, sb)) == nth(i, sb);\n\t\t\t//@ assert nth(i, siblist) == fl;\n\t\t\t//@ mem_nth(i, siblist);\n\t\t\t//@ foreachp_remove<File>(fl, siblist);\n\t\t\tif (fl != null && fl.getFileID() == fid) {\n\t\t\t\t//@ foreachp_unremove<File>(fl, siblist);\n\t\t\t\treturn fl;\n\t\t\t\t//@ close [f]DedicatedFile(fileID, parentFile, activeState, siblist, info);\n\t\t\t}\n\t\t\t//@ foreachp_unremove<File>(fl, siblist);\n\t\t}\n\t\t//@ close [f]DedicatedFile(fileID, parentFile, activeState, siblist, info);\n\t\treturn null;\n\t}\n",
        "methodStartingLine": 87,
        "methodEndingLine": 118,
        "jml": "//@ requires [?f]DedicatedFile(?fileID, ?parentFile, ?activeState, ?siblist, ?info);\n//@ ensures [f]DedicatedFile(fileID, parentFile, activeState, siblist, info) &*& result == null ? true : mem(result, siblist) == true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/NewEidCard/DedicatedFile.java",
        "code": "\tpublic short getFileID() \n\t    \n\t    \n\t{\n\t\t//@ open [f]valid_id(this);\n\t\tFile thiz = this;\n\t\treturn fileID;\n\t\t//@ close [f]valid_id(this);\n\t}\n",
        "methodStartingLine": 121,
        "methodEndingLine": 129,
        "jml": "//@ requires [?f]valid_id(this);\n//@ ensures [f]valid_id(this);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/NewEidCard/DedicatedFile.java",
        "code": "\tpublic void setActive(boolean b)\n\t    \n\t    \n\t{\n\t\t//@ open File(fid, _, info);\n\t\t//@ open DedicatedFile(fid, ?d1, _, ?siblist, ?info2);\n\t\tFile thiz = this;\n\t\t//@ open thiz.File(fid, _, ?info3);\n\t\tactive = b;\n\t\t//@ close thiz.File(fid, b, info3);\n\t\t//@ close DedicatedFile(fid, d1, b, siblist, info2);\n\t\t//@ close File(fid, b, info);\n\t}\n",
        "methodStartingLine": 131,
        "methodEndingLine": 143,
        "jml": "//@ requires File(?fid, _, ?info);\n//@ ensures File(fid, b, info);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/NewEidCard/DedicatedFile.java",
        "code": "\tpublic boolean isActive() \n\t    \n\t    \n\t{\n\t\t//@ open [f]File(fid, state, info);\n\t\t//@ open [f]DedicatedFile(fid, ?d1, state, ?siblist, ?info2);\n\t\t//@ open this.File(File.class)(fid, state, ?info3);\n\t\treturn active;\n\t\t//@ close [f]this.File(File.class)(fid, state, info3);\n\t\t//@ close [f]DedicatedFile(fid, d1, state, siblist, info2);\n\t\t//@ close [f]File(fid, state, info);\n\t}\n",
        "methodStartingLine": 145,
        "methodEndingLine": 156,
        "jml": "//@ requires [?f]File(?fid, ?state, ?info);\n//@ ensures [f]File(fid, state, info) &*& result == state;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/override_methods/NoOverrideNoUsage.java",
        "code": "  public void m()\n    \n    \n  {\n  }\n",
        "methodStartingLine": 12,
        "methodEndingLine": 16,
        "jml": "//@ requires pred();\n//@ ensures pred();"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/frontend/varargs/Varargs_desugared.java",
        "code": "  public static void addAll(List l,  Object[] xs)\n    \n    \n  {\n    List temp = Arrays.asList(xs);\n    //@ close listIsCollection(temp, temp);\n    l.addAll(temp);\n  }\n",
        "methodStartingLine": 5,
        "methodEndingLine": 12,
        "jml": "//@ requires l.List(?l_es) &*& [?f]xs[..] |-> ?l_xs; \n//@ ensures l.List(append(l_es, l_xs)) &*& [f]xs[..] |-> l_xs; "
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/frontend/varargs/Varargs_desugared.java",
        "code": "  public static void main(String[] args)\n    \n    \n  {\n    List l = new ArrayList();\n    addAll(l, new Object[]{new Object(), new Object(), new Object()});\n  }\n",
        "methodStartingLine": 14,
        "methodEndingLine": 20,
        "jml": "//@ requires true;\n//@ ensures true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/out_of_order_jarsrc/in_order/Super.java",
        "code": "  public int increment(int i)\n    \n    \n  {\n    return ++i;\n  }\n",
        "methodStartingLine": 3,
        "methodEndingLine": 8,
        "jml": "//@ requires i < 100;\n//@ ensures result == i + 1;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/ghost_imports/Main_package_include.java",
        "code": "  public static void main(String[] args) \n    \n    \n  {\n    Subpackage o = new Subpackage();\n    //@ int i = fixpoint1(0);\n    //@ close predicate1();\n    //@ open predicate1();\n    //@ lemma1();\n  }\n",
        "methodStartingLine": 5,
        "methodEndingLine": 14,
        "jml": "//@ requires true;\n//@ ensures true; "
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/frontend/foreach/Foreach_desugared.java",
        "code": "  public static void main(String[] args)\n    \n    \n  {\n    List ints = new ArrayList();\n    Integer i1 = new Integer(1);\n    Integer i2 = new Integer(2);\n    Integer i3 = new Integer(3);\n    Integer i4 = new Integer(4);\n    ints.add(i1); ints.add(i2); ints.add(i3); ints.add(i4);\n\n    //@ assert ints.List(?es);\n    int result = 0;\n    {\n      //@ ints.listToIterable();\n      Iterator iSSS = ints.iterator();\n      while (iSSS.hasNext())\n        //@ requires iSSS.Iterator((seq_of_list)(es), _, ?n) &*& n >= 0 &*& n <= length(es);\n        //@ ensures  iSSS.Iterator((seq_of_list)(es), _, length(es));\n      {\n        Integer x = (Integer) iSSS.next();\n        {\n          result += x.intValue();\n        }\n      }\n      //@ ints.destroyIterator();\n      //@ ints.iterableToList();\n    }\n  }\n",
        "methodStartingLine": 5,
        "methodEndingLine": 33,
        "jml": "//@ requires true;\n//@ ensures true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/NewEPurse/NewEPurseApplet.java",
        "code": "    public static void install(byte[] bArray, short sOffset, byte bLength)\n        \n        \n    {\n        new NewEPurseApplet().register(bArray, sOffset, bLength);\n    }\n",
        "methodStartingLine": 111,
        "methodEndingLine": 116,
        "jml": "//@ requires system() &*& array_slice(bArray, sOffset, sOffset + bLength, _);\n//@ ensures true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/NewEPurse/NewEPurseApplet.java",
        "code": "    public void process(APDU apdu)\n        \n        \n    {\n        byte[] apduBuffer = apdu.getBuffer();\n\t// APDU header processing\n\t// CLA checking\n\tif (apduBuffer[ISO7816.OFFSET_CLA] != EPURSE_CLA)\n\t    ISOException.throwIt(ISO7816.SW_CLA_NOT_SUPPORTED);\n\t// P1 and P2 checking\n\tif (apduBuffer[ISO7816.OFFSET_P1] != 0 || apduBuffer[ISO7816.OFFSET_P2] != 0)\n\t    ISOException.throwIt(ISO7816.SW_WRONG_P1P2);\n\t// INS checking and dispatching\n\tswitch (apduBuffer[ISO7816.OFFSET_INS]) {\n\tcase GET_BALANCE_INS :\n\t    getBalance(apdu);\n\t    break;\n\tcase CREDIT_INS :\n\t    credit(apdu);\n\t    break;\n\tcase DEBIT_INS :\n\t    debit(apdu);\n\t    break;\n\tcase SET_LIMIT_INS :\n\t    setLimit(apdu);\n\t    break;\n\tcase ADD_CLIENT_APPLET_INS :\n\t    SecureChannelx sc = (SecureChannelx) GPSystem.getSecureChannel();\n\t    sc.setSecurityLevel((byte) 0x83);\n\t    short lc_encrypted = sc.processSecurity(apdu);\n\t    //@ assume(0 <= lc_encrypted && lc_encrypted <= apduBuffer.length - ISO7816.OFFSET_CDATA);\n\t    short lc = sc.decryptData(apduBuffer, ISO7816.OFFSET_CDATA, lc_encrypted);\n\t    sc.unwrap(apduBuffer, ISO7816.OFFSET_CDATA, lc);\n\t    addClientApplet(apdu);\n\t    break;\n\tdefault :\n\t    ISOException.throwIt(ISO7816.SW_INS_NOT_SUPPORTED);\n\t}\n    }\n",
        "methodStartingLine": 127,
        "methodEndingLine": 165,
        "jml": "//@ requires current_applet(this) &*& [1/2]this.valid() &*& APDU(apdu, ?buffer) &*& array_slice(buffer, 0, buffer.length, _);\n//@ ensures current_applet(this) &*& [1/2]this.valid() &*& APDU(apdu, buffer) &*& array_slice(buffer, 0, buffer.length, _);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/NewEPurse/NewEPurseApplet.java",
        "code": "    private void getBalance(APDU apdu)\n        \n        \n    {\n\tbyte[] apduBuffer = apdu.getBuffer();\n\t// LC checking\n        if (apduBuffer[ISO7816.OFFSET_LC] != 0)\n\t    ISOException.throwIt(ISO7816.SW_WRONG_LENGTH);\n\t\n\t//@ open valid();\n\t//@ transient_byte_arrays_mem(workingBuffer);\n\t//@ assert transient_byte_arrays(?as);\n\t//@ foreachp_remove(workingBuffer, as);\n\t//@ open transient_byte_array(workingBuffer);\n\tUtil.setShort(workingBuffer, (short) 0, balance);\n        Util.arrayCopy(workingBuffer, (short) 0, apduBuffer, ISO7816.OFFSET_CDATA, (short) 2);\n        //@ close transient_byte_array(workingBuffer);\n        //@ foreachp_unremove(workingBuffer, as);\n        \n        apdu.setOutgoingAndSend(ISO7816.OFFSET_CDATA, (short) 2);\n    }\n",
        "methodStartingLine": 168,
        "methodEndingLine": 188,
        "jml": "//@ requires current_applet(this) &*& [1/2]this.valid() &*& APDU(apdu, ?buffer) &*& array_slice(buffer, 0, buffer.length, _);\n//@ ensures current_applet(this) &*& [1/2]this.valid() &*& APDU(apdu, buffer) &*& array_slice(buffer, 0, buffer.length, _);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/NewEPurse/NewEPurseApplet.java",
        "code": "    private void credit(APDU apdu)\n        \n        \n    {\n\tbyte[] apduBuffer = apdu.getBuffer();\n\t// LC checking\n\tif (apduBuffer[ISO7816.OFFSET_LC] != 2)\n\t    ISOException.throwIt(ISO7816.SW_WRONG_LENGTH);\n\tapdu.setIncomingAndReceive();\n\t\n\t//@ open valid();\n\t//@ transient_byte_arrays_mem(workingBuffer);\n\t//@ assert transient_byte_arrays(?as);\n\t//@ foreachp_remove(workingBuffer, as);\n\t//@ open transient_byte_array(workingBuffer);\n        Util.arrayCopy(apduBuffer, ISO7816.OFFSET_CDATA, workingBuffer, (short) 0, (short) 2);\n\tshort amount = Util.getShort(workingBuffer, (short) 0);\n        //@ close transient_byte_array(workingBuffer);\n        //@ foreachp_unremove(workingBuffer, as);\n        \n\t// BUG: if (amount <= (short)0 || (short) (balance + amount) > limit) // Overflow!\n\tif (amount <= (short)0 || (short)(limit - amount) < balance)\n\t    ISOException.throwIt(ISO7816.SW_DATA_INVALID);\n\tJCSystem.beginTransaction(); // Added for VeriFast\n\tbalance += amount;\n\tJCSystem.commitTransaction(); // Added for VeriFast\n    }\n",
        "methodStartingLine": 190,
        "methodEndingLine": 216,
        "jml": "//@ requires current_applet(this) &*& [1/2]this.valid() &*& APDU(apdu, ?buffer) &*& array_slice(buffer, 0, buffer.length, _);\n//@ ensures current_applet(this) &*& [1/2]this.valid() &*& APDU(apdu, buffer) &*& array_slice(buffer, 0, buffer.length, _);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/NewEPurse/NewEPurseApplet.java",
        "code": "    private void debit(APDU apdu)\n        \n        \n    {\n\tbyte[] apduBuffer = apdu.getBuffer();\n\t// LC checking\n\tif (apduBuffer[ISO7816.OFFSET_LC] != 2)\n\t    ISOException.throwIt(ISO7816.SW_WRONG_LENGTH);\n\tapdu.setIncomingAndReceive();\n\t\n\t//@ open valid();\n\t//@ transient_byte_arrays_mem(workingBuffer);\n\t//@ assert transient_byte_arrays(?as);\n\t//@ foreachp_remove(workingBuffer, as);\n\t//@ open transient_byte_array(workingBuffer);\n        Util.arrayCopy(apduBuffer, ISO7816.OFFSET_CDATA, workingBuffer, (short) 0, (short) 2);\n\tshort amount = Util.getShort(workingBuffer, (short) 0);\n        //@ close transient_byte_array(workingBuffer);\n        //@ foreachp_unremove(workingBuffer, as);\n\t\n\tJCSystem.beginTransaction(); // Added for VeriFast\n\tdebit(amount);\n\tJCSystem.commitTransaction(); // Added for VeriFast\n    }\n",
        "methodStartingLine": 218,
        "methodEndingLine": 241,
        "jml": "//@ requires current_applet(this) &*& [1/2]this.valid() &*& APDU(apdu, ?buffer) &*& array_slice(buffer, 0, buffer.length, _);\n//@ ensures current_applet(this) &*& [1/2]this.valid() &*& APDU(apdu, buffer) &*& array_slice(buffer, 0, buffer.length, _);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/NewEPurse/NewEPurseApplet.java",
        "code": "    void debit(short amount)\n        \n        \n    {\n\tif (amount <= (short)0 || (short)(balance - amount) < (short)0)\n\t    ISOException.throwIt(ISO7816.SW_DATA_INVALID);\n\tbalance -= amount;\n    }\n",
        "methodStartingLine": 243,
        "methodEndingLine": 250,
        "jml": "//@ requires valid();\n//@ ensures valid();"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/NewEPurse/NewEPurseApplet.java",
        "code": "    void transaction(short amount)\n        \n        \n    {\n    \tif (amount <= (short)0 || (short)(balance - amount) < (short)0)\n    \t    ISOException.throwIt(ISO7816.SW_DATA_INVALID);\n    \tbalance -= amount;      \n    }\n",
        "methodStartingLine": 252,
        "methodEndingLine": 259,
        "jml": "//@ requires valid();\n//@ ensures valid();"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/NewEPurse/NewEPurseApplet.java",
        "code": "    void charge(short amount)\n        \n        \n    {\n    \t//BUG: if (amount <= (short)0 || (short)(balance - amount) < (short)0) \n\tif (amount <= (short)0 || (short)(limit - amount) < balance)\n\t    ISOException.throwIt(ISO7816.SW_DATA_INVALID);\n    \tbalance += amount;\n    }\n",
        "methodStartingLine": 261,
        "methodEndingLine": 269,
        "jml": "//@ requires valid();\n//@ ensures valid();"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/NewEPurse/NewEPurseApplet.java",
        "code": "    private void setLimit(APDU apdu)\n        \n        \n    {\n\tbyte[] apduBuffer = apdu.getBuffer();\n\t// LC checking\n\tif (apduBuffer[ISO7816.OFFSET_LC] != 2)\n\t    ISOException.throwIt(ISO7816.SW_WRONG_LENGTH);\n\tapdu.setIncomingAndReceive();\n\t\n\t//@ open valid();\n\t//@ transient_byte_arrays_mem(workingBuffer);\n\t//@ assert transient_byte_arrays(?as);\n\t//@ foreachp_remove(workingBuffer, as);\n\t//@ open transient_byte_array(workingBuffer);\n        Util.arrayCopy(apduBuffer, ISO7816.OFFSET_CDATA, workingBuffer, (short) 0, (short) 2);\n\tshort newLimit = Util.getShort(workingBuffer, (short) 0);\n        //@ close transient_byte_array(workingBuffer);\n        //@ foreachp_unremove(workingBuffer, as);\n\t\n\tif (newLimit <= 0 || balance > newLimit)\n\t    ISOException.throwIt(ISO7816.SW_DATA_INVALID);\n\t\n\tJCSystem.beginTransaction(); // Added for VeriFast\n\tlimit = newLimit;\n\tJCSystem.commitTransaction(); // Added for VeriFast\n    }\n",
        "methodStartingLine": 271,
        "methodEndingLine": 297,
        "jml": "//@ requires current_applet(this) &*& [1/2]this.valid() &*& APDU(apdu, ?buffer) &*& array_slice(buffer, 0, buffer.length, _);\n//@ ensures current_applet(this) &*& [1/2]this.valid() &*& APDU(apdu, buffer) &*& array_slice(buffer, 0, buffer.length, _);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/NewEPurse/NewEPurseApplet.java",
        "code": "    private void addClientApplet(APDU apdu)\n        \n        \n    {\n\tbyte[] apduBuffer = apdu.getBuffer();\n\t// LC checking\n\tbyte lc = apduBuffer[ISO7816.OFFSET_LC];\n\tif (lc < 8 || lc > 19)\n\t    ISOException.throwIt(ISO7816.SW_WRONG_LENGTH);\n\tapdu.setIncomingAndReceive();\n\tbyte aidLength = apduBuffer[ISO7816.OFFSET_CDATA];\n\tif (lc != aidLength + 3)\n\t    ISOException.throwIt(ISO7816.SW_DATA_INVALID);\n\t\n\t//@ open valid();\n\t//@ transient_byte_arrays_mem(workingBuffer);\n\t//@ assert transient_byte_arrays(?as);\n\t//@ foreachp_remove(workingBuffer, as);\n\t//@ open transient_byte_array(workingBuffer);\n\tUtil.arrayCopy(apduBuffer, (short) (ISO7816.OFFSET_CDATA + 1), \n\t\t       workingBuffer, (short) 0, aidLength);\n\tAID clientAID = JCSystem.lookupAID(workingBuffer, (short) 0, aidLength);\n\tif (clientAID == null)\n\t    ISOException.throwIt(SW_INVALID_AID);\n\tUtil.arrayCopy(apduBuffer, (short) (ISO7816.OFFSET_CDATA + 1 + aidLength), \n\t\t       workingBuffer, (short) 0, (short) 2);\n\tshort clientLimit = Util.getShort(workingBuffer, (short) 0);\n        //@ close transient_byte_array(workingBuffer);\n        //@ foreachp_unremove(workingBuffer, as);\n\n\tif (clientLimit < 0 || clientLimit > limit)\n\t    ISOException.throwIt(SW_INVALID_CLIENT_LIMIT);\n\tshort clientId = 0;\n\tJCSystem.beginTransaction(); // Added for VeriFast\n\t//@ open [1/2]valid();\n\tif (clientNumber == clientAIDs.length) {\n\t    if ((clientId = searchClientAID(clientAID)) == -1)\n\t\tISOException.throwIt(SW_CLIENT_CAPACITY_EXCEEDED);\n\t    clientLimits[clientId] = clientLimit;\n\t} else if ((clientId = searchClientAID(clientAID)) == -1) {\n\t    clientAIDs[clientNumber] = clientAID;\n\t    clientLimits[clientNumber] = clientLimit;\n\t} else {\n\t    clientLimits[clientId] = clientLimit;\t    \n\t}\n\t// BUG: Does not update clientNumber!\n\tJCSystem.commitTransaction(); // Added for VeriFast\n    }\n",
        "methodStartingLine": 299,
        "methodEndingLine": 346,
        "jml": "//@ requires current_applet(this) &*& [1/2]this.valid() &*& APDU(apdu, ?buffer) &*& array_slice(buffer, 0, buffer.length, _);\n//@ ensures current_applet(this) &*& [1/2]this.valid() &*& APDU(apdu, buffer) &*& array_slice(buffer, 0, buffer.length, _);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/NewEPurse/NewEPurseApplet.java",
        "code": "    short searchClientAID(AID clientAID)\n        \n        \n    {\n\tfor (short i = 0; i < clientNumber; i++)\n\t    //@ invariant [f]clientNumber |-> n &*& [f]clientAIDs |-> aids &*& [f]array_slice(aids, 0, n, aidsElems) &*& 0 <= i;\n\t{\n\t    //@ non_null_nth(aidsElems, i);\n\t    if (clientAIDs[i].equals(clientAID))\n\t\treturn i;\n\t}\n\treturn -1;\n    }\n",
        "methodStartingLine": 348,
        "methodEndingLine": 360,
        "jml": "//@ requires [?f]clientNumber |-> ?n &*& [f]clientAIDs |-> ?aids &*& [f]array_slice(aids, 0, n, ?aidsElems) &*& non_null(aidsElems) == true;\n//@ ensures [f]clientNumber |-> n &*& [f]clientAIDs |-> aids &*& [f]array_slice(aids, 0, n, aidsElems) &*& result == -1 ? true : 0 <= result &*& result < n;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/NewEPurse/NewEPurseApplet.java",
        "code": "    short getClientLimit(short clientId)\n        \n        \n    {\n\treturn clientLimits[clientId];\n    }\n",
        "methodStartingLine": 362,
        "methodEndingLine": 367,
        "jml": "//@ requires [?f]clientLimits |-> ?limits &*& [f]array_slice(limits, 0, CLIENT_NUMBER_LIMIT, ?ls) &*& 0 <= clientId &*& clientId < CLIENT_NUMBER_LIMIT;\n//@ ensures [f]clientLimits |-> limits &*& [f]array_slice(limits, 0, CLIENT_NUMBER_LIMIT, ls);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/NewEPurse/NewEPurseApplet.java",
        "code": "    public Shareable getShareableInterfaceObject(AID clientAID, byte parameter)\n        \n        \n    {\n\t// Security: when the applet is LOCKED, it cannot be selected,\n\t// but it can be accessed trough method calls.\n\tif (GPSystem.getCardContentState() == GPSystem.APPLICATION_LOCKED)\n\t    return null;\n\t// Security: client AID verification\n\tif (searchClientAID(clientAID) == -1)\n\t    return null;\n\tif (parameter > (byte)1) return null;\n\tif (parameter == (byte)0)return new EPurseServicesDebit(this);\n\telse return new EPurseServicesCredit(this);\n    }\n",
        "methodStartingLine": 369,
        "methodEndingLine": 383,
        "jml": "//@ requires registered_applets(?as) &*& [1/2]this.valid() &*& AID(clientAID) &*& mem<Applet>(this, as) == true;\n//@ ensures registered_applets(as) &*& [1/2]this.valid() &*& AID(clientAID) &*& result == null ? true : result.Shareable(?a) &*& mem<Applet>(a, as) == true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/shareable-applets/EWallet.java",
        "code": "    public static void install(byte[] bArray, short bOffset, byte bLength) \n    \n    \n    {\n        EWallet wallet = new EWallet();\n        wallet.register();\n    }\n",
        "methodStartingLine": 60,
        "methodEndingLine": 66,
        "jml": "//@ requires class_init_token(EWallet.class) &*& system();\n//@ ensures true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/shareable-applets/EWallet.java",
        "code": "    public boolean select() \n    \n    \n    {\n        // The applet declines to be selected\n        // if the pin is blocked.\n        //@ open [1/2]valid();\n        if ( pin.getTriesRemaining() == 0 ){\n           //@ close [1/2]valid();\n\t   return false;\n\t}\n\t//@ close [1/2]valid();\n        return true;\n    }\n",
        "methodStartingLine": 68,
        "methodEndingLine": 81,
        "jml": "//@ requires [1/2]this.valid();\n//@ ensures [1/2]this.valid();"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/shareable-applets/EWallet.java",
        "code": "    public void deselect() \n    \n    \n    {\n        // reset the pins validated flag to unvalidated\n        //@ open [1/2]valid();\n        pin.reset();\n        //@ close [1/2]valid();\n    }\n",
        "methodStartingLine": 83,
        "methodEndingLine": 91,
        "jml": "//@ requires [1/2]this.valid();\n//@ ensures [1/2]this.valid();"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/shareable-applets/EWallet.java",
        "code": "    private void debit(APDU apdu) \n    \n    \n    {\n    \t//@ open [1/2]valid();\n        if (!pin.isValidated())\n            ISOException.throwIt(SW_PIN_VERIFICATION_REQUIRED);\n        //@ close [1/2]valid();\n\n        byte[] abuffer = apdu.getBuffer();\n\n        byte numBytes = (byte)(abuffer[ISO7816.OFFSET_LC]);\n\n        if (numBytes != 1)\n           ISOException.throwIt(ISO7816.SW_WRONG_LENGTH);\n\n        // get debit amount\n        byte debitAmount = abuffer[ISO7816.OFFSET_CDATA];\n\n        // check debit amount\n        if ((debitAmount > MAX_TRANSACTION_AMOUNT) || (debitAmount < 0))\n           ISOException.throwIt(SW_INVALID_TRANSACTION_AMOUNT);\n\n        // check the new balance\n        //@ open [1/2]valid();\n        short newBalance = (short)(balance - debitAmount);\n        //@ close [1/2]valid();\n        \n        if (newBalance < (short)0)\n             ISOException.throwIt(SW_NEGATIVE_BALANCE);\n\n\tJCSystem.beginTransaction();\n\t//@ open valid();\n        balance = newBalance;\n        //@ close valid();\n        JCSystem.commitTransaction();\n    }\n",
        "methodStartingLine": 176,
        "methodEndingLine": 212,
        "jml": "//@ requires current_applet(this) &*& APDU(apdu,?buffer) &*& array_slice(buffer,0,buffer.length,_) &*& [1/2]this.valid();\n//@ ensures current_applet(this) &*& APDU(apdu,buffer) &*& array_slice(buffer,0,buffer.length,_) &*& [1/2]this.valid();"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/shareable-applets/EWallet.java",
        "code": "    public void verify(byte[] pincode, short offset, byte length) \n    \n    \n    {\n    \t//@ open Shareable(_);\n    \t//@ open valid();\n    \tif (offset < 0 || length < 0 || offset + length > pincode.length)\n    \t    ISOException.throwIt(ISO7816.SW_WRONG_DATA);\n        if ( pin.check(pincode, /*(short)0*/ offset, length) == false )\n            ISOException.throwIt(SW_VERIFICATION_FAILED);\n        //@ close valid();\n    \t//@ close Shareable(this);\n    }\n",
        "methodStartingLine": 252,
        "methodEndingLine": 264,
        "jml": "//@ requires array_slice(pincode, 0, pincode.length,_) &*& Shareable(?a) &*& in_transaction(a) &*& a.valid();\n//@ ensures array_slice(pincode, 0, pincode.length,_) &*& Shareable(a) &*& in_transaction(a) &*& a.valid();"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/shareable-applets/EWallet.java",
        "code": "    public void debit(byte debitAmount) \n    \n    \n    {\n    \t//@ open Shareable(_);\n    \t//@ open valid();\n        if (!pin.isValidated())\n            ISOException.throwIt(SW_PIN_VERIFICATION_REQUIRED);\n        //@ close valid();\n\n        // check debit amount\n        if ((debitAmount > MAX_TRANSACTION_AMOUNT) || (debitAmount < 0))\n           ISOException.throwIt(SW_INVALID_TRANSACTION_AMOUNT);\n\n        // check the new balance\n        //@ open valid();\n        short newBalance = (short)(balance - debitAmount);\n        //@ close valid();\n        \n        if (newBalance < (short)0)\n             ISOException.throwIt(SW_NEGATIVE_BALANCE);\n\n\t//@ open valid();\n        balance = newBalance;\n        //@ close valid();\n    \t//@ close Shareable(this);\n    }\n",
        "methodStartingLine": 266,
        "methodEndingLine": 292,
        "jml": "//@ requires 0 <= debitAmount &*& Shareable(?a) &*& in_transaction(a) &*& a.valid();\n//@ ensures Shareable(a) &*& in_transaction(a) &*& a.valid();"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/shareable-applets/EWallet.java",
        "code": "    public Shareable getShareableInterfaceObject(AID clientAID, byte parameter)\n    \t\n    \t/*@ ensures registered_applets(as) &*& mem<Applet>(this,as) == true &*& AID(clientAID) &*&\n    \t        result == null ? true : result.Shareable(?a) &*& mem<Applet>(a, as) == true; @*/\n    {\n    \tif(clientAID == null)\n    \t    return null;\n\n        byte[] ephone_aid_bytes = new byte[] {(byte)0xA8, (byte)0xB6, (byte)0xD1, (byte)0x26, (byte)0xB1, (byte)0x60};\n        \n        if(clientAID.equals(ephone_aid_bytes,(short)0,(byte)ephone_aid_bytes.length) == false)\n            return null;\n\n        if(parameter != (byte)0x01)\n            return null;\n\n\t//@ close Shareable(this);\n        return (Shareable)this;\n    }\n",
        "methodStartingLine": 294,
        "methodEndingLine": 312,
        "jml": "//@ requires registered_applets(?as) &*& mem<Applet>(this,as) == true &*& AID(clientAID);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/NewEidCard/ElementaryFile.java",
        "code": "\tpublic byte[] getData() \n  \t    \n      \t    \n\t{\n\t\tif (active == true) {\n\t\t\treturn data;\n\t\t} else {\n\t\t\tISOException.throwIt(ISO7816.SW_SECURITY_STATUS_NOT_SATISFIED);\n\t\t\treturn null; //~allow_dead_code\n\t\t}\n\t}\n",
        "methodStartingLine": 42,
        "methodEndingLine": 52,
        "jml": "//@ requires [?f]ElementaryFile(?fid, ?pf, ?d, ?a, ?size, ?info);\n//@ ensures [f]ElementaryFile(fid, pf, d, a, size, info) &*& result == d;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/NewEidCard/ElementaryFile.java",
        "code": "\tpublic short getCurrentSize() \n  \t    \n      \t    \n\t{\t\n\t\t//@ open [f]ElementaryFile(fid, parent, data, state, thesize, info);\n\t\t//@ open [f]this.File(File.class)(fid, state, ?info2);\n\t\tif (active == true) {\n\t\t\treturn size;\n\t\t\t//@ close [f]this.File(File.class)(fid, state, info2);\n\t\t\t//@ close [f]ElementaryFile(fid, parent, data, state, thesize, info);\n\t\t} else {\n\t\t\tISOException.throwIt(ISO7816.SW_SECURITY_STATUS_NOT_SATISFIED);\n\t\t}\n\t\treturn 0; //~allow_dead_code\n\t}\n",
        "methodStartingLine": 53,
        "methodEndingLine": 67,
        "jml": "//@ requires [?f]ElementaryFile(?fid, ?parent, ?data, ?state, ?thesize, ?info);\n//@ ensures [f]ElementaryFile(fid, parent, data, state, thesize, info) &*& result == thesize;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/NewEidCard/ElementaryFile.java",
        "code": "\tpublic short getMaxSize() \n  \t    \n      \t    \n\t{\n\t\t//@ open [f]ElementaryFile(fid, parent, data, state, thesize, info);\n\t\treturn (short) this.data.length;\n\t\t//@ close [f]ElementaryFile(fid, parent, data, state, thesize, info);\n\t}\n",
        "methodStartingLine": 68,
        "methodEndingLine": 75,
        "jml": "//@ requires [?f]ElementaryFile(?fid, ?parent, ?data, ?state, ?thesize, ?info);\n//@ ensures [f]ElementaryFile(fid, parent, data, state, thesize, info) &*& data != null &*& result == data.length &*& data.length <= 30000;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/NewEidCard/ElementaryFile.java",
        "code": "\tpublic void eraseData(short offset) \n  \t    \n      \t    \n\t{\n\t\t//@ open ElementaryFile(fid, parent, theData, state, thesize, info);\n\t\tUtil.arrayFillNonAtomic(data, offset, (short)(size - offset), (byte) 0);\n\t\t//@ close ElementaryFile(fid, parent, theData, state, thesize, info);\n\t}\n",
        "methodStartingLine": 76,
        "methodEndingLine": 83,
        "jml": "//@ requires ElementaryFile(?fid, ?parent, ?theData, ?state, ?thesize, ?info) &*& offset >= 0 &*& offset <= thesize;\n//@ ensures ElementaryFile(fid, parent, theData, state, thesize, info);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/NewEidCard/ElementaryFile.java",
        "code": "\tpublic short getFileID() \n\t    \n\t    \n\t{\n\t\t//@ open [f]valid_id(this);\n\t\treturn fileID;\n\t\t//@ close [f]valid_id(this);\n\t}\n",
        "methodStartingLine": 99,
        "methodEndingLine": 106,
        "jml": "//@ requires [?f]valid_id(this);\n//@ ensures [f]valid_id(this);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/NewEidCard/ElementaryFile.java",
        "code": "\tpublic void setActive(boolean b)\n\t    \n\t    \n\t{\n\t\t//@ open File(fid, _, info);\n\t\t//@ open ElementaryFile(fid, _, _, _, _, ?info2);\n\t\tsuper.setActive(b);\n\t\t//@ close ElementaryFile(fid, _, _, _, _, info2);\n\t\t//@ close File(fid, _, info);\n\t}\n",
        "methodStartingLine": 108,
        "methodEndingLine": 117,
        "jml": "//@ requires File(?fid, _, ?info);\n//@ ensures File(fid, b, info);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/NewEidCard/ElementaryFile.java",
        "code": "\tpublic boolean isActive() \n\t    \n\t    \n\t{\n\t\t//@ open [f]File(fid, _, info);\n\t\t//@ open [f]ElementaryFile(fid, _, _, _, _, ?info2);\n\t\tboolean b = super.isActive();\n\t\t//@ close [f]ElementaryFile(fid, _, _, _, _, info2);\n\t\t//@ close [f]File(fid, _, info);\n\t\treturn b;\n\t}\n",
        "methodStartingLine": 119,
        "methodEndingLine": 129,
        "jml": "//@ requires [?f]File(?fid, ?state, ?info);\n//@ ensures [f]File(fid, state, info) &*& result == state;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/frontend/inner_class/AnonymousClass.java",
        "code": "  public static void main(String[] args)\n    \n    \n  {\n    AnonymousInterface inner = new AnonymousInterface()\n    {\n      public int increment(int i)\n        \n        //@ ensures result == i + 1;\n      {\n        return i + 1;\n      }\n      \n      public int decrement(int i)\n        \n        //@ ensures result == i - 1;\n      {\n        return i - 1;\n      }\n    };\n    \n    int i = 0;\n    i = inner.increment(100);\n    //@ assert i == 101;\n    i = inner.increment(i);\n    //@ assert i == 102;\n    i = inner.decrement(i);\n    //@ assert i == 101;\n    i = inner.decrement(i);\n    //@ assert i == 100;\n }\n",
        "methodStartingLine": 14,
        "methodEndingLine": 44,
        "jml": "//@ requires true;\n//@ ensures true; "
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/frontend/inner_class/AnonymousClass.java",
        "code": "      public int increment(int i)\n        \n        \n      {\n        return i + 1;\n      }\n",
        "methodStartingLine": 20,
        "methodEndingLine": 25,
        "jml": "//@ requires true;\n//@ ensures result == i + 1;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/frontend/inner_class/AnonymousClass.java",
        "code": "      public int decrement(int i)\n        \n        \n      {\n        return i - 1;\n      }\n",
        "methodStartingLine": 27,
        "methodEndingLine": 32,
        "jml": "//@ requires true;\n//@ ensures result == i - 1;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/frontend/binary_operators/BinaryOps.java",
        "code": "  public static void main(String[] args)\n    \n    \n  {\n     int a = 60; /* 60 = 0011 1100 */  \n     int b = 13;  /* 13 = 0000 1101 */\n     int c = 0;\n\n     c = a & b;\n     c = a | b;\n     c = a ^ b;\n     c = ~a;\n     c = a << 2;\n     c = a >> 2;\n  }\n",
        "methodStartingLine": 5,
        "methodEndingLine": 19,
        "jml": "//@ requires true;\n//@ ensures true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/ghost_imports/Main_separate_include.java",
        "code": "  public static void main(String[] args) \n    \n    \n  {\n    Subpackage o = new Subpackage();\n    //@ int i = fixpoint1(0);\n    //@ close predicate1();\n    //@ open predicate1();\n    //@ lemma1();\n  }\n",
        "methodStartingLine": 8,
        "methodEndingLine": 17,
        "jml": "//@ requires true;\n//@ ensures true; "
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/override_methods/OverrideTargetParam.java",
        "code": "    public int getI()\n    \n    \n    {\n        return i;\n    }\n",
        "methodStartingLine": 7,
        "methodEndingLine": 12,
        "jml": "//@ requires valid();\n//@ ensures valid();"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/override_methods/OverrideTargetParam.java",
        "code": "    public int getI()\n    \n    \n    {\n        //@ open valid();\n        return super.getI();\n        //@ close valid();\n    }\n",
        "methodStartingLine": 22,
        "methodEndingLine": 29,
        "jml": "//@ requires valid();\n//@ ensures valid();"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/override_methods/OverrideTargetParam.java",
        "code": "    public void test(B b) \n      \n      \n    {\n    \tb.getI();\n    }\n",
        "methodStartingLine": 33,
        "methodEndingLine": 38,
        "jml": "//@ requires b != null &*& b.valid();\n//@ ensures true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/override_methods/NoOverrideSuperCall.java",
        "code": "  public void m()\n    \n    \n  {\n  }\n",
        "methodStartingLine": 12,
        "methodEndingLine": 16,
        "jml": "//@ requires pred();\n//@ ensures pred();"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/frontend/many_files/subpackage1/Add1.java",
        "code": "  static public int add()\n    \n    \n  {\n    return 0 + Number1_1.getNumber();\n  }\n",
        "methodStartingLine": 7,
        "methodEndingLine": 12,
        "jml": "//@ requires true;\n//@ ensures result == 11;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/frontend/many_files/subpackage2/Add2.java",
        "code": "  static public int add()\n    \n    \n  {\n    return 0 + Number2_1.getNumber() + Number2_2.getNumber();\n  }\n",
        "methodStartingLine": 8,
        "methodEndingLine": 13,
        "jml": "//@ requires true;\n//@ ensures result == 21 + 22;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/out_of_order_jarsrc/out_of_order/Sub.java",
        "code": "  public int increment(int i)\n    \n    \n  {\n    int j = i;\n    j++;\n    return j;\n  }\n",
        "methodStartingLine": 3,
        "methodEndingLine": 10,
        "jml": "//@ requires i < 100;\n//@ ensures result == i + 1;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/out_of_order_jarsrc/out_of_order/Sub.java",
        "code": "  public int dummy(int i)\n    \n    \n  {\n    return i;\n  }\n",
        "methodStartingLine": 12,
        "methodEndingLine": 17,
        "jml": "//@ requires true;\n//@ ensures result == i;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/frontend/many_files/subpackage3/Add3.java",
        "code": "  static public int add()\n    \n    \n  {\n    return 0 + Number3_1.getNumber() + Number3_2.getNumber() + Number3_3.getNumber();\n  }\n",
        "methodStartingLine": 9,
        "methodEndingLine": 14,
        "jml": "//@ requires true;\n//@ ensures result == 31 + 32 + 33;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/NewJTicket/NewJTicketApplet.java",
        "code": "    public static void install(byte[] bArray, short sOffset, byte bLength)\n        \n        \n    {\n        new NewJTicketApplet().register(bArray, sOffset, bLength);\n    }\n",
        "methodStartingLine": 62,
        "methodEndingLine": 67,
        "jml": "//@ requires array_slice(bArray, sOffset, sOffset + bLength, _) &*& system();\n//@ ensures true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/NewJTicket/NewJTicketApplet.java",
        "code": "    private void getCounter(APDU apdu)\n        \n        \n    {\n        byte[] apduBuffer = apdu.getBuffer();\n        // LC checking\n        if (apduBuffer[ISO7816.OFFSET_LC] != 0)\n            ISOException.throwIt(ISO7816.SW_WRONG_LENGTH);\n        apduBuffer[ISO7816.OFFSET_CDATA] = counter;\n        apdu.setOutgoingAndSend(ISO7816.OFFSET_CDATA, (short) 1);\n    }\n",
        "methodStartingLine": 123,
        "methodEndingLine": 133,
        "jml": "//@ requires [1/2]valid() &*& APDU(apdu, ?buffer) &*& array_slice(buffer, 0, buffer.length, _);\n//@ ensures [1/2]valid() &*& APDU(apdu, buffer) &*& array_slice(buffer, 0, buffer.length, _);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/NewJTicket/NewJTicketApplet.java",
        "code": "    private void useTicket(APDU apdu)\n        \n        \n    {\n        byte[] apduBuffer = apdu.getBuffer();\n        // LC checking\n        if (apduBuffer[ISO7816.OFFSET_LC] != 0)\n            ISOException.throwIt(ISO7816.SW_WRONG_LENGTH);\n        // counter checking\n        if (counter == 0)\n            ISOException.throwIt(SW_NOT_ENOUGH_TICKETS);\n        // counter update\n        JCSystem.beginTransaction(); // Added for VeriFast\n        counter--;\n        JCSystem.commitTransaction(); // Added for VeriFast\n    }\n",
        "methodStartingLine": 135,
        "methodEndingLine": 150,
        "jml": "//@ requires current_applet(this) &*& [1/2]valid() &*& APDU(apdu, ?buffer) &*& array_slice(buffer, 0, buffer.length, _);\n//@ ensures current_applet(this) &*& [1/2]valid() &*& APDU(apdu, buffer) &*& array_slice(buffer, 0, buffer.length, _);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/NewJTicket/NewJTicketApplet.java",
        "code": "    private void buyTickets(APDU apdu)\n        \n        \n    {\n        byte[] apduBuffer = apdu.getBuffer();\n        // LC checking\n        if (apduBuffer[ISO7816.OFFSET_LC] != 3)\n            ISOException.throwIt(ISO7816.SW_WRONG_LENGTH);\n        // DATA processing and checking\n        apdu.setIncomingAndReceive();\n        byte nbOfTickets = apduBuffer[ISO7816.OFFSET_CDATA];\n\t//@ open valid();\n\t//@ transient_byte_arrays_mem(workingBuffer);\n\t//@ assert transient_byte_arrays(?as);\n\t//@ foreachp_remove(workingBuffer, as);\n\t//@ open transient_byte_array(workingBuffer);\n        Util.arrayCopy(apduBuffer, (short) (ISO7816.OFFSET_CDATA + 1), \n                       workingBuffer, (short) 0, (short) 2);\n        short amount = Util.getShort(workingBuffer, (short) 0);\n        //@ close transient_byte_array(workingBuffer);\n        //@ foreachp_unremove(workingBuffer, as);\n        // EPurse Service call\n        JCSystem.beginTransaction(); // Added for VeriFast\n        IEPurseServicesDebit epurseService = \n            (IEPurseServicesDebit) JCSystem.getAppletShareableInterfaceObject(epurseAID, (byte) 0);\n        if (epurseService == null)\n            ISOException.throwIt(SW_EPURSE_SERVICE_ERROR);\n        //@ Shareable epurseServiceSIO = epurseService;\n        //@ assert epurseServiceSIO.Shareable(?epurseApplet);\n        //@ mem_registered_applets_is(this);\n        //@ assert registered_applets(?as1);\n        //@ foreachp_unremove<Applet>(this, as1);\n        //@ set_current_applet(epurseApplet);\n        //@ foreachp_remove(epurseApplet, as1);\n        epurseService.debit(amount);\n        //@ is_registered_applets_mem(this);\n        //@ assert registered_applets(?as2);\n        //@ foreachp_unremove(epurseApplet, as2);\n        //@ set_current_applet(this);\n        //@ foreachp_remove<Applet>(this, as2);\n        // counter update\n        if (nbOfTickets <= 0 || (short) (nbOfTickets + counter) > 127)\n            ISOException.throwIt(SW_TOO_MANY_TICKETS);\n        counter += nbOfTickets;\n        JCSystem.commitTransaction(); // Added for VeriFast\n    }\n",
        "methodStartingLine": 152,
        "methodEndingLine": 197,
        "jml": "//@ requires current_applet(this) &*& [1/2]valid() &*& APDU(apdu, ?buffer) &*& array_slice(buffer, 0, buffer.length, _);\n//@ ensures current_applet(this) &*& [1/2]valid() &*& APDU(apdu, buffer) &*& array_slice(buffer, 0, buffer.length, _);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/NewJTicket/NewJTicketApplet.java",
        "code": "    private void setEPurseAID(APDU apdu)\n        \n        \n    {\n        byte[] apduBuffer = apdu.getBuffer();\n        // LC checking\n        byte lc = apduBuffer[ISO7816.OFFSET_LC];\n        if (lc < 6 || lc > 17)\n            ISOException.throwIt(ISO7816.SW_WRONG_LENGTH);\n        apdu.setIncomingAndReceive();\n        byte aidLength = apduBuffer[ISO7816.OFFSET_CDATA];\n        if (lc != aidLength + 1)\n            ISOException.throwIt(ISO7816.SW_DATA_INVALID);\n\t//@ open valid();\n\t//@ transient_byte_arrays_mem(workingBuffer);\n\t//@ assert transient_byte_arrays(?as);\n\t//@ foreachp_remove(workingBuffer, as);\n\t//@ open transient_byte_array(workingBuffer);\n        Util.arrayCopy(apduBuffer, (short) (ISO7816.OFFSET_CDATA + 1), \n                       workingBuffer, (short) 0, aidLength);\n        AID aid = JCSystem.lookupAID(workingBuffer, (short) 0, aidLength);\n        //@ close transient_byte_array(workingBuffer);\n        //@ foreachp_unremove(workingBuffer, as);\n        if (aid == null)\n            ISOException.throwIt(SW_INVALID_AID);\n        JCSystem.beginTransaction(); // Added for VeriFast\n        epurseAID = aid;\n        JCSystem.commitTransaction(); // Added for VeriFast\n    }\n",
        "methodStartingLine": 199,
        "methodEndingLine": 227,
        "jml": "//@ requires current_applet(this) &*& [1/2]valid() &*& APDU(apdu, ?buffer) &*& array_slice(buffer, 0, buffer.length, _);\n//@ ensures current_applet(this) &*& [1/2]valid() &*& APDU(apdu, buffer) &*& array_slice(buffer, 0, buffer.length, _);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/out_of_order_jarsrc/out_of_order/Main.java",
        "code": "  public static void main(String[] args) \n    \n    \n  {\n    Super o = new Sub();\n    int i = 0;\n    i = o.increment(i);\n    //@ assert i == 1;\n  }\n",
        "methodStartingLine": 3,
        "methodEndingLine": 11,
        "jml": "//@ requires true;\n//@ ensures true; "
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/NewEidCard/EidCard-with-auto.java",
        "code": "\tpublic short getFileID() \n\t    \n\t    \n\t{\n\t\t////@ open [f]valid_id(this); // auto\n\t\treturn fileID;\n\t\t//@ close [f]valid_id(this); // todo\n\t}\n",
        "methodStartingLine": 107,
        "methodEndingLine": 114,
        "jml": "//@ requires [?f]valid_id(this);\n//@ ensures [f]valid_id(this);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/NewEidCard/EidCard-with-auto.java",
        "code": "\tpublic void setActive(boolean b)\n\t    \n\t    \n\t{\n\t\t////@ open File(fid, _, info); // auto\n\t\tactive = b;\n\t\t////@ close File(fid, b, info); // auto\n\t}\n",
        "methodStartingLine": 116,
        "methodEndingLine": 123,
        "jml": "//@ requires File(?fid, _, ?info);\n//@ ensures File(fid, b, info);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/NewEidCard/EidCard-with-auto.java",
        "code": "\tpublic boolean isActive() \n\t    \n\t    \n\t{\n\t\t////@ open [f]File(fid, state, info); // auto\n\t\treturn active;\n\t\t////@ close [f]File(fid, state, info); // auto\n\t}\n",
        "methodStartingLine": 126,
        "methodEndingLine": 133,
        "jml": "//@ requires [?f]File(?fid, ?state, ?info);\n//@ ensures [f]File(fid, state, info) &*& result == state;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/NewEidCard/EidCard-with-auto.java",
        "code": "\tpublic DedicatedFile getParent() \n\t    \n\t    \n\t{\n\t\t////@ open DedicatedFile(fid, parentfile, active, siblist, info); // auto\n\t\treturn parentFile;\n\t\t////@ close DedicatedFile(fid, parentfile, active, siblist, info); // auto\n\t}\n",
        "methodStartingLine": 182,
        "methodEndingLine": 189,
        "jml": "//@ requires DedicatedFile(?fid, ?parentfile, ?active, ?siblist, ?info);\n//@ ensures DedicatedFile(fid, parentfile, active, siblist, info) &*& result == parentfile;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/NewEidCard/EidCard-with-auto.java",
        "code": "\tprotected void addSibling(File s) \n  \t    \n  \t    /*@ ensures DedicatedFile(fileID, parentFile, activeState, ?newSibList, info)\n  \t    \t\t&*& newSibList == (length(siblist) < MAX_SIBLINGS ? append(siblist, cons(s, nil)) : siblist)\n  \t    \t\t&*& length(siblist) < MAX_SIBLINGS ? mem(s, newSibList) == true : true; @*/\n\t{\n                ////@ open DedicatedFile(fileID, parentFile, activeState, siblist, info); // auto\n\t\tif (number < MAX_SIBLINGS) {\n\t\t\t//@ assert array_slice(?thesiblings, _, _, ?sb);\n\t\t\tsiblings[number++] = s;\n\t\t\t//@ take_one_more(length(siblist), update(length(siblist), s, sb));\n\t\t\t//@ assert array_slice(thesiblings, _, _, ?sb2);\n\t\t\t////@ close foreachp(nil, valid_id); // auto\n\t\t\t//@ close foreachp(cons(s, nil), valid_id);\n\t\t\t//@ foreachp_append(take(length(siblist), sb), cons(s, nil));\t\n\t\t}\n\t\t\n\t\t///*@ close DedicatedFile(fileID, parentFile, activeState,\t\t // auto\n\t\t//\tsnumber < MAX_SIBLINGS ? append(take(snumber, siblist), cons(s, nil)) : siblist, \n\t\t//\tinfo); @*/\n\t}\n",
        "methodStartingLine": 191,
        "methodEndingLine": 211,
        "jml": "//@ requires DedicatedFile(?fileID, ?parentFile, ?activeState, ?siblist, ?info) &*& valid_id(s);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/NewEidCard/EidCard-with-auto.java",
        "code": "\tpublic File getSibling(short fid) \n  \t    \n      \t    \n\t{\n\t\t//@ open DedicatedFile(fileID, parentFile, activeState, siblist, info); // todo (by allowing patterns in wanted terms)\n\t\t//@ assert [f]array_slice(?thesiblings, _, _, ?sb);\n\t\t//@ int snumber = length(siblist);\n\t\tfor (byte i = 0; i < number; i++) \n\t\t/*@ invariant i >= 0 &*& [f]this.File(File.class)(fileID, activeState, _) &*& [f]this.parentFile |-> parentFile &*& [f]number |-> (byte) length(siblist) &*& [f]this.siblings |-> thesiblings &*& [f]array_slice(thesiblings, 0, thesiblings.length, sb)\n\t\t      &*& [f]foreachp(siblist, valid_id); @*/\n\t\t{\n\t\t\tFile fl = siblings[i];\n\t\t\t//@ nth_take(i, snumber, sb);\n\t\t\t//@ foreachp_remove<File>(fl, siblist);\n\t\t\tif (fl != null && fl.getFileID() == fid) {\n\t\t\t\t//@ foreachp_unremove<File>(fl, siblist);\n\t\t\t\treturn fl;\n\t\t\t\t////@ close [f]DedicatedFile(fileID, parentFile, activeState, siblist, info); // auto\n\t\t\t}\n\t\t\t//@ foreachp_unremove<File>(fl, siblist);\n\t\t}\n\t\t////@ close [f]DedicatedFile(fileID, parentFile, activeState, siblist, info); // auto\n\t\treturn null;\n\t}\n",
        "methodStartingLine": 213,
        "methodEndingLine": 236,
        "jml": "//@ requires [?f]DedicatedFile(?fileID, ?parentFile, ?activeState, ?siblist, ?info);\n//@ ensures [f]DedicatedFile(fileID, parentFile, activeState, siblist, info) &*& result == null ? true : mem(result, siblist) == true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/NewEidCard/EidCard-with-auto.java",
        "code": "\tpublic short getFileID() \n\t    \n\t    \n\t{\n\t\t////@ open [f]valid_id(this); // auto\n\t\tFile thiz = this;\n\t\treturn fileID;\n\t\t//@ close [f]valid_id(this); // todo\n\t}\n",
        "methodStartingLine": 239,
        "methodEndingLine": 247,
        "jml": "//@ requires [?f]valid_id(this);\n//@ ensures [f]valid_id(this);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/NewEidCard/EidCard-with-auto.java",
        "code": "\tpublic void setActive(boolean b)\n\t    \n\t    \n\t{\n\t\t////@ open File(fid, _, info); // auto\n\t\t////@ open DedicatedFile(fid, ?d1, _, ?siblist, ?info2); // auto\n\t\tFile thiz = this;\n\t\t////@ open thiz.File(fid, _, ?info3); // auto\n\t\tactive = b;\n\t\t////@ close thiz.File(fid, b, info3); // auto\n\t\t////@ close DedicatedFile(fid, d1, b, siblist, info2); // auto\n\t\t////@ close File(fid, b, info); // auto\n\t}\n",
        "methodStartingLine": 249,
        "methodEndingLine": 261,
        "jml": "//@ requires File(?fid, _, ?info);\n//@ ensures File(fid, b, info);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/NewEidCard/EidCard-with-auto.java",
        "code": "\tpublic boolean isActive() \n\t    \n\t    \n\t{\n\t\t////@ open [f]File(fid, state, info); // auto\n\t\t////@ open [f]DedicatedFile(fid, ?d1, state, ?siblist, ?info2); // auto\n\t\t////@ open this.File(File.class)(fid, state, ?info3); // auto\n\t\treturn active;\n\t\t////@ close [f]this.File(File.class)(fid, state, info3); // auto\n\t\t////@ close [f]DedicatedFile(fid, d1, state, siblist, info2); // auto\n\t\t////@ close [f]File(fid, state, info); // auto\n\t}\n",
        "methodStartingLine": 263,
        "methodEndingLine": 274,
        "jml": "//@ requires [?f]File(?fid, ?state, ?info);\n//@ ensures [f]File(fid, state, info) &*& result == state;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/NewEidCard/EidCard-with-auto.java",
        "code": "\tpublic DedicatedFile getParent() \n\t    \n\t    \n\t{\n\t\t////@ open DedicatedFile(fid, parentfile, active, siblist, info); // auto\n\t\t////@ open MasterFile(fid, parentfile, active, siblist, ?info2); // auto\n\t\t////@ open this.DedicatedFile(DedicatedFile.class)(fid, parentfile, active, siblist, ?info3); // auto\n\t\treturn parentFile;\n\t\t////@ close this.DedicatedFile(DedicatedFile.class)(fid, parentfile, active, siblist, info3); // auto\n\t\t////@ close MasterFile(fid, parentfile, active, siblist, info2); // auto\n\t\t////@ close DedicatedFile(fid, parentfile, active, siblist, info); // auto\n\t}\n",
        "methodStartingLine": 308,
        "methodEndingLine": 319,
        "jml": "//@ requires DedicatedFile(?fid, ?parentfile, ?active, ?siblist, ?info);\n//@ ensures DedicatedFile(fid, parentfile, active, siblist, info) &*& result == parentfile;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/NewEidCard/EidCard-with-auto.java",
        "code": "\tpublic File getSibling(short fid) \n  \t    \n      \t    \n\t{\n\t\t///@ open [f]DedicatedFile(fileID, parentFile, activeState, siblist, info); // auto\n\t\t////@ open [f]MasterFile(fileID, parentFile, activeState, siblist, info); // auto\n\t\treturn super.getSibling(fid);\n\t\t////@ close [f]MasterFile(fileID, parentFile, activeState, siblist, info); // auto\n\t\t////@ close [f]DedicatedFile(fileID, parentFile, activeState, siblist, info); // todo\n\t}\n",
        "methodStartingLine": 322,
        "methodEndingLine": 331,
        "jml": "//@ requires [?f]DedicatedFile(?fileID, ?parentFile, ?activeState, ?siblist, ?info);\n//@ ensures [f]DedicatedFile(fileID, parentFile, activeState, siblist, info) &*& result == null ? true : mem(result, siblist) == true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/NewEidCard/EidCard-with-auto.java",
        "code": "\tpublic short getFileID() \n\t    \n\t    \n\t{\n\t\t////@ open [f]valid_id(this); // auto\n\t\treturn fileID;\n\t\t//@ close [f]valid_id(this);\n\t}\n",
        "methodStartingLine": 334,
        "methodEndingLine": 341,
        "jml": "//@ requires [?f]valid_id(this);\n//@ ensures [f]valid_id(this);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/NewEidCard/EidCard-with-auto.java",
        "code": "\tpublic void setActive(boolean b)\n\t    \n\t    \n\t{\n\t\t////@ open File(fid, _, info); // auto\n\t\t////@ open MasterFile(fid, ?d0, _, ?d1, ?info2); // auto\n\t\t////@ open this.DedicatedFile(DedicatedFile.class)(fid, null, _, d1, ?info3); // auto\n\t\t////@ open this.File(File.class)(fid, _, ?info4); // auto\n\t\tactive = b;\n\t\t////@ close this.File(File.class)(fid, b, info4); // auto\n\t\t////@ close this.DedicatedFile(DedicatedFile.class)(fid, null, b, d1, info3); // auto\n\t\t////@ close MasterFile(fid, null, b, d1, info2); // auto\n\t\t////@ close File(fid, b, info); // auto\n\t}\n",
        "methodStartingLine": 343,
        "methodEndingLine": 356,
        "jml": "//@ requires File(?fid, _, ?info);\n//@ ensures File(fid, b, info);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/NewEidCard/EidCard-with-auto.java",
        "code": "\tpublic boolean isActive() \n\t    \n\t    \n\t{\n\t\t////@ open [f]File(fid, state, info); // auto\n\t\t////@ open [f]MasterFile(fid, ?d0, state, ?d1, ?info2); // auto\n\t\t////@ open [f]this.DedicatedFile(DedicatedFile.class)(fid, null, state, d1, ?info3); // auto\n\t\t////@ open [f]this.File(File.class)(fid, state, ?info4); // auto\n\t\treturn active;\n\t\t////@ close [f]this.File(File.class)(fid, state, info4); // auto\n\t\t////@ close [f]this.DedicatedFile(DedicatedFile.class)(fid, null, state, d1, info3); // auto\n\t\t////@ close [f]MasterFile(fid, null, state, d1, info2); // auto\n\t\t////@ close [f]File(fid, state, info); // auto\n\t}\n",
        "methodStartingLine": 358,
        "methodEndingLine": 371,
        "jml": "//@ requires [?f]File(?fid, ?state, ?info);\n//@ ensures [f]File(fid, state, info) &*& result == state;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/NewEidCard/EidCard-with-auto.java",
        "code": "\tprotected void addSibling(File s) \n  \t    \n  \t    /*@ ensures DedicatedFile(fileID, parentFile, activeState, ?newSibList, info)\n  \t    \t\t&*& newSibList == (length(siblist) < MAX_SIBLINGS ? append(siblist, cons(s, nil)) : siblist)\n  \t    \t\t&*& length(siblist) < MAX_SIBLINGS ? mem(s, newSibList) == true : true; @*/\n \t{\n\t\t\n\t\t////@ open DedicatedFile(fileID, parentFile, activeState, siblist, info); // auto\n\t\t////@ open MasterFile(fileID, parentFile, activeState, siblist, ?info2); // auto\n\t\tsuper.addSibling(s);\n\t\t////@ close MasterFile(fileID, parentFile, activeState, (length(siblist) < MAX_SIBLINGS ? append(siblist, cons(s, nil)) : siblist), info2); // auto\n\t\t////@ close DedicatedFile(fileID, parentFile, activeState, (length(siblist) < MAX_SIBLINGS ? append(siblist, cons(s, nil)) : siblist), info);\n\t}\n",
        "methodStartingLine": 373,
        "methodEndingLine": 385,
        "jml": "//@ requires DedicatedFile(?fileID, ?parentFile, ?activeState, ?siblist, ?info) &*& valid_id(s);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/NewEidCard/EidCard-with-auto.java",
        "code": "\tpublic byte[] getData() \n  \t    \n      \t    \n\t{\n\t\tif (active == true) {\n\t\t\treturn data;\n\t\t} else {\n\t\t\tISOException.throwIt(ISO7816.SW_SECURITY_STATUS_NOT_SATISFIED);\n\t\t\t////@ close [f]ElementaryFile(fid, pf, d, a, size); // auto\n\t\t\treturn null; //~allow_dead_code\n\t\t}\n\t}\n",
        "methodStartingLine": 470,
        "methodEndingLine": 481,
        "jml": "//@ requires [?f]ElementaryFile(?fid, ?pf, ?d, ?a, ?size, ?info);\n//@ ensures [f]ElementaryFile(fid, pf, d, a, size, info) &*& result == d;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/NewEidCard/EidCard-with-auto.java",
        "code": "\tpublic short getCurrentSize() \n  \t    \n      \t    \n\t{\t\n\t\t////@ open [f]ElementaryFile(fid, parent, data, state, thesize, info); // auto\n\t\t////@ open [f]this.File(File.class)(fid, state, ?info2); // auto\n\t\tif (active == true) {\n\t\t\treturn size;\n\t\t\t////@ close [f]this.File(File.class)(fid, state, info2); // auto\n\t\t\t////@ close [f]ElementaryFile(fid, parent, data, state, thesize, info); // auto\n\t\t} else {\n\t\t\tISOException.throwIt(ISO7816.SW_SECURITY_STATUS_NOT_SATISFIED);\n\t\t}\n\t}\n",
        "methodStartingLine": 482,
        "methodEndingLine": 495,
        "jml": "//@ requires [?f]ElementaryFile(?fid, ?parent, ?data, ?state, ?thesize, ?info);\n//@ ensures [f]ElementaryFile(fid, parent, data, state, thesize, info) &*& result == thesize;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/NewEidCard/EidCard-with-auto.java",
        "code": "\tpublic short getMaxSize() \n  \t    \n      \t    \n\t{\n\t\t////@ open [f]ElementaryFile(fid, parent, data, state, thesize, info); // auto\n\t\treturn (short) this.data.length;\n\t\t////@ close [f]ElementaryFile(fid, parent, data, state, thesize, info); // auto\n\t}\n",
        "methodStartingLine": 496,
        "methodEndingLine": 503,
        "jml": "//@ requires [?f]ElementaryFile(?fid, ?parent, ?data, ?state, ?thesize, ?info);\n//@ ensures [f]ElementaryFile(fid, parent, data, state, thesize, info) &*& data != null &*& result == data.length;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/NewEidCard/EidCard-with-auto.java",
        "code": "\tpublic void eraseData(short offset) \n  \t    \n      \t    \n\t{\n\t\t////@ open ElementaryFile(fid, parent, theData, state, thesize, info); // auto\n\t\tUtil.arrayFillNonAtomic(data, offset, (short)(size - offset), (byte) 0);\n\t\t////@ close ElementaryFile(fid, parent, theData, state, thesize, info); // auto\n\t}\n",
        "methodStartingLine": 504,
        "methodEndingLine": 511,
        "jml": "//@ requires ElementaryFile(?fid, ?parent, ?theData, ?state, ?thesize, ?info) &*& offset >= 0 &*& offset <= thesize;\n//@ ensures ElementaryFile(fid, parent, theData, state, thesize, info);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/NewEidCard/EidCard-with-auto.java",
        "code": "\tpublic short getFileID() \n\t    \n\t    \n\t{\n\t\t////@ open [f]valid_id(this); // auto\n\t\treturn fileID;\n\t\t//@ close [f]valid_id(this);\n\t}\n",
        "methodStartingLine": 527,
        "methodEndingLine": 534,
        "jml": "//@ requires [?f]valid_id(this);\n//@ ensures [f]valid_id(this);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/NewEidCard/EidCard-with-auto.java",
        "code": "\tpublic void setActive(boolean b)\n\t    \n\t    \n\t{\n\t\t////@ open File(fid, _, info); // auto\n\t\t////@ open ElementaryFile(fid, _, _, _, _, ?info2); // auto\n\t\tsuper.setActive(b);\n\t\t////@ close ElementaryFile(fid, _, _, _, _, info2); // auto\n\t\t////@ close File(fid, _, info); // auto\n\t}\n",
        "methodStartingLine": 537,
        "methodEndingLine": 546,
        "jml": "//@ requires File(?fid, _, ?info);\n//@ ensures File(fid, b, info);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/NewEidCard/EidCard-with-auto.java",
        "code": "\tpublic boolean isActive() \n\t    \n\t    \n\t{\n\t\t////@ open [f]File(fid, _, info); // auto\n\t\t////@ open [f]ElementaryFile(fid, _, _, _, _, ?info2); // auto\n\t\tboolean b = super.isActive();\n\t\t////@ close [f]ElementaryFile(fid, _, _, _, _, info2); // auto\n\t\t////@ close [f]File(fid, _, info); // auto\n\t\treturn b;\n\t}\n",
        "methodStartingLine": 549,
        "methodEndingLine": 559,
        "jml": "//@ requires [?f]File(?fid, ?state, ?info);\n//@ ensures [f]File(fid, state, info) &*& result == state;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/NewEidCard/EidCard-with-auto.java",
        "code": "\tpublic static void install(byte[] bArray, short bOffset, byte bLength) \n  \t    \n      \t    \n\t{\n\t\t// create a eID card applet instance\n\t\tnew EidCard();\n\t}\n",
        "methodStartingLine": 864,
        "methodEndingLine": 870,
        "jml": "//@ requires class_init_token(EidCard.class) &*& system();\n//@ ensures true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/NewEidCard/EidCard-with-auto.java",
        "code": "\tprivate void eraseBinary(APDU apdu, byte[] buffer) \n  \t    \n      \t    \n\t{\n\t\t// check if access to this file is allowed\n\t\tif (!fileAccessAllowed(ERASE_BINARY))\n\t\t\tISOException.throwIt(ISO7816.SW_SECURITY_STATUS_NOT_SATISFIED);\n\t\t// use P1 and P2 as offset\n\t\tshort offset = Util.makeShort(buffer[ISO7816.OFFSET_P1], buffer[ISO7816.OFFSET_P2]);\n\t\tJCSystem.beginTransaction();\n\t\t//@ open valid(); // hard to eliminate as the conjunct selectedFile.ElementaryFile depends on non-input parameters\n\t\tif (selectedFile == masterFile)\n\t\t\tISOException.throwIt(ISO7816.SW_FILE_INVALID); //~allow_dead_code Dead because fileAccessAllowed() checks that selectedFile instanceof ElementaryFile and masterFile is not an ElementaryFile.\n\t\t// impossible to start erasing from offset large than size of file\n\t\t//@ open selected_file_types(_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _);\n\t\tshort size = ((ElementaryFile)selectedFile).getCurrentSize();\n\t\t\n\t\tif (offset > size || offset < 0)\n\t\t\tISOException.throwIt(ISO7816.SW_WRONG_P1P2);\n\t\t((ElementaryFile) selectedFile).eraseData(offset);\n\t\t////@ close valid(); // auto\n\t\tJCSystem.commitTransaction();\n\t}\n",
        "methodStartingLine": 961,
        "methodEndingLine": 983,
        "jml": "//@ requires current_applet(this) &*& [1/2]valid() &*& APDU(apdu, buffer) &*& array_slice(buffer, 0, buffer.length, _);\n//@ ensures current_applet(this) &*& [1/2]valid() &*& APDU(apdu, buffer) &*& array_slice(buffer, 0, buffer.length, _);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/NewEidCard/EidCard-with-auto.java",
        "code": "\tprivate void updateBinary(APDU apdu, byte[] buffer) \n  \t    \n      \t    \n\t{\n\t\t// check if access to this file is allowed\n\t\tif (!fileAccessAllowed(UPDATE_BINARY))\n\t\t\tISOException.throwIt(ISO7816.SW_SECURITY_STATUS_NOT_SATISFIED);\n\t\t// use P1 and P2 as offset\n\t\tshort offset = Util.makeShort(buffer[ISO7816.OFFSET_P1], buffer[ISO7816.OFFSET_P2]);\n\t\t// impossible to start updating from offset larger than max size of file\n\t\t// this however does not imply that the file length can not change\n\t\tJCSystem.beginTransaction();\n\t\t//@ open valid();\n\t\tif (selectedFile == masterFile)\n\t\t\tISOException.throwIt(ISO7816.SW_FILE_INVALID); //~allow_dead_code Dead because fileAccessAllowed() checks that selectedFile instanceof ElementaryFile and masterFile is not an ElementaryFile.\n\t\t//@ open selected_file_types(_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _);\n\t\tshort size = ((ElementaryFile) selectedFile).getMaxSize();\n\t\tif (offset > size)\n\t\t\tISOException.throwIt(ISO7816.SW_WRONG_P1P2);\n\t\t// number of bytes in file starting from offset\n\t\t// short remaining = (short) (size - offset);\n\t\t// get the new data\n\t\tshort byteRead = apdu.setIncomingAndReceive();\n\t\t// check Lc\n\t\tshort lc = (short) (buffer[ISO7816.OFFSET_LC] & 0x00FF);\n\t\tif ((lc == 0) || (byteRead == 0))\n\t\t\tISOException.throwIt(ISO7816.SW_WRONG_LENGTH);\n\t\t// update file\n\t\tif (offset < 0 || ISO7816.OFFSET_CDATA + lc > buffer.length || offset + lc > size)\n\t\t\tISOException.throwIt(ISO7816.SW_WRONG_P1P2);\n\t\t((ElementaryFile) selectedFile).updateData(offset, buffer, ISO7816.OFFSET_CDATA, lc);\n\t\t// //@ close valid(); // auto\n\t\tJCSystem.commitTransaction();\n\t}\n",
        "methodStartingLine": 987,
        "methodEndingLine": 1020,
        "jml": "//@ requires current_applet(this) &*& [1/2]valid() &*& APDU(apdu, buffer) &*& array_slice(buffer, 0, buffer.length, _);\n//@ ensures current_applet(this) &*& [1/2]valid() &*& APDU(apdu, buffer) &*& array_slice(buffer, 0, buffer.length, _);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/NewEidCard/EidCard-with-auto.java",
        "code": "\tprivate boolean fileAccessAllowed(byte mode) \n  \t    \n      \t    \n\t{\n\t\t\t// if selected file is not an EF, throw \"no current EF\" exception\n\t\tif (!(selectedFile instanceof ElementaryFile))\n\t\t\tISOException.throwIt(ISO7816.SW_COMMAND_NOT_ALLOWED);\n\t\t// always allow READ BINARY\n\t\tif (mode == READ_BINARY) {\n\t\t\t\treturn true;\n\t\t}\n\t\t// allow write access to the preference file if the cardholder pin was\n\t\t// entered correctly\n\t\tif ((selectedFile == preferencesFile) && cardholderPin.isValidated()) {\n\t\t\t\treturn true;\n\t\t}\n\t\t// we abuse the activation pin to update some of the large files (photo\n\t\t// + certificates)\n\t\tif (GPSystem.getCardContentState() == GPSystem.APPLICATION_SELECTABLE) {\n\t\t\t\treturn true;\t\t\t\n\t\t}\n\t\t\t// default to false\n\t\treturn false;\n\t}\n",
        "methodStartingLine": 1033,
        "methodEndingLine": 1056,
        "jml": "//@ requires [?f]selectedFile |-> ?theSelectedFile &*& [f]this.preferencesFile |-> ?thePreferencesFile &*& [f]this.cardholderPin |-> ?theCardHolderPin &*& theCardHolderPin != null &*& [f]OwnerPIN(theCardHolderPin, _, _);\n//@ ensures [f]selectedFile |-> theSelectedFile &*& [f]this.preferencesFile |-> thePreferencesFile &*& [f]this.cardholderPin |-> theCardHolderPin &*& [f]OwnerPIN(theCardHolderPin, _, _) &*& theSelectedFile instanceof ElementaryFile;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/NewEidCard/EidCard-with-auto.java",
        "code": "\tprivate void getCardData(APDU apdu, byte[] buffer) \n  \t    \n      \t    \n\t{\n\t\t// check P1 and P2\n\t\tif (buffer[ISO7816.OFFSET_P1] != (byte) 0x00 || buffer[ISO7816.OFFSET_P2] != (byte) 0x00)\n\t\t\tISOException.throwIt(ISO7816.SW_INCORRECT_P1P2);\n\t\t// inform the JCRE that the applet has data to return\n\t\tapdu.setOutgoing();\n\t\t\n\t\t////@ open [1/2]valid();\n\t\t\t\t\t\t\t\t\n\t\tbyte[] data = identityFile.getData(); \n\t\t// Only the chip number is of importance: get this at tag position 2\n\t\tshort pos = 1;\n\t\t//@ open [1/2]identityFile.ElementaryFile(_, _, ?identityFileData, _, _, ?info); // todo (integrate with array_element search)\n\t\tshort dataLen = (short) data[pos];\n\t\tpos = (short) (pos + 1 + dataLen + 1);\n\t\t////@ close [1/2]identityFile.ElementaryFile(_, _, identityFileData, _, _, info); // auto\n\t\tif (dataLen <= 0 || dataLen + pos + 2 >= identityFile.getCurrentSize())\n\t\t\tISOException.throwIt(ISO7816.SW_DATA_INVALID);\n\t\t//@ open [1/2]identityFile.ElementaryFile(_, _, identityFileData, _, _, info);\n\t\tdataLen = (short) data[pos];\n\t\tpos = (short) (pos + 1);\n\t\t////@ close [1/2]identityFile.ElementaryFile(_, _, identityFileData, _, _, info); // auto\n\t\tif (dataLen < 0 || pos + dataLen >= identityFile.getCurrentSize())\n\t\t\tISOException.throwIt(ISO7816.SW_DATA_INVALID);\n\t\t//@ open [1/2]identityFile.ElementaryFile(_, _, identityFileData, _, _, info);\n\t\t// check Le\n\t\t// if (le != dataLen)\n\t\t// ISOException.throwIt((short)(ISO7816.SW_WRONG_LENGTH));\n\t\t/*VF*byte version[] = { (byte) 0xA5, (byte) 0x03, (byte) 0x01, (byte) 0x01, (byte) 0x01, (byte) 0x11, (byte) 0x00, (byte) 0x02, (byte) 0x00, (byte) 0x01, (byte) 0x01, (byte) 0x0F };*/\n\t\tbyte version[] = new byte[] { (byte) 0xA5, (byte) 0x03, (byte) 0x01, (byte) 0x01, (byte) 0x01, (byte) 0x11, (byte) 0x00, (byte) 0x02, (byte) 0x00, (byte) 0x01, (byte) 0x01, (byte) 0x0F };\n\t\tbyte chipNumber[] = new byte[(short) (dataLen + 12)];\n\t\tUtil.arrayCopy(data, pos, chipNumber, (short) 0, dataLen);\n\t\tUtil.arrayCopy(version, (short) 0, chipNumber, dataLen, (short) 12);\n\t\t// //Set serial number\n\t\t// Util.arrayCopy(tokenInfo.getData(), (short) 7, tempBuffer, (short) 0,\n\t\t// (short) 16);\n\t\t//\t\t\n\t\t// //Set component code: TODO\n\t\t//\t\t\n\t\t//\t\t\n\t\t// //Set OS number: TODO\n\t\t//\t\t\n\t\t//\t\t\n\t\t// //Set OS version: TODO\n\t\t// JCSystem.getVersion();\n\t\t//\t\t\n\t\t// //Set softmask number: TODO\n\t\t//\t\t\n\t\t// //Set softmask version: TODO\n\t\t//\t\t\n\t\t// //Set applet version: TODO : 4 bytes in file system\n\t\t//\t\t\n\t\t//\t\t\n\t\t// //Set Interface version: TODO\n\t\t//\t\t\n\t\t// //Set PKCS#15 version: TODO\n\t\t//\t\t\n\t\t// //Set applet life cycle\n\t\t// tempBuffer[(short)(le-1)] = GPSystem.getCardState();\n\t\t// set the actual number of outgoing data bytes\n\t\tapdu.setOutgoingLength((short) chipNumber.length);\n\t\t// send content of buffer in apdu\n\t\tapdu.sendBytesLong(chipNumber, (short) 0, (short) chipNumber.length);\n\t\t\t\t\t\t\t\t\n\t\t////@ close [1/2]identityFile.ElementaryFile(_, _, identityFileData, _, _, info); // auto\n\t\t////@ close [1/2]valid(); // auto\n\t}\n",
        "methodStartingLine": 1063,
        "methodEndingLine": 1132,
        "jml": "//@ requires [1/2]valid() &*& APDU(apdu, buffer) &*& array_slice(buffer, 0, buffer.length, _);\n//@ ensures [1/2]valid() &*& APDU(apdu, buffer) &*& array_slice(buffer, 0, buffer.length, _);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/NewEidCard/EidCard-with-auto.java",
        "code": "\tprivate void readBinary(APDU apdu, byte[] buffer) \n  \t    \n      \t    \n\t{\n\t\t////@ open [1/2]valid(); // auto\n\t\t// check if access to this file is allowed\n\t\tif (!fileAccessAllowed(READ_BINARY))\n\t\t\tISOException.throwIt(ISO7816.SW_SECURITY_STATUS_NOT_SATISFIED);\n\t\t// use P1 and P2 as offset\n\t\tshort offset = Util.makeShort(buffer[ISO7816.OFFSET_P1], buffer[ISO7816.OFFSET_P2]);\n\t\tif (offset < 0)\n\t\t\tISOException.throwIt(ISO7816.SW_INCORRECT_P1P2);\n\t\t// inform the JCRE that the applet has data to return\n\t\tshort le = apdu.setOutgoing();\n\t\t// impossible to start reading from offset large than size of file\t\t\t\t\n\t\tif (selectedFile == masterFile)\n\t\t\tISOException.throwIt(ISO7816.SW_FILE_INVALID); //~allow_dead_code Dead because fileAccessAllowed() checks that selectedFile instanceof ElementaryFile and masterFile is not an ElementaryFile.\n\t\t//@ open selected_file_types(_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _);\n\t\tshort size = ((ElementaryFile) selectedFile).getCurrentSize();\n\t\tif (offset > size)\n\t\t\tISOException.throwIt(ISO7816.SW_WRONG_P1P2);\n\t\t// number of bytes in file starting from offset\n\t\tshort remaining = (short) (size - offset);\n\t\tif (le == 0) {\n\t\t\tif (remaining < 256) {\n\t\t\t\t// wrong Le field\n\t\t\t\t// SW2 encodes the exact number of available data bytes\n\t\t\t\tshort sw = (short) (ISO7816.SW_CORRECT_LENGTH_00 | remaining);\n\t\t\t\tISOException.throwIt(sw);\n\t\t\t} else\n\t\t\t\t// Le = 0 is interpreted as 256 bytes\n\t\t\t\tle = 256;\n\t\t}\n\t\t// only read out the remaining bytes\n\t\tif (le > remaining) {\n\t\t\tle = remaining;\n\t\t}\n\t\t// set the actual number of outgoing data bytes\n\t\tapdu.setOutgoingLength(le);\n\t\t// write selected file in APDU\n\t\t//VF bug; was   apdu.sendBytesLong(((ElementaryFile) selectedFile).getData(), offset, le);\n\t\t//VF probleem: originele lijn was    apdu.sendBytesLong(ef.getData(), offset, le);\n\t\t// het probleem hiermee is dat de getData()-methode een ElementaryFile nodig heeft, en dat\n\t\t// sendBytesLong vereist dat het resultaat niet null is. De niet-null vereiste zit geencodeerd\n\t\t// in ElementaryFile, dus als je dat predicaat opent, dan weet VF dat de data niet-null is, maar\n\t\t// dan werkt de call op getData niet. Als je de ElementaryFile gesloten laat, dan lukt de call naar\n\t\t// getData, maar weet je niet dat het niet-null is.\n\t\tElementaryFile ef = (ElementaryFile)selectedFile;\n\t\tbyte[] bf = ef.getData();\n\t\t//@ open [1/2]ef.ElementaryFile(?d1, ?d2, ?d3, ?d4, ?d5, ?info); // hard to eliminate\n\t\tapdu.sendBytesLong(bf, offset, le);\n\t\t////@ close [1/2]ef.ElementaryFile(d1, d2, d3, d4, d5, info); // auto\n\t\t////@ close [1/2]valid(); // auto\n\t}\n",
        "methodStartingLine": 1137,
        "methodEndingLine": 1190,
        "jml": "//@ requires current_applet(this) &*& [1/2]valid() &*& APDU(apdu, buffer) &*& array_slice(buffer, 0, buffer.length, _);\n//@ ensures current_applet(this) &*& [1/2]valid() &*& APDU(apdu, buffer) &*& array_slice(buffer, 0, buffer.length, _);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/NewEidCard/EidCard-with-auto.java",
        "code": "\tprivate void activateFile(APDU apdu, byte[] buffer) \n  \t    \n      \t    \n\t{\n\t\t// check P2\n\t\tif (buffer[ISO7816.OFFSET_P2] != (byte) 0x0C)\n\t\t\tISOException.throwIt(ISO7816.SW_WRONG_P1P2);\n\t\t// P1 determines the select method\n\t\tswitch (buffer[ISO7816.OFFSET_P1]) {\n\t\tcase (byte) 0x02:\n\t\t\tselectByFileIdentifier(apdu, buffer);\n\t\t\tbreak;\n\t\tcase (byte) 0x08:\n\t\t\tselectByPath(apdu, buffer);\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tISOException.throwIt(ISO7816.SW_INCORRECT_P1P2);\n\t\t\tbreak; //~allow_dead_code\n\t\t}\n\t\t// check if activating this file is allowed\n\t\tif (!fileAccessAllowed(UPDATE_BINARY))\n\t\t\tISOException.throwIt(ISO7816.SW_SECURITY_STATUS_NOT_SATISFIED);\n\t\tJCSystem.beginTransaction();\n\t\t//@ open valid(); // hard to eliminate\n\t\t//@ open selected_file_types(_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, ?sf2);\n\t\t//@ sf2.castElementaryToFile();\n\t\tselectedFile.setActive(true);\n\t\t//@ sf2.castFileToElementary();\n\t\t////@ close valid(); // auto\n\t\tJCSystem.commitTransaction();\n\t}\t\n",
        "methodStartingLine": 1196,
        "methodEndingLine": 1226,
        "jml": "//@ requires current_applet(this) &*& [1/2]valid() &*& APDU(apdu, buffer) &*& array_slice(buffer, 0, buffer.length, _);\n//@ ensures current_applet(this) &*& [1/2]valid() &*& APDU(apdu, buffer) &*& array_slice(buffer, 0, buffer.length, _);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/NewEidCard/EidCard-with-auto.java",
        "code": "\tprivate void clear() \n    \t    \n      \t    \n\t{\n\t\tJCSystem.beginTransaction();\n\t\t\n\t\t// //@ open valid(); // auto\n\n\t\t// clear signature and random data buffer\n\t\tUtil.arrayFillNonAtomic(randomBuffer, (short) 0, (short) 256, (byte) 0);\n\t\tUtil.arrayFillNonAtomic(responseBuffer, (short) 0, (short) 128, (byte) 0);\n\t\t// no EF and DF selected yet; select MF by default\n\t\tselectedFile = masterFile;\n\t\t// invalidate cardholder PIN\n\t\tcardholderPin.reset();\n\t\t/*\n\t\t * clear text message buffer, signature and previous ADPU type are\n\t\t * transient so no need to reset these manually\n\t\t */\n\n\t\t// open selectedFile.File(?d1, ?d2);\n\t\t////@ close valid(); // auto\n\n\t\tJCSystem.commitTransaction();\n\t}\n",
        "methodStartingLine": 1243,
        "methodEndingLine": 1267,
        "jml": "//@ requires current_applet(this) &*& [1/2]valid();\n//@ ensures current_applet(this) &*& [1/2]valid();"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/NewEidCard/EidCard-with-auto.java",
        "code": "\tprivate void initializeKeyPairs() \n  \t    \n      \t    /*@ ensures nonRepKeyPair |-> ?theNonRepKeyPair &*& theNonRepKeyPair != null &*&\n\t      \t    authKeyPair |-> ?theAuthKeyPair &*& theAuthKeyPair != null &*&\n\t      \t    basicKeyPair |-> ?theBasicKeyPair &*& theBasicKeyPair != null;\n\t    @*/\n\t{\n\t\t/*\n\t\t * basicKeyPair is static (so same for all applets) so only allocate\n\t\t * memory once\n\t\t */\n\t\tif (EidCard.basicKeyPair != null && authKeyPair != null && nonRepKeyPair != null) {\n\t\t\treturn;\n\t\t}\n\t\t\n\t\t\n\t\tbasicKeyPair = new KeyPair(KeyPair.ALG_RSA_CRT, (short) 1024);\n\t\tbasicKeyPair.genKeyPair();\n\t\t\n\t\tauthKeyPair = new KeyPair(KeyPair.ALG_RSA_CRT, (short) (1024));\n\t\tauthKeyPair.genKeyPair();\n\t\t\n\t\t\n\t\n\t\t//authPrivateKey = (RSAPrivateCrtKey) KeyBuilder.buildKey(KeyBuilder.TYPE_RSA_CRT_PRIVATE, KeyBuilder.LENGTH_RSA_1024, false);\n\t\t\n\n\t\tnonRepKeyPair = new KeyPair(KeyPair.ALG_RSA_CRT, (short) (1024));\n\t\tnonRepKeyPair.genKeyPair();\n\t\n\t\t//nonRepPrivateKey = (RSAPrivateCrtKey) KeyBuilder.buildKey(KeyBuilder.TYPE_RSA_CRT_PRIVATE, KeyBuilder.LENGTH_RSA_1024, false);\n\t}\n",
        "methodStartingLine": 1312,
        "methodEndingLine": 1343,
        "jml": "//@ requires nonRepKeyPair |-> _ &*& authKeyPair |-> _ &*& basicKeyPair |-> _;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/NewEidCard/EidCard-with-auto.java",
        "code": "\tprivate void selectByFileIdentifier(APDU apdu, byte[] buffer) \n  \t    \n      \t    \n\t{\n\t\t// receive the data to see which file needs to be selected\n\t\tshort byteRead = apdu.setIncomingAndReceive();\n\t\t// check Lc\n\t\tshort lc = (short) (buffer[ISO7816.OFFSET_LC] & 0x00FF);\n\t\tif ((lc != 2) || (byteRead != 2))\n\t\t\tISOException.throwIt(ISO7816.SW_WRONG_LENGTH);\n\t\t// get the file identifier out of the APDU\n\t\tshort fid = Util.makeShort(buffer[ISO7816.OFFSET_CDATA], buffer[ISO7816.OFFSET_CDATA + 1]);\n\t\tJCSystem.beginTransaction();\n\t\t//@ open valid(); // todo (implement patterns as arguments to rules instead of terms )\n\t\t//@ assert selected_file_types(_, ?f1, ?f2, ?f3, ?f4, ?f5, ?f6, ?f7, ?f8, ?f9, ?f10, ?f11, ?f12, ?f13, ?f14, ?f15, ?f16, ?f17, ?f18, ?f19, ?f20, ?f21, _);\n\t\t// if file identifier is the master file, select it immediately\n\t\tif (fid == MF)\n\t\t\tselectedFile = masterFile;\t\t\n\t\telse {\n\t\t\t// check if the requested file exists under the current DF\n\t\t\t////@ close masterFile.DedicatedFile();\n\t\t\t////@ MasterFile theMasterFile = masterFile; // auto\n\t\t\t////@ assert theMasterFile.MasterFile(16128, null, ?x1, ?x2, ?x3); // auto\n\t\t\t////@ close theMasterFile.DedicatedFile(16128, null, x1, x2, x3); // auto\n\t\t\tFile s = ((DedicatedFile) masterFile).getSibling(fid);\n\t\t\t////@ open theMasterFile.DedicatedFile(16128, null, x1, x2, x3); // auto\n\t\t\t//VF /bug\n\t\t\tif (s != null) {\n\t\t\t\tselectedFile = s;\n\t\t\t//the fid is an elementary file:\n\t\t\t} else {\n\t\t\t\ts = belpicDirectory.getSibling(fid);\n\t\t\t\tif (s != null) {\n\t\t\t\t\tselectedFile = s;\n\t\t\t\t} else {\n\t\t\t\t\ts = idDirectory.getSibling(fid);\n\t\t\t\t\tif (s != null) {\n\t\t\t\t\t\tselectedFile = s;\n\t\t\t\t\t\t\n\t\t\t\t\t} else {\n\t\t\t\t\t\tISOException.throwIt(ISO7816.SW_FILE_NOT_FOUND);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t\t//@ close selected_file_types(s, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14, f15, f16, f17, f18, f19, f20, f21, _);\t\n\t\t}\t\n\t\t\n\t\t// //@ close valid(); // auto\n\t\tJCSystem.commitTransaction();\n\t}\n",
        "methodStartingLine": 1347,
        "methodEndingLine": 1397,
        "jml": "//@ requires current_applet(this) &*& [1/2]valid() &*& APDU(apdu, buffer) &*& array_slice(buffer, 0, buffer.length, _);\n//@ ensures current_applet(this) &*& [1/2]valid() &*& APDU(apdu, buffer) &*& array_slice(buffer, 0, buffer.length, _);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/NewEidCard/EidCard-with-auto.java",
        "code": "\tprivate void selectByPath(APDU apdu, byte[] buffer) \n  \t    \n      \t    \n\t{\n\t\t// receive the path name\n\t\tshort byteRead = apdu.setIncomingAndReceive();\n\t\t// check Lc\n\t\t////@ masking_and(buffer[ISO7816.OFFSET_LC], 0x00FF);\n\t\tshort lc = (short) (buffer[ISO7816.OFFSET_LC] & 0x00FF);\n\t\t// it must be a multiple of 2\n\t\tif (((lc & 1) == 1) || ((byteRead & 1) == 1))\n\t\t\tISOException.throwIt(SW_INCONSISTENT_P1P2);\n\t\tif (buffer.length < ISO7816.OFFSET_CDATA + lc + 1)\n\t\t\tISOException.throwIt(ISO7816.SW_INCORRECT_P1P2);\n\t\t////@ open [1/2]valid(); // auto\n\t\t// use the path name in the APDU data to select a file\n\t\tFile f = masterFile;\n\t\t////@ assert [1/2]masterFile |-> ?theMasterFile;\n\t\tfor (byte i = 0; i < lc; i += 2) \n\t\t    /*@ invariant array_slice(buffer, 0, buffer.length, _) &*& i >= 0 &*& i < (lc + 2) &*& \n\t\t    \t\t\t[1/2]randomBuffer |-> ?theRandomBuffer &*& theRandomBuffer != null &*& [1/2]array_slice(theRandomBuffer, 0, theRandomBuffer.length, _) &*& theRandomBuffer.length == 256 &*&\n\t\t\t\t    [1/2]responseBuffer |-> ?theResponseBuffer &*& theResponseBuffer != null &*& [1/2]array_slice(theResponseBuffer, 0, theResponseBuffer.length, _) &*& theResponseBuffer.length == 128 &*&\n\t\t\t\t    [1/2]randomData |-> ?theRandomData &*& theRandomData != null &*&\n\t\t\t\t    [1/2]cipher |-> ?theCipher &*& theCipher != null &*&\n\t\t\t\t    [1/2]messageBuffer |-> ?theMessageBuffer &*& theMessageBuffer != null &*& theMessageBuffer.length == 128 &*& is_transient_byte_array(theMessageBuffer) == true &*&\n\t\t\t\t    [1/2]previousApduType |-> ?thePreviousApduType &*& thePreviousApduType != null &*& thePreviousApduType.length == 1 &*& is_transient_byte_array(thePreviousApduType) == true &*&\n\t\t\t\t    [1/2]signatureType |-> ?theSignatureType &*& theSignatureType != null &*& theSignatureType.length == 1 &*& is_transient_byte_array(theSignatureType) == true &*&\n\t\t\t\t    [1/2]masterFile |-> ?theMasterFile &*& [1/2]theMasterFile.MasterFile(0x3F00, null, _, ?masterSibs, _) &*& theMasterFile != null &*& theMasterFile.getClass() == MasterFile.class &*&\n\t\t\t\t    [1/2]cardholderPin |-> ?theCardholderPin &*& [1/2]OwnerPIN(theCardholderPin, _, _) &*& theCardholderPin != null &*& \n\t\t\t\t    [1/2]resetPin |-> ?theResetPin &*& [1/2]OwnerPIN(theResetPin, _, _) &*& theResetPin != null &*&\n\t\t\t\t    [1/2]unblockPin |-> ?theUnblockPin &*& [1/2]OwnerPIN(theUnblockPin, _, _) &*& theUnblockPin != null &*&\n\t\t\t\t    [1/2]activationPin |-> ?theActivationPin &*& [1/2]OwnerPIN(theActivationPin, _, _) &*& theActivationPin != null &*&\n\t\t\t\t    [1/2]identityFile |-> ?theIdentityFile &*& [1/2]theIdentityFile.ElementaryFile(_, _, ?identityData, _, _, _) &*& theIdentityFile != null &*& identityData != null &*& identityData.length == 0xD0 &*& theIdentityFile.getClass() == ElementaryFile.class &*&\n\t\t\t\t    [1/2]identityFileSignature |-> ?theIdentityFileSignature &*& [1/2]theIdentityFileSignature.ElementaryFile(_, _, ?theIdentityFileSignatureData, _, _, _) &*& theIdentityFileSignature != null &*& theIdentityFileSignatureData != null &*& theIdentityFileSignatureData.length == 0x80 &*& theIdentityFileSignature.getClass() == ElementaryFile.class &*&\n\t\t\t\t    [1/2]addressFile |-> ?theAddressFile &*& [1/2]theAddressFile.ElementaryFile(_, _, ?theAddressFileData, _, _, _) &*& theAddressFile != null &*& theAddressFileData != null &*& theAddressFileData.length == 117 &*& theAddressFile.getClass() == ElementaryFile.class &*&\n\t\t\t\t    [1/2]addressFileSignature |-> ?theAddressFileSignature &*& [1/2]theAddressFileSignature.ElementaryFile(_, _, ?theAddressFileSignatureData, _, _, _) &*& theAddressFileSignature != null &*& theAddressFileSignatureData != null &*& theAddressFileSignatureData.length == 128 &*& theAddressFileSignature.getClass() == ElementaryFile.class &*&\n\t\t\t\t    [1/2]photoFile |-> ?thePhotoFile &*& [1/2]thePhotoFile.ElementaryFile(_, _, _, _, _, _) &*& thePhotoFile != null &*& thePhotoFile.getClass() == ElementaryFile.class &*&\n\t\t\t\t    [1/2]caRoleIDFile |-> ?thecaRoleIDFile &*& [1/2]thecaRoleIDFile.ElementaryFile(_, _, ?theCaRoleIDFileData, _, _, _) &*& thecaRoleIDFile != null &*& theCaRoleIDFileData != null &*& theCaRoleIDFileData.length == 0x20 &*& thecaRoleIDFile.getClass() == ElementaryFile.class &*&\n\t\t\t\t    [1/2]dirFile |-> ?theDirFile &*& [1/2]theDirFile.ElementaryFile(_, _, ?theDirFileData, _, _, _) &*& theDirFile != null &*& theDirFileData != null &*& theDirFileData.length ==  0x25 &*& theDirFile.getClass() == ElementaryFile.class &*&\n\t\t\t\t    [1/2]tokenInfo |-> ?theTokenInfo &*& [1/2]theTokenInfo.ElementaryFile(_, _, ?theTokenInfoData, _, _, _) &*& theTokenInfo != null &*& theTokenInfoData != null &*& theTokenInfoData.length == 0x30 &*& theTokenInfo.getClass() == ElementaryFile.class &*&\n\t\t\t\t    [1/2]objectDirectoryFile |-> ?theObjectDirectoryFile &*& [1/2]theObjectDirectoryFile.ElementaryFile(_, _, ?theObjectDirectoryFileData, _, _, _) &*& theObjectDirectoryFile != null &*& theObjectDirectoryFileData != null &*& theObjectDirectoryFileData.length == 40 &*& theObjectDirectoryFile.getClass() == ElementaryFile.class &*&\n\t\t\t\t    [1/2]authenticationObjectDirectoryFile |-> ?theAuthenticationObjectDirectoryFile &*& [1/2]theAuthenticationObjectDirectoryFile.ElementaryFile(_, _, ?theAuthenticationObjectDirectoryFileData, _, _, _) &*& theAuthenticationObjectDirectoryFile != null &*& theAuthenticationObjectDirectoryFileData != null &*& theAuthenticationObjectDirectoryFileData.length == 0x40 &*&  theAuthenticationObjectDirectoryFile.getClass() == ElementaryFile.class &*&\n\t\t\t\t    [1/2]privateKeyDirectoryFile |-> ?thePrivateKeyDirectoryFile &*& [1/2]thePrivateKeyDirectoryFile.ElementaryFile(_, _, ?thePrivateKeyDirectoryFileData, _, _, _) &*& thePrivateKeyDirectoryFile != null &*& thePrivateKeyDirectoryFileData != null &*& thePrivateKeyDirectoryFileData.length == 0xB0 &*& thePrivateKeyDirectoryFile.getClass() == ElementaryFile.class &*&\n\t\t\t\t    [1/2]certificateDirectoryFile |-> ?theCertificateDirectoryFile &*& [1/2]theCertificateDirectoryFile.ElementaryFile(_, _, ?theCertificateDirectoryFileData, _, _, _) &*& theCertificateDirectoryFile != null &*& theCertificateDirectoryFileData != null &*& theCertificateDirectoryFileData.length == 0xB0 &*& theCertificateDirectoryFile.getClass() == ElementaryFile.class &*&\n\t\t\t\t    [1/2]belpicDirectory |-> ?theBelpicDirectory &*& [1/2]theBelpicDirectory.DedicatedFile(_, _, _, ?belpicSibs, _) &*& theBelpicDirectory != null &*& theBelpicDirectory.getClass() == DedicatedFile.class &*&\n\t\t\t\t    [1/2]idDirectory |-> ?theIdDirectory &*& [1/2]theIdDirectory.DedicatedFile(_, _, _, ?idSibs, _) &*& theIdDirectory != null &*& theIdDirectory.getClass() == DedicatedFile.class &*&\n\t\t\t\t    [1/2]caCertificate |-> ?theCaCertificate &*& [1/2]theCaCertificate.ElementaryFile(_, _, _, _, _, _) &*& theCaCertificate.getClass() == ElementaryFile.class &*&\n\t\t\t\t    [1/2]selectedFile |-> ?theSelectedFile &*& theSelectedFile != null &*&\n\t\t\t\t    masterSibs == cons<File>(theDirFile, cons(theBelpicDirectory, cons(theIdDirectory, nil))) &*&\n\t\t\t\t    [1/2]rootCaCertificate |-> ?theRootCaCertificate &*& [1/2]theRootCaCertificate.ElementaryFile(_, _, _, _, _, _) &*& theRootCaCertificate.getClass() == ElementaryFile.class &*&\n\t\t\t\t    [1/2]rrnCertificate |-> ?theRrnCertificate &*& [1/2]theRrnCertificate.ElementaryFile(_, _, _, _, _, _) &*& theRrnCertificate.getClass() == ElementaryFile.class &*&\n\t\t\t\t    [1/2]authenticationCertificate |-> ?theAuthenticationCertificate &*& [1/2]theAuthenticationCertificate.ElementaryFile(_, _, _, _, _, _) &*& theAuthenticationCertificate.getClass() == ElementaryFile.class &*&\n\t\t\t\t    [1/2]nonRepudiationCertificate |-> ?theNonRepudiationCertificate &*& [1/2]theNonRepudiationCertificate.ElementaryFile(_, _, _, _, _, _) &*& theNonRepudiationCertificate.getClass() == ElementaryFile.class &*&\n\t\t\t\t    [1/2]preferencesFile |-> ?thePreferencesFile &*& thePreferencesFile != theCaCertificate &*& thePreferencesFile != theRrnCertificate &*& [1/2]thePreferencesFile.ElementaryFile(_, _, ?thePreferencesFileData, _, _, _) &*& thePreferencesFile != null &*& thePreferencesFileData != null &*& thePreferencesFileData.length == 100 &*& thePreferencesFile.getClass() == ElementaryFile.class &*&\n\t\t\t\t    belpicSibs == cons<File>(theTokenInfo, cons(theObjectDirectoryFile, cons(theAuthenticationObjectDirectoryFile, cons(thePrivateKeyDirectoryFile, cons(theCertificateDirectoryFile, cons(theCaCertificate, cons(theRrnCertificate, cons(theRootCaCertificate, cons(theAuthenticationCertificate, cons(theNonRepudiationCertificate, nil)))))))))) &*&\n\t\t\t\t    idSibs == cons<File>(theIdentityFile, cons(theIdentityFileSignature, cons(theAddressFile, cons(theAddressFileSignature, cons(thecaRoleIDFile, cons(thePreferencesFile, cons(thePhotoFile, nil))))))) &*&\n\t\t\t\t    [1/2]selected_file_types(theSelectedFile, theMasterFile, theBelpicDirectory, theIdDirectory, theIdentityFile, theIdentityFileSignature, theAddressFile, theAddressFileSignature, thePhotoFile, thecaRoleIDFile, theDirFile, theTokenInfo, theObjectDirectoryFile, theAuthenticationObjectDirectoryFile, thePrivateKeyDirectoryFile, theCaCertificate, theCertificateDirectoryFile, theRrnCertificate, theRootCaCertificate, theAuthenticationCertificate, theNonRepudiationCertificate, thePreferencesFile, _) &*&\n\t\t\t    \t    (theSelectedFile.getClass() == ElementaryFile.class || theSelectedFile.getClass() == MasterFile.class || theSelectedFile.getClass() == DedicatedFile.class) &*&\n\t\t\t      \t    /*internalAuthenticateCounter |-> ?theInternalAuthenticateCounter &*&*/\n\t\t\t\t    [1/2]signatureAlgorithm |-> ?theSignatureAlgorithm &*&\n\t\t\t\t    [1/2]nonRepKeyPair |-> ?theNonRepKeyPair &*& theNonRepKeyPair != null &*&\n\t\t\t\t    [1/2]authKeyPair |-> ?theAuthKeyPair &*& theAuthKeyPair != null &*&\n\t\t\t\t    [1/2]basicKeyPair |-> ?theBasicKeyPair &*&\n\t\t\t\t    [1/2]PKCS1_HEADER |-> ?thePKCS1HEADER &*& thePKCS1HEADER != null &*& [1/2]array_slice(thePKCS1HEADER, 0, thePKCS1HEADER.length, _) &*& thePKCS1HEADER.length == 1 &*&\n\t\t\t\t    [1/2]PKCS1_SHA1_HEADER |-> ?thePKCS1SHA1HEADER &*& thePKCS1SHA1HEADER != null &*& [1/2]array_slice(thePKCS1SHA1HEADER, 0, thePKCS1SHA1HEADER.length, _) &*& thePKCS1SHA1HEADER.length == 16 &*&\n\t\t\t\t    [1/2]PKCS1_MD5_HEADER |-> ?thePKCS1MD5HEADER &*& thePKCS1MD5HEADER != null &*& [1/2]array_slice(thePKCS1MD5HEADER, 0, thePKCS1MD5HEADER.length, _) &*& thePKCS1MD5HEADER.length == 19 &*&\n\t\t\t\t    theDirFile != thePreferencesFile &*& theTokenInfo != thePreferencesFile &*& thePreferencesFile != theObjectDirectoryFile &*& thePreferencesFile != theAuthenticationObjectDirectoryFile &*& thePreferencesFile != thePrivateKeyDirectoryFile &*&\n\t\t\t\t    (f == null ? \n\t\t\t\t      true \n\t\t\t\t        : \n\t\t\t\t      selected_file_types(f, theMasterFile, theBelpicDirectory, theIdDirectory, theIdentityFile, theIdentityFileSignature, theAddressFile, theAddressFileSignature, thePhotoFile, thecaRoleIDFile, theDirFile, theTokenInfo, theObjectDirectoryFile, theAuthenticationObjectDirectoryFile, thePrivateKeyDirectoryFile, theCaCertificate, theCertificateDirectoryFile, theRrnCertificate, theRootCaCertificate, theAuthenticationCertificate, theNonRepudiationCertificate, thePreferencesFile, _) &*&\n\t\t\t\t      f.getClass() == ElementaryFile.class || f.getClass() == MasterFile.class || f.getClass() == DedicatedFile.class\t\t\t                 \n\t\t\t\t    ) &*&\n\t\t\t\t    (i == 0 ? \n\t\t\t\t      f == theMasterFile \n\t\t\t\t        :\n\t\t\t\t      (i <= 2 ?\n\t\t\t\t        f == null || f == theMasterFile || mem(f, masterSibs) \n\t\t\t\t          :\n\t\t\t\t        (i <= 4 ?\n\t\t\t\t          f == null || mem(f, masterSibs) || mem(f, belpicSibs) || mem(f, idSibs)\n\t\t\t\t        :\n\t\t\t\t          (i <= 6 ?\n\t\t\t\t            f == null || mem(f, belpicSibs) || mem(f, idSibs)\n\t\t\t\t              :\n\t\t\t\t            false\n\t\t\t\t          )\n\t\t\t\t        )\n\t\t\t\t      )\n\t\t\t\t    ); @*/\n\t\t{\n\t\t\tshort fid = Util.makeShort(buffer[(short) (ISO7816.OFFSET_CDATA + i)], buffer[(short) (ISO7816.OFFSET_CDATA + i + 1)]);\n\t\t\t// MF can be explicitely or implicitely in the path name\n\t\t\tif ((i == 0) && (fid == MF))\n\t\t\t\tf = masterFile;\n\t\t\telse {\n\t\t\t        \n\t\t\t\tif ((f instanceof ElementaryFile) || f == null)\n\t\t\t\t\tISOException.throwIt(ISO7816.SW_FILE_NOT_FOUND);\n\t\t\t\t//@ open selected_file_types(f, theMasterFile, theBelpicDirectory, theIdDirectory, theIdentityFile, theIdentityFileSignature, theAddressFile, theAddressFileSignature, thePhotoFile, thecaRoleIDFile, theDirFile, theTokenInfo, theObjectDirectoryFile, theAuthenticationObjectDirectoryFile, thePrivateKeyDirectoryFile, theCaCertificate, theCertificateDirectoryFile, theRrnCertificate, theRootCaCertificate, theAuthenticationCertificate, theNonRepudiationCertificate, thePreferencesFile, _);\n\t\t\t\t//@ File oldf = f;\n\t\t\t\t/*@ \n\t\t\t\tif(f == masterFile) \n\t\t\t\t{} else if (f == idDirectory) {} else {}\n\t\t\t\t@*/\n\t\t\t\t/*@\n\t\t\t\tif(f == masterFile) {\n\t\t\t\t  masterFile.castMasterToDedicated();\n\t\t  \t\t}\t  \t\t\n\t\t  \t\t@*/\n\t\t\t\tf = ((DedicatedFile) f).getSibling(fid);\n\t\t\t\t/*@ if(oldf == masterFile) {\n\t\t\t  \t      masterFile.castDedicatedToMaster();\n\t\t\t  \t      assert f == null || (f == idDirectory && f.getClass() == DedicatedFile.class) || (f == belpicDirectory && f.getClass() == DedicatedFile.class)|| (f == dirFile && f.getClass() == ElementaryFile.class);\n\t\t\t\t    } \n\t\t\t\t@*/\n\t\t\t\t/*@\n\t\t\t\t  if(f != null) {\n\t\t\t\t    close selected_file_types(f, theMasterFile, theBelpicDirectory, theIdDirectory, theIdentityFile, theIdentityFileSignature, theAddressFile, theAddressFileSignature, thePhotoFile, thecaRoleIDFile, theDirFile, theTokenInfo, theObjectDirectoryFile, theAuthenticationObjectDirectoryFile, thePrivateKeyDirectoryFile, theCaCertificate, theCertificateDirectoryFile, theRrnCertificate, theRootCaCertificate, theAuthenticationCertificate, theNonRepudiationCertificate, thePreferencesFile, _);\n\t\t\t\t  }\n\t\t\t\t@*/\n\t\t\t\t\n\t\t\t}\n\t\t}\n",
        "methodStartingLine": 1401,
        "methodEndingLine": 1524,
        "jml": "//@ requires current_applet(this) &*& [1/2]valid() &*& APDU(apdu, buffer) &*& array_slice(buffer, 0, buffer.length, _);\n//@ ensures current_applet(this) &*& [1/2]valid() &*& APDU(apdu, buffer) &*& array_slice(buffer, 0, buffer.length, _);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/NewEidCard/EidCard-with-auto.java",
        "code": "\tpublic boolean select() \n            \n            \n\t{\n\t\t// Clear data and set default selectedFile to masterFile\n\t\tclear();\n\t\treturn true;\n\t}\n",
        "methodStartingLine": 1651,
        "methodEndingLine": 1658,
        "jml": "//@ requires current_applet(this) &*& [1/2]valid();\n//@ ensures current_applet(this) &*& [1/2]valid();"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/NewEidCard/EidCard-with-auto.java",
        "code": "\tpublic void deselect() \n    \t    \n    \t    \n\t{\n\t\tclear();\n\t\treturn;\n\t}\n",
        "methodStartingLine": 1662,
        "methodEndingLine": 1668,
        "jml": "//@ requires current_applet(this) &*& [1/2]valid();\n//@ ensures current_applet(this) &*& [1/2]valid();"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/NewEidCard/EidCard-with-auto.java",
        "code": "\tpublic void process(APDU apdu) \n            \n            \n\t{\n\t\tbyte[] buffer = apdu.getBuffer();\n\t\t/*\n\t\t * - non repudiation signatures can only be generated if the previous\n\t\t * APDU verified the cardholder PIN - administrator PIN change is only\n\t\t * possible if the previous APDU verified the reset PIN\n\t\t * \n\t\t * so only the \"generate signature\" and PIN Change APDU needs to check\n\t\t * the previous APDU type; in all other cases overwrite the previous\n\t\t * APDU type, because this information is not needed; we do this as\n\t\t * early as possible to cope with exceptions being thrown during\n\t\t * processing of APDU\n\t\t * \n\t\t * IMPORTANT : we have to set the previous APDU type in the processing\n\t\t * of a PIN Verify APDU (because the type gets overwritten to a wrong\n\t\t * value) and at the end of a \"generate signature\" and PIN Change APDU\n\t\t */\n\t\tJCSystem.beginTransaction();\n\t\t////@ open valid(); // auto\n\t\tif ((buffer[ISO7816.OFFSET_INS] != INS_GENERATE_SIGNATURE) && (buffer[ISO7816.OFFSET_INS] != INS_CHANGE_PIN) && (buffer[ISO7816.OFFSET_INS] != INS_GET_KEY))\n\t\t\tsetPreviousApduType(OTHER);\n\t\t////@ close valid(); // auto\n\t\tJCSystem.commitTransaction();\n\t\t// return if the APDU is the applet SELECT command\n\t\tif (selectingApplet()) {\n\t\t\treturn;\n\t\t}\n\t\tif (buffer[ISO7816.OFFSET_CLA] == EIDCARD_CLA_1)\n\t\t\t// check the INS byte to decide which service method to call\n\t\t\tswitch (buffer[ISO7816.OFFSET_INS]) {\n\t\t\t// case INS_CHANGE_ATR :\n\t\t\t// changeATR(apdu);\n\t\t\t// break;\n\t\t\tcase INS_VERIFY_PIN:\n\t\t\t\tverifyPin(apdu, buffer);\n\t\t\t\tbreak;\n\t\t\tcase INS_CHANGE_PIN:\n\t\t\t\tchangePin(apdu, buffer);\n\t\t\t\tbreak;\n\t\t\tcase INS_UNBLOCK:\n\t\t\t\tunblock(apdu, buffer);\n\t\t\t\tbreak;\n\t\t\tcase INS_GET_CHALLENGE:\n\t\t\t\tgetChallenge(apdu, buffer);\n\t\t\t\tbreak;\n\t\t\tcase INS_PREPARE_SIGNATURE:\n\t\t\t\tprepareForSignature(apdu, buffer);\n\t\t\t\tbreak;\n\t\t\tcase INS_GENERATE_SIGNATURE:\n\t\t\t\tgenerateSignature(apdu, buffer);\n\t\t\t\tbreak;\n\t\t\tcase INS_GENERATE_KEYPAIR:\n\t\t\t\tgenerateKeyPair(apdu);\n\t\t\t\tbreak;\n\t\t\tcase INS_INTERNAL_AUTHENTICATE:\n\t\t\t\tinternalAuthenticate(apdu, buffer);\n\t\t\t\tbreak;\n\t\t\tcase INS_GET_RESPONSE:\n\t\t\t\t// if only T=0 supported: remove\n\t\t\t\t// not possible in case of T=0 protocol\n\t\t\t\tif (APDU.getProtocol() == APDU.PROTOCOL_T1)\n\t\t\t\t\tgetResponse(apdu, buffer);\n\t\t\t\telse\n\t\t\t\t\tISOException.throwIt(ISO7816.SW_INS_NOT_SUPPORTED);\n\t\t\t\tbreak;\n\t\t\tcase INS_SELECT_FILE:\n\t\t\t\tselectFile(apdu, buffer);\n\t\t\t\tbreak;\n\t\t\tcase INS_ACTIVATE_FILE:\n\t\t\t\tactivateFile(apdu, buffer);\n\t\t\t\tbreak;\n\t\t\tcase INS_DEACTIVATE_FILE:\n\t\t\t\tdeactivateFile(apdu, buffer);\n\t\t\t\tbreak;\n\t\t\tcase INS_READ_BINARY:\n\t\t\t\treadBinary(apdu, buffer);\n\t\t\t\tbreak;\n\t\t\tcase INS_UPDATE_BINARY:\n\t\t\t\tupdateBinary(apdu, buffer);\n\t\t\t\tbreak;\n\t\t\tcase INS_ERASE_BINARY:\n\t\t\t\teraseBinary(apdu, buffer);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tISOException.throwIt(ISO7816.SW_INS_NOT_SUPPORTED);\n\t\t\t\tbreak; //~allow_dead_code\n\t\t\t}\n\t\telse if (buffer[ISO7816.OFFSET_CLA] == EIDCARD_CLA_2)\n\t\t\tswitch (buffer[ISO7816.OFFSET_INS]) {\n\t\t\tcase INS_GET_KEY:\n\t\t\t\tgetPublicKey(apdu);\n\t\t\t\tbreak;\n\t\t\tcase INS_PUT_KEY:\n\t\t\t\tputPublicKey(apdu, buffer);\n\t\t\t\tbreak;\n\t\t\tcase INS_ERASE_KEY:\n\t\t\t\teraseKey(apdu, buffer);\n\t\t\t\tbreak;\n\t\t\tcase INS_ACTIVATE_KEY:\n\t\t\t\tactivateKey(apdu, buffer);\n\t\t\t\tbreak;\n\t\t\tcase INS_DEACTIVATE_KEY:\n\t\t\t\tdeactivateKey(apdu, buffer);\n\t\t\t\tbreak;\n\t\t\tcase INS_GET_CARD_DATA:\n\t\t\t\tgetCardData(apdu, buffer);\n\t\t\t\tbreak;\n\t\t\tcase INS_LOG_OFF:\n\t\t\t\tlogOff(apdu, buffer);\n\t\t\t\tbreak;\n\t\t\t// case INS_BLOCK :\n\t\t\t// blockCard(apdu, buffer);\n\t\t\t// break;\n\t\t\t}\n\t\telse\n\t\t\tISOException.throwIt(ISO7816.SW_CLA_NOT_SUPPORTED);\n\t}\n",
        "methodStartingLine": 1672,
        "methodEndingLine": 1791,
        "jml": "//@ requires current_applet(this) &*& [1/2]valid() &*& APDU(apdu, ?buffer_) &*& array_slice(buffer_, 0, buffer_.length, _);\n//@ ensures current_applet(this) &*& [1/2]valid() &*& APDU(apdu, buffer_) &*& array_slice(buffer_, 0, buffer_.length, _);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/NewEidCard/EidCard-with-auto.java",
        "code": "\tprivate void verifyPin(APDU apdu, byte[] buffer) \n  \t    \n      \t    \n\t{\n\t\t\n\t\t// check P1\n\t\tif (buffer[ISO7816.OFFSET_P1] != (byte) 0x00)\n\t\t\tISOException.throwIt(ISO7816.SW_INCORRECT_P1P2);\n\t\t// receive the PIN data for validation\n\t\tapdu.setIncomingAndReceive();\n\t\t// check PIN depending on value of P2\n\t\tJCSystem.beginTransaction();\n\t\t////@ open valid(); // auto\n\t\tswitch (buffer[ISO7816.OFFSET_P2]) {\n\t\tcase CARDHOLDER_PIN:\n\t\t\t// overwrite previous APDU type\n\t\t\tsetPreviousApduType(VERIFY_CARDHOLDER_PIN);\n\t\t\t// check the cardholder PIN\n\t\t\tcheckPin(cardholderPin, buffer);\n\t\t\tbreak;\n\t\tcase ACTIVATE_PIN:\n\t\t\t// check the activation PIN\n\t\t\tcheckPin(activationPin, buffer);\n\t\t\t// if the activation PIN was entered correctly\n\t\t\tif (GPSystem.getCardContentState() == GPSystem.APPLICATION_SELECTABLE)\n\t\t\t\t// set the applet status to personalized\n\t\t\t\tGPSystem.setCardContentState(GPSystem.CARD_SECURED);\n\t\t\t// reset internal authenticate counter\n\t\t\t//internalAuthenticateCounter = 5000;\n\t\t\tbreak;\n\t\tcase RESET_PIN:\n\t\t\t// overwrite previous APDU type\n\t\t\tsetPreviousApduType(VERIFY_RESET_PIN);\n\t\t\t// check the reset PIN\n\t\t\tcheckPin(resetPin, buffer);\n\t\t\tbreak;\n\t\tcase UNBLOCK_PIN:\n\t\t\t// check the unblock PIN: after this, the pin will be 'activated'\n\t\t\tcheckPin(unblockPin, buffer);\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tISOException.throwIt(SW_REFERENCE_DATA_NOT_FOUND);\n\t\t}\n\t\t////@ close valid(); // auto\n\t\tJCSystem.commitTransaction();\n\t}\n",
        "methodStartingLine": 1795,
        "methodEndingLine": 1840,
        "jml": "//@ requires current_applet(this) &*& [1/2]valid() &*& APDU(apdu, buffer) &*& array_slice(buffer, 0, buffer.length, _);\n//@ ensures current_applet(this) &*& [1/2]valid() &*& APDU(apdu, buffer) &*& array_slice(buffer, 0, buffer.length, _);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/NewEidCard/EidCard-with-auto.java",
        "code": "\tprivate void checkPin(OwnerPIN pin, byte[] buffer) \n  \t    \n      \t    \n\t{\n\t\tif (pin.check(buffer, OFFSET_PIN_HEADER, PIN_SIZE) == true)\n\t\t\treturn;\n\t\tshort tries = pin.getTriesRemaining();\n\t\t// the eID card throws this exception, SW=0x63C0 would make more sense\n\t\tif (tries == 0) {\n\t\t\t// if the cardholder PIN is no longer valid (too many tries)\n\t\t\tif (pin == cardholderPin)\n\t\t\t\t// set the applet status to blocked\n\t\t\t\tGPSystem.setCardContentState(GPSystem.CARD_LOCKED);\n\t\t\tISOException.throwIt(ISO7816.SW_FILE_INVALID);\n\t\t}\n\t\t/*\n\t\t * create the correct exception the status word is of the form 0x63Cx\n\t\t * with x the number of tries left\n\t\t */\n\t\tshort sw = (short) (SW_WRONG_PIN_0_TRIES_LEFT | tries);\n\t\tISOException.throwIt(sw);\n\t}\n",
        "methodStartingLine": 1844,
        "methodEndingLine": 1865,
        "jml": "//@ requires [1/2]cardholderPin |-> ?theCardholderPin &*& [1/2]OwnerPIN(pin, _, _) &*& pin != null &*& buffer != null &*& array_slice(buffer, 0, buffer.length, _) &*& buffer.length >= 13;\n//@ ensures [1/2]cardholderPin |-> theCardholderPin &*& [1/2]OwnerPIN(pin, _, _) &*& pin != null &*& array_slice(buffer, 0, buffer.length, _) &*& buffer != null &*& buffer.length >= 13;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/NewEidCard/EidCard-with-auto.java",
        "code": "\tprivate void changePin(APDU apdu, byte[] buffer) \n  \t    \n      \t    \n\t{\n\t\t/*\n\t\t * IMPORTANT: in all other APDUs the previous APDU type gets overwritten\n\t\t * in process() function; this is not the case here because the\n\t\t * information is needed when processing to verify the security\n\t\t * condition for administrator PIN change\n\t\t * \n\t\t * the previous APDU type has to be overwritten in every possible exit\n\t\t * path out of this function\n\t\t */\n\t\tJCSystem.beginTransaction();\n\t\t////@ open valid(); // auto\n\t\t// check P2\n\t\tif (buffer[ISO7816.OFFSET_P2] != (byte) 0x01) {\n\t\t\tsetPreviousApduType(OTHER);\n\t\t\tISOException.throwIt(ISO7816.SW_INCORRECT_P1P2);\n\t\t}\n\t\t// P1 determines whether it is user or administrator PIN change\n\t\tswitch (buffer[ISO7816.OFFSET_P1]) {\n\t\tcase (byte) 0x00:\n\t\t\tsetPreviousApduType(OTHER);\n\t\t\t////@ close valid(); // auto\n\t\t\tJCSystem.commitTransaction();\n\t\t\tuserChangePin(apdu, buffer);\n\t\t\tbreak;\n\t\tcase (byte) 0x01:\n\t\t\t// //@ close valid(); // auto\n\t\t\tJCSystem.commitTransaction();\n\t\t\tadministratorChangePin(apdu, buffer);\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tsetPreviousApduType(OTHER);\n\t\t\t// //@ close valid(); // auto\n\t\t\tJCSystem.commitTransaction();\n\t\t\tISOException.throwIt(ISO7816.SW_INCORRECT_P1P2);\n\t\t\tbreak; //~allow_dead_code\n\t\t}\n\t\t\n\t}\n",
        "methodStartingLine": 1869,
        "methodEndingLine": 1910,
        "jml": "//@ requires current_applet(this) &*& [1/2]valid() &*& APDU(apdu, buffer) &*& array_slice(buffer, 0, buffer.length, _);\n//@ ensures current_applet(this) &*& [1/2]valid() &*& APDU(apdu, buffer) &*& array_slice(buffer, 0, buffer.length, _);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/NewEidCard/EidCard-with-auto.java",
        "code": "\tprivate void userChangePin(APDU apdu, byte[] buffer) \n  \t    \n      \t    \n\t{\n\t\t////@ open [1/2]valid(); // auto\n\t\t// receive the PIN data\n\t\tshort byteRead = apdu.setIncomingAndReceive();\n\t\t// check Lc\n\t\tshort lc = (short) (buffer[ISO7816.OFFSET_LC] & 0x00FF);\n\t\tif ((lc != 16) || (byteRead != 16))\n\t\t\tISOException.throwIt(ISO7816.SW_WRONG_LENGTH);\n\t\t// first check old cardholder PIN\n\t\tcheckPin(cardholderPin, buffer);\n\t\t// do some checks on the new PIN header and data\n\t\tif (!isNewPinFormattedCorrectly(buffer, OFFSET_SECOND_PIN_HEADER))\n\t\t\tISOException.throwIt(ISO7816.SW_WRONG_DATA);\n\t\t// include header as well in PIN object\n\t\tcardholderPin.update(buffer, OFFSET_SECOND_PIN_HEADER, PIN_SIZE);\n\t\t// validate cardholder PIN immediately after change PIN\n\t\t// so that cardholder access rights are immediately granted\n\t\tcardholderPin.check(buffer, OFFSET_SECOND_PIN_HEADER, PIN_SIZE);\n\t\t////@ close [1/2]valid(); // auto\n\t}\n",
        "methodStartingLine": 1914,
        "methodEndingLine": 1936,
        "jml": "//@ requires [1/2]valid() &*& APDU(apdu, buffer) &*& array_slice(buffer, 0, buffer.length, _) &*& buffer.length > OFFSET_SECOND_PIN_HEADER + PIN_SIZE;\n//@ ensures [1/2]valid() &*& APDU(apdu, buffer) &*& array_slice(buffer, 0, buffer.length, _) &*& buffer.length > OFFSET_SECOND_PIN_HEADER + PIN_SIZE;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/NewEidCard/EidCard-with-auto.java",
        "code": "\tprivate void administratorChangePin(APDU apdu, byte[] buffer) \n  \t    \n      \t    \n\t{\n\t\t// The previous getChallenge() should ask for at least the length of the\n\t\t// new administrator pin. Otherwise exception is thrown\n\t\t/*\n\t\t * IMPORTANT: the previous APDU type has to be overwritten in every\n\t\t * possible exit path out of this function; therefore we check the\n\t\t * security conditions as early as possible\n\t\t */\n\t\tJCSystem.beginTransaction();\n\t\t////@ open valid(); // auto\n\t\t// previous APDU must have checked the reset PIN\n\t\tif ((!resetPin.isValidated()) || (getPreviousApduType() != VERIFY_RESET_PIN)) {\n\t\t\tsetPreviousApduType(OTHER);\n\t\t\tISOException.throwIt(ISO7816.SW_SECURITY_STATUS_NOT_SATISFIED);\n\t\t}\n\t\t// overwrite previous ADPU type as soon as possible\n\t\tsetPreviousApduType(OTHER);\n\t\t// receive the PIN data\n\t\tshort byteRead = apdu.setIncomingAndReceive();\n\t\t// check Lc\n\t\tshort lc = (short) (buffer[ISO7816.OFFSET_LC] & 0x00FF);\n\t\tif ((lc != 8) || (byteRead != 8))\n\t\t\tISOException.throwIt(ISO7816.SW_WRONG_LENGTH);\n\t\t// do some checks on the new PIN header and data\n\t\tif (!isNewPinFormattedCorrectly(buffer, OFFSET_PIN_HEADER))\n\t\t\tISOException.throwIt(ISO7816.SW_WRONG_DATA);\n\t\t// compare the new PIN with the last generated random challenge\n\t\tif (!isNewPinCorrectValue(buffer))\n\t\t\tISOException.throwIt(ISO7816.SW_WRONG_DATA);\n\t\t// include header as well in PIN object\n\t\tcardholderPin.update(buffer, OFFSET_PIN_HEADER, PIN_SIZE);\n\t\t////@ close valid(); // auto\n\t\tJCSystem.commitTransaction();\n\t}\n",
        "methodStartingLine": 1940,
        "methodEndingLine": 1976,
        "jml": "//@ requires current_applet(this) &*& [1/2]valid() &*& APDU(apdu, buffer) &*& array_slice(buffer, 0, buffer.length, _);\n//@ ensures current_applet(this) &*& [1/2]valid() &*& APDU(apdu, buffer) &*& array_slice(buffer, 0, buffer.length, _);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/NewEidCard/EidCard-with-auto.java",
        "code": "\tprivate boolean isNewPinFormattedCorrectly(byte[] buffer, byte offset) \n  \t    \n      \t    \n\t{\n\t\t// 1st nibble of new PIN header should be 2\n\t\tif ((buffer[offset] >> 4) != 2)\n\t\t\treturn false;\n\t\t// 2nd nibble of new PIN header is the length (in digits)\n\t\t//@ and_limits(buffer[offset], 0x0F, nat_of_pos(p1(p1(p1_))));\n\t\tbyte pinLength = (byte) (buffer[offset] & 0x0F);\n\t\t// the new PIN should be between 4 and 12 digits\n\t\tif (pinLength < 4 || pinLength > 12)\n\t\t\treturn false;\n\t\t// divide PIN length by 2 to get the length in bytes\n\t\t//@ shr_limits(pinLength, 1, nat_of_pos(p1(p1(p1_))));\n\t\tbyte pinLengthInBytes = (byte) (pinLength >> 1);\n\t\t\n\t\t// check if PIN length is odd\n\t\tif ((pinLength & (byte) 0x01) == (byte) 0x01)\n\t\t\tpinLengthInBytes++;\n\t\t// check if PIN data is padded with 0xFF\n\t\tbyte i = (byte) (offset + PIN_SIZE - 1);\n\t\tfor (; i > offset + pinLengthInBytes; i--) \n\t\t\t/*@ invariant array_slice(buffer, 0, buffer.length, _) &*& i >= offset + pinLengthInBytes\n\t\t\t\t&*& i <= offset + PIN_SIZE - 1;\n\t\t\t@*/\n\t\t{\n\t\t\tif (buffer[i] != (byte) 0xFF)\n\t\t\t\treturn false;\n\t\t}\n\t\t// if PIN length is odd, check if last PIN data nibble is F\n\t\tif ((pinLength & (byte) 0x01) == (byte) 0x01) {\n\t\t\tif (/*@truncating@*/ (byte) (buffer[i] << 4) != (byte) 0xF0)\n\t\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n",
        "methodStartingLine": 1982,
        "methodEndingLine": 2018,
        "jml": "//@ requires buffer != null &*& array_slice(buffer, 0, buffer.length, _) &*& offset >= 0 &*& offset < buffer.length - PIN_SIZE &*& offset + PIN_SIZE <= Byte.MAX_VALUE;\n//@ ensures array_slice(buffer, 0, buffer.length, _);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/NewEidCard/EidCard-with-auto.java",
        "code": "\tprivate boolean isNewPinCorrectValue(byte[] buffer) \n  \t    /*@ requires buffer != null &*& array_slice(buffer, 0, buffer.length, _) &*& buffer.length >= OFFSET_PIN_DATA + 8\n  \t    \t  &*& randomBuffer |-> ?theRandomBuffer &*& theRandomBuffer != null &*& array_slice(theRandomBuffer, 0, theRandomBuffer.length, _) &*& theRandomBuffer.length == 256;\n  \t    @*/\n      \t    \n\t{\n\t\t// 2nd nibble of the PIN header is the length (in digits)\n\t\tint tmp = buffer[OFFSET_PIN_HEADER];\n\t\tif(tmp < 0) { // BUG\n\t\t  return false;\n\t\t}\n\t\tbyte pinLength = (byte) (buffer[OFFSET_PIN_HEADER] & 0x0F);\n\t\t// check if PIN length is odd\n\t\tbyte oldLength = (byte) (pinLength & 0x01);\n\t\t// divide PIN length by 2 to get the length in bytes\n\t\tbyte pinLengthInBytes = (byte) (pinLength >> 1);\n\t\t//@ assert 0 <= pinLengthInBytes && pinLengthInBytes < 8;\n\t\tbyte i;\n\t\tfor (i = 0; i < pinLengthInBytes; i++) \n\t\t\t/*@ invariant array_slice(buffer, 0, buffer.length, _) &*& i >= 0 &*& i <= pinLengthInBytes \n\t\t\t       &*& randomBuffer |-> ?theRandomBuffer2 &*& theRandomBuffer == theRandomBuffer2 &*& theRandomBuffer2 != null &*& array_slice(theRandomBuffer2, 0, theRandomBuffer2.length, _) &*& theRandomBuffer2.length >= pinLengthInBytes;\n\t\t\t@*/\n\t\t{\n\t\t\tif (buffer[OFFSET_PIN_DATA + i] != (randomBuffer[i] & 0x77))\n\t\t\t\treturn false;\n\t\t}\n\t\tif (oldLength == (byte) 0x01) {\n\t\t\tif ((buffer[OFFSET_PIN_DATA + pinLengthInBytes] >> 4) != ((randomBuffer[i] & 0x7F) >> 4))\n\t\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n",
        "methodStartingLine": 2022,
        "methodEndingLine": 2053,
        "jml": "//@ ensures array_slice(buffer, 0, buffer.length, _) &*& randomBuffer |-> theRandomBuffer &*& array_slice(theRandomBuffer, 0, theRandomBuffer.length, _);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/NewEidCard/EidCard-with-auto.java",
        "code": "\tprivate void logOff(APDU apdu, byte[] buffer) \n  \t    \n      \t    \n\t{\n\t\t// check P1 and P2\n\t\tif (buffer[ISO7816.OFFSET_P1] != (byte) 0x00 || buffer[ISO7816.OFFSET_P2] != (byte) 0x00)\n\t\t\tISOException.throwIt(ISO7816.SW_INCORRECT_P1P2);\n\t\t// remove previous access conditions:\n\t\tJCSystem.beginTransaction();\n\t\t////@ open valid(); // auto\n\t\tsetPreviousApduType(OTHER);\n\t\tsetSignatureType(NO_SIGNATURE);\n\t\tcardholderPin.reset();\n\t\tresetPin.reset();\n\t\tunblockPin.reset();\n\t\tactivationPin.reset();\n\t\t////@ close valid(); // auto\n\t\tJCSystem.commitTransaction();\n\t}\n",
        "methodStartingLine": 2057,
        "methodEndingLine": 2075,
        "jml": "//@ requires current_applet(this) &*& [1/2]valid() &*& APDU(apdu, buffer) &*& array_slice(buffer, 0, buffer.length, _);\n//@ ensures current_applet(this) &*& [1/2]valid() &*& APDU(apdu, buffer) &*& array_slice(buffer, 0, buffer.length, _);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/NewEidCard/EidCard-with-auto.java",
        "code": "\tprivate void unblock(APDU apdu, byte[] buffer) \n  \t    \n      \t    \n\t{\n\t\t// check P1 and P2\n\t\tif (buffer[ISO7816.OFFSET_P1] != (byte) 0x00 || buffer[ISO7816.OFFSET_P2] != (byte) 0x01)\n\t\t\tISOException.throwIt(ISO7816.SW_INCORRECT_P1P2);\n\t\t// receive the PUK data for validation\n\t\tapdu.setIncomingAndReceive();\n\t\t// check PUK\n\t\t////@ open valid(); // auto\n\t\tcheckPin(unblockPin, buffer);\n\t\t// if PUK is correct, then unblock cardholder PINs\n\t\tcardholderPin.resetAndUnblock();\n\t\t// set the applet status back to personalized\n\t\tGPSystem.setCardContentState(GPSystem.CARD_SECURED);\n\t\t////@ close [1/2]valid(); // auto\n\t}\n",
        "methodStartingLine": 2079,
        "methodEndingLine": 2096,
        "jml": "//@ requires [1/2]valid() &*& APDU(apdu, buffer) &*& array_slice(buffer, 0, buffer.length, _);\n//@ ensures [1/2]valid() &*& APDU(apdu, buffer) &*& array_slice(buffer, 0, buffer.length, _);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/NewEidCard/EidCard-with-auto.java",
        "code": "\tprivate void prepareForSignature(APDU apdu, byte[] buffer) \n  \t    \n      \t    \n\t{\n\t\t// check P1 and P2\n\t\tif (buffer[ISO7816.OFFSET_P1] != (byte) 0x41 || buffer[ISO7816.OFFSET_P2] != (byte) 0xB6)\n\t\t\tISOException.throwIt(ISO7816.SW_WRONG_P1P2);\n\t\t// receive the data to see which kind of signature\n\t\tshort byteRead = apdu.setIncomingAndReceive();\n\t\t// check Lc\n\t\tshort lc = (short) (buffer[ISO7816.OFFSET_LC] & 0x00FF);\n\t\tif ((lc != 5) || (byteRead != 5))\n\t\t\tISOException.throwIt(ISO7816.SW_WRONG_LENGTH);\n\t\t// the first 2 bytes of the data part should be 0x04 0x80\n\t\t// the fourth byte should be 0x84\n\t\tif ((buffer[ISO7816.OFFSET_CDATA] != (byte) 0x04) || (buffer[ISO7816.OFFSET_CDATA + 1] != (byte) 0x80) || (buffer[ISO7816.OFFSET_CDATA + 3] != (byte) 0x84))\n\t\t\tISOException.throwIt(ISO7816.SW_WRONG_DATA);\n\t\t// initialize signature object depending on hash function type\n\t\t\n\t\tJCSystem.beginTransaction();\n\t\t////@ open valid(); // auto\n\t\tswitch (buffer[ISO7816.OFFSET_CDATA + 2]) {\n\t\tcase ALG_SHA1_PKCS1:\n\t\t\tsignatureAlgorithm = ALG_SHA1_PKCS1;\n\t\t\tbreak;\n\t\tcase ALG_MD5_PKCS1:\n\t\t\tsignatureAlgorithm = ALG_MD5_PKCS1;\n\t\t\tbreak;\n\t\tcase ALG_PKCS1:\n\t\t\tsignatureAlgorithm = ALG_PKCS1;\n\t\t\tbreak;\n\t\tdefault: // algorithm not supported (SW=9484)\n\t\t\tISOException.throwIt(SW_ALGORITHM_NOT_SUPPORTED);\n\t\t\tbreak; //~allow_dead_code\n\t\t}\n\t\t// signature type is determined by the the last byte\n\t\tswitch (buffer[ISO7816.OFFSET_CDATA + 4]) {\n\t\tcase BASIC:\n\t\t\tsetSignatureType(BASIC);\n\t\t\tbreak;\n\t\tcase AUTHENTICATION: // use authentication private key\n\t\t\tsetSignatureType(AUTHENTICATION);\n\t\t\tbreak;\n\t\tcase NON_REPUDIATION: // use non repudiation private key\n\t\t\tsetSignatureType(NON_REPUDIATION);\n\t\t\tbreak;\n\t\tcase CA_ROLE:\n\t\t\tsetSignatureType(NO_SIGNATURE);\n\t\t\tISOException.throwIt(ISO7816.SW_WRONG_DATA);\n\t\t\tbreak; //~allow_dead_code\n\t\tdefault:\n\t\t\tsetSignatureType(NO_SIGNATURE);\n\t\t\tISOException.throwIt(SW_REFERENCE_DATA_NOT_FOUND);\n\t\t\tbreak; //~allow_dead_code\n\t\t}\n\t\t////@ close valid(); // auto\n\t\tJCSystem.commitTransaction();\n\t}\n",
        "methodStartingLine": 2100,
        "methodEndingLine": 2157,
        "jml": "//@ requires current_applet(this) &*& [1/2]valid() &*& APDU(apdu, buffer) &*& array_slice(buffer, 0, buffer.length, _);\n//@ ensures current_applet(this) &*& [1/2]valid() &*& APDU(apdu, buffer) &*& array_slice(buffer, 0, buffer.length, _);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/NewEidCard/EidCard-with-auto.java",
        "code": "\tprivate void generateSignature(APDU apdu, byte[] buffer) \n  \t    \n      \t    \n\t{\n\t\t/*\n\t\t * IMPORTANT: in all other APDUs the previous APDU type gets overwritten\n\t\t * in process() function; this is not the case here because the\n\t\t * information is needed when processing to verify the security\n\t\t * condition for non repudiation signature\n\t\t * \n\t\t * the previous APDU type has to be overwritten in every possible exit\n\t\t * path out of this function; therefore we check the security conditions\n\t\t * of the non repudiation signature as early as possible, but we have to\n\t\t * overwrite the previous APDU type in the 2 possible exceptions before\n\t\t */\n\t\tJCSystem.beginTransaction();\n\t\t////@ open valid(); // auto\n\t\t// check P1 and P2\t\t\n\t\tif (buffer[ISO7816.OFFSET_P1] != (byte) 0x9E || buffer[ISO7816.OFFSET_P2] != (byte) 0x9A) {\n\t\t\tsetPreviousApduType(OTHER);\n\t\t\tISOException.throwIt(ISO7816.SW_WRONG_P1P2);\n\t\t}\n\t\t// generate signature without prepare signature results:\n\t\t// \"conditions of use not satisfied\"\n\t\tif (getSignatureType() == NO_SIGNATURE) {\n\t\t\tsetPreviousApduType(OTHER);\n\t\t\tISOException.throwIt(ISO7816.SW_CONDITIONS_NOT_SATISFIED);\n\t\t}\n\t\t/*\n\t\t * verify authentication information throw\n\t\t * \"security condition not satisfied\" if something is wrong\n\t\t */\n\t\t// check if previous APDU did a cardholder PIN verification\n\t\tif ((getSignatureType() == NON_REPUDIATION) && (getPreviousApduType() != VERIFY_CARDHOLDER_PIN)) {\n\t\t\tsetPreviousApduType(OTHER);\n\t\t\tISOException.throwIt(ISO7816.SW_SECURITY_STATUS_NOT_SATISFIED);\n\t\t}\n\t\t// overwrite previous ADPU type as soon as possible\n\t\tsetPreviousApduType(OTHER);\n\n\t\t// it is impossible to generate basic signatures with this command\n\t\tif (getSignatureType() == BASIC)\n\t\t\tISOException.throwIt(ISO7816.SW_SECURITY_STATUS_NOT_SATISFIED);\n\t\t// check if cardholder PIN was entered correctly\n\t\tif (!cardholderPin.isValidated())\n\t\t\tISOException.throwIt(ISO7816.SW_SECURITY_STATUS_NOT_SATISFIED);\n\t\t\n\t\t////@ close valid(); // auto\n\t\tJCSystem.commitTransaction();\n\t\t////@ open [1/2]valid(); // auto\n\t\tswitch (signatureAlgorithm) {\n\t\tcase ALG_MD5_PKCS1:\n\t\t\t////@ close [1/2]valid(); // auto\n\t\t\tgeneratePkcs1Md5Signature(apdu, buffer);\n\t\t\t////@ open [1/2]valid(); // auto\n\t\t\tbreak;\n\t\tcase ALG_SHA1_PKCS1:\n\t\t\t////@ close [1/2]valid(); // auto\n\t\t\tgeneratePkcs1Sha1Signature(apdu, buffer);\n\t\t\t////@ open [1/2]valid(); // auto\n\t\t\tbreak;\n\t\tcase ALG_PKCS1:\n\t\t\t////@ close [1/2]valid(); // auto\n\t\t\tgeneratePkcs1Signature(apdu, buffer);\n\t\t\t////@ open [1/2]valid(); // auto\n\t\t\tbreak;\n\t\t}\n\t\t////@ close [1/2]valid(); // auto\n\t\t// if T=1, store signature in sigBuffer so that it can latter be sent\n\t\tif (APDU.getProtocol() == APDU.PROTOCOL_T1) {\n\t\t\tJCSystem.beginTransaction();\n\t\t\t//@ open valid(); // todo (???)\n\t\t\tUtil.arrayCopy(buffer, (short) 0, responseBuffer, (short) 0, (short) 128);\n\t\t\t////@ close valid(); // auto\n\t\t\tJCSystem.commitTransaction();\n\t\t\t\n\t\t\t// in case T=0 protocol, send the signature immediately in a\n\t\t\t// response APDU\n\t\t} else {\n\t\t\t// send first 128 bytes (= 1024 bit) of buffer\n\t\t\tapdu.setOutgoingAndSend((short) 0, (short) 128);\n\t\t}\n\t}\n",
        "methodStartingLine": 2161,
        "methodEndingLine": 2243,
        "jml": "//@ requires current_applet(this) &*& [1/2]valid() &*& APDU(apdu, buffer) &*& array_slice(buffer, 0, buffer.length, _);\n//@ ensures current_applet(this) &*& [1/2]valid() &*& APDU(apdu, buffer) &*& array_slice(buffer, 0, buffer.length, _);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/NewEidCard/EidCard-with-auto.java",
        "code": "\tprivate void generatePkcs1Md5Signature(APDU apdu, byte[] buffer) \n  \t    \n      \t    \n\t{\n\t\t// receive the data that needs to be signed\n\t\tshort byteRead = apdu.setIncomingAndReceive();\n\t\t// check Lc\n\t\tshort lc = (short) (buffer[ISO7816.OFFSET_LC] & 0x00FF);\n\t\tif ((lc != 16) || (byteRead != 16))\n\t\t\tISOException.throwIt(ISO7816.SW_WRONG_LENGTH);\n\t\t// use the correct key\n\t\t////@ open [1/2]valid(); // auto\n\t\t\n\t\tif (getSignatureType() == NON_REPUDIATION) {\t\t\n\t\t\tcipher.init((RSAPrivateCrtKey)nonRepKeyPair.getPrivate(), Cipher.MODE_ENCRYPT);\n\t\t}\n\t\tif (getSignatureType() == AUTHENTICATION) {\n\t\t\tcipher.init((RSAPrivateCrtKey)authKeyPair.getPrivate(), Cipher.MODE_ENCRYPT);\n\t\t}\n\t\t////@ close [1/2]valid(); // auto\n\t\tJCSystem.beginTransaction();\n\t\t\n\t\t////@ open valid(); // todo\n\t\t\n\t\t//@ transient_byte_arrays_mem(messageBuffer);\n\t\t//@ assert transient_byte_arrays(?as);\n\t\t//@ foreachp_remove(messageBuffer, as);\n\t\t////@ open transient_byte_array(messageBuffer); // auto\n\t\t\n\t\t// prepare the message buffer to the PKCS#1 (v1.5) structure\n\t\t////@ open [1/2]valid();\n\t\tpreparePkcs1ClearText(messageBuffer, ALG_MD5_PKCS1, lc);\n\t\t// copy the MD5 hash from the APDU to the message buffer\n\t\tUtil.arrayCopy(buffer, (short) (ISO7816.OFFSET_CDATA), messageBuffer, (short) (128 - lc), lc);\n\n\t\t//@ close transient_byte_array(messageBuffer);\n\t\t//@ foreachp_unremove(messageBuffer, as);\n\n\t\t////@ close valid(); // auto\n\t\tJCSystem.commitTransaction();\n\t\t////@ open [1/2]valid(); // auto\n\t\t// generate signature\n\t\t//@ transient_byte_arrays_mem(messageBuffer);\n\t\t//@ assert transient_byte_arrays(?as1);\n\t\t//@ foreachp_remove(messageBuffer, as1);\n\t\t//@ open transient_byte_array(messageBuffer);\n\t\tcipher.doFinal(messageBuffer, (short) 0, (short) 128, buffer, (short) 0);\n\t\t//@ close transient_byte_array(messageBuffer);\n\t\t//@ foreachp_unremove(messageBuffer, as1);\n\n\t\t////@ close [1/2]valid(); // auto\n\n\n\t}\n",
        "methodStartingLine": 2247,
        "methodEndingLine": 2300,
        "jml": "//@ requires current_applet(this) &*& [1/2]valid() &*& APDU(apdu, buffer) &*& array_slice(buffer, 0, buffer.length, _);\n//@ ensures current_applet(this) &*& [1/2]valid() &*& APDU(apdu, buffer) &*& array_slice(buffer, 0, buffer.length, _);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/NewEidCard/EidCard-with-auto.java",
        "code": "\tprivate void generatePkcs1Sha1Signature(APDU apdu, byte[] buffer) \n  \t    \n      \t    \n\t{\n\t\t// receive the data that needs to be signed\n\t\tshort byteRead = apdu.setIncomingAndReceive();\n\t\t// check Lc\n\t\t\n\t\t\n\t\tshort lc = (short) (buffer[ISO7816.OFFSET_LC] & 0x00FF);\n\t\tif ((lc != 20) || (byteRead != 20))\n\t\t\tISOException.throwIt(ISO7816.SW_WRONG_LENGTH);\n\t\t\n\t\t\n\t\t////@ open [1/2]valid(); // auto\n\t\t// use the correct key\n\t\tif (getSignatureType() == NON_REPUDIATION) {\n\t\t\t////cipher.init(nonRepPrivateKey, Cipher.MODE_ENCRYPT); // stond al in comments\n\t\t\tcipher.init((RSAPrivateCrtKey)nonRepKeyPair.getPrivate(), Cipher.MODE_ENCRYPT);\n\t\t}\n\t\t\n\t\tif (getSignatureType() == AUTHENTICATION) {\n\t\t\tcipher.init((RSAPrivateCrtKey)authKeyPair.getPrivate(), Cipher.MODE_ENCRYPT);\n\t\t}\n\t\t\n\t\t////@ close [1/2]valid(); // auto\n\t\tJCSystem.beginTransaction();\n\t\t////@ open valid(); // auto\n\t\t\n\t\t//@ transient_byte_arrays_mem(messageBuffer);\n\t\t//@ assert transient_byte_arrays(?as);\n\t\t//@ foreachp_remove(messageBuffer, as);\n\t\t////@ open transient_byte_array(messageBuffer); // auto\n\n\t\t// prepare the message buffer to the PKCS#1 (v1.5) structure\n\t\tpreparePkcs1ClearText(messageBuffer, ALG_SHA1_PKCS1, lc);\n\t\t// copy the SHA1 hash from the APDU to the message buffer\n\t\tUtil.arrayCopy(buffer, (short) (ISO7816.OFFSET_CDATA), messageBuffer, (short) (128 - lc), lc);\n\n\t\t//@ close transient_byte_array(messageBuffer);\n\t\t//@ foreachp_unremove(messageBuffer, as);\n\n\t\t////@ close valid(); // auto\n\t\tJCSystem.commitTransaction();\n\t\t////@ open [1/2]valid(); // auto\n\t\t// generate signature\n\t\t//@ transient_byte_arrays_mem(messageBuffer);\n\t\t//@ assert transient_byte_arrays(?as1);\n\t\t//@ foreachp_remove(messageBuffer, as1);\n\t\t////@ open transient_byte_array(messageBuffer); // auto\n\t\tcipher.doFinal(messageBuffer, (short) 0, (short) 128, buffer, (short) 0);\n\t\t//@ close transient_byte_array(messageBuffer); // todo\n\t\t//@ foreachp_unremove(messageBuffer, as1);\n\t\t////@ close [1/2]valid(); // auto\n\t}\n",
        "methodStartingLine": 2304,
        "methodEndingLine": 2358,
        "jml": "//@ requires current_applet(this) &*& [1/2]valid() &*& APDU(apdu, buffer) &*& array_slice(buffer, 0, buffer.length, _);\n//@ ensures current_applet(this) &*& [1/2]valid() &*& APDU(apdu, buffer) &*& array_slice(buffer, 0, buffer.length, _);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/NewEidCard/EidCard-with-auto.java",
        "code": "\tprivate void generatePkcs1Signature(APDU apdu, byte[] buffer) \n  \t    \n      \t    \n\t{\n\t\t// receive the data that needs to be signed\n\t\tshort byteRead = apdu.setIncomingAndReceive();\n\t\t// check Lc\n\t\t//@ positive_and(buffer[ISO7816.OFFSET_LC], 0x00FF);\n\t\tshort lc = (short) (buffer[ISO7816.OFFSET_LC] & 0x00FF);\n\t\tif ((lc > 117) || (byteRead > 117))\n\t\t\tISOException.throwIt(ISO7816.SW_WRONG_LENGTH);\n\t\t// use the correct key\n\t\t////@ open [1/2]valid(); // auto\n\t\tif (getSignatureType() == NON_REPUDIATION) {\n\t\t\tcipher.init((RSAPrivateCrtKey)nonRepKeyPair.getPrivate(), Cipher.MODE_ENCRYPT);\n\t\t}\n\t\tif (getSignatureType() == AUTHENTICATION) {\n\t\t\tcipher.init((RSAPrivateCrtKey)authKeyPair.getPrivate(), Cipher.MODE_ENCRYPT);\n\t\t}\n\t\t////@ close [1/2]valid(); // auto\n\t\tJCSystem.beginTransaction();\n\t\t////@ open valid(); // auto\n\n\t\t//@ transient_byte_arrays_mem(messageBuffer);\n\t\t//@ assert transient_byte_arrays(?as);\n\t\t//@ foreachp_remove(messageBuffer, as);\n\t\t//@ open transient_byte_array(messageBuffer);\n\n\t\t// prepare the message buffer to the PKCS#1 (v1.5) structure\n\t\tpreparePkcs1ClearText(messageBuffer, ALG_PKCS1, lc);\n\t\t// copy the clear text from the APDU to the message buffer\n\t\tUtil.arrayCopy(buffer, (short) (ISO7816.OFFSET_CDATA), messageBuffer, (short) (128 - lc), lc);\n\t\t//@ close transient_byte_array(messageBuffer);\n\t\t//@ foreachp_unremove(messageBuffer, as);\n\n\t\t////@ close valid(); // auto\n\t\tJCSystem.commitTransaction();\n\t\t////@ open [1/2]valid(); // auto\n\t\t//@ transient_byte_arrays_mem(messageBuffer);\n\t\t//@ assert transient_byte_arrays(?as1);\n\t\t//@ foreachp_remove(messageBuffer, as1);\n\t\t////@ open transient_byte_array(messageBuffer); // auto\n\t\t// generate signature\n\t\tcipher.doFinal(messageBuffer, (short) 0, (short) 128, buffer, (short) 0);\n\t\t//@ close transient_byte_array(messageBuffer);\n\t\t//@ foreachp_unremove(messageBuffer, as1);\n\t\t////@ close [1/2]valid(); // auto\n\t}\n",
        "methodStartingLine": 2362,
        "methodEndingLine": 2409,
        "jml": "//@ requires current_applet(this) &*& [1/2]valid() &*& APDU(apdu, buffer) &*& array_slice(buffer, 0, buffer.length, _);\n//@ ensures current_applet(this) &*& [1/2]valid() &*& APDU(apdu, buffer) &*& array_slice(buffer, 0, buffer.length, _);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/NewEidCard/EidCard-with-auto.java",
        "code": "\tprivate void generateKeyPair(APDU apdu) \n  \t    \n      \t    \n\t{\n\t\tapdu.setIncomingAndReceive();// If this was removed, function will not\n\t\t// work: no data except for command will be read\n\t\tbyte[] buffer = apdu.getBuffer();\n\t\t// check if access to this method is allowed\n\t\tif (GPSystem.getCardContentState() != GPSystem.APPLICATION_SELECTABLE)\n\t\t\tISOException.throwIt(ISO7816.SW_SECURITY_STATUS_NOT_SATISFIED);\n\t\t// check P1 and P2\n\t\tif (buffer[ISO7816.OFFSET_P1] != (byte) 0x00)\n\t\t\tISOException.throwIt(ISO7816.SW_WRONG_P1P2);\n\t\t// check Lc\n\t\tshort lc = (short) (buffer[ISO7816.OFFSET_LC] & 0x00FF);\n\t\tif (lc != (short) 11)\n\t\t\tISOException.throwIt(ISO7816.SW_WRONG_LENGTH);\n\t\tbyte offset = (ISO7816.OFFSET_CDATA + 0x01);\n\t\t//byte offset = (byte)(ISO7816.OFFSET_CDATA + 0x01);\n\t\t// create keypair using parameters given:\n\t\t// short keyLength = Util.makeShort(buffer[ISO7816.OFFSET_CDATA],\n\t\t// buffer[offset]);\n\t\tif (buffer[offset] != (byte) 0x80)\n\t\t\tISOException.throwIt(ISO7816.SW_WRONG_LENGTH);\n\t\t\n\t\t\n\t\t\n\t\t// This is commented out as changing exponent makes getting modulus\n\t\t// impossible on some java cards\n\t\t// ((RSAPublicKey)tempkp.getPublic()).setExponent(buffer, (short)(13),\n\t\t// (short)3);\n\t\tJCSystem.beginTransaction();\n\t\t////@ open valid(); // auto\n\t\tsetPreviousApduType(GENERATE_KEY_PAIR);\n\t\tswitch (buffer[ISO7816.OFFSET_P2]) {\n\t\tcase BASIC:\n\t\t\tbasicKeyPair = new KeyPair(KeyPair.ALG_RSA_CRT, (short) (1024));\n\t\t\tbasicKeyPair.genKeyPair();\n\t\t\t\n\t\t\tbreak;\n\t\tcase AUTHENTICATION: // use authentication private key\n\t\t\tauthKeyPair = new KeyPair(KeyPair.ALG_RSA_CRT, (short) (1024));\n\t\t\tauthKeyPair.genKeyPair();\n\t\t\t\n\t\t\tbreak;\n\t\tcase NON_REPUDIATION: // use non repudiation private key\n\t\t\tnonRepKeyPair = new KeyPair(KeyPair.ALG_RSA_CRT, (short) (1024));\n\t\t\tnonRepKeyPair.genKeyPair();\n\t\t\t\n\t\t\tbreak;\n\t\tdefault:\n\t\t\t\n\t\t\tISOException.throwIt(SW_REFERENCE_DATA_NOT_FOUND);\n\t\t\tbreak; //~allow_dead_code\n\t\t}\n\t\t////@ close valid(); // auto\n\t\tJCSystem.commitTransaction();\n\t}\n",
        "methodStartingLine": 2453,
        "methodEndingLine": 2510,
        "jml": "//@ requires current_applet(this) &*& [1/2]valid() &*& APDU(apdu, ?theBuffer) &*& array_slice(theBuffer, 0, theBuffer.length, _);\n//@ ensures current_applet(this) &*& [1/2]valid() &*& APDU(apdu, theBuffer) &*& array_slice(theBuffer, 0, theBuffer.length, _);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/NewEidCard/EidCard-with-auto.java",
        "code": "\tprivate void getPublicKey(APDU apdu) \n  \t    \n      \t    \n\t{\n\t\t\n\t\t\n\t\tbyte[] buffer = apdu.getBuffer();\n\t\t// if this is thrown: problem accesses getPreviousapdu\n\t\t// check P1\n\t\tif (buffer[ISO7816.OFFSET_P1] != (byte) 0x00)\n\t\t\tISOException.throwIt(ISO7816.SW_WRONG_P1P2);\n\t\t// inform the JCRE that the applet has data to return\n\t\tshort le = apdu.setOutgoing();\n\t\t// Le = 0 is not allowed\n\t\tif (le != (short) (5 + 8 + 128))\n\t\t\tISOException.throwIt((short) (SW_WRONG_LENGTH_00 + (5 + 8 + 128)));\n\t\tbyte[] tempBuffer = new byte[le];\n\t\ttempBuffer[(short) 0] = (byte) 0x02;\n\t\ttempBuffer[(short) 1] = (byte) 0x08;\n\t\ttempBuffer[(short) 10] = (byte) 0x03;\n\t\ttempBuffer[(short) 11] = (byte) 0x81;\n\t\ttempBuffer[(short) 12] = (byte) 0x80;\n\t\t////@ open [1/2]valid(); // auto\n\t\tif (buffer[ISO7816.OFFSET_P2] == AUTHENTICATION){\n\t\t\tif (getPreviousApduType() != GENERATE_KEY_PAIR) {\n\t\t\t\tauthKeyPair.getPublic().clearKey();\n\t\t\t        ////@ close [1/2]valid(); // auto\n\t\t\t\tJCSystem.beginTransaction();\n\t\t\t        ////@ open valid(); // auto\n\t\t\t\tsetPreviousApduType(OTHER);\n\t\t\t        ////@ close valid(); // auto\n\t\t\t\tJCSystem.commitTransaction();\n\t\t\t        ////@ open [1/2]valid(); // auto\n\t\t\t\tISOException.throwIt(ISO7816.SW_CONDITIONS_NOT_SATISFIED);\n\t\t\t}\n\t\t\t((RSAPublicKey) authKeyPair.getPublic()).getExponent(tempBuffer, (short) 7);\n\t\t\t((RSAPublicKey) authKeyPair.getPublic()).getModulus(tempBuffer, (short) 13);\n\t\t}else if (buffer[ISO7816.OFFSET_P2] == NON_REPUDIATION) { \n\t\t\tif (getPreviousApduType() != GENERATE_KEY_PAIR) {\n\t\t\t\tnonRepKeyPair.getPublic().clearKey();\n\t\t\t        ////@ close [1/2]valid(); // auto\n\t\t\t\tJCSystem.beginTransaction();\n\t\t\t        ////@ open valid(); // auto\n\t\t\t\tsetPreviousApduType(OTHER);\n\t\t\t\t////@ close valid(); // auto\n\t\t\t\tJCSystem.commitTransaction();\n\t\t\t\t////@ open [1/2]valid(); // auto\n\t\t\t\tISOException.throwIt(ISO7816.SW_CONDITIONS_NOT_SATISFIED);\n\t\t\t}\t\t\t\n\t\t\t((RSAPublicKey) nonRepKeyPair.getPublic()).getExponent(tempBuffer, (short) 7);\n\t\t\t((RSAPublicKey) nonRepKeyPair.getPublic()).getModulus(tempBuffer, (short) 13);\n\t\t}else if (buffer[ISO7816.OFFSET_P2] == BASIC) {\t\t\n\t\t\tif (basicKeyPair == null)\n\t\t\t\tISOException.throwIt(SW_REFERENCE_DATA_NOT_FOUND);\n\t\t\t((RSAPublicKey) basicKeyPair.getPublic()).getExponent(tempBuffer, (short) 7);\n\t\t\t((RSAPublicKey) basicKeyPair.getPublic()).getModulus(tempBuffer, (short) 13);\n\t\t} else {\n\t\t\tISOException.throwIt(SW_REFERENCE_DATA_NOT_FOUND);\n\t\t}\n\t        ////@ close [1/2]valid(); // auto\n\t\tJCSystem.beginTransaction();\n\t        ////@ open valid(); // auto\n\t\tsetPreviousApduType(OTHER);\n\t\t////@ close valid(); // auto\n\t\tJCSystem.commitTransaction();\n\t\t////@ open [1/2]valid(); // auto\n\t\tauthKeyPair.getPublic().clearKey();\n\t\tnonRepKeyPair.getPublic().clearKey();\n\t\t// set the actual number of outgoing data bytes\n\t\tapdu.setOutgoingLength(le);\n\t\t// send content of buffer in apdu\n\t\tapdu.sendBytesLong(tempBuffer, (short) 0, le);\n\t\t////@ close [1/2]valid(); // auto\n\t}\n",
        "methodStartingLine": 2516,
        "methodEndingLine": 2589,
        "jml": "//@ requires current_applet(this) &*& [1/2]valid() &*& APDU(apdu, ?theBuffer) &*& array_slice(theBuffer, 0, theBuffer.length, _);\n//@ ensures current_applet(this) &*& [1/2]valid() &*& APDU(apdu, theBuffer) &*& array_slice(theBuffer, 0, theBuffer.length, _);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/NewEidCard/EidCard-with-auto.java",
        "code": "\tprivate void putPublicKey(APDU apdu, byte[] buffer) \n  \t    \n      \t    \n\t{\n\t\tISOException.throwIt(SW_REFERENCE_DATA_NOT_FOUND);\n\t}\n",
        "methodStartingLine": 2593,
        "methodEndingLine": 2598,
        "jml": "//@ requires [1/2]valid();\n//@ ensures [1/2]valid();"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/NewEidCard/EidCard-with-auto.java",
        "code": "\tprivate void eraseKey(APDU apdu, byte[] buffer) \n  \t    \n      \t    \n\t{\n\t\t// check P1\n\t\tif (buffer[ISO7816.OFFSET_P1] != (byte) 0x00)\n\t\t\tISOException.throwIt(ISO7816.SW_WRONG_P1P2);\n\t\tswitch (buffer[ISO7816.OFFSET_P2]) {\n\t\tcase BASIC:\n\t\t\tJCSystem.beginTransaction();\n\t\t\t//@ open valid();\n\t\t\tbasicKeyPair = null;\n\t\t\t////@ close valid(); // auto\n\t\t\tJCSystem.commitTransaction();\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tISOException.throwIt(SW_REFERENCE_DATA_NOT_FOUND);\n\t\t\tbreak; //~allow_dead_code\n\t\t}\n\t}\n",
        "methodStartingLine": 2602,
        "methodEndingLine": 2621,
        "jml": "//@ requires current_applet(this) &*& [1/2]valid() &*& APDU(apdu, buffer) &*& array_slice(buffer, 0, buffer.length, _);\n//@ ensures current_applet(this) &*& [1/2]valid() &*& APDU(apdu, buffer) &*& array_slice(buffer, 0, buffer.length, _);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/NewEidCard/EidCard-with-auto.java",
        "code": "\tprivate void activateKey(APDU apdu, byte[] buffer) \n  \t    \n      \t    \n\t{\n\t\t// check P1\n\t\tif (buffer[ISO7816.OFFSET_P1] != (byte) 0x00)\n\t\t\tISOException.throwIt(ISO7816.SW_WRONG_P1P2);\n\t\tswitch (buffer[ISO7816.OFFSET_P2]) {\n\t\tcase AUTHENTICATION:\n\t\t\t// activate key: key always active, do nothing\n\t\t\tbreak;\n\t\tcase NON_REPUDIATION:\n\t\t\t// activate key: key always active, do nothing\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tISOException.throwIt(SW_REFERENCE_DATA_NOT_FOUND);\n\t\t\tbreak; //~allow_dead_code\n\t\t}\n\t}\n",
        "methodStartingLine": 2626,
        "methodEndingLine": 2644,
        "jml": "//@ requires current_applet(this) &*& [1/2]valid() &*& APDU(apdu, buffer) &*& array_slice(buffer, 0, buffer.length, _);\n//@ ensures current_applet(this) &*& [1/2]valid() &*& APDU(apdu, buffer) &*& array_slice(buffer, 0, buffer.length, _);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/NewEidCard/EidCard-with-auto.java",
        "code": "\tprivate void deactivateKey(APDU apdu, byte[] buffer) \n  \t    \n      \t    \n\t{\n\t\tISOException.throwIt(ISO7816.SW_CONDITIONS_NOT_SATISFIED);\n\t}\n",
        "methodStartingLine": 2649,
        "methodEndingLine": 2654,
        "jml": "//@ requires current_applet(this) &*& [1/2]valid() &*& APDU(apdu, buffer) &*& array_slice(buffer, 0, buffer.length, _);\n//@ ensures current_applet(this) &*& [1/2]valid() &*& APDU(apdu, buffer) &*& array_slice(buffer, 0, buffer.length, _);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/NewEidCard/EidCard-with-auto.java",
        "code": "\tprivate void internalAuthenticate(APDU apdu, byte[] buffer) \n  \t    \n      \t    \n\t{\n\t\t// check P1 and P2\n\t\tif ((buffer[ISO7816.OFFSET_P1] != ALG_SHA1_PKCS1) || buffer[ISO7816.OFFSET_P2] != BASIC)\n\t\t\tISOException.throwIt(ISO7816.SW_WRONG_P1P2);\n\t\t// receive the data that needs to be signed\n\t\tshort byteRead = apdu.setIncomingAndReceive();\n\t\t// check Lc\n\t\tshort lc = (short) (buffer[ISO7816.OFFSET_LC] & 0x00FF);\n\t\t// we do not support Lc=0x97, only Lc=0x16\n\t\tif ((lc == 0x97) || (byteRead == 0x97))\n\t\t\tISOException.throwIt(ISO7816.SW_SECURITY_STATUS_NOT_SATISFIED);\n\t\tif ((lc != 0x16) || (byteRead != 0x16))\n\t\t\tISOException.throwIt(ISO7816.SW_WRONG_LENGTH);\n\t\t// the first data byte must be \"94\" and the second byte is the length\n\t\t// (20 bytes)\n\t\tif ((buffer[ISO7816.OFFSET_CDATA] != (byte) 0x94) || (buffer[ISO7816.OFFSET_CDATA + 1] != (byte) 0x14))\n\t\t\tISOException.throwIt(ISO7816.SW_WRONG_DATA);\n\t\t// use the basic private key\n\t\tJCSystem.beginTransaction();\n\t\t////@ open valid(); // auto\n\t\t\n\t\t//@ transient_byte_arrays_mem(messageBuffer);\n\t\t//@ assert transient_byte_arrays(?as);\n\t\t//@ foreachp_remove(messageBuffer, as);\n\t\t//@ open transient_byte_array(messageBuffer);\n\n\t\tif (basicKeyPair == null)\n\t\t\tISOException.throwIt(ISO7816.SW_CONDITIONS_NOT_SATISFIED);\n\n\t\t//VF: bovenstaande is mogelijk bug in programma!\n\t\tcipher.init(basicKeyPair.getPrivate(), Cipher.MODE_ENCRYPT);\n\t\t// prepare the message buffer to the PKCS#1 (v1.5) structure\n\t\tpreparePkcs1ClearText(messageBuffer, ALG_SHA1_PKCS1, lc);\n\t\t// copy the challenge (SHA1 hash) from the APDU to the message buffer\n\t\tUtil.arrayCopy(buffer, (short) (ISO7816.OFFSET_CDATA + 2), messageBuffer, (short) 108, (short) 20);\n\t\t// generate signature\n\t\tcipher.doFinal(messageBuffer, (short) 0, (short) 128, buffer, (short) 0);\n\t\t// if T=0, store signature in sigBuffer so that it can latter be sent\n\t\tif (APDU.getProtocol() == APDU.PROTOCOL_T1) {\n\t\t\tUtil.arrayCopy(buffer, (short) 0, responseBuffer, (short) 0, (short) 128);\n\t\t\t// in case T=1 protocol, send the signature immediately in a\n\t\t\t// response APDU\n\t\t} else {\n\t\t\t// send first 128 bytes (= 1024 bit) of buffer\n\t\t\tapdu.setOutgoingAndSend((short) 0, (short) 128);\n\t\t}\n\t\t// decrement internal authenticate counter\n\t\t//internalAuthenticateCounter--;\n\t\t//@ close transient_byte_array(messageBuffer);\n\t\t//@ foreachp_unremove(messageBuffer, as);\n\t\t\n\t\t////@ close valid(); // auto\n\t\tJCSystem.commitTransaction();\n\t}\n",
        "methodStartingLine": 2660,
        "methodEndingLine": 2716,
        "jml": "//@ requires current_applet(this) &*& [1/2]valid() &*& APDU(apdu, buffer) &*& array_slice(buffer, 0, buffer.length, _);\n//@ ensures current_applet(this) &*& [1/2]valid() &*& APDU(apdu, buffer) &*& array_slice(buffer, 0, buffer.length, _);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/NewEidCard/EidCard-with-auto.java",
        "code": "\tprivate void getResponse(APDU apdu, byte[] buffer) \n  \t    \n      \t    \n\t{\n\t\t////@ open [1/2]valid(); // auto\n\t\t// use P1 and P2 as offset\n\t\tshort offset = Util.makeShort(buffer[ISO7816.OFFSET_P1], buffer[ISO7816.OFFSET_P2]);\n\t\tif (offset > responseBuffer.length)\n\t\t\tISOException.throwIt(ISO7816.SW_WRONG_P1P2);\n\t\t// inform the JCRE that the applet has data to return\n\t\tshort le = apdu.setOutgoing();\n\t\t// if Le = 0, then return the complete signature (128 bytes = 1024 bits)\n\t\t// Le = 256 possible on real card\n\t\tif ((le == 0) || (le == 256))\n\t\t\tle = 128;\n\t\t// set the actual number of outgoing data bytes\n\t\tapdu.setOutgoingLength(le);\n\t\t// send content of sigBuffer in apdu\n\t\tif (offset + le > 128 || offset < 0)\n\t\t\tISOException.throwIt(ISO7816.SW_WRONG_P1P2);\n\t\tapdu.sendBytesLong(responseBuffer, offset, le);\n\t\t////@ close [1/2]valid(); // auto\n\t}\n",
        "methodStartingLine": 2720,
        "methodEndingLine": 2742,
        "jml": "//@ requires current_applet(this) &*& [1/2]valid() &*& APDU(apdu, buffer) &*& array_slice(buffer, 0, buffer.length, _);\n//@ ensures current_applet(this) &*& [1/2]valid() &*& APDU(apdu, buffer) &*& array_slice(buffer, 0, buffer.length, _);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/NewEidCard/EidCard-with-auto.java",
        "code": "\tprivate void getChallenge(APDU apdu, byte[] buffer) \n  \t    \n      \t    \n\t{\n\t\t// check P1 and P2\n\t\tif (buffer[ISO7816.OFFSET_P1] != (byte) 0x00 || buffer[ISO7816.OFFSET_P2] != (byte) 0x00)\n\t\t\tISOException.throwIt(ISO7816.SW_WRONG_P1P2);\n\t\t// inform the JCRE that the applet has data to return\n\t\tshort le = apdu.setOutgoing();\n\t\t// Le = 0 is not allowed\n\t\tif (le == 0)\n\t\t\tISOException.throwIt(ISO7816.SW_WRONG_LENGTH);\n\t\tJCSystem.beginTransaction();\n\t\t////@ open valid(); // auto\n\t\tRandomData random = EidCard.randomData;\n\t\t// generate random data and put it into buffer\n\t\trandom.generateData(randomBuffer, (short) 0, le);\n\t\t// set the actual number of outgoing data bytes\n\t\tapdu.setOutgoingLength(le);\n\t\t// send content of buffer in apdu\n\t\tapdu.sendBytesLong(randomBuffer, (short) 0, le);\n\t\t////@ close valid(); // auto\n\t\tJCSystem.commitTransaction();\n\t}\n",
        "methodStartingLine": 2746,
        "methodEndingLine": 2769,
        "jml": "//@ requires current_applet(this) &*& [1/2]valid() &*& APDU(apdu, buffer) &*& array_slice(buffer, 0, buffer.length, _);\n//@ ensures current_applet(this) &*& [1/2]valid() &*& APDU(apdu, buffer) &*& array_slice(buffer, 0, buffer.length, _);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/NewEidCard/EidCard-with-auto.java",
        "code": "\tprivate void selectFile(APDU apdu, byte[] buffer) \n  \t    \n      \t    \n\t{\n\t\t// check P2\n\t\tif (buffer[ISO7816.OFFSET_P2] != (byte) 0x0C)\n\t\t\tISOException.throwIt(ISO7816.SW_WRONG_P1P2);\n\t\t// P1 determines the select method\n\t\tswitch (buffer[ISO7816.OFFSET_P1]) {\n\t\tcase (byte) 0x02:\n\t\t\tselectByFileIdentifier(apdu, buffer);\n\t\t\tbreak;\n\t\tcase (byte) 0x08:\n\t\t\tselectByPath(apdu, buffer);\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tISOException.throwIt(ISO7816.SW_INCORRECT_P1P2);\n\t\t\tbreak; //~allow_dead_code\n\t\t}\n\t}\n",
        "methodStartingLine": 2775,
        "methodEndingLine": 2794,
        "jml": "//@ requires current_applet(this) &*& [1/2]valid() &*& APDU(apdu, buffer) &*& array_slice(buffer, 0, buffer.length, _);\n//@ ensures current_applet(this) &*& [1/2]valid() &*& APDU(apdu, buffer) &*& array_slice(buffer, 0, buffer.length, _);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/NewEidCard/EidCard-with-auto.java",
        "code": "\tprivate void setPreviousApduType(byte type) \n  \t    \n      \t    \n\t{\n\t\t//@ transient_byte_arrays_mem(thePreviousApduType);\n\t\t//@ foreachp_remove(thePreviousApduType, ta);\n\t\t//@ open transient_byte_array(thePreviousApduType);\n\t\tpreviousApduType[0] = type;\n\t\t//@ close transient_byte_array(thePreviousApduType); // todo\n\t\t//@ foreachp_unremove(thePreviousApduType, ta);\n\t}\n",
        "methodStartingLine": 2798,
        "methodEndingLine": 2808,
        "jml": "//@ requires previousApduType |-> ?thePreviousApduType &*& thePreviousApduType != null &*& thePreviousApduType.length == 1 &*& is_transient_byte_array(thePreviousApduType) == true &*& transient_byte_arrays(?ta) &*& foreachp(ta, transient_byte_array);\n//@ ensures previousApduType |-> thePreviousApduType &*& thePreviousApduType != null &*& transient_byte_arrays(ta) &*& foreachp(ta, transient_byte_array);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/NewEidCard/EidCard-with-auto.java",
        "code": "\tprivate byte getPreviousApduType() \n  \t    \n  \t    \n\t{\n\t\t//@ transient_byte_arrays_mem(thePreviousApduType);\n\t\t//@ foreachp_remove(thePreviousApduType, ta);\n\t\t//@ open transient_byte_array(thePreviousApduType);\n\t\treturn previousApduType[0];\n\t\t//@ close transient_byte_array(thePreviousApduType);\n\t\t//@ foreachp_unremove(thePreviousApduType, ta);\n\t}\n",
        "methodStartingLine": 2812,
        "methodEndingLine": 2822,
        "jml": "//@ requires [?f]previousApduType |-> ?thePreviousApduType &*& thePreviousApduType != null &*& thePreviousApduType.length == 1 &*& is_transient_byte_array(thePreviousApduType) == true &*& transient_byte_arrays(?ta) &*& foreachp(ta, transient_byte_array);\n//@ ensures [f]previousApduType |-> thePreviousApduType &*& transient_byte_arrays(ta) &*& foreachp(ta, transient_byte_array);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/NewEidCard/EidCard-with-auto.java",
        "code": "\tprivate void setSignatureType(byte type) \n  \t    \n      \t    \n\t{\n\t\t//@ transient_byte_arrays_mem(theSignatureType);\n\t\t//@ foreachp_remove(theSignatureType, ta);\n\t\t//@ open transient_byte_array(theSignatureType);\n\t\tsignatureType[0] = type;\n\t\t//@ close transient_byte_array(theSignatureType);\n\t\t//@ foreachp_unremove(theSignatureType, ta);\n\t}\n",
        "methodStartingLine": 2826,
        "methodEndingLine": 2836,
        "jml": "//@ requires signatureType |-> ?theSignatureType &*& theSignatureType != null &*& theSignatureType.length == 1 &*& is_transient_byte_array(theSignatureType) == true &*& transient_byte_arrays(?ta) &*& foreachp(ta, transient_byte_array);\n//@ ensures signatureType |-> theSignatureType &*& is_transient_byte_array(theSignatureType) == true &*& transient_byte_arrays(ta) &*& foreachp(ta, transient_byte_array);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/NewEidCard/EidCard-with-auto.java",
        "code": "\tprivate byte getSignatureType() \n  \t    \n      \t    \n\t{\n\t\t//@ transient_byte_arrays_mem(theSignatureType);\n\t\t//@ foreachp_remove(theSignatureType, ta);\n\t\t//@ open transient_byte_array(theSignatureType);\n\t\treturn signatureType[0];\n\t\t//@ close transient_byte_array(theSignatureType);\n\t\t//@ foreachp_unremove(theSignatureType, ta);\n\t}\n",
        "methodStartingLine": 2840,
        "methodEndingLine": 2850,
        "jml": "//@ requires [?f]signatureType |-> ?theSignatureType &*& theSignatureType != null &*& theSignatureType.length == 1 &*& is_transient_byte_array(theSignatureType) == true &*& transient_byte_arrays(?ta) &*& foreachp(ta, transient_byte_array);\n//@ ensures [f]signatureType |-> theSignatureType &*& transient_byte_arrays(ta) &*& foreachp(ta, transient_byte_array);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/NewEidCard/EidCard-with-auto.java",
        "code": "\tprivate void deactivateFile(APDU apdu, byte[] buffer) \n  \t    \n      \t    \n\t{\n\t\t// check P2\n\t\tif (buffer[ISO7816.OFFSET_P2] != (byte) 0x0C)\n\t\t\tISOException.throwIt(ISO7816.SW_WRONG_P1P2);\n\t\t// P1 determines the select method\n\t\tswitch (buffer[ISO7816.OFFSET_P1]) {\n\t\tcase (byte) 0x02:\n\t\t\tselectByFileIdentifier(apdu, buffer);\n\t\t\tbreak;\n\t\tcase (byte) 0x08:\n\t\t\tselectByPath(apdu, buffer);\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tISOException.throwIt(ISO7816.SW_INCORRECT_P1P2);\n\t\t\tbreak; //~allow_dead_code\n\t\t}\n\t\t// check if deactivating this file is allowed\n\t\tif (!fileAccessAllowed(UPDATE_BINARY))\n\t\t\tISOException.throwIt(ISO7816.SW_SECURITY_STATUS_NOT_SATISFIED);\n\t\tJCSystem.beginTransaction();\n\t\t//@ open valid(); // todo\n\t  \t//@ open selected_file_types(_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, ?sf2);\n\t\t//@ sf2.castElementaryToFile();\n\t\tselectedFile.setActive(false);\n\t\t//@ sf2.castFileToElementary();\n\t\t////@ close valid(); // auto\n\t\tJCSystem.commitTransaction();\n\t}\n",
        "methodStartingLine": 2857,
        "methodEndingLine": 2887,
        "jml": "//@ requires current_applet(this) &*& [1/2]valid() &*& APDU(apdu, buffer) &*& array_slice(buffer, 0, buffer.length, _);\n//@ ensures current_applet(this) &*& [1/2]valid() &*& APDU(apdu, buffer) &*& array_slice(buffer, 0, buffer.length, _);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/termination/AbstractObjectConstruction.java",
        "code": "    static int apply(Func f, int x)\n        \n        \n        //@ terminates;\n    {\n        //@ open Func(_, _);\n        //@ assert [_]f.valid(?level0);\n        //@ call_perm_weaken(2, level0);\n        //@ f.getClass_le_level();\n        //@ consume_call_perm_for(f.getClass());\n        return f.apply(x);\n    }\n",
        "methodStartingLine": 17,
        "methodEndingLine": 28,
        "jml": "//@ requires [_]Func(f, ?level) &*& [2]call_perm(currentThread, level);\n//@ ensures true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/termination/AbstractObjectConstruction.java",
        "code": "    static int deriv(Func f, int x)\n        \n        \n        //@ terminates;\n    {\n        //@ call_perm_weaken_and_dup(4);\n        return apply(f, x + 1) - apply(f, x);\n    }\n",
        "methodStartingLine": 30,
        "methodEndingLine": 37,
        "jml": "//@ requires [_]Func(f, ?level) &*& call_perm(currentThread, cons(Util.class, level));\n//@ ensures true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/termination/AbstractObjectConstruction.java",
        "code": "    public int apply(int x)\n        \n        \n        //@ terminates;\n    {\n        return 0;\n    }\n",
        "methodStartingLine": 57,
        "methodEndingLine": 63,
        "jml": "//@ requires [_]valid(?level) &*& call_perm(currentThread, level);\n//@ ensures true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/termination/AbstractObjectConstruction.java",
        "code": "    public static Func create()\n        \n        \n        //@ terminates;\n    {\n        Func f = new ZeroFunc();\n        //@ close Func(f, {ZeroFunc.class});\n        return f;\n    }\n",
        "methodStartingLine": 64,
        "methodEndingLine": 72,
        "jml": "//@ requires true;\n//@ ensures Func(result, {ZeroFunc.class});"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/termination/AbstractObjectConstruction.java",
        "code": "    public int apply(int x)\n        \n        \n        //@ terminates;\n    {\n        //@ open valid(_);\n        //@ call_perm_weaken_and_dup(2);\n        return Util.apply(f, x) + 1;\n    }\n",
        "methodStartingLine": 95,
        "methodEndingLine": 103,
        "jml": "//@ requires [_]valid(?level) &*& call_perm(currentThread, level);\n//@ ensures true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/termination/AbstractObjectConstruction.java",
        "code": "    public static Func create(Func f)\n        \n        \n        //@ terminates;\n    {\n        return new PlusOneFunc(f);\n    }\n",
        "methodStartingLine": 104,
        "methodEndingLine": 110,
        "jml": "//@ requires [_]Func(f, ?fLevel) &*& call_perm(currentThread, cons(PlusOneFunc.class, fLevel));\n//@ ensures Func(result, cons(PlusOneFunc.class, fLevel));"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/termination/AbstractObjectConstruction.java",
        "code": "    public static void main(String[] args)\n        \n        \n        //@ terminates;\n    {\n        //@ produce_call_below_perm_();\n        //@ list<Class> level = {Util.class, PlusOneFunc.class, PlusOneFunc.class, ZeroFunc.class};\n        //@ call_below_perm__elim(3, level);\n        Func f1 = ZeroFunc.create();\n        //@ call_perm_weaken(1, {PlusOneFunc.class, ZeroFunc.class});\n        Func f2 = PlusOneFunc.create(f1);\n        //@ call_perm_weaken(1, {PlusOneFunc.class, PlusOneFunc.class, ZeroFunc.class});\n        Func f3 = PlusOneFunc.create(f2);\n        Util.deriv(f3, 0);\n    }\n",
        "methodStartingLine": 114,
        "methodEndingLine": 128,
        "jml": "//@ requires true;\n//@ ensures true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/frontend/inner_class/StaticMemberClass.java",
        "code": "    int getX()    \n      \n      \n    {\n      //@ open OuterClass$InnerClass(x);\n      return this.x;\n    }\n",
        "methodStartingLine": 17,
        "methodEndingLine": 23,
        "jml": "//@ requires OuterClass$InnerClass(?x);\n//@ ensures OuterClass$InnerClass(x) &*& result == x;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/frontend/inner_class/StaticMemberClass.java",
        "code": "    void setX(int i)    \n      \n      \n    {\n      x = i;\n    }\n",
        "methodStartingLine": 25,
        "methodEndingLine": 30,
        "jml": "//@ requires OuterClass$InnerClass(_);\n//@ ensures OuterClass$InnerClass(i);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/frontend/inner_class/StaticMemberClass.java",
        "code": "    static int getY()    \n    \n    \n    {\n      return y;\n    }\n",
        "methodStartingLine": 32,
        "methodEndingLine": 37,
        "jml": "//@ requires OuterClass$InnerClass_y(?y');\n//@ ensures OuterClass$InnerClass_y(y') &*& result == y'; "
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/frontend/inner_class/StaticMemberClass.java",
        "code": "    static void setY(int i)    \n      \n      \n    {\n      y = i;\n    }\n",
        "methodStartingLine": 39,
        "methodEndingLine": 44,
        "jml": "//@ requires OuterClass$InnerClass_y(_);\n//@ ensures OuterClass$InnerClass_y(i);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/frontend/inner_class/StaticMemberClass.java",
        "code": "  public static void main(String[] args)\n    \n    \n  {\n    //@ init_class(OuterClass$InnerClass.class);\n    \n    OuterClass.InnerClass first = new OuterClass.InnerClass();\n    OuterClass.InnerClass second = new OuterClass.InnerClass();\n    \n    //Non-static stuff\n    first.setX(111);\n    int i = first.getX();\n    //@ assert i == 111;\n    \n    //Static stuff\n    first.setY(222);\n    int j = second.getY();\n    //@ assert j == 222;\n }\n",
        "methodStartingLine": 50,
        "methodEndingLine": 68,
        "jml": "//@ requires class_init_token(OuterClass$InnerClass.class);\n//@ ensures true; "
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/override_methods/NoOverrideTargetParam.java",
        "code": "    public int getI()\n    \n    \n    {\n    \t//@ open valid();\n        return i/0; //~allow_dead_code\n    }\n",
        "methodStartingLine": 7,
        "methodEndingLine": 13,
        "jml": "//@ requires valid();\n//@ ensures valid();"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/override_methods/NoOverrideTargetParam.java",
        "code": "    public void test(B b) \n      \n      \n    {\n    \tb.getI();\n    }\n",
        "methodStartingLine": 25,
        "methodEndingLine": 30,
        "jml": "//@ requires b != null &*& b.valid();\n//@ ensures true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/out_of_order_jarsrc/out_of_order/Super.java",
        "code": "  public int increment(int i)\n    \n    \n  {\n    return ++i;\n  }\n",
        "methodStartingLine": 3,
        "methodEndingLine": 8,
        "jml": "//@ requires i < 100;\n//@ ensures result == i + 1;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/NewEPurse/EPurseServicesDebit.java",
        "code": "    public void debit(short amount)\n        \n        \n    {\n\t// application state checking\n\t// Rational: when the applet is LOCKED, it cannot be selected,\n\t// but it can be accessed trough shared method calls.\n\tif (GPSystem.getCardContentState() == GPSystem.APPLICATION_LOCKED)\n\t    ISOException.throwIt(NewEPurseApplet.SW_INVALID_STATE);\n\tshort clientId;\n\t// client registration checking\n\tAID clientAID = JCSystem.getPreviousContextAID();\n\tif ((clientId = epurseApplet.searchClientAID(clientAID)) == -1)\n\t    ISOException.throwIt(NewEPurseApplet.SW_INVALID_CLIENT);\n\tshort clientLimit = epurseApplet.getClientLimit(clientId);\n\t// client limit checking\n\tif (amount > clientLimit) \n\t    ISOException.throwIt(NewEPurseApplet.SW_CLIENT_LIMIT_EXCEEDED);\n\t// service delivering\n\tepurseApplet.debit(amount);\n    }\n",
        "methodStartingLine": 22,
        "methodEndingLine": 42,
        "jml": "//@ requires Shareable(?a) &*& in_transaction(a) &*& a.valid();\n//@ ensures Shareable(a) &*& in_transaction(a) &*& a.valid();"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/NewMyApplet/NewMyAppletPoints.java",
        "code": "\t\tpublic byte sharePoints(byte points) \n\t\t  \n                  \n\t\t{\n\t        return points <= 124 ? (byte) (points + 3) : points;\n\t\t}\n",
        "methodStartingLine": 8,
        "methodEndingLine": 13,
        "jml": "//@ requires true;\n//@ ensures true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/NewEPurse/EPurseServicesCredit.java",
        "code": "    public void charge(short amount)\n        \n        \n    {\n\t// application state checking\n\t// Rational: when the applet is LOCKED, it cannot be selected,\n\t// but it can be accessed trough shared method calls.\n\tif (GPSystem.getCardContentState() == GPSystem.APPLICATION_LOCKED)\n\t    ISOException.throwIt(NewEPurseApplet.SW_INVALID_STATE);\n\tshort clientId;\n\t// client registration checking\n\tAID clientAID = JCSystem.getPreviousContextAID();\n\tif ((clientId = epurseApplet.searchClientAID(clientAID)) == -1)\n\t    ISOException.throwIt(NewEPurseApplet.SW_INVALID_CLIENT);\n\tshort clientLimit = epurseApplet.getClientLimit(clientId);\n\t// client limit checking\n\tif (amount > clientLimit) \n\t    ISOException.throwIt(NewEPurseApplet.SW_CLIENT_LIMIT_EXCEEDED);\n\t// service delivering\n\tepurseApplet.charge(amount);\n    }\n",
        "methodStartingLine": 22,
        "methodEndingLine": 42,
        "jml": "//@ requires Shareable(?a) &*& in_transaction(a) &*& a.valid();\n//@ ensures Shareable(a) &*& in_transaction(a) &*& a.valid();"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Java Card/NewEPurse/EPurseServicesCredit.java",
        "code": "    public void transaction(short amount)\n        \n        \n    {\n       \t// application state checking\n       \t// Rational: when the applet is LOCKED, it cannot be selected,\n       \t// but it can be accessed trough shared method calls.\n       \tif (GPSystem.getCardContentState() == GPSystem.APPLICATION_LOCKED)\n       \t    ISOException.throwIt(NewEPurseApplet.SW_INVALID_STATE);\n       \tshort clientId;\n       \t// client registration checking\n       \tAID clientAID = JCSystem.getPreviousContextAID();\n       \tif ((clientId = epurseApplet.searchClientAID(clientAID)) == -1)\n       \t    ISOException.throwIt(NewEPurseApplet.SW_INVALID_CLIENT);\n       \tshort clientLimit = epurseApplet.getClientLimit(clientId);\n       \t// client limit checking\n       \tif (amount > clientLimit) \n       \t    ISOException.throwIt(NewEPurseApplet.SW_CLIENT_LIMIT_EXCEEDED);\n       \t// service delivering\n       \tepurseApplet.transaction(amount);\n    }\n",
        "methodStartingLine": 44,
        "methodEndingLine": 64,
        "jml": "//@ requires Shareable(?a) &*& in_transaction(a) &*& a.valid();\n//@ ensures Shareable(a) &*& in_transaction(a) &*& a.valid();"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/ghost_imports/Main_missing_lemma_include.java",
        "code": "  public static void main(String[] args) \n    \n    \n  {\n    Subpackage o = new Subpackage();\n    //@ int i = fixpoint1(0);\n    //@ close predicate1();\n    //@ open predicate1();\n    /*~*/ //@ lemma1();\n  }\n",
        "methodStartingLine": 7,
        "methodEndingLine": 16,
        "jml": "//@ requires true;\n//@ ensures true; "
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/override_methods/NoOverrideSpecfileExport.java",
        "code": "  public void m()\n    \n    \n  {\n  }\n",
        "methodStartingLine": 12,
        "methodEndingLine": 16,
        "jml": "//@ requires pred();\n//@ ensures pred();"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/override_methods/NoOverrideObjectCreation.java",
        "code": "  public void m()\n    \n    \n  {\n  }\n",
        "methodStartingLine": 12,
        "methodEndingLine": 16,
        "jml": "//@ requires pred();\n//@ ensures pred();"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/override_methods/NoOverrideObjectCreation.java",
        "code": "  public void m()\n    \n    \n  {\n    B b = new B();\n  }\n",
        "methodStartingLine": 31,
        "methodEndingLine": 36,
        "jml": "//@ requires true;\n//@ ensures true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/frontend/inner_class/LocalClass_desugared.java",
        "code": "  public static void main(String[] args)\n    \n    \n  {\n    LocalClass_desugared$1InnerClass first = new LocalClass_desugared$1InnerClass();\n    first.setX(111);\n    int i = first.getX();\n    /*@ assert i == 111;@*/\n  }\n",
        "methodStartingLine": 3,
        "methodEndingLine": 11,
        "jml": "//@ requires true;\n//@ ensures true;  "
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/frontend/inner_class/LocalClass_desugared.java",
        "code": "  int getX()    \n    \n    \n  {\n    //@ open LocalClass_desugared$1InnerClass(x);\n    return this.x;\n  }\n",
        "methodStartingLine": 28,
        "methodEndingLine": 34,
        "jml": "//@ requires LocalClass_desugared$1InnerClass(?x);\n//@ ensures LocalClass_desugared$1InnerClass(x) &*& result == x;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/frontend/inner_class/LocalClass_desugared.java",
        "code": "  void setX(int i)    \n    \n    \n  {\n    x = i;\n  }\n",
        "methodStartingLine": 36,
        "methodEndingLine": 41,
        "jml": "//@ requires LocalClass_desugared$1InnerClass(_);\n//@ ensures LocalClass_desugared$1InnerClass(i);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/frontend/many_files/subpackage1/Multiply1.java",
        "code": "  static public int multiply()\n    \n    \n  {\n    return 1 * Number1_1.getNumber();\n  }\n",
        "methodStartingLine": 7,
        "methodEndingLine": 12,
        "jml": "//@ requires true;\n//@ ensures result == 11;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/frontend/many_files/subpackage2/Multiply2.java",
        "code": "  static public int multiply()\n    \n    \n  {\n    return 1 * Number2_1.getNumber() * Number2_2.getNumber();\n  }\n",
        "methodStartingLine": 8,
        "methodEndingLine": 13,
        "jml": "//@ requires true;\n//@ ensures result == 21 * 22;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/out_of_order_jarsrc/inheritance_cycle/Sub.java",
        "code": "  public int increment(int i)\n    \n    \n  {\n    int j = i;\n    j++;\n    return j;\n  }\n",
        "methodStartingLine": 3,
        "methodEndingLine": 10,
        "jml": "//@ requires i < 100;\n//@ ensures result == i + 1;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/out_of_order_jarsrc/inheritance_cycle/Sub.java",
        "code": "  public int dummy(int i)\n    \n    \n  {\n    return i;\n  }\n",
        "methodStartingLine": 12,
        "methodEndingLine": 17,
        "jml": "//@ requires true;\n//@ ensures result == i;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/frontend/many_files/subpackage3/Multiply3.java",
        "code": "  static public int multiply()\n    \n    \n  {\n    return 1 * Number3_1.getNumber() * Number3_2.getNumber() * Number3_3.getNumber();\n  }\n",
        "methodStartingLine": 9,
        "methodEndingLine": 14,
        "jml": "//@ requires true;\n//@ ensures result == 31 * 32 * 33;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/frontend/inner_class/MemberClass_desugared.java",
        "code": "  public static void main(String[] args)    \n    \n    \n  {\n    //@ init_class(OuterClass$InnerClass.class);\n\n    OuterClass first = new OuterClass();\n    OuterClass$InnerClass second = new OuterClass$InnerClass(first /**Null check is missing*/);\n    second.setX(111);\n    int i = second.getX();\n    /*@ assert i == 111;@*/\n  }\n",
        "methodStartingLine": 7,
        "methodEndingLine": 18,
        "jml": "//@ requires class_init_token(OuterClass$InnerClass.class);\n//@ ensures true; "
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/frontend/inner_class/MemberClass_desugared.java",
        "code": "  int getX()    \n    \n    \n  {\n     //@ open OuterClass$InnerClass(x);\n    return this.x;\n  }\n",
        "methodStartingLine": 38,
        "methodEndingLine": 44,
        "jml": "//@ requires OuterClass$InnerClass(?x);\n//@ ensures OuterClass$InnerClass(x) &*& result == x;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/frontend/inner_class/MemberClass_desugared.java",
        "code": "  void setX(int i)    \n    \n    \n  {\n    x = i;\n  }\n",
        "methodStartingLine": 46,
        "methodEndingLine": 51,
        "jml": "//@ requires OuterClass$InnerClass(_);\n//@ ensures OuterClass$InnerClass(i);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/out_of_order_jarsrc/inheritance_cycle/Main.java",
        "code": "  public static void main(String[] args) \n    \n    \n  {\n    Super o = new Sub();\n    int i = 0;\n    i = o.increment(i);\n    //@ assert i == 1;\n  }\n",
        "methodStartingLine": 3,
        "methodEndingLine": 11,
        "jml": "//@ requires true;\n//@ ensures true; "
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/frontend/big_example/Java7Program_desugared.java",
        "code": "  public static <T> void addAll(List<T> l, T[] xs) throws EmptyException /*@ ensures xs.length == 0; @*/\n    \n    \n  {\n    if (xs.length > 0)\n    {\n      List<T> temp = Arrays.asList(xs);\n      //@ close listIsCollection(temp, temp);\n      l.addAll(temp);\n    }\n    else\n    {\n      throw new EmptyException();\n    }\n  }\n",
        "methodStartingLine": 46,
        "methodEndingLine": 60,
        "jml": "//@ requires l.List(?l_es) &*& [?f]xs[..] |-> ?xs_es;\n//@ ensures l.List(append(l_es, xs_es)) &*& [f]xs[..] |-> xs_es &*& xs.length > 0;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/frontend/big_example/Java7Program_desugared.java",
        "code": "  public static <T> T fold(FoldFunc f, List<T> xs, T acc0)\n    \n    \n  {\n    T acc = acc0;\n    \n    //@ xs.listToIterable();\n    {\n      Iterator<T> iSSS = xs.iterator();\n      while (iSSS.hasNext())\n        //@ requires iSSS.Iterator((seq_of_list)(es), _, ?n) &*& FoldFunc(f.getClass())(f, drop(n, es), acc, info) &*& f != null &*& n >= 0 &*& n <= length(es);\n        //@ ensures FoldFunc(f.getClass())(f, nil, acc, info) &*& iSSS.Iterator((seq_of_list)(es), _, length(es));\n      {\n        T x = iSSS.next();\n        {\n          //@ drop_n_plus_one(n, es);\n          acc = f.fold(acc, x);\n        }\n      }\n    }\n    //@ xs.destroyIterator();\n    //@ xs.iterableToList();\n    \n    return acc;\n  } \n",
        "methodStartingLine": 62,
        "methodEndingLine": 86,
        "jml": "//@ requires xs.List(?es) &*& FoldFunc(f.getClass())(f, es, acc0, ?info) &*& f != null;\n//@ ensures xs.List(es) &*& FoldFunc(f.getClass())(f, nil, result, info);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/frontend/big_example/Java7Program_desugared.java",
        "code": "  public static void main(String[] args)\n    \n    \n  {\n    List<Integer> xs = new ArrayList<Integer>(); \n    Integer i1 = Integer.valueOf(3);\n    Integer i2 = Integer.valueOf(5);\n    Integer i3 = Integer.valueOf(7);\n    \n    try\n    {\n      Java7Program_desugared.<Integer>addAll(xs, new Integer[]{i1, i2, i3});\n    }\n    catch (EmptyException e)\n    {\n      //@ assert false;\n    }\n    //@ list<Integer> exs = {i1, i2, i3};\n    \n    FoldFunc func = new Java7Program_desugared$1();\n    Integer acc = Integer.valueOf(2);\n    //@ close FoldFunc(Java7Program_desugared$1.class)(func, exs, acc, cons(acc, exs));\n    Integer vi = Java7Program_desugared.<Integer>fold(func, xs, acc);\n    //@ open FoldFunc(Java7Program_desugared$1.class)(_, _, _, _);\n    int v = vi.intValue();\n    \n    //@ assert v == 17;\n    \n    //@ boolean is_thrown = false;\n    try\n    {\n      Java7Program_desugared.<Integer>addAll(xs, new Integer[]{});\n    }\n    catch (EmptyException e)\n    {\n      //@ is_thrown = true;\n    }\n    //@ assert is_thrown;\n    \n    Object i = null;\n    //@ is_thrown = false;\n    try\n    {\n      if (i == null)\n        throw new NullPointerException();\n      else\n      {}\n    }\n    catch (NullPointerException e)\n    {\n      //@ is_thrown = true;\n    }\n    //@ assert is_thrown;\n  }\n",
        "methodStartingLine": 88,
        "methodEndingLine": 141,
        "jml": "//@ requires true;\n//@ ensures true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/frontend/big_example/Java7Program_desugared.java",
        "code": "  public Integer fold(Integer acc, Integer x)\n    \n    \n  {\n    //@ open FoldFunc(Java7Program_desugared$1.class)(this, cons(?_o, ?_r), acc, ?_info);\n    Integer res = Integer.valueOf(acc.intValue() + x.intValue());\n    return res;\n    //@ close FoldFunc(Java7Program_desugared$1.class)(this, _r, res, _info);\n  }  \n",
        "methodStartingLine": 146,
        "methodEndingLine": 154,
        "jml": "//@ requires FoldFunc(Java7Program_desugared$1.class)(this, cons(?o, ?r), acc, ?info) &*& o == x;\n//@ ensures FoldFunc(Java7Program_desugared$1.class)(this, r, result, info);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/frontend/big_example/Java7Program_desugared.java",
        "code": "  public Object fold(Object x0, Object x1)\n    \n    \n  {\n    return this.fold((Integer) x0, (Integer) x1);\n  }\n",
        "methodStartingLine": 156,
        "methodEndingLine": 161,
        "jml": "//@ requires FoldFunc(Java7Program_desugared$1.class)(this, cons(?o, ?r), x0, ?info) &*& o == x1;\n//@ ensures FoldFunc(Java7Program_desugared$1.class)(this, r, result, info);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/override_methods/NoOverrideSpecfileNoExport.java",
        "code": "  public void m()\n    \n    \n  {\n  }\n",
        "methodStartingLine": 12,
        "methodEndingLine": 16,
        "jml": "//@ requires pred();\n//@ ensures pred();"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/frontend/multiple_files/subpackage/Multiply.java",
        "code": "  public int multiply()\n    \n    \n  {\n    NumberFive five = new NumberFive();\n    NumberSix six = new NumberSix();\n    return five.getFive() * six.getSix();\n  }\n",
        "methodStartingLine": 5,
        "methodEndingLine": 12,
        "jml": "//@ requires true;\n//@ ensures result == 30;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/out_of_order_jarsrc/inheritance_cycle/Super.java",
        "code": "  public int increment(int i)\n    \n    \n  {\n    return ++i;\n  }\n",
        "methodStartingLine": 3,
        "methodEndingLine": 8,
        "jml": "//@ requires i < 100;\n//@ ensures result == i + 1;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/ghost_imports/Main_missing_fixpoint_include.java",
        "code": "  public static void main(String[] args) \n    \n    \n  {\n    Subpackage o = new Subpackage();\n    /*~*/ //@ int i = fixpoint1(0);\n  }\n",
        "methodStartingLine": 7,
        "methodEndingLine": 13,
        "jml": "//@ requires true;\n//@ ensures true; "
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/frontend/multiple_files/subpackage/NumberSix.java",
        "code": "  int getSix()\n    \n    \n  {\n    return 6;\n  }\n",
        "methodStartingLine": 5,
        "methodEndingLine": 10,
        "jml": "//@ requires true;\n//@ ensures result == 6;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/ghost_imports/Main_missing_predicate_include.java",
        "code": "  public static void main(String[] args) \n    \n    \n  {\n    Subpackage o = new Subpackage();\n    //@ int i = fixpoint1(0);\n    /*~*/ //@ close predicate1();\n  }\n",
        "methodStartingLine": 7,
        "methodEndingLine": 14,
        "jml": "//@ requires true;\n//@ ensures true; "
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/frontend/inner_class/AnonymousClass_desugared.java",
        "code": "  public static void main(String[] args)    \n    \n    \n  {\n    AnonymousInterface inner = new AnonymousClass_desugared$1();\n    \n    int i = 0;\n    i = inner.increment(100);\n    //@ assert i == 101;\n    i = inner.increment(i);\n    //@ assert i == 102;\n    i = inner.decrement(i);\n    //@ assert i == 101;\n    i = inner.decrement(i);\n    //@ assert i == 100;\n  }\n",
        "methodStartingLine": 14,
        "methodEndingLine": 29,
        "jml": "//@ requires true;\n//@ ensures true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/frontend/inner_class/AnonymousClass_desugared.java",
        "code": "  public int increment(int i)    \n    \n    \n  {\n    return i + 1;\n  }\n",
        "methodStartingLine": 34,
        "methodEndingLine": 39,
        "jml": "//@ requires true;\n//@ ensures result == i + 1;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/frontend/inner_class/AnonymousClass_desugared.java",
        "code": "  public int decrement(int i)    \n    \n    \n  {\n    return i - 1;\n  }\n",
        "methodStartingLine": 41,
        "methodEndingLine": 46,
        "jml": "//@ requires true;\n//@ ensures result == i - 1;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/frontend/multiple_files/subpackage/NumberFive.java",
        "code": "  int getFive()\n    \n    \n  {\n    return 5;\n  }\n",
        "methodStartingLine": 5,
        "methodEndingLine": 10,
        "jml": "//@ requires true;\n//@ ensures result == 5;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/reduced_annotations/java_language/PartiallyAnnotated2.java",
        "code": "  public int annotatedIncInterface2_1(int i)\n    \n    \n  {\n    return ++i;\n  }\n",
        "methodStartingLine": 29,
        "methodEndingLine": 34,
        "jml": "//@ requires i < 100;\n//@ ensures result == i + 1;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/reduced_annotations/java_language/PartiallyAnnotated2.java",
        "code": "  public int annotatedIncInterface2_2(int i)\n    \n    \n  {\n    return ++i;\n  }\n",
        "methodStartingLine": 51,
        "methodEndingLine": 56,
        "jml": "//@ requires i < 100;\n//@ ensures result == i + 1;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/reduced_annotations/java_language/PartiallyAnnotated2.java",
        "code": "  public int annotatedIncClass2(int i)\n    \n    \n  {\n    return ++i;\n  }\n",
        "methodStartingLine": 58,
        "methodEndingLine": 63,
        "jml": "//@ requires i < 100;\n//@ ensures result == i + 1;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/reduced_annotations/java_language/PartiallyAnnotated1.java",
        "code": "  public int annotatedIncInterface1_1(int i)\n    \n    \n  {\n    return ++i;\n  }\n",
        "methodStartingLine": 29,
        "methodEndingLine": 34,
        "jml": "//@ requires i < 100;\n//@ ensures result == i + 1;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/reduced_annotations/java_language/PartiallyAnnotated1.java",
        "code": "  public int annotatedIncInterface1_2(int i)\n    \n    \n  {\n    return ++i;\n  }\n",
        "methodStartingLine": 52,
        "methodEndingLine": 57,
        "jml": "//@ requires i < 100;\n//@ ensures result == i + 1;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/reduced_annotations/java_language/PartiallyAnnotated1.java",
        "code": "  public int annotatedIncClass1(int i)\n    \n    \n  {\n    return ++i;\n  }\n",
        "methodStartingLine": 59,
        "methodEndingLine": 64,
        "jml": "//@ requires i < 100;\n//@ ensures result == i + 1;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/frontend/inner_class/StaticMemberClass_desugared.java",
        "code": "  public static void main(String[] args)    \n    \n    \n  {\n    //@ init_class(OuterClass$InnerClass.class);\n    \n    OuterClass$InnerClass first = new OuterClass$InnerClass();\n    OuterClass$InnerClass second = new OuterClass$InnerClass();\n    first.setX(111);\n    int i = first.getX();\n    /*@ assert i == 111;@*/\n\n    first.setY(222);\n    int j = second.getY();\n    /*@ assert j == 222;@*/\n  }\n",
        "methodStartingLine": 7,
        "methodEndingLine": 22,
        "jml": "//@ requires class_init_token(OuterClass$InnerClass.class);\n//@ ensures true; "
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/frontend/inner_class/StaticMemberClass_desugared.java",
        "code": "  int getX()    \n    \n    \n  {\n    //@ open OuterClass$InnerClass(x);\n    return this.x;\n  }\n",
        "methodStartingLine": 38,
        "methodEndingLine": 44,
        "jml": "//@ requires OuterClass$InnerClass(?x);\n//@ ensures OuterClass$InnerClass(x) &*& result == x;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/frontend/inner_class/StaticMemberClass_desugared.java",
        "code": "  void setX(int i)    \n    \n    \n  {\n    x = i;\n  }\n",
        "methodStartingLine": 46,
        "methodEndingLine": 51,
        "jml": "//@ requires OuterClass$InnerClass(_);\n//@ ensures OuterClass$InnerClass(i);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/frontend/inner_class/StaticMemberClass_desugared.java",
        "code": "  static int getY()    \n   \n   \n  {\n    return y;\n  }\n",
        "methodStartingLine": 53,
        "methodEndingLine": 58,
        "jml": "//@ requires OuterClass$InnerClass_y(?y');\n//@ ensures OuterClass$InnerClass_y(y') &*& result == y'; "
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/frontend/inner_class/StaticMemberClass_desugared.java",
        "code": "  static void setY(int i)    \n    \n    \n  {\n    y = i;\n  }\n",
        "methodStartingLine": 60,
        "methodEndingLine": 65,
        "jml": "//@ requires OuterClass$InnerClass_y(_);\n//@ ensures OuterClass$InnerClass_y(i);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/frontend/many_files/subpackage1/subsub1/Number1_1.java",
        "code": "  static public int getNumber()\n    \n    \n  {\n    return 11;\n  }\n",
        "methodStartingLine": 5,
        "methodEndingLine": 10,
        "jml": "//@ requires true;\n//@ ensures result == 11;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/frontend/many_files/subpackage2/subsub1/Number2_1.java",
        "code": "  public static int getNumber()\n    \n    \n  {\n    return 21;\n  }\n",
        "methodStartingLine": 5,
        "methodEndingLine": 10,
        "jml": "//@ requires true;\n//@ ensures result == 21;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/frontend/many_files/subpackage2/subsub2/Number2_2.java",
        "code": "  public static int getNumber()\n    \n    \n  {\n    return 22;\n  }\n",
        "methodStartingLine": 5,
        "methodEndingLine": 10,
        "jml": "//@ requires true;\n//@ ensures result == 22;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/frontend/many_files/subpackage3/subsub1/Number3_1.java",
        "code": "  public static int getNumber()\n    \n    \n  {\n    return 31;\n  }\n",
        "methodStartingLine": 5,
        "methodEndingLine": 10,
        "jml": "//@ requires true;\n//@ ensures result == 31;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/frontend/many_files/subpackage3/subsub2/Number3_2.java",
        "code": "  public static int getNumber()\n    \n    \n  {\n    return 32;\n  }\n",
        "methodStartingLine": 5,
        "methodEndingLine": 10,
        "jml": "//@ requires true;\n//@ ensures result == 32;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/frontend/many_files/subpackage3/subsub3/Number3_3.java",
        "code": "  public static int getNumber()\n    \n    \n  {\n    return 33;\n  }\n",
        "methodStartingLine": 5,
        "methodEndingLine": 10,
        "jml": "//@ requires true;\n//@ ensures result == 33;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "tests/errors/override.java",
        "code": "    void m()\n        \n        \n    {\n        throw null;\n    }\n",
        "methodStartingLine": 2,
        "methodEndingLine": 7,
        "jml": "//@ requires true;\n//@ ensures false;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "tests/errors/override.java",
        "code": "    void m()\n        \n        \n    {\n    }\n",
        "methodStartingLine": 16,
        "methodEndingLine": 20,
        "jml": "//@ requires false; //~ should_fail\n//@ ensures false;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "tests/errors/override.java",
        "code": "    public static void main(String[] args)\n        \n        \n    {\n        D d = new D();\n        C c = d;\n        c.m();\n        assert false;\n    }\n",
        "methodStartingLine": 24,
        "methodEndingLine": 32,
        "jml": "//@ requires true;\n//@ ensures true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "tests/errors/override2.java",
        "code": "    void m()\n        \n        \n    {\n        //@ assume (false);\n    }\n",
        "methodStartingLine": 2,
        "methodEndingLine": 7,
        "jml": "//@ requires true;\n//@ ensures false;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "tests/errors/override2.java",
        "code": "    void m()\n        \n        \n    {\n        if (this.getClass() == D.class)\n        {\n            throw new RuntimeException();\n        }\n    }\n",
        "methodStartingLine": 11,
        "methodEndingLine": 19,
        "jml": "//@ requires this.getClass() == D.class;\n//@ ensures false;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "tests/errors/override2.java",
        "code": "    static void main(String[] args)\n        \n        \n    {\n        E e = new E();\n        /*\n        C c = e;\n        c.m();\n        assert false;\n        */\n    }\n",
        "methodStartingLine": 31,
        "methodEndingLine": 41,
        "jml": "//@ requires true;\n//@ ensures true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "tests/errors/override3.java",
        "code": "    void m()\n        \n        \n    {\n    }\n",
        "methodStartingLine": 13,
        "methodEndingLine": 17,
        "jml": "//@ requires false; //~ should_fail\n//@ ensures false;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "tests/errors/override3.java",
        "code": "    public static void main(String[] args)\n        \n        \n    {\n        D d = new D();\n        I i = d;\n        i.m();\n        assert false;\n    }\n",
        "methodStartingLine": 21,
        "methodEndingLine": 29,
        "jml": "//@ requires true;\n//@ ensures true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "tests/errors/superctor.java",
        "code": "    static void main(String[] args)\n        \n        \n    {\n        D d = new D();\n    }\n",
        "methodStartingLine": 19,
        "methodEndingLine": 24,
        "jml": "//@ requires true;\n//@ ensures true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "tests/bugs/z3-type-error.java",
        "code": "  public void m()\n    \n    \n  {\n  }   \n",
        "methodStartingLine": 21,
        "methodEndingLine": 25,
        "jml": "//@ requires exists<option<boolean > >(?t1) &*& predfam(B.class)(t1, ?t2);\n//@ ensures true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "tests/errors/array_update.java",
        "code": "  static void test(int[] xs)\n    \n    \n  {\n    xs[0] = 42; //~should_fail\n  }\n",
        "methodStartingLine": 3,
        "methodEndingLine": 8,
        "jml": "//@ requires [_]xs[..1] |-> _;\n//@ ensures true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/NestedExprTest.java",
        "code": "    int foo(int a)\n        \n        \n    {\n        x++;\n        return x;\n    }\n",
        "methodStartingLine": 10,
        "methodEndingLine": 16,
        "jml": "//@ requires x |-> ?v &*& v == a;\n//@ ensures x |-> v + 1 &*& result == v + 1;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/NestedExprTest.java",
        "code": "    static void bar(int a, int b)\n        \n        \n    {\n    }\n",
        "methodStartingLine": 18,
        "methodEndingLine": 22,
        "jml": "//@ requires a == 1 &*& b == 2;\n//@ ensures true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/NestedExprTest.java",
        "code": "    static void test()\n        \n        \n    {\n        Test t = new Test();\n        bar(t.foo(0), t.foo(1));\n        //@ assert t.x |-> 2;\n    }\n",
        "methodStartingLine": 24,
        "methodEndingLine": 31,
        "jml": "//@ requires true;\n//@ ensures true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "tests/java/generics/errors/Test3.java",
        "code": "    public void test2()\n    \n    \n    {\n    \tBoolean boola = new Boolean(false);\n\t\tInteger inta = new Integer(3);\n\t\tInteger intb = new Integer(5);\n    \tInteger infer2IntShouldFail = infer2(inta, intb, boola, boola); //~\n    }\n",
        "methodStartingLine": 7,
        "methodEndingLine": 15,
        "jml": "//@ requires true;\n//@ ensures true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "tests/errors/array_slice_autosplit.java",
        "code": "  public static void test(int[] xs)\n    \n    \n  {\n  }\n",
        "methodStartingLine": 3,
        "methodEndingLine": 7,
        "jml": "//@ requires array_slice(xs, 0, 10, _);\n//@ ensures array_slice(xs, 3, 2, _); //~should_fail"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "tests/java/generics/CorrectFieldTypes.java",
        "code": "    public static void main(String[] args)\n    \n    \n    {\n        GenericClass<Integer> gi = new GenericClass< >();\n        Integer i = gi.t;\n        ArrayList<Integer> arrayInt = new ArrayList< >();\n        Foo<Integer> fooI = new Foo< >();\n        ArrayList<Integer> ai = fooI.t;\n    }\n",
        "methodStartingLine": 6,
        "methodEndingLine": 15,
        "jml": "//@ requires true;\n//@ ensures true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/termination/tests/SelfCall.java",
        "code": "    static void foo()\n        \n        \n        //@ terminates;\n    {\n        foo(); //~ should_fail\n    }\n",
        "methodStartingLine": 3,
        "methodEndingLine": 9,
        "jml": "//@ requires true;\n//@ ensures true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/termination/tests/MutualCall2.java",
        "code": "    static void bar()\n        \n        \n        //@ terminates;\n    {\n        Baz.baz(); //~ should_fail\n    }\n",
        "methodStartingLine": 3,
        "methodEndingLine": 9,
        "jml": "//@ requires true;\n//@ ensures true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/termination/tests/MutualCall2.java",
        "code": "    static void baz()\n        \n        \n        //@ terminates;\n    {\n        Bar.bar();\n    }\n",
        "methodStartingLine": 15,
        "methodEndingLine": 21,
        "jml": "//@ requires true;\n//@ ensures true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/termination/tests/MutualCall1.java",
        "code": "    static void bar()\n        \n        \n        //@ terminates;\n    {\n        baz(); //~ should_fail\n    }\n",
        "methodStartingLine": 3,
        "methodEndingLine": 9,
        "jml": "//@ requires true;\n//@ ensures true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/termination/tests/MutualCall1.java",
        "code": "    static void baz()\n        \n        \n        //@ terminates;\n    {\n        bar();\n    }\n",
        "methodStartingLine": 11,
        "methodEndingLine": 17,
        "jml": "//@ requires true;\n//@ ensures true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "tests/java/generics/QualifiedGenericMethodCall.java",
        "code": "\tpublic static <T,V> V usefulMethod(T arg, V arg2)\n\t\n\t\n\t{\n\t\treturn arg2;\n\t}\n",
        "methodStartingLine": 5,
        "methodEndingLine": 10,
        "jml": "//@ requires true;\n//@ ensures true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "tests/java/generics/QualifiedGenericMethodCall.java",
        "code": "\tpublic static void main(String[] args) \n\t\n\t\n\t{\n\t\t// Qualified call to static parameterised method:\n\t\t// Type arguments explicitly provided.\n\t\tInteger[] a = {new Integer(1), new Integer(2)};\n\t\tBoolean b = new Boolean(true);\n\t\tQualifiedGenericMethodCall.<Integer[], Boolean>usefulMethod(a, b);\n\t\t\n\t\tInteger c = new Integer(3);\n\t\t\n\t\tBar myBar = new Bar();\n\t\tmyBar.<Integer, Boolean>foo(c,b);\n\t}\n",
        "methodStartingLine": 12,
        "methodEndingLine": 26,
        "jml": "//@ requires true;\n//@ ensures true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "tests/java/generics/QualifiedGenericMethodCall.java",
        "code": "    public <T> void foo(Integer x, T y) \n    \n    \n    {  \n    \tthis.<Integer, T>foo(x,y);\n    }\n",
        "methodStartingLine": 30,
        "methodEndingLine": 35,
        "jml": "//@ requires true;\n//@ ensures true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "tests/java/generics/QualifiedGenericMethodCall.java",
        "code": "    public <T, U> void foo(T x, U y)\n    \n    \n    {  }\n",
        "methodStartingLine": 36,
        "methodEndingLine": 39,
        "jml": "//@ requires true;\n//@ ensures true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/termination/tests/SimpleTermination.java",
        "code": "    static void foo()\n        \n        \n        //@ terminates;\n    {\n        for (int i = 0; i < 10; i++)\n            //@ invariant true;\n            //@ decreases 10 - i;\n        {\n        }\n    }\n",
        "methodStartingLine": 3,
        "methodEndingLine": 13,
        "jml": "//@ requires true;\n//@ ensures true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/termination/tests/SimpleTermination.java",
        "code": "    static void bar()\n        \n        \n        //@ terminates;\n    {\n        for (int i = 0; i < 10; i++)\n            //@ invariant true;\n            //@ decreases 10 - i;\n        {\n            foo();\n        }\n    }\n",
        "methodStartingLine": 15,
        "methodEndingLine": 26,
        "jml": "//@ requires true;\n//@ ensures true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/termination/tests/SimpleTermination.java",
        "code": "    static void quux()\n        \n        \n        //@ terminates;\n    {\n        SimpleTermination.bar();\n    }\n",
        "methodStartingLine": 38,
        "methodEndingLine": 44,
        "jml": "//@ requires true;\n//@ ensures true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/termination/tests/SimpleTermination.java",
        "code": "    void bar()\n        \n        \n        //@ terminates;\n    {\n        AnotherClass anotherClass = new AnotherClass();\n    }\n",
        "methodStartingLine": 50,
        "methodEndingLine": 56,
        "jml": "//@ requires true;\n//@ ensures true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/termination/tests/SimpleTermination.java",
        "code": "    static void foo()\n        \n        \n        //@ terminates;\n    {\n        Foo foo = new Foo(); // Default constructor is declared as 'terminates'.\n        //foo.bar(); //TODO: allow this\n    }\n",
        "methodStartingLine": 58,
        "methodEndingLine": 65,
        "jml": "//@ requires true;\n//@ ensures true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "tests/lemma_ptrs_with_nonghostcallersonly/CallNonghost.java",
        "code": "  public void m()\n  \n  \n  {\n    /*@\n         produce_lemma_function_pointer_chunk(empty) : empty_t()()\n                {\n                    normal_lemma(); // can call preceding lemmas.\n                    nonghost_only_lemma(); //~   <-- must fail\n                    //call();\n                    //normal_lemma();\n                }\n                {\n                    //nonghost_only_lemma();\n                }\n    @*/\n  }\n",
        "methodStartingLine": 30,
        "methodEndingLine": 46,
        "jml": "//@ requires true;\n//@ ensures true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "tests/lemma_ptrs_with_nonghostcallersonly/SunnyDayScenario.java",
        "code": "  public void m()\n  \n  \n  {\n    /*@\n         produce_lemma_function_pointer_chunk(empty) : empty_t()()\n                {\n                    normal_lemma(); // can call preceding lemmas.\n                    call();\n                    normal_lemma();\n                }\n                {\n                    nonghost_only_lemma();\n                }\n    @*/\n  }\n",
        "methodStartingLine": 30,
        "methodEndingLine": 45,
        "jml": "//@ requires true;\n//@ ensures true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Tree.java",
        "code": "\tpublic boolean contains(int x)\n\t\n\t\n\t{\n\t\t//@ open tree(this,b);\n\t\tint v=this.value;\n\t\tTree l=this.left;\n\t\tTree r=this.right;\n\t\tif(v==x){\n\t\t\t//@close tree(this,b);\n\t\t\treturn true;\n\t\t}else{\n\t\t\tif(x < v){\n\t\t\t\tboolean temp1=false;\n\t\t\t\tif(l != null) {\n\t\t\t\t  temp1 = l.contains(x);\n\t\t\t\t} else {\n\t\t\t\t  //@ open tree(l, ?lv);\n\t\t\t\t  //@ close tree(l, lv);\n\t\t\t\t}\n\t\t\t\t//@close tree(this,b);\n\t\t\t\treturn temp1;\n\t\t\t}else{\n\t\t\t\tboolean temp2=false;\n\t\t\t\tif(r != null) {\n\t\t\t\t  temp2 = r.contains(x);\n\t\t\t\t} else {\n\t\t\t\t  //@ open tree(r, ?rv);\n\t\t\t\t  //@ close tree(r, rv);\n\t\t\t\t}\n\t\t\t\t//@close tree(this,b);\n\t\t\t\treturn temp2;\n\t\t\t}\n\t\t}\n\t}\n",
        "methodStartingLine": 299,
        "methodEndingLine": 333,
        "jml": "//@ requires tree(this,?b);\n//@ ensures tree(this,b) &*& result==t_contains(b,x);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Tree.java",
        "code": "\tpublic void add(int x)\n\t\n\t\n\t{\n\t\t//@ open tree(this,b);\n\t\tint v=this.value;\n\t\tTree l=this.left;\n\t\t//@ open tree(l,?bl);\n\t\t//@ close tree(l,bl);\n\t\tTree r=this.right;\n\t\t//@ open tree(r,?br);\n\t\t//@ close tree(r,br);\n\t\tif(x < v){\n\t\t\tif(l!=null){\n\t\t\t\tl.add(x);\n\t\t\t\t//@ tree_add_inorder(b,x);\n\t\t\t\t//@ close tree(this,tcons(v,tree_add(bl,x),br));\n\t\t\t}else{\n\t\t\t\tTree temp=new Tree(x);\n\t\t\t\tthis.left=temp;\n\t\t\t\t//@ open tree(l,bl);\n\t\t\t\t//@ close tree(this,tcons(v,tcons(x,tnil,tnil),br));\n\t\t\t\t//@ tree_add_inorder(b,x);\n\t\t\t}\n\t\t}else{\n\t\t\tif(v < x){\n\t\t\t\tif(r!=null){\n\t\t\t\t\tr.add(x);\n\t\t\t\t\t//@ tree_add_inorder(b,x);\n\t\t\t\t\t//@ close tree(this,tcons(v,bl,tree_add(br,x)));\t\n\t\t\t\t}else{\n\t\t\t\t\tTree temp=new Tree(x);\n\t\t\t\t\tthis.right=temp;\n\t\t\t\t\t//@ open tree(r,br);\n\t\t\t\t\t//@ close tree(this,tcons(v,bl,tcons(x,tnil,tnil)));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n",
        "methodStartingLine": 334,
        "methodEndingLine": 372,
        "jml": "//@ requires tree(this,?b) &*& b!=tnil &*& false==t_contains(b,x) &*& inorder(b)==true;\n//@ ensures tree(this,tree_add(b,x)) &*& inorder(tree_add(b,x))==true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Tree.java",
        "code": "\tpublic int maximum()\n\t\n\t\n\t{\n\t\t//@ open tree(this,b);\n\t\tint v=this.value;\n\t\tTree r=this.right;\n\t\t//@ open tree(r,?br);\n\t\t//@ close tree(r,br);\n\t\tif(r==null){\n\t\t\t//@ close tree(this,b);\n\t\t\treturn v;\n\t\t}else{\n\t\t\tint m= r.maximum();\n\t\t\t//@ close tree(this,b);\n\t\t\treturn m;\n\t\t}\n\t}\n",
        "methodStartingLine": 373,
        "methodEndingLine": 390,
        "jml": "//@ requires tree(this,?b) &*& b!=tnil &*& inorder(b)==true;\n//@ ensures result==max(b) &*& tree(this,b);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Tree.java",
        "code": "\tpublic Tree remove(int x)\n\t\n\t\n\t{\n\t\t//@ open tree(this,b);\n\t\tint v=this.value;\n\t\tTree l=this.left;\n\t\t//@ open tree(l,?bl);\n\t\t//@ close tree(l,bl);\n\t\tTree r=this.right;\n\t\t//@ open tree(r,?br);\n\t\t//@ close tree(r,br);\n\t\t//@ tree_rem_inorder(b,x);\n\t\tif(x < v){\n\t\t\tif(l!=null){\n\t\t\t\tTree temp=l.remove(x);\n\t\t\t\tthis.left=temp;\n\t\t\t\t//@ close tree(this,tcons(v,tree_rem(bl,x),br));\n\t\t\t\treturn this;\n\t\t\t}\n\t\t}\n\t\tif(v < x){\n\t\t\tif(r!=null){\n\t\t\t\tTree temp=r.remove(x);\n\t\t\t\tthis.right=temp;\n\t\t\t\t//@ close tree(this,tcons(v,bl,tree_rem(br,x)));\n\t\t\t\treturn this;\n\t\t\t}\n\t\t}\n\t\tif(v==x){\n\t\t\tif(l!=null&&r==null){\n\t\t\t\t//@ open tree(r,tnil);\n\t\t\t\treturn l;\n\t\t\t}\n\t\t\tif(l==null&&r==null){\n\t\t\t\t//@ close tree(this,b);\n\t\t\t\t//@ close tree(null,tnil);\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tif(l==null&&r!=null){\n\t\t\t\t//@ open tree(l,tnil);\n\t\t\t\treturn r;\n\t\t\t}\n\t\t\tif(l!=null&&r!=null){\n\t\t\t\tTree temp=null;\n\t\t\t\tint m=l.maximum();\n\t\t\t\tthis.value=m;\n\t\t\t\t//@ contains_max(bl);\n\t\t\t\ttemp=l.remove(m);\n\t\t\t\tthis.left=temp;\n\t\t\t\t//@ close tree(this,tcons(m,tree_rem(bl,m),br));\n\t\t\t\treturn this;\n\t\t\t}\n\t\t}\n\t\t//@ assert false;\n\t\t//this return statement is necessary because javac can't tell that this code will never be reached\n\t\treturn null; //~allow_dead_code\n\t}\n",
        "methodStartingLine": 391,
        "methodEndingLine": 448,
        "jml": "//@ requires tree(this,?b) &*& b!=tnil &*& true==t_contains(b,x)  &*& inorder(b)==true;\n//@ ensures tree(result,tree_rem(b,x))&*& inorder(tree_rem(b,x))==true &*& false==t_contains(tree_rem(b,x),x);"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "examples/java/Tree.java",
        "code": "\tpublic static void main(String[]  args)\n\t\n\t\n\t{\n\t\tTree t1=null;\n\t\tTree t2=null;\n\t\tTree t3=null;\n\t\tboolean a=false;\n\t\tboolean b=false;\n\t\tboolean c=false;\n\t\tboolean d=false;\n\t\tboolean e=false;\n\t\tboolean f=false;\n\n\t\tt1 = new Tree(3);\n\t\tb=t1.contains(2);\n\t\tassert(!b);\n\t\tt1.add(2);\n\n\t\ta=t1.contains(2);\n\t\tassert(a);\n\t\tc=t1.contains(3);\n\t\tassert(c);\n\t\tt2=t1.remove(3);\n\t\tif(t2 != null) {\n\t\t  d= t2.contains(3);\n\t\t  assert(!d);\n\n\t\t  t2.add(3);\n\t\t  e= t2.contains(2);\n\t\t  assert(e);\n\t\t  t3=t2.remove(3);\n\t\t  if(t3 != null) {\n\t\t    f=t3.contains(3);\n\t\t    assert(!f);\n\t\t  }\n\t\t}\n\t}\n",
        "methodStartingLine": 449,
        "methodEndingLine": 486,
        "jml": "//@ requires true;\n//@ ensures true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "tests/java/generics/DiamondOperator.java",
        "code": "\tpublic T get1()\n\t\n\t\n\t{\n\t\treturn f1;\n\t}\n",
        "methodStartingLine": 59,
        "methodEndingLine": 64,
        "jml": "//@ requires this.f1 |-> ?f;\n//@ ensures result == f &*& this.f1 |-> f;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "tests/java/generics/DiamondOperator.java",
        "code": "\tpublic V get2()\n\t\n\t\n\t{\n\t\treturn f2;\n\t}\n",
        "methodStartingLine": 66,
        "methodEndingLine": 71,
        "jml": "//@ requires this.f2 |-> ?f;\n//@ ensures result == f &*& this.f2 |-> f;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "tests/java/generics/BasicGenericClass.java",
        "code": "\tpublic void add(T arg)\n\t\n\t\n\t{\n\t\tfield = arg;\n\t}\n",
        "methodStartingLine": 10,
        "methodEndingLine": 15,
        "jml": "//@ requires this.field |-> ?f;\n//@ ensures this.field |-> arg;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "tests/java/generics/BasicGenericClass.java",
        "code": "\tpublic T get()\n\t\n\t\n\t{\n\t\treturn field;\n\t}\n",
        "methodStartingLine": 17,
        "methodEndingLine": 22,
        "jml": "//@ requires this.field |-> ?f;\n//@ ensures this.field |-> f;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "tests/errors/java_typing_array_assignment/Test1.java",
        "code": "\tpublic static void main()\n\t\n\t\n\t{\n\t\tTest1[] own1 = null;\n\t\tTest1[] own2 = null;\n\t\tObject[] obj1 = null;\n\t\tObject[] obj2 = null;\n\t\tint[] int1 = null;\n\t\tint[] int2 = null;\n\t\tshort[] short1 = null;\n\t\tshort[] short2 = null;\n\t\t\n\t\town1 = own2;\n\t\tobj1 = obj2;\n\t\tint1 = int2;\n\t\tshort1 = short2;\n\t\t\n\t\tobj1 = own1;\n\t}\n",
        "methodStartingLine": 6,
        "methodEndingLine": 25,
        "jml": "//@ requires true;\n//@ ensures true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "tests/errors/java_typing_array_assignment/Test1.java",
        "code": "\tpublic void test1()\n\t\n\t\n\t{\n\t\tTest1[] own1;\n\t\tObject [] obj1;\n\t\town1 = obj1; //~\n\t}\n",
        "methodStartingLine": 27,
        "methodEndingLine": 34,
        "jml": "//@ requires true;\n//@ ensures true;"
    },
    {
        "repository": "github.com/verifast/verifast",
        "file": "tests/errors/java_typing_array_assignment/Test2.java",
        "code": "\tpublic void test2()\n\t\n\t\n\t{\n\t\tint[] int1;\n\t\tshort [] short1;\n\t\tint1 = short1; //~ should-fail\n\t}\n",
        "methodStartingLine": 11,
        "methodEndingLine": 18,
        "jml": "//@ requires true;\n//@ ensures true;"
    }
]