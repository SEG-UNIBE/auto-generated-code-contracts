{
  "SourcegraphEndpoint": "https://sourcegraph.com",
  "Query": "(//@ requires )|(//@ ensures ) repo:github.com/Flunzmas/gym-autokey lang:java count:all case:yes type:file patterntype:regexp",
  "Site": {
    "BuildVersion": "238702_2023-08-16_5.1-acf4bcc841e5"
  },
  "Results": [
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "58a1b137d98e1240f442a87b239586b642dc69f2"
        },
        "content": "class B {\n\n    //@ ensures true;\n    void m(int[][] array) {\n\n\tint row = 0;\n\tint col = 0;\n\tint sum = 0;\n\n\t/*@ maintaining 0 \u003c= row \u0026\u0026 row \u003c= array.length \u0026\u0026 0 \u003c= col \u0026\u0026 col \u003c= array[row].length;\n\t  @ decreases \\dl_pair(array.length - row, array[row].length - col);\n\t  @ assignable \\strictly_nothing;\n\t  @*/\n\twhile(row \u003c array.length) {\n\t    if(col \u003c array[row].length) {\n\t\tsum += array[row][col];\n\t\tcol ++;\n\t    } else {\n\t\tcol = 0;\n\t\trow ++;\n\t    }\n\t}\n    }\n}\n",
        "name": "B.java",
        "path": "autokey_examples/heap/Wellfounded/B.java",
        "url": "/github.com/Flunzmas/gym-autokey/-/blob/autokey_examples/heap/Wellfounded/B.java"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 2,
          "offsetAndLengths": [
            [
              4,
              12
            ]
          ],
          "preview": "    //@ ensures true;"
        }
      ],
      "repository": {
        "name": "github.com/Flunzmas/gym-autokey",
        "url": "/github.com/Flunzmas/gym-autokey"
      }
    },
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "58a1b137d98e1240f442a87b239586b642dc69f2"
        },
        "content": "class B {\n\n    //@ ensures true;\n    void m(int[][] array) {\n\n\tint row = 0;\n\tint col = 0;\n\tint sum = 0;\n\n\t/*@ maintaining 0 \u003c= row \u0026\u0026 row \u003c= array.length \u0026\u0026 0 \u003c= col \u0026\u0026 col \u003c= array[row].length;\n\t  @ decreases \\dl_pair(array.length - row, array[row].length - col);\n\t  @ assignable \\strictly_nothing;\n\t  @*/\n\twhile(row \u003c array.length) {\n\t    if(col \u003c array[row].length) {\n\t\tsum += array[row][col];\n\t\tcol ++;\n\t    } else {\n\t\tcol = 0;\n\t\trow ++;\n\t    }\n\t}\n    }\n}\n",
        "name": "B.java",
        "path": "key/key/key.ui/examples/heap/Wellfounded/B.java",
        "url": "/github.com/Flunzmas/gym-autokey/-/blob/key/key/key.ui/examples/heap/Wellfounded/B.java"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 2,
          "offsetAndLengths": [
            [
              4,
              12
            ]
          ],
          "preview": "    //@ ensures true;"
        }
      ],
      "repository": {
        "name": "github.com/Flunzmas/gym-autokey",
        "url": "/github.com/Flunzmas/gym-autokey"
      }
    },
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "58a1b137d98e1240f442a87b239586b642dc69f2"
        },
        "content": "class For implements Iterable {\n\n  int[] a;\n  Trivial it;\n  For f;\n\n  //@ ensures \\result == (\\sum int j; 0 \u003c= j \u0026\u0026 j \u003c a.length; a[j]);\n  int sum () {\n    int s = 0;\n    int z = a.length;\n\n    /*@ maintaining s == (\\sum int j; 0 \u003c= j \u0026\u0026 j \u003c \\index; a[j]);\n      @ maintaining 0 \u003c= \\index \u0026\u0026 \\index \u003c= a.length;\n      @ decreasing a.length - \\index;\n      @ assignable \\strictly_nothing;\n      @*/\n    for (int i: a) s+= i;\n    return s;\n  }\n\n  /*@ requires \\invariant_for(f);\n    @ diverges true;\n    @ ensures false;\n    @*/\n  void infiniteLoop() {\n    //@ maintaining \\invariant_for(f);\n    //@ assignable \\strictly_nothing;\n    for (Object o: f);\n  }\n\n  public java.util.Iterator iterator () { return it; } \n\n  class Trivial implements java.util.Iterator {\n    public boolean hasNext() { return true; }\n    public Object next() { return null; }\n\tpublic void remove() { }\n  }\n}\n",
        "name": "For.java",
        "path": "autokey_examples/firstTouch/08-Java5/src/For.java",
        "url": "/github.com/Flunzmas/gym-autokey/-/blob/autokey_examples/firstTouch/08-Java5/src/For.java"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 6,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures \\result == (\\sum int j; 0 \u003c= j \u0026\u0026 j \u003c a.length; a[j]);"
        }
      ],
      "repository": {
        "name": "github.com/Flunzmas/gym-autokey",
        "url": "/github.com/Flunzmas/gym-autokey"
      }
    },
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "58a1b137d98e1240f442a87b239586b642dc69f2"
        },
        "content": "interface Coll {\n\n    /*@ model_behavior\n      @ ensures x\u003e0 ==\u003e \\result;\n      @ model boolean add_pre(int x);\n      @*/\n\n    //@ requires add_pre(x);\n    void add(int x);\n}\n\nclass Indirect {\n    /*@ requires \\invariant_for(c) \u0026\u0026 c.add_pre(v); @*/\n    void callAdd(Coll c, int v) {\n        c.add(v);\n    }\n\n    //@ requires \\invariant_for(c1) \u0026\u0026 \\invariant_for(c2);\n    //@ ensures true;\n    void test(Coll1 c1, Coll2 c2) {\n        callAdd(c1, 42);\n        callAdd(c2, -42);\n    }\n}\n\nclass Coll1 implements Coll {\n\n    /*@ model boolean add_pre(int x) { return (x \u003e 0); } @*/\n\n    public void add(int x) { }\n\n}\n\n\nfinal class Coll2 implements Coll { \n\n    /*@ model boolean add_pre(int x) { return true; } @*/\n\n    public void add(int x) { }\n\n}",
        "name": "Coll.java",
        "path": "autokey_examples/heap/model_methods/src/Coll.java",
        "url": "/github.com/Flunzmas/gym-autokey/-/blob/autokey_examples/heap/model_methods/src/Coll.java"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 7,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires add_pre(x);"
        },
        {
          "limitHit": false,
          "lineNumber": 17,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires \\invariant_for(c1) \u0026\u0026 \\invariant_for(c2);"
        },
        {
          "limitHit": false,
          "lineNumber": 18,
          "offsetAndLengths": [
            [
              4,
              12
            ]
          ],
          "preview": "    //@ ensures true;"
        }
      ],
      "repository": {
        "name": "github.com/Flunzmas/gym-autokey",
        "url": "/github.com/Flunzmas/gym-autokey"
      }
    },
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "58a1b137d98e1240f442a87b239586b642dc69f2"
        },
        "content": "class A {\n\n   //@ ensures \\result \u003e 0;\n   int f() { return 42; }\n\n   //@ ensures \\result != null;\n   Object g() { return this; }\n\n   //@ ensures \\result;\n   boolean m(boolean b) {\n       boolean r;\n       if(b) {\n           r = f() \u003e 0;\n       } else {\n           r = g() != null;\n       }\n       \n       //@ merge_point;\n       \n       return r;\n   }\n}\n\n",
        "name": "A.java",
        "path": "autokey_examples/firstTouch/11-StateMerging/A.java",
        "url": "/github.com/Flunzmas/gym-autokey/-/blob/autokey_examples/firstTouch/11-StateMerging/A.java"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 2,
          "offsetAndLengths": [
            [
              3,
              12
            ]
          ],
          "preview": "   //@ ensures \\result \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 5,
          "offsetAndLengths": [
            [
              3,
              12
            ]
          ],
          "preview": "   //@ ensures \\result != null;"
        },
        {
          "limitHit": false,
          "lineNumber": 8,
          "offsetAndLengths": [
            [
              3,
              12
            ]
          ],
          "preview": "   //@ ensures \\result;"
        }
      ],
      "repository": {
        "name": "github.com/Flunzmas/gym-autokey",
        "url": "/github.com/Flunzmas/gym-autokey"
      }
    },
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "58a1b137d98e1240f442a87b239586b642dc69f2"
        },
        "content": "class GSum {\n\n  //@ ensures (\\num_of Object o, p; false) == (\\sum \\real r; 0);\n  void /*@ helper @*/ doNothing(){}\n}\n",
        "name": "GSum.java",
        "path": "autokey_examples/heap/comprehensions/src/GSum.java",
        "url": "/github.com/Flunzmas/gym-autokey/-/blob/autokey_examples/heap/comprehensions/src/GSum.java"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 2,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures (\\num_of Object o, p; false) == (\\sum \\real r; 0);"
        }
      ],
      "repository": {
        "name": "github.com/Flunzmas/gym-autokey",
        "url": "/github.com/Flunzmas/gym-autokey"
      }
    },
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "58a1b137d98e1240f442a87b239586b642dc69f2"
        },
        "content": "class CellClient {\n    \n    //@ ensures \\result.getX() == 5;\n    Cell m() {\n\tCell c1 = new Cell();\n\tc1.setX(5);\n\t\n\tCell c2 = new Cell();\n\tc2.setX(10);\n\t\n\treturn c1;\n    }\n}\n",
        "name": "CellClient.java",
        "path": "autokey_examples/heap/SmansEtAl/src/CellClient.java",
        "url": "/github.com/Flunzmas/gym-autokey/-/blob/autokey_examples/heap/SmansEtAl/src/CellClient.java"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 2,
          "offsetAndLengths": [
            [
              4,
              12
            ]
          ],
          "preview": "    //@ ensures \\result.getX() == 5;"
        }
      ],
      "repository": {
        "name": "github.com/Flunzmas/gym-autokey",
        "url": "/github.com/Flunzmas/gym-autokey"
      }
    },
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "58a1b137d98e1240f442a87b239586b642dc69f2"
        },
        "content": "class Other {\n    // contract\n    void other() { }\n    final void otherFinal() { }\n}\n\nfinal class Final {\n    void finalMethod() { }\n}\n\nclass Modular {\n    Other other;\n    Final _final;\n\n    private void privateMethod() { }\n\n    //@ ensures true;\n    void m() {\n        privateMethod();\n        _final.finalMethod();\n        other.otherFinal();\n        other.other();\n    }\n}\n",
        "name": "Modular.java",
        "path": "autokey_examples/heap/strictlyModular/src/Modular.java",
        "url": "/github.com/Flunzmas/gym-autokey/-/blob/autokey_examples/heap/strictlyModular/src/Modular.java"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 16,
          "offsetAndLengths": [
            [
              4,
              12
            ]
          ],
          "preview": "    //@ ensures true;"
        }
      ],
      "repository": {
        "name": "github.com/Flunzmas/gym-autokey",
        "url": "/github.com/Flunzmas/gym-autokey"
      }
    },
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "58a1b137d98e1240f442a87b239586b642dc69f2"
        },
        "content": "class Min {\n\n  //@ ensures (\\min int x; x \u003e 40; x+1) == 42;\n  void bar(){}\n\n  //@ ensures (\\min int x; false; 42) == 42;\n  void foo(){} \n\n  //@ ensures (\\min int x; false; 42) != 42;\n  void foo2(){} \n}\n",
        "name": "Min.java",
        "path": "autokey_examples/standard_key/java_dl/jml-min/Min.java",
        "url": "/github.com/Flunzmas/gym-autokey/-/blob/autokey_examples/standard_key/java_dl/jml-min/Min.java"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 2,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures (\\min int x; x \u003e 40; x+1) == 42;"
        },
        {
          "limitHit": false,
          "lineNumber": 5,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures (\\min int x; false; 42) == 42;"
        },
        {
          "limitHit": false,
          "lineNumber": 8,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures (\\min int x; false; 42) != 42;"
        }
      ],
      "repository": {
        "name": "github.com/Flunzmas/gym-autokey",
        "url": "/github.com/Flunzmas/gym-autokey"
      }
    },
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "58a1b137d98e1240f442a87b239586b642dc69f2"
        },
        "content": "public class LinkedList {\n    private /*@ nullable @*/ LinkedList next ;\n    //@ model int index ;\n    //@ represents index \\such_that next == null || index \u003c next.index ;\n\n    //@ requires index == index;\n    //@ ensures this != next;\n    public void foo(){}\n}\n\n",
        "name": "LinkedList.java",
        "path": "autokey_examples/heap/linkedListSimple/LinkedList.java",
        "url": "/github.com/Flunzmas/gym-autokey/-/blob/autokey_examples/heap/linkedListSimple/LinkedList.java"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 5,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires index == index;"
        },
        {
          "limitHit": false,
          "lineNumber": 6,
          "offsetAndLengths": [
            [
              4,
              12
            ]
          ],
          "preview": "    //@ ensures this != next;"
        }
      ],
      "repository": {
        "name": "github.com/Flunzmas/gym-autokey",
        "url": "/github.com/Flunzmas/gym-autokey"
      }
    },
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "58a1b137d98e1240f442a87b239586b642dc69f2"
        },
        "content": "class CellClient {\n    \n    //@ ensures \\result.getX() == 5;\n    Cell m() {\n\tCell c1 = new Cell();\n\tc1.setX(5);\n\t\n\tCell c2 = new Cell();\n\tc2.setX(10);\n\t\n\treturn c1;\n    }\n}\n",
        "name": "CellClient.java",
        "path": "autokey_examples/firstTouch/07-Cell/src/CellClient.java",
        "url": "/github.com/Flunzmas/gym-autokey/-/blob/autokey_examples/firstTouch/07-Cell/src/CellClient.java"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 2,
          "offsetAndLengths": [
            [
              4,
              12
            ]
          ],
          "preview": "    //@ ensures \\result.getX() == 5;"
        }
      ],
      "repository": {
        "name": "github.com/Flunzmas/gym-autokey",
        "url": "/github.com/Flunzmas/gym-autokey"
      }
    },
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "58a1b137d98e1240f442a87b239586b642dc69f2"
        },
        "content": "class For implements Iterable {\n\n  int[] a;\n  Trivial it;\n  For f;\n\n  //@ ensures \\result == (\\sum int j; 0 \u003c= j \u0026\u0026 j \u003c a.length; a[j]);\n  int sum () {\n    int s = 0;\n    int z = a.length;\n\n    /*@ maintaining s == (\\sum int j; 0 \u003c= j \u0026\u0026 j \u003c \\index; a[j]);\n      @ maintaining 0 \u003c= \\index \u0026\u0026 \\index \u003c= a.length;\n      @ decreasing a.length - \\index;\n      @ assignable \\strictly_nothing;\n      @*/\n    for (int i: a) s+= i;\n    return s;\n  }\n\n  /*@ requires \\invariant_for(f);\n    @ diverges true;\n    @ ensures false;\n    @*/\n  void infiniteLoop() {\n    //@ maintaining \\invariant_for(f);\n    //@ assignable \\strictly_nothing;\n    for (Object o: f);\n  }\n\n  public java.util.Iterator iterator () { return it; } \n\n  class Trivial implements java.util.Iterator {\n    public boolean hasNext() { return true; }\n    public Object next() { return null; }\n\tpublic void remove() { }\n  }\n}\n",
        "name": "For.java",
        "path": "key/key/key.ui/examples/firstTouch/08-Java5/src/For.java",
        "url": "/github.com/Flunzmas/gym-autokey/-/blob/key/key/key.ui/examples/firstTouch/08-Java5/src/For.java"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 6,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures \\result == (\\sum int j; 0 \u003c= j \u0026\u0026 j \u003c a.length; a[j]);"
        }
      ],
      "repository": {
        "name": "github.com/Flunzmas/gym-autokey",
        "url": "/github.com/Flunzmas/gym-autokey"
      }
    },
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "58a1b137d98e1240f442a87b239586b642dc69f2"
        },
        "content": "interface Coll {\n\n    /*@ model_behavior\n      @ ensures x\u003e0 ==\u003e \\result;\n      @ model boolean add_pre(int x);\n      @*/\n\n    //@ requires add_pre(x);\n    void add(int x);\n}\n\nclass Indirect {\n    /*@ requires \\invariant_for(c) \u0026\u0026 c.add_pre(v); @*/\n    void callAdd(Coll c, int v) {\n        c.add(v);\n    }\n\n    //@ requires \\invariant_for(c1) \u0026\u0026 \\invariant_for(c2);\n    //@ ensures true;\n    void test(Coll1 c1, Coll2 c2) {\n        callAdd(c1, 42);\n        callAdd(c2, -42);\n    }\n}\n\nclass Coll1 implements Coll {\n\n    /*@ model boolean add_pre(int x) { return (x \u003e 0); } @*/\n\n    public void add(int x) { }\n\n}\n\n\nfinal class Coll2 implements Coll { \n\n    /*@ model boolean add_pre(int x) { return true; } @*/\n\n    public void add(int x) { }\n\n}",
        "name": "Coll.java",
        "path": "key/key/key.ui/examples/heap/model_methods/src/Coll.java",
        "url": "/github.com/Flunzmas/gym-autokey/-/blob/key/key/key.ui/examples/heap/model_methods/src/Coll.java"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 7,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires add_pre(x);"
        },
        {
          "limitHit": false,
          "lineNumber": 17,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires \\invariant_for(c1) \u0026\u0026 \\invariant_for(c2);"
        },
        {
          "limitHit": false,
          "lineNumber": 18,
          "offsetAndLengths": [
            [
              4,
              12
            ]
          ],
          "preview": "    //@ ensures true;"
        }
      ],
      "repository": {
        "name": "github.com/Flunzmas/gym-autokey",
        "url": "/github.com/Flunzmas/gym-autokey"
      }
    },
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "58a1b137d98e1240f442a87b239586b642dc69f2"
        },
        "content": "final class For implements Iterable {\n\n  // This example has been refactored pending solution to bug #1288\n  Trivial it;\n\n  //@ ensures \\result == (\\sum int j; 0 \u003c= j \u0026\u0026 j \u003c a.length; a[j]);\n  int sum (int[] a) {\n    int s = 0;\n    int z = a.length;\n\n    /*@ maintaining s == (\\sum int j; 0 \u003c= j \u0026\u0026 j \u003c \\index; a[j]);\n      @ maintaining 0 \u003c= \\index \u0026\u0026 \\index \u003c= a.length;\n      @ decreasing a.length - \\index;\n      @ assignable \\strictly_nothing;\n      @*/\n    for (int i: a) s+= i;\n    return s;\n  }\n\n  /*@ requires \\invariant_for(f);\n    @ diverges true;\n    @ ensures false;\n    @*/\n  void infiniteLoop(For f) {\n    //@ maintaining \\invariant_for(f);\n    //@ assignable \\strictly_nothing;\n    for (Object o: f);\n  }\n\n  java.util.Iterator iterator () { return it; } \n\n  final class Trivial extends java.util.Iterator {\n    boolean hasNext() { return true; }\n    Object next() { return null; }\n  }\n}\n",
        "name": "For.java",
        "path": "autokey_examples/standard_key/java_dl/java5/src/For.java",
        "url": "/github.com/Flunzmas/gym-autokey/-/blob/autokey_examples/standard_key/java_dl/java5/src/For.java"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 5,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures \\result == (\\sum int j; 0 \u003c= j \u0026\u0026 j \u003c a.length; a[j]);"
        }
      ],
      "repository": {
        "name": "github.com/Flunzmas/gym-autokey",
        "url": "/github.com/Flunzmas/gym-autokey"
      }
    },
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "58a1b137d98e1240f442a87b239586b642dc69f2"
        },
        "content": "class A {\n\n   //@ ensures \\result \u003e 0;\n   int f() { return 42; }\n\n   //@ ensures \\result != null;\n   Object g() { return this; }\n\n   //@ ensures \\result;\n   boolean m(boolean b) {\n       boolean r;\n       if(b) {\n           r = f() \u003e 0;\n       } else {\n           r = g() != null;\n       }\n       \n       //@ merge_point;\n       \n       return r;\n   }\n}\n\n",
        "name": "A.java",
        "path": "key/key/key.ui/examples/firstTouch/11-StateMerging/A.java",
        "url": "/github.com/Flunzmas/gym-autokey/-/blob/key/key/key.ui/examples/firstTouch/11-StateMerging/A.java"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 2,
          "offsetAndLengths": [
            [
              3,
              12
            ]
          ],
          "preview": "   //@ ensures \\result \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 5,
          "offsetAndLengths": [
            [
              3,
              12
            ]
          ],
          "preview": "   //@ ensures \\result != null;"
        },
        {
          "limitHit": false,
          "lineNumber": 8,
          "offsetAndLengths": [
            [
              3,
              12
            ]
          ],
          "preview": "   //@ ensures \\result;"
        }
      ],
      "repository": {
        "name": "github.com/Flunzmas/gym-autokey",
        "url": "/github.com/Flunzmas/gym-autokey"
      }
    },
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "58a1b137d98e1240f442a87b239586b642dc69f2"
        },
        "content": "class GSum {\n\n  //@ ensures (\\num_of Object o, p; false) == (\\sum \\real r; 0);\n  void /*@ helper @*/ doNothing(){}\n}\n",
        "name": "GSum.java",
        "path": "key/key/key.ui/examples/heap/comprehensions/src/GSum.java",
        "url": "/github.com/Flunzmas/gym-autokey/-/blob/key/key/key.ui/examples/heap/comprehensions/src/GSum.java"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 2,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures (\\num_of Object o, p; false) == (\\sum \\real r; 0);"
        }
      ],
      "repository": {
        "name": "github.com/Flunzmas/gym-autokey",
        "url": "/github.com/Flunzmas/gym-autokey"
      }
    },
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "58a1b137d98e1240f442a87b239586b642dc69f2"
        },
        "content": "class CellClient {\n    \n    //@ ensures \\result.getX() == 5;\n    Cell m() {\n\tCell c1 = new Cell();\n\tc1.setX(5);\n\t\n\tCell c2 = new Cell();\n\tc2.setX(10);\n\t\n\treturn c1;\n    }\n}\n",
        "name": "CellClient.java",
        "path": "key/key/key.ui/examples/heap/SmansEtAl/src/CellClient.java",
        "url": "/github.com/Flunzmas/gym-autokey/-/blob/key/key/key.ui/examples/heap/SmansEtAl/src/CellClient.java"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 2,
          "offsetAndLengths": [
            [
              4,
              12
            ]
          ],
          "preview": "    //@ ensures \\result.getX() == 5;"
        }
      ],
      "repository": {
        "name": "github.com/Flunzmas/gym-autokey",
        "url": "/github.com/Flunzmas/gym-autokey"
      }
    },
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "58a1b137d98e1240f442a87b239586b642dc69f2"
        },
        "content": "class Other {\n    // contract\n    void other() { }\n    final void otherFinal() { }\n}\n\nfinal class Final {\n    void finalMethod() { }\n}\n\nclass Modular {\n    Other other;\n    Final _final;\n\n    private void privateMethod() { }\n\n    //@ ensures true;\n    void m() {\n        privateMethod();\n        _final.finalMethod();\n        other.otherFinal();\n        other.other();\n    }\n}\n",
        "name": "Modular.java",
        "path": "key/key/key.ui/examples/heap/strictlyModular/src/Modular.java",
        "url": "/github.com/Flunzmas/gym-autokey/-/blob/key/key/key.ui/examples/heap/strictlyModular/src/Modular.java"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 16,
          "offsetAndLengths": [
            [
              4,
              12
            ]
          ],
          "preview": "    //@ ensures true;"
        }
      ],
      "repository": {
        "name": "github.com/Flunzmas/gym-autokey",
        "url": "/github.com/Flunzmas/gym-autokey"
      }
    },
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "58a1b137d98e1240f442a87b239586b642dc69f2"
        },
        "content": "public class Arrays {\n\n    private String[] a;\n\n    //@ ensures true;\n    public Object[] get() { return a; }\n\n    //@ requires a.length \u003e 0;\n    public String head() { return a[0]; }\n    \n    //@ requires x.length \u003e 0;\n    public Object[][][] head (Object[][][][] x) { return x[0]; } \n\n    //@ requires a == o \u0026\u0026 o != null;\n    //@ ensures \\invariant_for(this);\n    //@ helper\n    public void unprovable (/*@ nullable @*/ Object o) {}\n}\n",
        "name": "Arrays.java",
        "path": "autokey_examples/standard_key/java_dl/deepNonNull/Arrays.java",
        "url": "/github.com/Flunzmas/gym-autokey/-/blob/autokey_examples/standard_key/java_dl/deepNonNull/Arrays.java"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 4,
          "offsetAndLengths": [
            [
              4,
              12
            ]
          ],
          "preview": "    //@ ensures true;"
        },
        {
          "limitHit": false,
          "lineNumber": 7,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires a.length \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 10,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires x.length \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 13,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires a == o \u0026\u0026 o != null;"
        },
        {
          "limitHit": false,
          "lineNumber": 14,
          "offsetAndLengths": [
            [
              4,
              12
            ]
          ],
          "preview": "    //@ ensures \\invariant_for(this);"
        }
      ],
      "repository": {
        "name": "github.com/Flunzmas/gym-autokey",
        "url": "/github.com/Flunzmas/gym-autokey"
      }
    },
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "58a1b137d98e1240f442a87b239586b642dc69f2"
        },
        "content": "class Min {\n\n  //@ ensures (\\min int x; x \u003e 40; x+1) == 42;\n  void bar(){}\n\n  //@ ensures (\\min int x; false; 42) == 42;\n  void foo(){} \n\n  //@ ensures (\\min int x; false; 42) != 42;\n  void foo2(){} \n}\n",
        "name": "Min.java",
        "path": "key/key/key.ui/examples/standard_key/java_dl/jml-min/Min.java",
        "url": "/github.com/Flunzmas/gym-autokey/-/blob/key/key/key.ui/examples/standard_key/java_dl/jml-min/Min.java"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 2,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures (\\min int x; x \u003e 40; x+1) == 42;"
        },
        {
          "limitHit": false,
          "lineNumber": 5,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures (\\min int x; false; 42) == 42;"
        },
        {
          "limitHit": false,
          "lineNumber": 8,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures (\\min int x; false; 42) != 42;"
        }
      ],
      "repository": {
        "name": "github.com/Flunzmas/gym-autokey",
        "url": "/github.com/Flunzmas/gym-autokey"
      }
    },
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "58a1b137d98e1240f442a87b239586b642dc69f2"
        },
        "content": "public class LinkedList {\n    private /*@ nullable @*/ LinkedList next ;\n    //@ model int index ;\n    //@ represents index \\such_that next == null || index \u003c next.index ;\n\n    //@ requires index == index;\n    //@ ensures this != next;\n    public void foo(){}\n}\n\n",
        "name": "LinkedList.java",
        "path": "key/key/key.ui/examples/heap/linkedListSimple/LinkedList.java",
        "url": "/github.com/Flunzmas/gym-autokey/-/blob/key/key/key.ui/examples/heap/linkedListSimple/LinkedList.java"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 5,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires index == index;"
        },
        {
          "limitHit": false,
          "lineNumber": 6,
          "offsetAndLengths": [
            [
              4,
              12
            ]
          ],
          "preview": "    //@ ensures this != next;"
        }
      ],
      "repository": {
        "name": "github.com/Flunzmas/gym-autokey",
        "url": "/github.com/Flunzmas/gym-autokey"
      }
    },
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "58a1b137d98e1240f442a87b239586b642dc69f2"
        },
        "content": "class MyClass {\n    //@ model int size;\n    //@ represents size = size + 1;\n    \n    //@ model int evil;\n    //@ represents evil \\such_that false;\n    \n    //@ ensures \\result == 0;\n    int m() {\n\treturn 27;\n    }\n    \n\n    //@ requires size != evil;\n    //@ ensures \\result == 0;\n    int n() {\n\treturn 27;\n    }\n}\n",
        "name": "MyClass.java",
        "path": "autokey_examples/heap/inconsistent_represents/src/MyClass.java",
        "url": "/github.com/Flunzmas/gym-autokey/-/blob/autokey_examples/heap/inconsistent_represents/src/MyClass.java"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 7,
          "offsetAndLengths": [
            [
              4,
              12
            ]
          ],
          "preview": "    //@ ensures \\result == 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 13,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires size != evil;"
        },
        {
          "limitHit": false,
          "lineNumber": 14,
          "offsetAndLengths": [
            [
              4,
              12
            ]
          ],
          "preview": "    //@ ensures \\result == 0;"
        }
      ],
      "repository": {
        "name": "github.com/Flunzmas/gym-autokey",
        "url": "/github.com/Flunzmas/gym-autokey"
      }
    },
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "58a1b137d98e1240f442a87b239586b642dc69f2"
        },
        "content": "/** This is an example to illustrate JML's \\bigint type,\n * which always represents mathematical integers no matter what\n * Java integer semantics are in force.\n */\npublic class Mult {\n\n    // Without any pre condition, this post condition is not valid\n    // in the checking-overflow semantics.\n    // To prove it, we need to assume that the (mathematical) product\n    // is within the bounds of Java integers,\n    // which means we have to express this property using a different\n    // (ignoring-overflow) semantics.\n\n    /*@ public normal_behavior\n      @ requires -2147483648 \u003c x;\n      @ requires -2147483648 \u003c (\\bigint)x * (\\bigint)y;\n      @ requires (\\bigint)x * (\\bigint)y \u003c= 2147483647;\n      @ ensures \\result == x * y;\n      @*/\n    public int mult (int x, int y){\n        int z = 0;\n        boolean n = x \u003c 0;\n        if (n) x = -x;\n\t//@ ghost int oldx = x;\n\t//@ ghost \\bigint p = 0;\n\t/*@ maintaining 0 \u003c= x \u0026\u0026 x \u003c= oldx;\n          @ maintaining z == y * (oldx - x);\n\t  @ maintaining (\\bigint)z == p;\n          @ decreasing  x;\n\t  @*/\n        while (x-- \u003e 0) {\n\t    //@ set p = p + (\\bigint)y;\n\t    z += y;\n        }\n        return n? -z: z;\n    }\n\n// this example involving a narrowing cast \n// only works with Java integer semantics in force\n\n    //@ ghost byte b;\n\n    //@ ensures b == 0;\n    public void cast () {\n        //@ ghost \\bigint z = 256;\n        //@ set b = (byte) z;\n        {}\n    }\n}\n",
        "name": "Mult.java",
        "path": "autokey_examples/standard_key/java_dl/jml-bigint/src/Mult.java",
        "url": "/github.com/Flunzmas/gym-autokey/-/blob/autokey_examples/standard_key/java_dl/jml-bigint/src/Mult.java"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 42,
          "offsetAndLengths": [
            [
              4,
              12
            ]
          ],
          "preview": "    //@ ensures b == 0;"
        }
      ],
      "repository": {
        "name": "github.com/Flunzmas/gym-autokey",
        "url": "/github.com/Flunzmas/gym-autokey"
      }
    },
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "58a1b137d98e1240f442a87b239586b642dc69f2"
        },
        "content": "class CellClient {\n    \n    //@ ensures \\result.getX() == 5;\n    Cell m() {\n\tCell c1 = new Cell();\n\tc1.setX(5);\n\t\n\tCell c2 = new Cell();\n\tc2.setX(10);\n\t\n\treturn c1;\n    }\n}\n",
        "name": "CellClient.java",
        "path": "key/key/key.ui/examples/firstTouch/07-Cell/src/CellClient.java",
        "url": "/github.com/Flunzmas/gym-autokey/-/blob/key/key/key.ui/examples/firstTouch/07-Cell/src/CellClient.java"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 2,
          "offsetAndLengths": [
            [
              4,
              12
            ]
          ],
          "preview": "    //@ ensures \\result.getX() == 5;"
        }
      ],
      "repository": {
        "name": "github.com/Flunzmas/gym-autokey",
        "url": "/github.com/Flunzmas/gym-autokey"
      }
    },
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "58a1b137d98e1240f442a87b239586b642dc69f2"
        },
        "content": "public class RingBuffer {\n    \n    int[] data;\n    int first;\n    int len;\n    \n    //@ ghost \\seq list;\n    //@ invariant list.length == len;\n    //@ invariant data.length \u003e 0;\n    //@ invariant 0 \u003c= first \u0026\u0026 first \u003c data.length;\n    //@ invariant 0 \u003c= len \u0026\u0026 len \u003c= data.length;\n    //@ invariant (\\forall int i; 0 \u003c= i \u0026\u0026 i \u003c len; list[i] == data[modulo(first+i)]);\n        \n    /*@ normal_behavior\n      @ requires n \u003e= 1;\n      @ assignable this.*;\n      @ ensures list == \\seq_empty;\n      @ ensures first == 0;\n      @ ensures data.length == n;\n     */\n    RingBuffer(int n){\n        //@ set list = \\seq_empty;\n        data = new int[n];\n    }\n    \n    /*@ normal_behavior\n      @ ensures list == \\seq_empty;\n      @ ensures first == \\old(first);\n      @ assignable len,list;\n      @*/\n    void clear(){\n        //@ set list = \\seq_empty;\n        len = 0;\n    }\n    \n    /*@ normal_behavior\n      @ requires !isEmpty();\n      @ ensures \\result == list[0];\n      @ pure\n      @*/\n    int head() {\n        return data[first];\n    }\n    \n    /*@ normal_behavior\n      @ requires !isFull();\n      @ ensures list == \\seq_concat(\\old(list),\\seq_singleton(x));\n      @ assignable len,list,data[modulo(first+len)];\n      @*/\n    void push(int x){\n        int pos = modulo(first+len);\n\n        data[pos] = x;\n        //@ set list = \\seq_concat(list,\\seq_singleton(x));\n        len++;\n    }\n    \n    /*@ normal_behavior\n      @ requires !isEmpty();\n      @ ensures list == \\seq_sub(\\old(list),1,\\old(list.length));\n      @ ensures first == modulo(\\old(first)+1);\n      @ ensures \\result == \\old(data[first]);\n      @ assignable first,len,list;\n      @*/\n    int pop(){\n        int r = data[first];\n        first = modulo(first+1);\n\n        len--;\n        //@ set list = \\seq_sub(list,1,\\seq_length(list));\n        return r;\n    }\n    \n    \n    // helper methods\n    /*@ normal_behavior\n      @ ensures \\result == (len == 0);\n      @ strictly_pure helper\n      @*/\n    boolean isEmpty() {\n        return len == 0;\n    }\n    \n    /*@ normal_behavior\n      @ ensures \\result == (len  == data.length);\n      @ strictly_pure\n      @*/\n    boolean isFull() {\n        return len == data.length;\n    }\n    \n    /*@ public normal_behaviour\n      @   ensures x \u003e= 0 \u0026\u0026 x \u003c data.length ==\u003e \\result == x;\n      @   ensures x \u003e= data.length \u0026\u0026 x \u003c data.length + data.length ==\u003e\n      @       \\result == x - data.length;\n      @   strictly_pure\n      @*/\n    int modulo(int x) {\n\treturn x \u003c data.length ? x : x - data.length;\n    }\n    \n    // Harness\n    \n    //@ ensures true;\n    //@ signals (Exception) false;\n    static void test (int x, int y, int z){\n        RingBuffer b = new RingBuffer(2);\n        b.push(x);\n        b.push(y);\n        int h = b.pop();\n        assert h == x;\n        b.push(z);\n        h = b.pop();\n        assert h == y;\n        h = b.pop();\n        assert h == z;\n    }\n \n}\n",
        "name": "RingBuffer.java",
        "path": "autokey_examples/heap/vstte12_03_RingBuffer/src/RingBuffer.java",
        "url": "/github.com/Flunzmas/gym-autokey/-/blob/autokey_examples/heap/vstte12_03_RingBuffer/src/RingBuffer.java"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 103,
          "offsetAndLengths": [
            [
              4,
              12
            ]
          ],
          "preview": "    //@ ensures true;"
        }
      ],
      "repository": {
        "name": "github.com/Flunzmas/gym-autokey",
        "url": "/github.com/Flunzmas/gym-autokey"
      }
    },
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "58a1b137d98e1240f442a87b239586b642dc69f2"
        },
        "content": "final class For implements Iterable {\n\n  // This example has been refactored pending solution to bug #1288\n  Trivial it;\n\n  //@ ensures \\result == (\\sum int j; 0 \u003c= j \u0026\u0026 j \u003c a.length; a[j]);\n  int sum (int[] a) {\n    int s = 0;\n    int z = a.length;\n\n    /*@ maintaining s == (\\sum int j; 0 \u003c= j \u0026\u0026 j \u003c \\index; a[j]);\n      @ maintaining 0 \u003c= \\index \u0026\u0026 \\index \u003c= a.length;\n      @ decreasing a.length - \\index;\n      @ assignable \\strictly_nothing;\n      @*/\n    for (int i: a) s+= i;\n    return s;\n  }\n\n  /*@ requires \\invariant_for(f);\n    @ diverges true;\n    @ ensures false;\n    @*/\n  void infiniteLoop(For f) {\n    //@ maintaining \\invariant_for(f);\n    //@ assignable \\strictly_nothing;\n    for (Object o: f);\n  }\n\n  java.util.Iterator iterator () { return it; } \n\n  final class Trivial extends java.util.Iterator {\n    boolean hasNext() { return true; }\n    Object next() { return null; }\n  }\n}\n",
        "name": "For.java",
        "path": "key/key/key.ui/examples/standard_key/java_dl/java5/src/For.java",
        "url": "/github.com/Flunzmas/gym-autokey/-/blob/key/key/key.ui/examples/standard_key/java_dl/java5/src/For.java"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 5,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures \\result == (\\sum int j; 0 \u003c= j \u0026\u0026 j \u003c a.length; a[j]);"
        }
      ],
      "repository": {
        "name": "github.com/Flunzmas/gym-autokey",
        "url": "/github.com/Flunzmas/gym-autokey"
      }
    },
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "58a1b137d98e1240f442a87b239586b642dc69f2"
        },
        "content": "/* This class is now added with a strictly_pure \n   modifier */\n\n/*@ strictly_pure*/ class StrictlyPureClass {\n\n   //@ ensures true;\n   void thisMethodIsStrictlyPureByDefault();\n\n}\n",
        "name": "StrictlyPureModifiedClass.java",
        "path": "autokey_examples/heap/strictly_pure/StrictlyPureModifiedClass.java",
        "url": "/github.com/Flunzmas/gym-autokey/-/blob/autokey_examples/heap/strictly_pure/StrictlyPureModifiedClass.java"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 5,
          "offsetAndLengths": [
            [
              3,
              12
            ]
          ],
          "preview": "   //@ ensures true;"
        }
      ],
      "repository": {
        "name": "github.com/Flunzmas/gym-autokey",
        "url": "/github.com/Flunzmas/gym-autokey"
      }
    },
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "58a1b137d98e1240f442a87b239586b642dc69f2"
        },
        "content": "// please use faithful Java int semantics for this one\nclass Bigint {\n  //@ ghost \\bigint x;\n  //@ ghost \\bigint y;\n\n  //@ ensures x \u003e 0;\n  //@ ensures y \u003c 0;\n  void foo(){\n   //@ set x = 444444444444444444444444444444444;\n   //@ set y = (int) x * 4444444444444444;\n   //@ set x = x * 4444444444444444;\n   {}\n  }\n}\n",
        "name": "Bigint.java",
        "path": "autokey_examples/standard_key/integerSemantics/classes/Bigint.java",
        "url": "/github.com/Flunzmas/gym-autokey/-/blob/autokey_examples/standard_key/integerSemantics/classes/Bigint.java"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 5,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 6,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures y \u003c 0;"
        }
      ],
      "repository": {
        "name": "github.com/Flunzmas/gym-autokey",
        "url": "/github.com/Flunzmas/gym-autokey"
      }
    },
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "58a1b137d98e1240f442a87b239586b642dc69f2"
        },
        "content": "public class Arrays {\n\n    private String[] a;\n\n    //@ ensures true;\n    public Object[] get() { return a; }\n\n    //@ requires a.length \u003e 0;\n    public String head() { return a[0]; }\n    \n    //@ requires x.length \u003e 0;\n    public Object[][][] head (Object[][][][] x) { return x[0]; } \n\n    //@ requires a == o \u0026\u0026 o != null;\n    //@ ensures \\invariant_for(this);\n    //@ helper\n    public void unprovable (/*@ nullable @*/ Object o) {}\n}\n",
        "name": "Arrays.java",
        "path": "key/key/key.ui/examples/standard_key/java_dl/deepNonNull/Arrays.java",
        "url": "/github.com/Flunzmas/gym-autokey/-/blob/key/key/key.ui/examples/standard_key/java_dl/deepNonNull/Arrays.java"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 4,
          "offsetAndLengths": [
            [
              4,
              12
            ]
          ],
          "preview": "    //@ ensures true;"
        },
        {
          "limitHit": false,
          "lineNumber": 7,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires a.length \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 10,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires x.length \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 13,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires a == o \u0026\u0026 o != null;"
        },
        {
          "limitHit": false,
          "lineNumber": 14,
          "offsetAndLengths": [
            [
              4,
              12
            ]
          ],
          "preview": "    //@ ensures \\invariant_for(this);"
        }
      ],
      "repository": {
        "name": "github.com/Flunzmas/gym-autokey",
        "url": "/github.com/Flunzmas/gym-autokey"
      }
    },
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "58a1b137d98e1240f442a87b239586b642dc69f2"
        },
        "content": "class MyClass {\n    //@ model int size;\n    //@ represents size = size + 1;\n    \n    //@ model int evil;\n    //@ represents evil \\such_that false;\n    \n    //@ ensures \\result == 0;\n    int m() {\n\treturn 27;\n    }\n    \n\n    //@ requires size != evil;\n    //@ ensures \\result == 0;\n    int n() {\n\treturn 27;\n    }\n}\n",
        "name": "MyClass.java",
        "path": "key/key/key.ui/examples/heap/inconsistent_represents/src/MyClass.java",
        "url": "/github.com/Flunzmas/gym-autokey/-/blob/key/key/key.ui/examples/heap/inconsistent_represents/src/MyClass.java"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 7,
          "offsetAndLengths": [
            [
              4,
              12
            ]
          ],
          "preview": "    //@ ensures \\result == 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 13,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires size != evil;"
        },
        {
          "limitHit": false,
          "lineNumber": 14,
          "offsetAndLengths": [
            [
              4,
              12
            ]
          ],
          "preview": "    //@ ensures \\result == 0;"
        }
      ],
      "repository": {
        "name": "github.com/Flunzmas/gym-autokey",
        "url": "/github.com/Flunzmas/gym-autokey"
      }
    },
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "58a1b137d98e1240f442a87b239586b642dc69f2"
        },
        "content": "/** This is an example to illustrate JML's \\bigint type,\n * which always represents mathematical integers no matter what\n * Java integer semantics are in force.\n */\npublic class Mult {\n\n    // Without any pre condition, this post condition is not valid\n    // in the checking-overflow semantics.\n    // To prove it, we need to assume that the (mathematical) product\n    // is within the bounds of Java integers,\n    // which means we have to express this property using a different\n    // (ignoring-overflow) semantics.\n\n    /*@ public normal_behavior\n      @ requires -2147483648 \u003c x;\n      @ requires -2147483648 \u003c (\\bigint)x * (\\bigint)y;\n      @ requires (\\bigint)x * (\\bigint)y \u003c= 2147483647;\n      @ ensures \\result == x * y;\n      @*/\n    public int mult (int x, int y){\n        int z = 0;\n        boolean n = x \u003c 0;\n        if (n) x = -x;\n\t//@ ghost int oldx = x;\n\t//@ ghost \\bigint p = 0;\n\t/*@ maintaining 0 \u003c= x \u0026\u0026 x \u003c= oldx;\n          @ maintaining z == y * (oldx - x);\n\t  @ maintaining (\\bigint)z == p;\n          @ decreasing  x;\n\t  @*/\n        while (x-- \u003e 0) {\n\t    //@ set p = p + (\\bigint)y;\n\t    z += y;\n        }\n        return n? -z: z;\n    }\n\n// this example involving a narrowing cast \n// only works with Java integer semantics in force\n\n    //@ ghost byte b;\n\n    //@ ensures b == 0;\n    public void cast () {\n        //@ ghost \\bigint z = 256;\n        //@ set b = (byte) z;\n        {}\n    }\n}\n",
        "name": "Mult.java",
        "path": "key/key/key.ui/examples/standard_key/java_dl/jml-bigint/src/Mult.java",
        "url": "/github.com/Flunzmas/gym-autokey/-/blob/key/key/key.ui/examples/standard_key/java_dl/jml-bigint/src/Mult.java"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 42,
          "offsetAndLengths": [
            [
              4,
              12
            ]
          ],
          "preview": "    //@ ensures b == 0;"
        }
      ],
      "repository": {
        "name": "github.com/Flunzmas/gym-autokey",
        "url": "/github.com/Flunzmas/gym-autokey"
      }
    },
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "58a1b137d98e1240f442a87b239586b642dc69f2"
        },
        "content": "public class RingBuffer {\n    \n    int[] data;\n    int first;\n    int len;\n    \n    //@ ghost \\seq list;\n    //@ invariant list.length == len;\n    //@ invariant data.length \u003e 0;\n    //@ invariant 0 \u003c= first \u0026\u0026 first \u003c data.length;\n    //@ invariant 0 \u003c= len \u0026\u0026 len \u003c= data.length;\n    //@ invariant (\\forall int i; 0 \u003c= i \u0026\u0026 i \u003c len; list[i] == data[modulo(first+i)]);\n        \n    /*@ normal_behavior\n      @ requires n \u003e= 1;\n      @ assignable this.*;\n      @ ensures list == \\seq_empty;\n      @ ensures first == 0;\n      @ ensures data.length == n;\n     */\n    RingBuffer(int n){\n        //@ set list = \\seq_empty;\n        data = new int[n];\n    }\n    \n    /*@ normal_behavior\n      @ ensures list == \\seq_empty;\n      @ ensures first == \\old(first);\n      @ assignable len,list;\n      @*/\n    void clear(){\n        //@ set list = \\seq_empty;\n        len = 0;\n    }\n    \n    /*@ normal_behavior\n      @ requires !isEmpty();\n      @ ensures \\result == list[0];\n      @ pure\n      @*/\n    int head() {\n        return data[first];\n    }\n    \n    /*@ normal_behavior\n      @ requires !isFull();\n      @ ensures list == \\seq_concat(\\old(list),\\seq_singleton(x));\n      @ assignable len,list,data[modulo(first+len)];\n      @*/\n    void push(int x){\n        int pos = modulo(first+len);\n\n        data[pos] = x;\n        //@ set list = \\seq_concat(list,\\seq_singleton(x));\n        len++;\n    }\n    \n    /*@ normal_behavior\n      @ requires !isEmpty();\n      @ ensures list == \\seq_sub(\\old(list),1,\\old(list.length));\n      @ ensures first == modulo(\\old(first)+1);\n      @ ensures \\result == \\old(data[first]);\n      @ assignable first,len,list;\n      @*/\n    int pop(){\n        int r = data[first];\n        first = modulo(first+1);\n\n        len--;\n        //@ set list = \\seq_sub(list,1,\\seq_length(list));\n        return r;\n    }\n    \n    \n    // helper methods\n    /*@ normal_behavior\n      @ ensures \\result == (len == 0);\n      @ strictly_pure helper\n      @*/\n    boolean isEmpty() {\n        return len == 0;\n    }\n    \n    /*@ normal_behavior\n      @ ensures \\result == (len  == data.length);\n      @ strictly_pure\n      @*/\n    boolean isFull() {\n        return len == data.length;\n    }\n    \n    /*@ public normal_behaviour\n      @   ensures x \u003e= 0 \u0026\u0026 x \u003c data.length ==\u003e \\result == x;\n      @   ensures x \u003e= data.length \u0026\u0026 x \u003c data.length + data.length ==\u003e\n      @       \\result == x - data.length;\n      @   strictly_pure\n      @*/\n    int modulo(int x) {\n\treturn x \u003c data.length ? x : x - data.length;\n    }\n    \n    // Harness\n    \n    //@ ensures true;\n    //@ signals (Exception) false;\n    static void test (int x, int y, int z){\n        RingBuffer b = new RingBuffer(2);\n        b.push(x);\n        b.push(y);\n        int h = b.pop();\n        assert h == x;\n        b.push(z);\n        h = b.pop();\n        assert h == y;\n        h = b.pop();\n        assert h == z;\n    }\n \n}\n",
        "name": "RingBuffer.java",
        "path": "key/key/key.ui/examples/heap/vstte12_03_RingBuffer/src/RingBuffer.java",
        "url": "/github.com/Flunzmas/gym-autokey/-/blob/key/key/key.ui/examples/heap/vstte12_03_RingBuffer/src/RingBuffer.java"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 103,
          "offsetAndLengths": [
            [
              4,
              12
            ]
          ],
          "preview": "    //@ ensures true;"
        }
      ],
      "repository": {
        "name": "github.com/Flunzmas/gym-autokey",
        "url": "/github.com/Flunzmas/gym-autokey"
      }
    },
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "58a1b137d98e1240f442a87b239586b642dc69f2"
        },
        "content": "class ForReferenceArray {\n\n  // This example has been refactored pending solution to bug #1288\n\n  //@ ensures true;\n  void foo(Object[] as) {\n    //@ maintaining 0 \u003c= \\index \u0026\u0026 \\index \u003c= as.length; \n    //@ decreasing as.length-\\index;\n    //@ assignable \\strictly_nothing;\n    for (Object a: as) ;\n  }\n}\n",
        "name": "ForReferenceArray.java",
        "path": "autokey_examples/standard_key/java_dl/java5/src/ForReferenceArray.java",
        "url": "/github.com/Flunzmas/gym-autokey/-/blob/autokey_examples/standard_key/java_dl/java5/src/ForReferenceArray.java"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 4,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures true;"
        }
      ],
      "repository": {
        "name": "github.com/Flunzmas/gym-autokey",
        "url": "/github.com/Flunzmas/gym-autokey"
      }
    },
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "58a1b137d98e1240f442a87b239586b642dc69f2"
        },
        "content": "/* This class is now added with a strictly_pure \n   modifier */\n\n/*@ strictly_pure*/ class StrictlyPureClass {\n\n   //@ ensures true;\n   void thisMethodIsStrictlyPureByDefault();\n\n}\n",
        "name": "StrictlyPureModifiedClass.java",
        "path": "key/key/key.ui/examples/heap/strictly_pure/StrictlyPureModifiedClass.java",
        "url": "/github.com/Flunzmas/gym-autokey/-/blob/key/key/key.ui/examples/heap/strictly_pure/StrictlyPureModifiedClass.java"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 5,
          "offsetAndLengths": [
            [
              3,
              12
            ]
          ],
          "preview": "   //@ ensures true;"
        }
      ],
      "repository": {
        "name": "github.com/Flunzmas/gym-autokey",
        "url": "/github.com/Flunzmas/gym-autokey"
      }
    },
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "58a1b137d98e1240f442a87b239586b642dc69f2"
        },
        "content": "// please use faithful Java int semantics for this one\nclass Bigint {\n  //@ ghost \\bigint x;\n  //@ ghost \\bigint y;\n\n  //@ ensures x \u003e 0;\n  //@ ensures y \u003c 0;\n  void foo(){\n   //@ set x = 444444444444444444444444444444444;\n   //@ set y = (int) x * 4444444444444444;\n   //@ set x = x * 4444444444444444;\n   {}\n  }\n}\n",
        "name": "Bigint.java",
        "path": "key/key/key.ui/examples/standard_key/integerSemantics/classes/Bigint.java",
        "url": "/github.com/Flunzmas/gym-autokey/-/blob/key/key/key.ui/examples/standard_key/integerSemantics/classes/Bigint.java"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 5,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 6,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures y \u003c 0;"
        }
      ],
      "repository": {
        "name": "github.com/Flunzmas/gym-autokey",
        "url": "/github.com/Flunzmas/gym-autokey"
      }
    },
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "58a1b137d98e1240f442a87b239586b642dc69f2"
        },
        "content": "package object;\n\n\n/**\n *\n * @author christoph\n */\npublic class AmtoftBanerjee3 {\n    int x, a, b;\n\n    //@ requires (a % 4) == 3;\n    //@ determines b \\by x;\n    void m() {\n        b = x + (a % 4);\n    }\n}\n",
        "name": "AmtoftBanerjee3.java",
        "path": "autokey_examples/InformationFlow/NewObjects/src/object/AmtoftBanerjee3.java",
        "url": "/github.com/Flunzmas/gym-autokey/-/blob/autokey_examples/InformationFlow/NewObjects/src/object/AmtoftBanerjee3.java"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 10,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires (a % 4) == 3;"
        }
      ],
      "repository": {
        "name": "github.com/Flunzmas/gym-autokey",
        "url": "/github.com/Flunzmas/gym-autokey"
      }
    },
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "58a1b137d98e1240f442a87b239586b642dc69f2"
        },
        "content": "package object;\n\n\n/**\n *\n * @author christoph\n */\npublic class AmtoftBanerjee2 {\n    int marg, res;\n    //@ invariant (marg != 0) ==\u003e (res == expensive(marg));\n\n    //@ normal_behavior\n    //@ assignable marg, res;\n    //@ determines z, \\result \\by \\itself;\n    int cexp(int z) {\n        if (z == marg \u0026\u0026 z != 0) {\n            return res;\n        } else {\n            int result = expensive(z);\n            marg = z;\n            res = result;\n            return result;\n        }\n    }\n\n    // The accessible clause can be proved automatically, if the query treatment\n    // is set to \"off\" and expand local queries is set to \"on\".\n    // Note: This method is final to allow for modularly sound method expansion\n    //@ normal_behavior\n    //@ ensures \\result == expensive(z);\n    //@ assignable \\strictly_nothing;\n    //@ accessible \\nothing;\n    //@ determines z, \\result \\by \\itself;\n    //@ helper\n    final int expensive(int z) {\n        return z;\n    }\n}\n",
        "name": "AmtoftBanerjee2.java",
        "path": "autokey_examples/InformationFlow/NewObjects/src/object/AmtoftBanerjee2.java",
        "url": "/github.com/Flunzmas/gym-autokey/-/blob/autokey_examples/InformationFlow/NewObjects/src/object/AmtoftBanerjee2.java"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 29,
          "offsetAndLengths": [
            [
              4,
              12
            ]
          ],
          "preview": "    //@ ensures \\result == expensive(z);"
        }
      ],
      "repository": {
        "name": "github.com/Flunzmas/gym-autokey",
        "url": "/github.com/Flunzmas/gym-autokey"
      }
    },
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "58a1b137d98e1240f442a87b239586b642dc69f2"
        },
        "content": "class ForReferenceArray {\n\n  // This example has been refactored pending solution to bug #1288\n\n  //@ ensures true;\n  void foo(Object[] as) {\n    //@ maintaining 0 \u003c= \\index \u0026\u0026 \\index \u003c= as.length; \n    //@ decreasing as.length-\\index;\n    //@ assignable \\strictly_nothing;\n    for (Object a: as) ;\n  }\n}\n",
        "name": "ForReferenceArray.java",
        "path": "key/key/key.ui/examples/standard_key/java_dl/java5/src/ForReferenceArray.java",
        "url": "/github.com/Flunzmas/gym-autokey/-/blob/key/key/key.ui/examples/standard_key/java_dl/java5/src/ForReferenceArray.java"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 4,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures true;"
        }
      ],
      "repository": {
        "name": "github.com/Flunzmas/gym-autokey",
        "url": "/github.com/Flunzmas/gym-autokey"
      }
    },
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "58a1b137d98e1240f442a87b239586b642dc69f2"
        },
        "content": "package contract;\n\n/**\n * Information flow examples.\n *\n * A collection of several examples showing the usage of information flow\n * block contracts.\n *\n * @author Christoph Scheben\n */\npublic class IFBlockExamples {\n        int low;\n\n        //@ determines low, \\result \\by low, l;\n        public int secure_1(int l) {\n            int l1 = l;\n            low++;\n\n            int l2 = 7;\n            int l3 = 8;\n\n            //@ normal_behavior\n            //@ assignable \\nothing;\n            //@ determines l1 \\by \\itself;\n            {   l1++;\n                if(l2 == 8) {}\n            }\n\n            return l1;\n        }\n\n        //@ determines low, \\result \\by low, l;\n        public int secure_4(int l) {\n            int l1 = l;\n            low++;\n\n            int l2 = 7;\n            int l3 = 8;\n\n            //@ normal_behavior\n            //@ assignable \\nothing;\n            //@ determines l1, l2 \\by \\itself;\n            {   l1 += l2;\n            }\n\n            return l1;\n        }\n\n        //@ determines low, \\result \\by low;\n        public int insecure_1(int l) {\n            int l1 = l;\n            low++;\n\n            //@ normal_behavior\n            //@ assignable \\nothing;\n            //@ determines l1 \\by \\itself;\n            {   l1++;\n            }\n\n            return l1;\n        }\n\n        //@ determines \\result \\by l;\n        public int secure_6(int l) {\n            int l1 = l;\n            low++;\n\n            //@ normal_behavior\n            //@ assignable \\nothing;\n            //@ determines l1 \\by \\itself;\n            {   l1++;\n            }\n\n            return l1;\n        }\n\n        //@ determines \\result \\by l;\n        public int secure_7(int l) {\n            low++;\n\n            //@ normal_behavior\n            //@ assignable \\nothing;\n            //@ determines l \\by \\itself;\n            {   l++;\n            }\n\n            return l;\n        }\n\n        //@ determines low \\by \\itself;\n        public int secure_8(int l) {\n            low++;\n\n            //@ normal_behavior\n            //@ assignable low;\n            //@ determines low \\by \\itself;\n            {   low++;\n            }\n\n            return low;\n        }\n\n\n        //@ determines low, \\result \\by low, l;\n        public int secure_2(int l) {\n            int l1 = l;\n            low++;\n\n            //@ normal_behavior\n            //@ assignable \\nothing;\n            //@ determines l1 \\by \\itself;\n            {   l1++;\n                //@ normal_behavior\n                //@ assignable \\nothing;\n                //@ determines l1 \\by \\itself;\n                {   l1++;\n                    //@ normal_behavior\n                    //@ assignable \\nothing;\n                    //@ determines l1 \\by \\itself;\n                    {   l1++;\n                    }\n                }\n            }\n\n            return l1;\n        }\n\n\n        //@ determines low, \\result \\by low, l;\n        public int secure_3(int l) {\n            int l1 = l;\n            low++;\n\n            //@ normal_behavior\n            //@ assignable \\nothing;\n            //@ determines l1 \\by \\itself;\n            {   l1++;\n                //@ normal_behavior\n                //@ assignable \\nothing;\n                //@ determines l1 \\by \\itself;\n                {   l1++;\n                }\n                //@ normal_behavior\n                //@ assignable \\nothing;\n                //@ determines l1 \\by \\itself;\n                {   l1++;\n                }\n            }\n\n            return l1;\n        }\n\n        //@ determines low, \\result \\by low, l;\n        public int insecure_3(int l) {\n            int l1 = l;\n            low++;\n\n            //@ normal_behavior\n            //@ assignable \\nothing;\n            //@ determines l1 \\by \\itself;\n            {   l1++;\n                //@ normal_behavior\n                //@ assignable \\nothing;\n                //@ determines low \\by \\itself;\n                {   l1++;\n                }\n                //@ normal_behavior\n                //@ assignable \\nothing;\n                //@ determines l1 \\by \\itself;\n                {   l1++;\n                }\n            }\n\n            return l1;\n        }\n\n        //@ determines low, \\result \\by low;\n        public int insecure_4(int l) {\n            int l1 = l;\n            low++;\n\n            //@ normal_behavior\n            //@ assignable \\nothing;\n            //@ determines l1 \\by \\itself;\n            {   l1++;\n                //@ normal_behavior\n                //@ assignable \\nothing;\n                //@ determines l1 \\by \\itself;\n                {   l1++;\n                }\n                //@ normal_behavior\n                //@ assignable \\nothing;\n                //@ determines l1 \\by \\itself;\n                {   l1++;\n                }\n            }\n\n            return l1;\n        }\n\n        //@ requires l \u003e 0;\n        //@ determines low \\by low, l;\n        public void block_while_secure(int l) {\n            int l1 = low;\n            //@ normal_behavior\n            //@ assignable \\nothing;\n            //@ determines l1 \\by \\itself;\n            { l1++;\n            }\n\n           /*@\n             @ loop_invariant l \u003e= 0;\n             @ assignable \\nothing;\n             @ determines l1, l \\by \\itself;\n             @ decreases l;\n             @*/\n            while (l \u003e 0) {\n                l--;\n                l1++;\n            }\n\n            low = l1;\n        }\n\n\n        //@ requires l \u003e 0;\n        //@ determines low \\by low, l;\n        public void while_block_secure(int l) {\n            int l1 = low;\n           /*@\n             @ loop_invariant l \u003e= 0;\n             @ assignable \\nothing;\n             @ determines l1, l \\by \\itself;\n             @ decreases l;\n             @*/\n            while (l \u003e 0) {\n                l--;\n                l1++;\n            }\n\n            //@ normal_behavior\n            //@ assignable \\nothing;\n            //@ determines l1 \\by \\itself;\n            { l1++;\n            }\n\n            low = l1;\n        }\n\n        //@ requires l \u003e 0;\n        //@ determines low \\by low, l;\n        public void while_block_insecure(int l) {\n            int l1 = low;\n           /*@\n             @ loop_invariant l \u003e= 0;\n             @ assignable \\nothing;\n             @ determines l \\by \\itself;\n             @ decreases l;\n             @*/\n            while (l \u003e 0) {\n                l--;\n                l1++;\n            }\n\n            //@ normal_behavior\n            //@ assignable \\nothing;\n            //@ determines l1 \\by \\itself;\n            { l1++;\n            }\n\n            low = l1;\n        }\n\n                //@ requires l \u003e 0;\n        //@ determines low \\by low, l;\n        public void block_no_return_secure(int l) {\n            int l1 = low;\n\n            //@ normal_behavior\n            //@ assignable \\nothing;\n            //@ determines l1 \\by \\itself;\n            { l1++;\n            }\n\n            low = l1;\n        }\n\n        //@ determines low \\by \\itself;\n        public void secure_5() {\n            //@ normal_behavior\n            //@ assignable low;\n            //@ determines low \\by \\itself;\n            {   low++;\n            }\n        }\n\n}\n",
        "name": "IFBlockExamples.java",
        "path": "autokey_examples/InformationFlow/BlockContracts/src/contract/IFBlockExamples.java",
        "url": "/github.com/Flunzmas/gym-autokey/-/blob/autokey_examples/InformationFlow/BlockContracts/src/contract/IFBlockExamples.java"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 200,
          "offsetAndLengths": [
            [
              8,
              13
            ]
          ],
          "preview": "        //@ requires l \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 225,
          "offsetAndLengths": [
            [
              8,
              13
            ]
          ],
          "preview": "        //@ requires l \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 249,
          "offsetAndLengths": [
            [
              8,
              13
            ]
          ],
          "preview": "        //@ requires l \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 273,
          "offsetAndLengths": [
            [
              16,
              13
            ]
          ],
          "preview": "                //@ requires l \u003e 0;"
        }
      ],
      "repository": {
        "name": "github.com/Flunzmas/gym-autokey",
        "url": "/github.com/Flunzmas/gym-autokey"
      }
    },
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "58a1b137d98e1240f442a87b239586b642dc69f2"
        },
        "content": "// Copyright (C) 2011 Daniel Bruns\n// Published under Modified BSD License\n// See LICENSE for details.\n\n\npackage vacid0.redblacktree;\n\n/**\n * Harness suggested by Leino and Moskal.\n * Not implementation-aware (makes only use of the map interface).\n * @author bruns\n *\n */\npublic class Harness {\n\n    //@ requires a.isEmpty \u0026\u0026 a.defaultValue == 0 \u0026\u0026 \\invariant_for(a);\n    //@ requires b.isEmpty \u0026\u0026 b.defaultValue == 1 \u0026\u0026 \\invariant_for(b);\n    //@ requires \\disjoint(a.footprint,b.footprint);\n  public static void redBlackTestHarness(AbstractMap a, AbstractMap b) {\n    a.replace(1, 1); \n    b.replace(1, 10);\n    a.replace(2, 2); \n    b.replace(2, 20);\n    assert(a.lookup(1) == 1 \u0026\u0026 a.lookup(42) == 0);\n    assert(b.lookup(1) == 10 \u0026\u0026 b.lookup(42) == 1);\n    a.remove(1); \n    b.remove(2);\n    assert(a.lookup(1) == 0 \u0026\u0026 a.lookup(42) == 0);\n    assert(b.lookup(2) == 1 \u0026\u0026 b.lookup(42) == 1);\n  }\n  \n  \n  // *** Some simpler tests *** //\n  \n  //@ requires a.isEmpty \u0026\u0026 \\invariant_for(a) \u0026\u0026 a.defaultValue == 0 \u0026\u0026 0 \u003c= k \u0026\u0026 k \u003c a.contents.length;\n  public static void testEmpty(AbstractMap a, int k) {\n    assert a.lookup(k) == 0;\n  }\n\n  //@ requires a.isEmpty \u0026\u0026 \\invariant_for(a) \u0026\u0026 a.defaultValue == 0;\n  public static void testSimpleReplaceAndRemove(AbstractMap a) {\n    a.replace(1, 1); \n    assert(a.lookup(1) == 1);\n    assert(a.lookup(42) == 0);\n    a.remove(1);\n    assert(a.lookup(1) == 0);\n\n  }\n  \n  //@ requires \\invariant_for(a) \u0026\u0026 \\invariant_for(b);\n  //@ requires \\disjoint(a.footprint,b.footprint);\n  //@ ensures \\disjoint(a.footprint,b.footprint);\n  public static void testDisjointnessPreservation(AbstractMap a, AbstractMap b){\n      a.replace(3, 27);\n  }\n  \n  \n  public static void main(String[] arrrgggh){\n      redBlackTestHarness(new RedBlackTree(0), new RedBlackTree(1));\n  //    System.out.println(\"Test harness successfully passed.\");\n  }\n\n}\n",
        "name": "Harness.java",
        "path": "autokey_examples/heap/vacid0_05_RedBlackTrees/src/vacid0/redblacktree/Harness.java",
        "url": "/github.com/Flunzmas/gym-autokey/-/blob/autokey_examples/heap/vacid0_05_RedBlackTrees/src/vacid0/redblacktree/Harness.java"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 15,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires a.isEmpty \u0026\u0026 a.defaultValue == 0 \u0026\u0026 \\invariant_for(a);"
        },
        {
          "limitHit": false,
          "lineNumber": 16,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires b.isEmpty \u0026\u0026 b.defaultValue == 1 \u0026\u0026 \\invariant_for(b);"
        },
        {
          "limitHit": false,
          "lineNumber": 17,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires \\disjoint(a.footprint,b.footprint);"
        },
        {
          "limitHit": false,
          "lineNumber": 34,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires a.isEmpty \u0026\u0026 \\invariant_for(a) \u0026\u0026 a.defaultValue == 0 \u0026\u0026 0 \u003c= k \u0026\u0026 k \u003c a.contents.length;"
        },
        {
          "limitHit": false,
          "lineNumber": 39,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires a.isEmpty \u0026\u0026 \\invariant_for(a) \u0026\u0026 a.defaultValue == 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 49,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires \\invariant_for(a) \u0026\u0026 \\invariant_for(b);"
        },
        {
          "limitHit": false,
          "lineNumber": 50,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires \\disjoint(a.footprint,b.footprint);"
        },
        {
          "limitHit": false,
          "lineNumber": 51,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures \\disjoint(a.footprint,b.footprint);"
        }
      ],
      "repository": {
        "name": "github.com/Flunzmas/gym-autokey",
        "url": "/github.com/Flunzmas/gym-autokey"
      }
    },
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "58a1b137d98e1240f442a87b239586b642dc69f2"
        },
        "content": "package object;\n\n\n/**\n *\n * @author christoph\n */\npublic class AmtoftBanerjee3 {\n    int x, a, b;\n\n    //@ requires (a % 4) == 3;\n    //@ determines b \\by x;\n    void m() {\n        b = x + (a % 4);\n    }\n}\n",
        "name": "AmtoftBanerjee3.java",
        "path": "key/key/key.ui/examples/InformationFlow/NewObjects/src/object/AmtoftBanerjee3.java",
        "url": "/github.com/Flunzmas/gym-autokey/-/blob/key/key/key.ui/examples/InformationFlow/NewObjects/src/object/AmtoftBanerjee3.java"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 10,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires (a % 4) == 3;"
        }
      ],
      "repository": {
        "name": "github.com/Flunzmas/gym-autokey",
        "url": "/github.com/Flunzmas/gym-autokey"
      }
    },
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "58a1b137d98e1240f442a87b239586b642dc69f2"
        },
        "content": "package object;\n\n\n/**\n *\n * @author christoph\n */\npublic class AmtoftBanerjee2 {\n    int marg, res;\n    //@ invariant (marg != 0) ==\u003e (res == expensive(marg));\n\n    //@ normal_behavior\n    //@ assignable marg, res;\n    //@ determines z, \\result \\by \\itself;\n    int cexp(int z) {\n        if (z == marg \u0026\u0026 z != 0) {\n            return res;\n        } else {\n            int result = expensive(z);\n            marg = z;\n            res = result;\n            return result;\n        }\n    }\n\n    // The accessible clause can be proved automatically, if the query treatment\n    // is set to \"off\" and expand local queries is set to \"on\".\n    // Note: This method is final to allow for modularly sound method expansion\n    //@ normal_behavior\n    //@ ensures \\result == expensive(z);\n    //@ assignable \\strictly_nothing;\n    //@ accessible \\nothing;\n    //@ determines z, \\result \\by \\itself;\n    //@ helper\n    final int expensive(int z) {\n        return z;\n    }\n}\n",
        "name": "AmtoftBanerjee2.java",
        "path": "key/key/key.ui/examples/InformationFlow/NewObjects/src/object/AmtoftBanerjee2.java",
        "url": "/github.com/Flunzmas/gym-autokey/-/blob/key/key/key.ui/examples/InformationFlow/NewObjects/src/object/AmtoftBanerjee2.java"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 29,
          "offsetAndLengths": [
            [
              4,
              12
            ]
          ],
          "preview": "    //@ ensures \\result == expensive(z);"
        }
      ],
      "repository": {
        "name": "github.com/Flunzmas/gym-autokey",
        "url": "/github.com/Flunzmas/gym-autokey"
      }
    },
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "58a1b137d98e1240f442a87b239586b642dc69f2"
        },
        "content": "package contract;\n\n/**\n * Information flow examples.\n *\n * A collection of several examples showing the usage of information flow\n * block contracts.\n *\n * @author Christoph Scheben\n */\npublic class IFBlockExamples {\n        int low;\n\n        //@ determines low, \\result \\by low, l;\n        public int secure_1(int l) {\n            int l1 = l;\n            low++;\n\n            int l2 = 7;\n            int l3 = 8;\n\n            //@ normal_behavior\n            //@ assignable \\nothing;\n            //@ determines l1 \\by \\itself;\n            {   l1++;\n                if(l2 == 8) {}\n            }\n\n            return l1;\n        }\n\n        //@ determines low, \\result \\by low, l;\n        public int secure_4(int l) {\n            int l1 = l;\n            low++;\n\n            int l2 = 7;\n            int l3 = 8;\n\n            //@ normal_behavior\n            //@ assignable \\nothing;\n            //@ determines l1, l2 \\by \\itself;\n            {   l1 += l2;\n            }\n\n            return l1;\n        }\n\n        //@ determines low, \\result \\by low;\n        public int insecure_1(int l) {\n            int l1 = l;\n            low++;\n\n            //@ normal_behavior\n            //@ assignable \\nothing;\n            //@ determines l1 \\by \\itself;\n            {   l1++;\n            }\n\n            return l1;\n        }\n\n        //@ determines \\result \\by l;\n        public int secure_6(int l) {\n            int l1 = l;\n            low++;\n\n            //@ normal_behavior\n            //@ assignable \\nothing;\n            //@ determines l1 \\by \\itself;\n            {   l1++;\n            }\n\n            return l1;\n        }\n\n        //@ determines \\result \\by l;\n        public int secure_7(int l) {\n            low++;\n\n            //@ normal_behavior\n            //@ assignable \\nothing;\n            //@ determines l \\by \\itself;\n            {   l++;\n            }\n\n            return l;\n        }\n\n        //@ determines low \\by \\itself;\n        public int secure_8(int l) {\n            low++;\n\n            //@ normal_behavior\n            //@ assignable low;\n            //@ determines low \\by \\itself;\n            {   low++;\n            }\n\n            return low;\n        }\n\n\n        //@ determines low, \\result \\by low, l;\n        public int secure_2(int l) {\n            int l1 = l;\n            low++;\n\n            //@ normal_behavior\n            //@ assignable \\nothing;\n            //@ determines l1 \\by \\itself;\n            {   l1++;\n                //@ normal_behavior\n                //@ assignable \\nothing;\n                //@ determines l1 \\by \\itself;\n                {   l1++;\n                    //@ normal_behavior\n                    //@ assignable \\nothing;\n                    //@ determines l1 \\by \\itself;\n                    {   l1++;\n                    }\n                }\n            }\n\n            return l1;\n        }\n\n\n        //@ determines low, \\result \\by low, l;\n        public int secure_3(int l) {\n            int l1 = l;\n            low++;\n\n            //@ normal_behavior\n            //@ assignable \\nothing;\n            //@ determines l1 \\by \\itself;\n            {   l1++;\n                //@ normal_behavior\n                //@ assignable \\nothing;\n                //@ determines l1 \\by \\itself;\n                {   l1++;\n                }\n                //@ normal_behavior\n                //@ assignable \\nothing;\n                //@ determines l1 \\by \\itself;\n                {   l1++;\n                }\n            }\n\n            return l1;\n        }\n\n        //@ determines low, \\result \\by low, l;\n        public int insecure_3(int l) {\n            int l1 = l;\n            low++;\n\n            //@ normal_behavior\n            //@ assignable \\nothing;\n            //@ determines l1 \\by \\itself;\n            {   l1++;\n                //@ normal_behavior\n                //@ assignable \\nothing;\n                //@ determines low \\by \\itself;\n                {   l1++;\n                }\n                //@ normal_behavior\n                //@ assignable \\nothing;\n                //@ determines l1 \\by \\itself;\n                {   l1++;\n                }\n            }\n\n            return l1;\n        }\n\n        //@ determines low, \\result \\by low;\n        public int insecure_4(int l) {\n            int l1 = l;\n            low++;\n\n            //@ normal_behavior\n            //@ assignable \\nothing;\n            //@ determines l1 \\by \\itself;\n            {   l1++;\n                //@ normal_behavior\n                //@ assignable \\nothing;\n                //@ determines l1 \\by \\itself;\n                {   l1++;\n                }\n                //@ normal_behavior\n                //@ assignable \\nothing;\n                //@ determines l1 \\by \\itself;\n                {   l1++;\n                }\n            }\n\n            return l1;\n        }\n\n        //@ requires l \u003e 0;\n        //@ determines low \\by low, l;\n        public void block_while_secure(int l) {\n            int l1 = low;\n            //@ normal_behavior\n            //@ assignable \\nothing;\n            //@ determines l1 \\by \\itself;\n            { l1++;\n            }\n\n           /*@\n             @ loop_invariant l \u003e= 0;\n             @ assignable \\nothing;\n             @ determines l1, l \\by \\itself;\n             @ decreases l;\n             @*/\n            while (l \u003e 0) {\n                l--;\n                l1++;\n            }\n\n            low = l1;\n        }\n\n\n        //@ requires l \u003e 0;\n        //@ determines low \\by low, l;\n        public void while_block_secure(int l) {\n            int l1 = low;\n           /*@\n             @ loop_invariant l \u003e= 0;\n             @ assignable \\nothing;\n             @ determines l1, l \\by \\itself;\n             @ decreases l;\n             @*/\n            while (l \u003e 0) {\n                l--;\n                l1++;\n            }\n\n            //@ normal_behavior\n            //@ assignable \\nothing;\n            //@ determines l1 \\by \\itself;\n            { l1++;\n            }\n\n            low = l1;\n        }\n\n        //@ requires l \u003e 0;\n        //@ determines low \\by low, l;\n        public void while_block_insecure(int l) {\n            int l1 = low;\n           /*@\n             @ loop_invariant l \u003e= 0;\n             @ assignable \\nothing;\n             @ determines l \\by \\itself;\n             @ decreases l;\n             @*/\n            while (l \u003e 0) {\n                l--;\n                l1++;\n            }\n\n            //@ normal_behavior\n            //@ assignable \\nothing;\n            //@ determines l1 \\by \\itself;\n            { l1++;\n            }\n\n            low = l1;\n        }\n\n                //@ requires l \u003e 0;\n        //@ determines low \\by low, l;\n        public void block_no_return_secure(int l) {\n            int l1 = low;\n\n            //@ normal_behavior\n            //@ assignable \\nothing;\n            //@ determines l1 \\by \\itself;\n            { l1++;\n            }\n\n            low = l1;\n        }\n\n        //@ determines low \\by \\itself;\n        public void secure_5() {\n            //@ normal_behavior\n            //@ assignable low;\n            //@ determines low \\by \\itself;\n            {   low++;\n            }\n        }\n\n}\n",
        "name": "IFBlockExamples.java",
        "path": "key/key/key.ui/examples/InformationFlow/BlockContracts/src/contract/IFBlockExamples.java",
        "url": "/github.com/Flunzmas/gym-autokey/-/blob/key/key/key.ui/examples/InformationFlow/BlockContracts/src/contract/IFBlockExamples.java"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 200,
          "offsetAndLengths": [
            [
              8,
              13
            ]
          ],
          "preview": "        //@ requires l \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 225,
          "offsetAndLengths": [
            [
              8,
              13
            ]
          ],
          "preview": "        //@ requires l \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 249,
          "offsetAndLengths": [
            [
              8,
              13
            ]
          ],
          "preview": "        //@ requires l \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 273,
          "offsetAndLengths": [
            [
              16,
              13
            ]
          ],
          "preview": "                //@ requires l \u003e 0;"
        }
      ],
      "repository": {
        "name": "github.com/Flunzmas/gym-autokey",
        "url": "/github.com/Flunzmas/gym-autokey"
      }
    },
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "58a1b137d98e1240f442a87b239586b642dc69f2"
        },
        "content": "// Copyright (C) 2011 Daniel Bruns\n// Published under Modified BSD License\n// See LICENSE for details.\n\n\npackage vacid0.redblacktree;\n\n/**\n * Harness suggested by Leino and Moskal.\n * Not implementation-aware (makes only use of the map interface).\n * @author bruns\n *\n */\npublic class Harness {\n\n    //@ requires a.isEmpty \u0026\u0026 a.defaultValue == 0 \u0026\u0026 \\invariant_for(a);\n    //@ requires b.isEmpty \u0026\u0026 b.defaultValue == 1 \u0026\u0026 \\invariant_for(b);\n    //@ requires \\disjoint(a.footprint,b.footprint);\n  public static void redBlackTestHarness(AbstractMap a, AbstractMap b) {\n    a.replace(1, 1); \n    b.replace(1, 10);\n    a.replace(2, 2); \n    b.replace(2, 20);\n    assert(a.lookup(1) == 1 \u0026\u0026 a.lookup(42) == 0);\n    assert(b.lookup(1) == 10 \u0026\u0026 b.lookup(42) == 1);\n    a.remove(1); \n    b.remove(2);\n    assert(a.lookup(1) == 0 \u0026\u0026 a.lookup(42) == 0);\n    assert(b.lookup(2) == 1 \u0026\u0026 b.lookup(42) == 1);\n  }\n  \n  \n  // *** Some simpler tests *** //\n  \n  //@ requires a.isEmpty \u0026\u0026 \\invariant_for(a) \u0026\u0026 a.defaultValue == 0 \u0026\u0026 0 \u003c= k \u0026\u0026 k \u003c a.contents.length;\n  public static void testEmpty(AbstractMap a, int k) {\n    assert a.lookup(k) == 0;\n  }\n\n  //@ requires a.isEmpty \u0026\u0026 \\invariant_for(a) \u0026\u0026 a.defaultValue == 0;\n  public static void testSimpleReplaceAndRemove(AbstractMap a) {\n    a.replace(1, 1); \n    assert(a.lookup(1) == 1);\n    assert(a.lookup(42) == 0);\n    a.remove(1);\n    assert(a.lookup(1) == 0);\n\n  }\n  \n  //@ requires \\invariant_for(a) \u0026\u0026 \\invariant_for(b);\n  //@ requires \\disjoint(a.footprint,b.footprint);\n  //@ ensures \\disjoint(a.footprint,b.footprint);\n  public static void testDisjointnessPreservation(AbstractMap a, AbstractMap b){\n      a.replace(3, 27);\n  }\n  \n  \n  public static void main(String[] arrrgggh){\n      redBlackTestHarness(new RedBlackTree(0), new RedBlackTree(1));\n  //    System.out.println(\"Test harness successfully passed.\");\n  }\n\n}\n",
        "name": "Harness.java",
        "path": "key/key/key.ui/examples/heap/vacid0_05_RedBlackTrees/src/vacid0/redblacktree/Harness.java",
        "url": "/github.com/Flunzmas/gym-autokey/-/blob/key/key/key.ui/examples/heap/vacid0_05_RedBlackTrees/src/vacid0/redblacktree/Harness.java"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 15,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires a.isEmpty \u0026\u0026 a.defaultValue == 0 \u0026\u0026 \\invariant_for(a);"
        },
        {
          "limitHit": false,
          "lineNumber": 16,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires b.isEmpty \u0026\u0026 b.defaultValue == 1 \u0026\u0026 \\invariant_for(b);"
        },
        {
          "limitHit": false,
          "lineNumber": 17,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires \\disjoint(a.footprint,b.footprint);"
        },
        {
          "limitHit": false,
          "lineNumber": 34,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires a.isEmpty \u0026\u0026 \\invariant_for(a) \u0026\u0026 a.defaultValue == 0 \u0026\u0026 0 \u003c= k \u0026\u0026 k \u003c a.contents.length;"
        },
        {
          "limitHit": false,
          "lineNumber": 39,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires a.isEmpty \u0026\u0026 \\invariant_for(a) \u0026\u0026 a.defaultValue == 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 49,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires \\invariant_for(a) \u0026\u0026 \\invariant_for(b);"
        },
        {
          "limitHit": false,
          "lineNumber": 50,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires \\disjoint(a.footprint,b.footprint);"
        },
        {
          "limitHit": false,
          "lineNumber": 51,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures \\disjoint(a.footprint,b.footprint);"
        }
      ],
      "repository": {
        "name": "github.com/Flunzmas/gym-autokey",
        "url": "/github.com/Flunzmas/gym-autokey"
      }
    },
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "58a1b137d98e1240f442a87b239586b642dc69f2"
        },
        "content": "public class Test {\n    int x;\n\n    //@ requires true;\n    void m(){x=5;}\n}",
        "name": "Test.java",
        "path": "autokey_examples/heap/polarity_tests/src/Test.java",
        "url": "/github.com/Flunzmas/gym-autokey/-/blob/autokey_examples/heap/polarity_tests/src/Test.java"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 3,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires true;"
        }
      ],
      "repository": {
        "name": "github.com/Flunzmas/gym-autokey",
        "url": "/github.com/Flunzmas/gym-autokey"
      }
    },
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "58a1b137d98e1240f442a87b239586b642dc69f2"
        },
        "content": "class Inc {\n  int x;\n\n\n  //@ requires x \u003e 0;\n  //@ ensures x \u003e 0;\n  void foo_1 () {\n    x++;\n  }\n\n  //@ requires x \u003e 0;\n  //@ ensures x \u003e 0;\n  void foo_2 () {\n    x++;\n    x++;\n  }\n\n  //@ requires x \u003e 0;\n  //@ ensures x \u003e 0;\n  void foo_3 () {\n    x++;\n    x++;\n    x++;\n  }\n\n  //@ requires x \u003e 0;\n  //@ ensures x \u003e 0;\n  void foo_4 () {\n    x++;\n    x++;\n    x++;\n    x++;\n  }\n\n  //@ requires x \u003e 0;\n  //@ ensures x \u003e 0;\n  void foo_5 () {\n    x++;\n    x++;\n    x++;\n    x++;\n    x++;\n  }\n\n  //@ requires x \u003e 0;\n  //@ ensures x \u003e 0;\n  void foo_6 () {\n    x++;\n    x++;\n    x++;\n    x++;\n    x++;\n    x++;\n  }\n\n  //@ requires x \u003e 0;\n  //@ ensures x \u003e 0;\n  void foo_7 () {\n    x++;\n    x++;\n    x++;\n    x++;\n    x++;\n    x++;\n    x++;\n  }\n\n  //@ requires x \u003e 0;\n  //@ ensures x \u003e 0;\n  void foo_8 () {\n    x++;\n    x++;\n    x++;\n    x++;\n    x++;\n    x++;\n    x++;\n    x++;\n  }\n\n  //@ requires x \u003e 0;\n  //@ ensures x \u003e 0;\n  void foo_9 () {\n    x++;\n    x++;\n    x++;\n    x++;\n    x++;\n    x++;\n    x++;\n    x++;\n    x++;\n }\n\n  //@ requires x \u003e 0;\n  //@ ensures x \u003e 0;\n  void foo_10 () {\n    x++;\n    x++;\n    x++;\n    x++;\n    x++;\n    x++;\n    x++;\n    x++;\n    x++;\n    x++;\n }\n\n  //@ requires x \u003e 0;\n  //@ ensures x \u003e 0;\n  void foo_20 () {\n    x++;\n    x++;\n    x++;\n    x++;\n    x++;\n    x++;\n    x++;\n    x++;\n    x++;\n    x++;\n    x++;\n    x++;\n    x++;\n    x++;\n    x++;\n    x++;\n    x++;\n    x++;\n    x++;\n    x++;\n  }\n\n}\n",
        "name": "Inc.java",
        "path": "autokey_examples/performance-test/src.templates/Inc.java",
        "url": "/github.com/Flunzmas/gym-autokey/-/blob/autokey_examples/performance-test/src.templates/Inc.java"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 4,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 5,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 10,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 11,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 17,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 18,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 25,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 26,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 34,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 35,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 44,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 45,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 55,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 56,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 67,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 68,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 80,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 81,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 94,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 95,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 109,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 110,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures x \u003e 0;"
        }
      ],
      "repository": {
        "name": "github.com/Flunzmas/gym-autokey",
        "url": "/github.com/Flunzmas/gym-autokey"
      }
    },
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "58a1b137d98e1240f442a87b239586b642dc69f2"
        },
        "content": "class Inc2 {\n  int x;\n  int y;\n\n  //@ requires x \u003e 0;\n  //@ ensures x \u003e 0;\n  void foo_1 () {\n    x++; y++;\n  }\n\n  //@ requires x \u003e 0;\n  //@ ensures x \u003e 0;\n  void foo_2 () {\n    x++; y++;\n    x++; y++;\n  }\n\n  //@ requires x \u003e 0;\n  //@ ensures x \u003e 0;\n  void foo_3 () {\n    x++; y++;\n    x++; y++;\n    x++; y++;\n  }\n\n  //@ requires x \u003e 0;\n  //@ ensures x \u003e 0;\n  void foo_4 () {\n    x++; y++;\n    x++; y++;\n    x++; y++;\n    x++; y++;\n  }\n\n  //@ requires x \u003e 0;\n  //@ ensures x \u003e 0;\n  void foo_5 () {\n    x++; y++;\n    x++; y++;\n    x++; y++;\n    x++; y++;\n    x++; y++;\n  }\n\n  //@ requires x \u003e 0;\n  //@ ensures x \u003e 0;\n  void foo_6 () {\n    x++; y++;\n    x++; y++;\n    x++; y++;\n    x++; y++;\n    x++; y++;\n    x++; y++;\n  }\n\n  //@ requires x \u003e 0;\n  //@ ensures x \u003e 0;\n  void foo_7 () {\n    x++; y++;\n    x++; y++;\n    x++; y++;\n    x++; y++;\n    x++; y++;\n    x++; y++;\n    x++; y++;\n  }\n\n  //@ requires x \u003e 0;\n  //@ ensures x \u003e 0;\n  void foo_8 () {\n    x++; y++;\n    x++; y++;\n    x++; y++;\n    x++; y++;\n    x++; y++;\n    x++; y++;\n    x++; y++;\n    x++; y++;\n  }\n\n  //@ requires x \u003e 0;\n  //@ ensures x \u003e 0;\n  void foo_9 () {\n    x++; y++;\n    x++; y++;\n    x++; y++;\n    x++; y++;\n    x++; y++;\n    x++; y++;\n    x++; y++;\n    x++; y++;\n    x++; y++;\n  }\n\n  //@ requires x \u003e 0;\n  //@ ensures x \u003e 0;\n  void foo_10 () {\n    x++; y++;\n    x++; y++;\n    x++; y++;\n    x++; y++;\n    x++; y++;\n    x++; y++;\n    x++; y++;\n    x++; y++;\n    x++; y++;\n    x++; y++;\n  }\n\n  //@ requires x \u003e 0;\n  //@ ensures x \u003e 0;\n  void foo_20 () {\n    x++; y++;\n    x++; y++;\n    x++; y++;\n    x++; y++;\n    x++; y++;\n    x++; y++;\n    x++; y++;\n    x++; y++;\n    x++; y++;\n    x++; y++;\n    x++; y++;\n    x++; y++;\n    x++; y++;\n    x++; y++;\n    x++; y++;\n    x++; y++;\n    x++; y++;\n    x++; y++;\n    x++; y++;\n    x++; y++;\n  }\n\n  //@ requires x \u003e 0;\n  //@ ensures x \u003e 0;\n  void foo_40 () {\n    x++; y++;\n    x++; y++;\n    x++; y++;\n    x++; y++;\n    x++; y++;\n    x++; y++;\n    x++; y++;\n    x++; y++;\n    x++; y++;\n    x++; y++;\n    x++; y++;\n    x++; y++;\n    x++; y++;\n    x++; y++;\n    x++; y++;\n    x++; y++;\n    x++; y++;\n    x++; y++;\n    x++; y++;\n    x++; y++;\n    x++; y++;\n    x++; y++;\n    x++; y++;\n    x++; y++;\n    x++; y++;\n    x++; y++;\n    x++; y++;\n    x++; y++;\n    x++; y++;\n    x++; y++;\n    x++; y++;\n    x++; y++;\n    x++; y++;\n    x++; y++;\n    x++; y++;\n    x++; y++;\n    x++; y++;\n    x++; y++;\n    x++; y++;\n    x++; y++;\n  }\n\n\n  //@ ensures true;\n  //@ assignable y;\n  void bar () {};\n\n}\n",
        "name": "Inc2.java",
        "path": "autokey_examples/performance-test/src.templates/Inc2.java",
        "url": "/github.com/Flunzmas/gym-autokey/-/blob/autokey_examples/performance-test/src.templates/Inc2.java"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 4,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 5,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 10,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 11,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 17,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 18,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 25,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 26,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 34,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 35,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 44,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 45,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 55,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 56,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 67,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 68,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 80,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 81,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 94,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 95,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 109,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 110,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 134,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 135,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 180,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures true;"
        }
      ],
      "repository": {
        "name": "github.com/Flunzmas/gym-autokey",
        "url": "/github.com/Flunzmas/gym-autokey"
      }
    },
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "58a1b137d98e1240f442a87b239586b642dc69f2"
        },
        "content": "class A {\n\n   //@ ensures \\result \u003e 0;\n   int f() { return 42; }\n\n   //@ ensures \\result != null;\n   Object g() { return this; }\n\n   //@ ensures \\result;\n   boolean m(boolean b) {\n       boolean r;\n       if(b) {\n           r = f() \u003e 0;\n       } else {\n           r = g() != null;\n       }\n       //@ merge_point;\n       return r;\n   }\n}\n\n",
        "name": "A.java",
        "path": "key/key/key.core/src/test/resources/testcase/merge/A.java",
        "url": "/github.com/Flunzmas/gym-autokey/-/blob/key/key/key.core/src/test/resources/testcase/merge/A.java"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 2,
          "offsetAndLengths": [
            [
              3,
              12
            ]
          ],
          "preview": "   //@ ensures \\result \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 5,
          "offsetAndLengths": [
            [
              3,
              12
            ]
          ],
          "preview": "   //@ ensures \\result != null;"
        },
        {
          "limitHit": false,
          "lineNumber": 8,
          "offsetAndLengths": [
            [
              3,
              12
            ]
          ],
          "preview": "   //@ ensures \\result;"
        }
      ],
      "repository": {
        "name": "github.com/Flunzmas/gym-autokey",
        "url": "/github.com/Flunzmas/gym-autokey"
      }
    },
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "58a1b137d98e1240f442a87b239586b642dc69f2"
        },
        "content": "public class Test {\n    int x;\n\n    //@ requires true;\n    void m(){x=5;}\n}",
        "name": "Test.java",
        "path": "key/key/key.ui/examples/heap/polarity_tests/src/Test.java",
        "url": "/github.com/Flunzmas/gym-autokey/-/blob/key/key/key.ui/examples/heap/polarity_tests/src/Test.java"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 3,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires true;"
        }
      ],
      "repository": {
        "name": "github.com/Flunzmas/gym-autokey",
        "url": "/github.com/Flunzmas/gym-autokey"
      }
    },
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "58a1b137d98e1240f442a87b239586b642dc69f2"
        },
        "content": "class Dynamic {\n  int x;\n  int y;\n\n  //@ model \\locset footprint;\n  //@ accessible footprint: footprint;\n\n  //@ requires x \u003e 0;\n  //@ requires \\disjoint(footprint,\\singleton(x));\n  //@ ensures x \u003e 0;\n  void foo_1 () {\n    x++; bar();\n  }\n\n  //@ requires x \u003e 0;\n  //@ requires \\disjoint(footprint,\\singleton(x));\n  //@ ensures x \u003e 0;\n  void foo_2 () {\n    x++; bar();\n    x++; bar();\n  }\n\n  //@ requires x \u003e 0;\n  //@ requires \\disjoint(footprint,\\singleton(x));\n  //@ ensures x \u003e 0;\n  void foo_3 () {\n    x++; bar();\n    x++; bar();\n    x++; bar();\n  }\n\n  //@ requires x \u003e 0;\n  //@ requires \\disjoint(footprint,\\singleton(x));\n  //@ ensures x \u003e 0;\n  void foo_4 () {\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n  }\n\n  //@ requires x \u003e 0;\n  //@ requires \\disjoint(footprint,\\singleton(x));\n  //@ ensures x \u003e 0;\n  void foo_5 () {\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n  }\n\n  //@ requires x \u003e 0;\n  //@ requires \\disjoint(footprint,\\singleton(x));\n  //@ ensures x \u003e 0;\n  void foo_6 () {\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n  }\n\n  //@ requires x \u003e 0;\n  //@ requires \\disjoint(footprint,\\singleton(x));\n  //@ ensures x \u003e 0;\n  void foo_7 () {\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n  }\n\n  //@ requires x \u003e 0;\n  //@ requires \\disjoint(footprint,\\singleton(x));\n  //@ ensures x \u003e 0;\n  void foo_8 () {\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n  }\n\n  //@ requires x \u003e 0;\n  //@ requires \\disjoint(footprint,\\singleton(x));\n  //@ ensures x \u003e 0;\n  void foo_9 () {\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n  }\n\n  //@ requires x \u003e 0;\n  //@ requires \\disjoint(footprint,\\singleton(x));\n  //@ ensures x \u003e 0;\n  void foo_10 () {\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n  }\n\n  //@ requires x \u003e 0;\n  //@ requires \\disjoint(footprint,\\singleton(x));\n  //@ ensures x \u003e 0;\n  void foo_20 () {\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n  }\n\n  //@ ensures \\new_elems_fresh(footprint);\n  //@ assignable footprint;\n  void bar () {};\n\n}\n",
        "name": "Dynamic.java",
        "path": "autokey_examples/performance-test/src.templates/Dynamic.java",
        "url": "/github.com/Flunzmas/gym-autokey/-/blob/autokey_examples/performance-test/src.templates/Dynamic.java"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 7,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 8,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires \\disjoint(footprint,\\singleton(x));"
        },
        {
          "limitHit": false,
          "lineNumber": 9,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 14,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 15,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires \\disjoint(footprint,\\singleton(x));"
        },
        {
          "limitHit": false,
          "lineNumber": 16,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 22,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 23,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires \\disjoint(footprint,\\singleton(x));"
        },
        {
          "limitHit": false,
          "lineNumber": 24,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 31,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 32,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires \\disjoint(footprint,\\singleton(x));"
        },
        {
          "limitHit": false,
          "lineNumber": 33,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 41,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 42,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires \\disjoint(footprint,\\singleton(x));"
        },
        {
          "limitHit": false,
          "lineNumber": 43,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 52,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 53,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires \\disjoint(footprint,\\singleton(x));"
        },
        {
          "limitHit": false,
          "lineNumber": 54,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 64,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 65,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires \\disjoint(footprint,\\singleton(x));"
        },
        {
          "limitHit": false,
          "lineNumber": 66,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 77,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 78,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires \\disjoint(footprint,\\singleton(x));"
        },
        {
          "limitHit": false,
          "lineNumber": 79,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 91,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 92,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires \\disjoint(footprint,\\singleton(x));"
        },
        {
          "limitHit": false,
          "lineNumber": 93,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 106,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 107,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires \\disjoint(footprint,\\singleton(x));"
        },
        {
          "limitHit": false,
          "lineNumber": 108,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 122,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 123,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires \\disjoint(footprint,\\singleton(x));"
        },
        {
          "limitHit": false,
          "lineNumber": 124,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 148,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures \\new_elems_fresh(footprint);"
        }
      ],
      "repository": {
        "name": "github.com/Flunzmas/gym-autokey",
        "url": "/github.com/Flunzmas/gym-autokey"
      }
    },
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "58a1b137d98e1240f442a87b239586b642dc69f2"
        },
        "content": "class Dynamic2 {\n  int x;\n  int y;\n\n  //@ model \\locset rep;\n  //@ accessible rep: rep;\n\n  //@ model \\locset rep2;\n  //@ accessible rep2: rep2;\n\n  //@ requires x \u003e 0 \u0026 y \u003e 0;\n  //@ requires \\subset(\\locset(x, y), rep);\n  //@ requires \\disjoint(rep, rep2);\n  //@ ensures x \u003e 0 \u0026 y \u003e 0;\n  void foo_1 () {\n    x++; y++; bar();\n  }\n\n  //@ requires x \u003e 0 \u0026 y \u003e 0;\n  //@ requires \\subset(\\locset(x, y), rep);\n  //@ requires \\disjoint(rep, rep2);\n  //@ ensures x \u003e 0 \u0026 y \u003e 0;\n  void foo_2 () {\n    x++; y++; bar();\n    x++; y++; bar();\n  }\n\n  //@ requires x \u003e 0 \u0026 y \u003e 0;\n  //@ requires \\subset(\\locset(x, y), rep);\n  //@ requires \\disjoint(rep, rep2);\n  //@ ensures x \u003e 0 \u0026 y \u003e 0;\n  void foo_3 () {\n    x++; y++; bar();\n    x++; y++; bar();\n    x++; y++; bar();\n  }\n\n  //@ requires x \u003e 0 \u0026 y \u003e 0;\n  //@ requires \\subset(\\locset(x, y), rep);\n  //@ requires \\disjoint(rep, rep2);\n  //@ ensures x \u003e 0 \u0026 y \u003e 0;\n  void foo_4 () {\n    x++; y++; bar();\n    x++; y++; bar();\n    x++; y++; bar();\n    x++; y++; bar();\n  }\n\n  //@ requires x \u003e 0 \u0026 y \u003e 0;\n  //@ requires \\subset(\\locset(x, y), rep);\n  //@ requires \\disjoint(rep, rep2);\n  //@ ensures x \u003e 0 \u0026 y \u003e 0;\n  void foo_5 () {\n    x++; y++; bar();\n    x++; y++; bar();\n    x++; y++; bar();\n    x++; y++; bar();\n    x++; y++; bar();\n  }\n\n  //@ requires x \u003e 0 \u0026 y \u003e 0;\n  //@ requires \\subset(\\locset(x, y), rep);\n  //@ requires \\disjoint(rep, rep2);\n  //@ ensures x \u003e 0 \u0026 y \u003e 0;\n  void foo_6 () {\n    x++; y++; bar();\n    x++; y++; bar();\n    x++; y++; bar();\n    x++; y++; bar();\n    x++; y++; bar();\n    x++; y++; bar();\n  }\n\n  //@ requires x \u003e 0 \u0026 y \u003e 0;\n  //@ requires \\subset(\\locset(x, y), rep);\n  //@ requires \\disjoint(rep, rep2);\n  //@ ensures x \u003e 0 \u0026 y \u003e 0;\n  void foo_7 () {\n    x++; y++; bar();\n    x++; y++; bar();\n    x++; y++; bar();\n    x++; y++; bar();\n    x++; y++; bar();\n    x++; y++; bar();\n    x++; y++; bar();\n  }\n\n  //@ requires x \u003e 0 \u0026 y \u003e 0;\n  //@ requires \\subset(\\locset(x, y), rep);\n  //@ requires \\disjoint(rep, rep2);\n  //@ ensures x \u003e 0 \u0026 y \u003e 0;\n  void foo_8 () {\n    x++; y++; bar();\n    x++; y++; bar();\n    x++; y++; bar();\n    x++; y++; bar();\n    x++; y++; bar();\n    x++; y++; bar();\n    x++; y++; bar();\n    x++; y++; bar();\n  }\n\n  //@ requires x \u003e 0 \u0026 y \u003e 0;\n  //@ requires \\subset(\\locset(x, y), rep);\n  //@ requires \\disjoint(rep, rep2);\n  //@ ensures x \u003e 0 \u0026 y \u003e 0;\n  void foo_9 () {\n    x++; y++; bar();\n    x++; y++; bar();\n    x++; y++; bar();\n    x++; y++; bar();\n    x++; y++; bar();\n    x++; y++; bar();\n    x++; y++; bar();\n    x++; y++; bar();\n    x++; y++; bar();\n  }\n\n  //@ requires x \u003e 0 \u0026 y \u003e 0;\n  //@ requires \\subset(\\locset(x, y), rep);\n  //@ requires \\disjoint(rep, rep2);\n  //@ ensures x \u003e 0 \u0026 y \u003e 0;\n  void foo_10 () {\n    x++; y++; bar();\n    x++; y++; bar();\n    x++; y++; bar();\n    x++; y++; bar();\n    x++; y++; bar();\n    x++; y++; bar();\n    x++; y++; bar();\n    x++; y++; bar();\n    x++; y++; bar();\n    x++; y++; bar();\n  }\n\n  //@ requires x \u003e 0 \u0026 y \u003e 0;\n  //@ requires \\subset(\\locset(x, y), rep);\n  //@ requires \\disjoint(rep, rep2);\n  //@ ensures x \u003e 0 \u0026 y \u003e 0;\n  void foo_20 () {\n    x++; y++; bar();\n    x++; y++; bar();\n    x++; y++; bar();\n    x++; y++; bar();\n    x++; y++; bar();\n    x++; y++; bar();\n    x++; y++; bar();\n    x++; y++; bar();\n    x++; y++; bar();\n    x++; y++; bar();\n    x++; y++; bar();\n    x++; y++; bar();\n    x++; y++; bar();\n    x++; y++; bar();\n    x++; y++; bar();\n    x++; y++; bar();\n    x++; y++; bar();\n    x++; y++; bar();\n    x++; y++; bar();\n    x++; y++; bar();\n  }\n\n  //@ ensures \\new_elems_fresh(rep2);\n  //@ assignable rep2;\n  void bar () {};\n\n}\n",
        "name": "Dynamic2.java",
        "path": "autokey_examples/performance-test/src.templates/Dynamic2.java",
        "url": "/github.com/Flunzmas/gym-autokey/-/blob/autokey_examples/performance-test/src.templates/Dynamic2.java"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 10,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires x \u003e 0 \u0026 y \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 11,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires \\subset(\\locset(x, y), rep);"
        },
        {
          "limitHit": false,
          "lineNumber": 12,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires \\disjoint(rep, rep2);"
        },
        {
          "limitHit": false,
          "lineNumber": 13,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures x \u003e 0 \u0026 y \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 18,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires x \u003e 0 \u0026 y \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 19,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires \\subset(\\locset(x, y), rep);"
        },
        {
          "limitHit": false,
          "lineNumber": 20,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires \\disjoint(rep, rep2);"
        },
        {
          "limitHit": false,
          "lineNumber": 21,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures x \u003e 0 \u0026 y \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 27,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires x \u003e 0 \u0026 y \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 28,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires \\subset(\\locset(x, y), rep);"
        },
        {
          "limitHit": false,
          "lineNumber": 29,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires \\disjoint(rep, rep2);"
        },
        {
          "limitHit": false,
          "lineNumber": 30,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures x \u003e 0 \u0026 y \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 37,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires x \u003e 0 \u0026 y \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 38,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires \\subset(\\locset(x, y), rep);"
        },
        {
          "limitHit": false,
          "lineNumber": 39,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires \\disjoint(rep, rep2);"
        },
        {
          "limitHit": false,
          "lineNumber": 40,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures x \u003e 0 \u0026 y \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 48,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires x \u003e 0 \u0026 y \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 49,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires \\subset(\\locset(x, y), rep);"
        },
        {
          "limitHit": false,
          "lineNumber": 50,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires \\disjoint(rep, rep2);"
        },
        {
          "limitHit": false,
          "lineNumber": 51,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures x \u003e 0 \u0026 y \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 60,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires x \u003e 0 \u0026 y \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 61,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires \\subset(\\locset(x, y), rep);"
        },
        {
          "limitHit": false,
          "lineNumber": 62,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires \\disjoint(rep, rep2);"
        },
        {
          "limitHit": false,
          "lineNumber": 63,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures x \u003e 0 \u0026 y \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 73,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires x \u003e 0 \u0026 y \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 74,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires \\subset(\\locset(x, y), rep);"
        },
        {
          "limitHit": false,
          "lineNumber": 75,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires \\disjoint(rep, rep2);"
        },
        {
          "limitHit": false,
          "lineNumber": 76,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures x \u003e 0 \u0026 y \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 87,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires x \u003e 0 \u0026 y \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 88,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires \\subset(\\locset(x, y), rep);"
        },
        {
          "limitHit": false,
          "lineNumber": 89,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires \\disjoint(rep, rep2);"
        },
        {
          "limitHit": false,
          "lineNumber": 90,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures x \u003e 0 \u0026 y \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 102,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires x \u003e 0 \u0026 y \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 103,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires \\subset(\\locset(x, y), rep);"
        },
        {
          "limitHit": false,
          "lineNumber": 104,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires \\disjoint(rep, rep2);"
        },
        {
          "limitHit": false,
          "lineNumber": 105,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures x \u003e 0 \u0026 y \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 118,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires x \u003e 0 \u0026 y \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 119,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires \\subset(\\locset(x, y), rep);"
        },
        {
          "limitHit": false,
          "lineNumber": 120,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires \\disjoint(rep, rep2);"
        },
        {
          "limitHit": false,
          "lineNumber": 121,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures x \u003e 0 \u0026 y \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 135,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires x \u003e 0 \u0026 y \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 136,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires \\subset(\\locset(x, y), rep);"
        },
        {
          "limitHit": false,
          "lineNumber": 137,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires \\disjoint(rep, rep2);"
        },
        {
          "limitHit": false,
          "lineNumber": 138,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures x \u003e 0 \u0026 y \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 162,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures \\new_elems_fresh(rep2);"
        }
      ],
      "repository": {
        "name": "github.com/Flunzmas/gym-autokey",
        "url": "/github.com/Flunzmas/gym-autokey"
      }
    },
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "58a1b137d98e1240f442a87b239586b642dc69f2"
        },
        "content": "class Contract {\n  int x;\n  int y;\n\n\n  //@ requires x \u003e 0;\n  //@ ensures x \u003e 0;\n  void foo () {\n    x++; bar();\n  }\n\n\n  //@ ensures true;\n  //@ assignable y;\n  void bar () {};\n\n}\n",
        "name": "Contract.java",
        "path": "autokey_examples/performance-test/src.templates/Contract.java",
        "url": "/github.com/Flunzmas/gym-autokey/-/blob/autokey_examples/performance-test/src.templates/Contract.java"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 5,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 6,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 12,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures true;"
        }
      ],
      "repository": {
        "name": "github.com/Flunzmas/gym-autokey",
        "url": "/github.com/Flunzmas/gym-autokey"
      }
    },
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "58a1b137d98e1240f442a87b239586b642dc69f2"
        },
        "content": "class GhostFrame {\n  int x;\n  int y;\n\n  //@ ghost \\locset footprint;\n\n  //@ requires x \u003e 0;\n  //@ requires \\disjoint(footprint,\\singleton(x));\n  //@ ensures x \u003e 0;\n  void foo_1 () {\n    x++; bar();\n  }\n\n  //@ requires x \u003e 0;\n  //@ requires \\disjoint(footprint,\\singleton(x));\n  //@ ensures x \u003e 0;\n  void foo_2 () {\n    x++; bar();\n    x++; bar();\n  }\n\n  //@ requires x \u003e 0;\n  //@ requires \\disjoint(footprint,\\singleton(x));\n  //@ ensures x \u003e 0;\n  void foo_3 () {\n    x++; bar();\n    x++; bar();\n    x++; bar();\n  }\n\n  //@ requires x \u003e 0;\n  //@ requires \\disjoint(footprint,\\singleton(x));\n  //@ ensures x \u003e 0;\n  void foo_4 () {\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n  }\n\n  //@ requires x \u003e 0;\n  //@ requires \\disjoint(footprint,\\singleton(x));\n  //@ ensures x \u003e 0;\n  void foo_5 () {\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n  }\n\n  //@ requires x \u003e 0;\n  //@ requires \\disjoint(footprint,\\singleton(x));\n  //@ ensures x \u003e 0;\n  void foo_6 () {\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n  }\n\n  //@ requires x \u003e 0;\n  //@ requires \\disjoint(footprint,\\singleton(x));\n  //@ ensures x \u003e 0;\n  void foo_7 () {\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n  }\n\n  //@ requires x \u003e 0;\n  //@ requires \\disjoint(footprint,\\singleton(x));\n  //@ ensures x \u003e 0;\n  void foo_8 () {\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n  }\n\n  //@ requires x \u003e 0;\n  //@ requires \\disjoint(footprint,\\singleton(x));\n  //@ ensures x \u003e 0;\n  void foo_9 () {\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n  }\n\n  //@ requires x \u003e 0;\n  //@ requires \\disjoint(footprint,\\singleton(x));\n  //@ ensures x \u003e 0;\n  void foo_10 () {\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n  }\n\n  //@ requires x \u003e 0;\n  //@ requires \\disjoint(footprint,\\singleton(x));\n  //@ ensures x \u003e 0;\n  void foo_20 () {\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n  }\n\n\n  //@ ensures \\disjoint(footprint,\\singleton(x));\n  //@ assignable footprint;\n  void bar () {};\n\n}\n",
        "name": "GhostFrame.java",
        "path": "autokey_examples/performance-test/src.templates/GhostFrame.java",
        "url": "/github.com/Flunzmas/gym-autokey/-/blob/autokey_examples/performance-test/src.templates/GhostFrame.java"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 6,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 7,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires \\disjoint(footprint,\\singleton(x));"
        },
        {
          "limitHit": false,
          "lineNumber": 8,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 13,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 14,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires \\disjoint(footprint,\\singleton(x));"
        },
        {
          "limitHit": false,
          "lineNumber": 15,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 21,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 22,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires \\disjoint(footprint,\\singleton(x));"
        },
        {
          "limitHit": false,
          "lineNumber": 23,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 30,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 31,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires \\disjoint(footprint,\\singleton(x));"
        },
        {
          "limitHit": false,
          "lineNumber": 32,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 40,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 41,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires \\disjoint(footprint,\\singleton(x));"
        },
        {
          "limitHit": false,
          "lineNumber": 42,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 51,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 52,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires \\disjoint(footprint,\\singleton(x));"
        },
        {
          "limitHit": false,
          "lineNumber": 53,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 63,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 64,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires \\disjoint(footprint,\\singleton(x));"
        },
        {
          "limitHit": false,
          "lineNumber": 65,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 76,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 77,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires \\disjoint(footprint,\\singleton(x));"
        },
        {
          "limitHit": false,
          "lineNumber": 78,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 90,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 91,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires \\disjoint(footprint,\\singleton(x));"
        },
        {
          "limitHit": false,
          "lineNumber": 92,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 105,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 106,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires \\disjoint(footprint,\\singleton(x));"
        },
        {
          "limitHit": false,
          "lineNumber": 107,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 121,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 122,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires \\disjoint(footprint,\\singleton(x));"
        },
        {
          "limitHit": false,
          "lineNumber": 123,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 148,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures \\disjoint(footprint,\\singleton(x));"
        }
      ],
      "repository": {
        "name": "github.com/Flunzmas/gym-autokey",
        "url": "/github.com/Flunzmas/gym-autokey"
      }
    },
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "58a1b137d98e1240f442a87b239586b642dc69f2"
        },
        "content": "class Modelfield {\n  int x;\n  int y;\n\n  //@ model \\locset footprint;\n  //@ accessible footprint: \\empty;\n\n  //@ requires x \u003e 0;\n  //@ requires \\disjoint(footprint,\\singleton(x));\n  //@ ensures x \u003e 0;\n  void foo_1 () {\n    x++; bar();\n  }\n\n  //@ requires x \u003e 0;\n  //@ requires \\disjoint(footprint,\\singleton(x));\n  //@ ensures x \u003e 0;\n  void foo_2 () {\n    x++; bar();\n    x++; bar();\n  }\n\n  //@ requires x \u003e 0;\n  //@ requires \\disjoint(footprint,\\singleton(x));\n  //@ ensures x \u003e 0;\n  void foo_3 () {\n    x++; bar();\n    x++; bar();\n    x++; bar();\n  }\n\n  //@ requires x \u003e 0;\n  //@ requires \\disjoint(footprint,\\singleton(x));\n  //@ ensures x \u003e 0;\n  void foo_4 () {\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n  }\n\n  //@ requires x \u003e 0;\n  //@ requires \\disjoint(footprint,\\singleton(x));\n  //@ ensures x \u003e 0;\n  void foo_5 () {\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n  }\n\n  //@ requires x \u003e 0;\n  //@ requires \\disjoint(footprint,\\singleton(x));\n  //@ ensures x \u003e 0;\n  void foo_6 () {\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n  }\n\n  //@ requires x \u003e 0;\n  //@ requires \\disjoint(footprint,\\singleton(x));\n  //@ ensures x \u003e 0;\n  void foo_7 () {\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n  }\n\n  //@ requires x \u003e 0;\n  //@ requires \\disjoint(footprint,\\singleton(x));\n  //@ ensures x \u003e 0;\n  void foo_8 () {\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n  }\n\n  //@ requires x \u003e 0;\n  //@ requires \\disjoint(footprint,\\singleton(x));\n  //@ ensures x \u003e 0;\n  void foo_9 () {\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n  }\n\n  //@ requires x \u003e 0;\n  //@ requires \\disjoint(footprint,\\singleton(x));\n  //@ ensures x \u003e 0;\n  void foo_10 () {\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n  }\n\n  //@ requires x \u003e 0;\n  //@ requires \\disjoint(footprint,\\singleton(x));\n  //@ ensures x \u003e 0;\n  void foo_20 () {\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n  }\n\n\n  //@ ensures true;\n  //@ assignable footprint;\n  void bar () {};\n\n}\n",
        "name": "Modelfield.java",
        "path": "autokey_examples/performance-test/src.templates/Modelfield.java",
        "url": "/github.com/Flunzmas/gym-autokey/-/blob/autokey_examples/performance-test/src.templates/Modelfield.java"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 7,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 8,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires \\disjoint(footprint,\\singleton(x));"
        },
        {
          "limitHit": false,
          "lineNumber": 9,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 14,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 15,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires \\disjoint(footprint,\\singleton(x));"
        },
        {
          "limitHit": false,
          "lineNumber": 16,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 22,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 23,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires \\disjoint(footprint,\\singleton(x));"
        },
        {
          "limitHit": false,
          "lineNumber": 24,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 31,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 32,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires \\disjoint(footprint,\\singleton(x));"
        },
        {
          "limitHit": false,
          "lineNumber": 33,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 41,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 42,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires \\disjoint(footprint,\\singleton(x));"
        },
        {
          "limitHit": false,
          "lineNumber": 43,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 52,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 53,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires \\disjoint(footprint,\\singleton(x));"
        },
        {
          "limitHit": false,
          "lineNumber": 54,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 64,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 65,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires \\disjoint(footprint,\\singleton(x));"
        },
        {
          "limitHit": false,
          "lineNumber": 66,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 77,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 78,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires \\disjoint(footprint,\\singleton(x));"
        },
        {
          "limitHit": false,
          "lineNumber": 79,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 91,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 92,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires \\disjoint(footprint,\\singleton(x));"
        },
        {
          "limitHit": false,
          "lineNumber": 93,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 106,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 107,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires \\disjoint(footprint,\\singleton(x));"
        },
        {
          "limitHit": false,
          "lineNumber": 108,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 122,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 123,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires \\disjoint(footprint,\\singleton(x));"
        },
        {
          "limitHit": false,
          "lineNumber": 124,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 149,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures true;"
        }
      ],
      "repository": {
        "name": "github.com/Flunzmas/gym-autokey",
        "url": "/github.com/Flunzmas/gym-autokey"
      }
    },
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "58a1b137d98e1240f442a87b239586b642dc69f2"
        },
        "content": "class Inc {\n  int x;\n\n\n  //@ requires x \u003e 0;\n  //@ ensures x \u003e 0;\n  void foo_1 () {\n    x++;\n  }\n\n  //@ requires x \u003e 0;\n  //@ ensures x \u003e 0;\n  void foo_2 () {\n    x++;\n    x++;\n  }\n\n  //@ requires x \u003e 0;\n  //@ ensures x \u003e 0;\n  void foo_3 () {\n    x++;\n    x++;\n    x++;\n  }\n\n  //@ requires x \u003e 0;\n  //@ ensures x \u003e 0;\n  void foo_4 () {\n    x++;\n    x++;\n    x++;\n    x++;\n  }\n\n  //@ requires x \u003e 0;\n  //@ ensures x \u003e 0;\n  void foo_5 () {\n    x++;\n    x++;\n    x++;\n    x++;\n    x++;\n  }\n\n  //@ requires x \u003e 0;\n  //@ ensures x \u003e 0;\n  void foo_6 () {\n    x++;\n    x++;\n    x++;\n    x++;\n    x++;\n    x++;\n  }\n\n  //@ requires x \u003e 0;\n  //@ ensures x \u003e 0;\n  void foo_7 () {\n    x++;\n    x++;\n    x++;\n    x++;\n    x++;\n    x++;\n    x++;\n  }\n\n  //@ requires x \u003e 0;\n  //@ ensures x \u003e 0;\n  void foo_8 () {\n    x++;\n    x++;\n    x++;\n    x++;\n    x++;\n    x++;\n    x++;\n    x++;\n  }\n\n  //@ requires x \u003e 0;\n  //@ ensures x \u003e 0;\n  void foo_9 () {\n    x++;\n    x++;\n    x++;\n    x++;\n    x++;\n    x++;\n    x++;\n    x++;\n    x++;\n }\n\n  //@ requires x \u003e 0;\n  //@ ensures x \u003e 0;\n  void foo_10 () {\n    x++;\n    x++;\n    x++;\n    x++;\n    x++;\n    x++;\n    x++;\n    x++;\n    x++;\n    x++;\n }\n\n  //@ requires x \u003e 0;\n  //@ ensures x \u003e 0;\n  void foo_20 () {\n    x++;\n    x++;\n    x++;\n    x++;\n    x++;\n    x++;\n    x++;\n    x++;\n    x++;\n    x++;\n    x++;\n    x++;\n    x++;\n    x++;\n    x++;\n    x++;\n    x++;\n    x++;\n    x++;\n    x++;\n  }\n\n}\n",
        "name": "Inc.java",
        "path": "key/key/key.ui/examples/performance-test/src.templates/Inc.java",
        "url": "/github.com/Flunzmas/gym-autokey/-/blob/key/key/key.ui/examples/performance-test/src.templates/Inc.java"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 4,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 5,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 10,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 11,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 17,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 18,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 25,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 26,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 34,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 35,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 44,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 45,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 55,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 56,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 67,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 68,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 80,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 81,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 94,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 95,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 109,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 110,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures x \u003e 0;"
        }
      ],
      "repository": {
        "name": "github.com/Flunzmas/gym-autokey",
        "url": "/github.com/Flunzmas/gym-autokey"
      }
    },
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "58a1b137d98e1240f442a87b239586b642dc69f2"
        },
        "content": "class Inc2 {\n  int x;\n  int y;\n\n  //@ requires x \u003e 0;\n  //@ ensures x \u003e 0;\n  void foo_1 () {\n    x++; y++;\n  }\n\n  //@ requires x \u003e 0;\n  //@ ensures x \u003e 0;\n  void foo_2 () {\n    x++; y++;\n    x++; y++;\n  }\n\n  //@ requires x \u003e 0;\n  //@ ensures x \u003e 0;\n  void foo_3 () {\n    x++; y++;\n    x++; y++;\n    x++; y++;\n  }\n\n  //@ requires x \u003e 0;\n  //@ ensures x \u003e 0;\n  void foo_4 () {\n    x++; y++;\n    x++; y++;\n    x++; y++;\n    x++; y++;\n  }\n\n  //@ requires x \u003e 0;\n  //@ ensures x \u003e 0;\n  void foo_5 () {\n    x++; y++;\n    x++; y++;\n    x++; y++;\n    x++; y++;\n    x++; y++;\n  }\n\n  //@ requires x \u003e 0;\n  //@ ensures x \u003e 0;\n  void foo_6 () {\n    x++; y++;\n    x++; y++;\n    x++; y++;\n    x++; y++;\n    x++; y++;\n    x++; y++;\n  }\n\n  //@ requires x \u003e 0;\n  //@ ensures x \u003e 0;\n  void foo_7 () {\n    x++; y++;\n    x++; y++;\n    x++; y++;\n    x++; y++;\n    x++; y++;\n    x++; y++;\n    x++; y++;\n  }\n\n  //@ requires x \u003e 0;\n  //@ ensures x \u003e 0;\n  void foo_8 () {\n    x++; y++;\n    x++; y++;\n    x++; y++;\n    x++; y++;\n    x++; y++;\n    x++; y++;\n    x++; y++;\n    x++; y++;\n  }\n\n  //@ requires x \u003e 0;\n  //@ ensures x \u003e 0;\n  void foo_9 () {\n    x++; y++;\n    x++; y++;\n    x++; y++;\n    x++; y++;\n    x++; y++;\n    x++; y++;\n    x++; y++;\n    x++; y++;\n    x++; y++;\n  }\n\n  //@ requires x \u003e 0;\n  //@ ensures x \u003e 0;\n  void foo_10 () {\n    x++; y++;\n    x++; y++;\n    x++; y++;\n    x++; y++;\n    x++; y++;\n    x++; y++;\n    x++; y++;\n    x++; y++;\n    x++; y++;\n    x++; y++;\n  }\n\n  //@ requires x \u003e 0;\n  //@ ensures x \u003e 0;\n  void foo_20 () {\n    x++; y++;\n    x++; y++;\n    x++; y++;\n    x++; y++;\n    x++; y++;\n    x++; y++;\n    x++; y++;\n    x++; y++;\n    x++; y++;\n    x++; y++;\n    x++; y++;\n    x++; y++;\n    x++; y++;\n    x++; y++;\n    x++; y++;\n    x++; y++;\n    x++; y++;\n    x++; y++;\n    x++; y++;\n    x++; y++;\n  }\n\n  //@ requires x \u003e 0;\n  //@ ensures x \u003e 0;\n  void foo_40 () {\n    x++; y++;\n    x++; y++;\n    x++; y++;\n    x++; y++;\n    x++; y++;\n    x++; y++;\n    x++; y++;\n    x++; y++;\n    x++; y++;\n    x++; y++;\n    x++; y++;\n    x++; y++;\n    x++; y++;\n    x++; y++;\n    x++; y++;\n    x++; y++;\n    x++; y++;\n    x++; y++;\n    x++; y++;\n    x++; y++;\n    x++; y++;\n    x++; y++;\n    x++; y++;\n    x++; y++;\n    x++; y++;\n    x++; y++;\n    x++; y++;\n    x++; y++;\n    x++; y++;\n    x++; y++;\n    x++; y++;\n    x++; y++;\n    x++; y++;\n    x++; y++;\n    x++; y++;\n    x++; y++;\n    x++; y++;\n    x++; y++;\n    x++; y++;\n    x++; y++;\n  }\n\n\n  //@ ensures true;\n  //@ assignable y;\n  void bar () {};\n\n}\n",
        "name": "Inc2.java",
        "path": "key/key/key.ui/examples/performance-test/src.templates/Inc2.java",
        "url": "/github.com/Flunzmas/gym-autokey/-/blob/key/key/key.ui/examples/performance-test/src.templates/Inc2.java"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 4,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 5,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 10,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 11,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 17,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 18,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 25,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 26,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 34,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 35,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 44,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 45,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 55,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 56,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 67,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 68,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 80,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 81,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 94,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 95,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 109,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 110,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 134,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 135,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 180,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures true;"
        }
      ],
      "repository": {
        "name": "github.com/Flunzmas/gym-autokey",
        "url": "/github.com/Flunzmas/gym-autokey"
      }
    },
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "58a1b137d98e1240f442a87b239586b642dc69f2"
        },
        "content": "class DynamicGhost {\n    int x;\n    C c;\n\n    //@ public ghost \\locset rep;\n\n    //@ public invariant \\subset(\\locset(rep), rep);\n    //@ private invariant rep == this.*;\n\n    //@ private invariant \\disjoint(rep, c.rep);\n    //@ private invariant \\invariant_for(c);\n\n    //@ normal_behavior\n    //@ requires x \u003e 0;\n    //@ ensures x \u003e 0;\n    void dynamicGhost_1 () {\n        x++; c.helper();\n    }\n\n    //@ normal_behavior\n    //@ requires x \u003e 0;\n    //@ ensures x \u003e 0;\n    void dynamicGhost_2 () {\n        x++; c.helper();\n        x++; c.helper();\n    }\n\n    //@ normal_behavior\n    //@ requires x \u003e 0;\n    //@ ensures x \u003e 0;\n    void dynamicGhost_3 () {\n        x++; c.helper();\n        x++; c.helper();\n        x++; c.helper();\n    }\n\n    //@ normal_behavior\n    //@ requires x \u003e 0;\n    //@ ensures x \u003e 0;\n    void dynamicGhost_4 () {\n        x++; c.helper();\n        x++; c.helper();\n        x++; c.helper();\n        x++; c.helper();\n    }\n\n    //@ normal_behavior\n    //@ requires x \u003e 0;\n    //@ ensures x \u003e 0;\n    void dynamicGhost_5 () {\n        x++; c.helper();\n        x++; c.helper();\n        x++; c.helper();\n        x++; c.helper();\n        x++; c.helper();\n    }\n\n    //@ normal_behavior\n    //@ requires x \u003e 0;\n    //@ ensures x \u003e 0;\n    void dynamicGhost_6 () {\n        x++; c.helper();\n        x++; c.helper();\n        x++; c.helper();\n        x++; c.helper();\n        x++; c.helper();\n        x++; c.helper();\n    }\n\n    //@ normal_behavior\n    //@ requires x \u003e 0;\n    //@ ensures x \u003e 0;\n    void dynamicGhost_7 () {\n        x++; c.helper();\n        x++; c.helper();\n        x++; c.helper();\n        x++; c.helper();\n        x++; c.helper();\n        x++; c.helper();\n        x++; c.helper();\n    }\n\n    //@ normal_behavior\n    //@ requires x \u003e 0;\n    //@ ensures x \u003e 0;\n    void dynamicGhost_8 () {\n        x++; c.helper();\n        x++; c.helper();\n        x++; c.helper();\n        x++; c.helper();\n        x++; c.helper();\n        x++; c.helper();\n        x++; c.helper();\n        x++; c.helper();\n    }\n\n    //@ normal_behavior\n    //@ requires x \u003e 0;\n    //@ ensures x \u003e 0;\n    void dynamicGhost_9 () {\n        x++; c.helper();\n        x++; c.helper();\n        x++; c.helper();\n        x++; c.helper();\n        x++; c.helper();\n        x++; c.helper();\n        x++; c.helper();\n        x++; c.helper();\n        x++; c.helper();\n    }\n\n    //@ normal_behavior\n    //@ requires x \u003e 0;\n    //@ ensures x \u003e 0;\n    void dynamicGhost_10 () {\n        x++; c.helper();\n        x++; c.helper();\n        x++; c.helper();\n        x++; c.helper();\n        x++; c.helper();\n        x++; c.helper();\n        x++; c.helper();\n        x++; c.helper();\n        x++; c.helper();\n        x++; c.helper();\n    }\n\n    //@ normal_behavior\n    //@ requires x \u003e 0;\n    //@ ensures x \u003e 0;\n    void dynamicGhost_20 () {\n        x++; c.helper();\n        x++; c.helper();\n        x++; c.helper();\n        x++; c.helper();\n        x++; c.helper();\n        x++; c.helper();\n        x++; c.helper();\n        x++; c.helper();\n        x++; c.helper();\n        x++; c.helper();\n        x++; c.helper();\n        x++; c.helper();\n        x++; c.helper();\n        x++; c.helper();\n        x++; c.helper();\n        x++; c.helper();\n        x++; c.helper();\n        x++; c.helper();\n        x++; c.helper();\n        x++; c.helper();\n    }\n\n\n    class C {\n        int y;\n\n        //@ public ghost \\locset rep;\n        //@ public invariant \\subset(\\locset(rep), rep);\n        //@ private invariant rep == this.*;\n\n        //@ accessible \\inv: rep;\n\n        //@ normal_behavior\n        //@ ensures \\new_elems_fresh(rep);\n        //@ assignable rep;\n        public void helper() {}\n    }\n\n}",
        "name": "DynamicGhost.java",
        "path": "autokey_examples/performance-test/src.templates/DynamicGhost.java",
        "url": "/github.com/Flunzmas/gym-autokey/-/blob/autokey_examples/performance-test/src.templates/DynamicGhost.java"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 13,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 14,
          "offsetAndLengths": [
            [
              4,
              12
            ]
          ],
          "preview": "    //@ ensures x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 20,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 21,
          "offsetAndLengths": [
            [
              4,
              12
            ]
          ],
          "preview": "    //@ ensures x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 28,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 29,
          "offsetAndLengths": [
            [
              4,
              12
            ]
          ],
          "preview": "    //@ ensures x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 37,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 38,
          "offsetAndLengths": [
            [
              4,
              12
            ]
          ],
          "preview": "    //@ ensures x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 47,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 48,
          "offsetAndLengths": [
            [
              4,
              12
            ]
          ],
          "preview": "    //@ ensures x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 58,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 59,
          "offsetAndLengths": [
            [
              4,
              12
            ]
          ],
          "preview": "    //@ ensures x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 70,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 71,
          "offsetAndLengths": [
            [
              4,
              12
            ]
          ],
          "preview": "    //@ ensures x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 83,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 84,
          "offsetAndLengths": [
            [
              4,
              12
            ]
          ],
          "preview": "    //@ ensures x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 97,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 98,
          "offsetAndLengths": [
            [
              4,
              12
            ]
          ],
          "preview": "    //@ ensures x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 112,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 113,
          "offsetAndLengths": [
            [
              4,
              12
            ]
          ],
          "preview": "    //@ ensures x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 128,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 129,
          "offsetAndLengths": [
            [
              4,
              12
            ]
          ],
          "preview": "    //@ ensures x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 164,
          "offsetAndLengths": [
            [
              8,
              12
            ]
          ],
          "preview": "        //@ ensures \\new_elems_fresh(rep);"
        }
      ],
      "repository": {
        "name": "github.com/Flunzmas/gym-autokey",
        "url": "/github.com/Flunzmas/gym-autokey"
      }
    },
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "58a1b137d98e1240f442a87b239586b642dc69f2"
        },
        "content": "class AccessChain1 {\n  AccessChain1 a;\n  int x;\n  int y;\n\n\n  //@ requires a != null;\n  //@ requires a.x \u003e 0;\n  //@ ensures a.x \u003e 0;\n  void foo_1() {\n    a.x++; bar();\n  }\n\n\n  //@ requires a != null;\n  //@ requires a.x \u003e 0;\n  //@ ensures a.x \u003e 0;\n  void foo_2() {\n    a.x++; bar();\n    a.x++; bar();\n  }\n\n\n  //@ requires a != null;\n  //@ requires a.x \u003e 0;\n  //@ ensures a.x \u003e 0;\n  void foo_3() {\n    a.x++; bar();\n    a.x++; bar();\n    a.x++; bar();\n  }\n\n\n  //@ requires a != null;\n  //@ requires a.x \u003e 0;\n  //@ ensures a.x \u003e 0;\n  void foo_4() {\n    a.x++; bar();\n    a.x++; bar();\n    a.x++; bar();\n    a.x++; bar();\n  }\n\n\n  //@ requires a != null;\n  //@ requires a.x \u003e 0;\n  //@ ensures a.x \u003e 0;\n  void foo_5() {\n    a.x++; bar();\n    a.x++; bar();\n    a.x++; bar();\n    a.x++; bar();\n    a.x++; bar();\n  }\n\n\n  //@ requires a != null;\n  //@ requires a.x \u003e 0;\n  //@ ensures a.x \u003e 0;\n  void foo_6() {\n    a.x++; bar();\n    a.x++; bar();\n    a.x++; bar();\n    a.x++; bar();\n    a.x++; bar();\n    a.x++; bar();\n  }\n\n\n  //@ requires a != null;\n  //@ requires a.x \u003e 0;\n  //@ ensures a.x \u003e 0;\n  void foo_7() {\n    a.x++; bar();\n    a.x++; bar();\n    a.x++; bar();\n    a.x++; bar();\n    a.x++; bar();\n    a.x++; bar();\n    a.x++; bar();\n  }\n\n\n  //@ requires a != null;\n  //@ requires a.x \u003e 0;\n  //@ ensures a.x \u003e 0;\n  void foo_8() {\n    a.x++; bar();\n    a.x++; bar();\n    a.x++; bar();\n    a.x++; bar();\n    a.x++; bar();\n    a.x++; bar();\n    a.x++; bar();\n    a.x++; bar();\n  }\n\n\n  //@ requires a != null;\n  //@ requires a.x \u003e 0;\n  //@ ensures a.x \u003e 0;\n  void foo_9() {\n    a.x++; bar();\n    a.x++; bar();\n    a.x++; bar();\n    a.x++; bar();\n    a.x++; bar();\n    a.x++; bar();\n    a.x++; bar();\n    a.x++; bar();\n    a.x++; bar();\n  }\n\n\n  //@ requires a != null;\n  //@ requires a.x \u003e 0;\n  //@ ensures a.x \u003e 0;\n  void foo_10() {\n    a.x++; bar();\n    a.x++; bar();\n    a.x++; bar();\n    a.x++; bar();\n    a.x++; bar();\n    a.x++; bar();\n    a.x++; bar();\n    a.x++; bar();\n    a.x++; bar();\n    a.x++; bar();\n  }\n\n\n  //@ requires a != null;\n  //@ requires a.x \u003e 0;\n  //@ ensures a.x \u003e 0;\n  void foo_20() {\n    a.x++; bar();\n    a.x++; bar();\n    a.x++; bar();\n    a.x++; bar();\n    a.x++; bar();\n    a.x++; bar();\n    a.x++; bar();\n    a.x++; bar();\n    a.x++; bar();\n    a.x++; bar();\n    a.x++; bar();\n    a.x++; bar();\n    a.x++; bar();\n    a.x++; bar();\n    a.x++; bar();\n    a.x++; bar();\n    a.x++; bar();\n    a.x++; bar();\n    a.x++; bar();\n    a.x++; bar();\n  }\n\n\n  //@ ensures true;\n  //@ assignable y;\n  void bar () {};\n\n}\n",
        "name": "AccessChain1.java",
        "path": "autokey_examples/performance-test/src.templates/AccessChain1.java",
        "url": "/github.com/Flunzmas/gym-autokey/-/blob/autokey_examples/performance-test/src.templates/AccessChain1.java"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 6,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires a != null;"
        },
        {
          "limitHit": false,
          "lineNumber": 7,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires a.x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 8,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures a.x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 14,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires a != null;"
        },
        {
          "limitHit": false,
          "lineNumber": 15,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires a.x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 16,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures a.x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 23,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires a != null;"
        },
        {
          "limitHit": false,
          "lineNumber": 24,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires a.x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 25,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures a.x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 33,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires a != null;"
        },
        {
          "limitHit": false,
          "lineNumber": 34,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires a.x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 35,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures a.x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 44,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires a != null;"
        },
        {
          "limitHit": false,
          "lineNumber": 45,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires a.x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 46,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures a.x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 56,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires a != null;"
        },
        {
          "limitHit": false,
          "lineNumber": 57,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires a.x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 58,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures a.x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 69,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires a != null;"
        },
        {
          "limitHit": false,
          "lineNumber": 70,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires a.x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 71,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures a.x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 83,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires a != null;"
        },
        {
          "limitHit": false,
          "lineNumber": 84,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires a.x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 85,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures a.x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 98,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires a != null;"
        },
        {
          "limitHit": false,
          "lineNumber": 99,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires a.x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 100,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures a.x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 114,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires a != null;"
        },
        {
          "limitHit": false,
          "lineNumber": 115,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires a.x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 116,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures a.x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 131,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires a != null;"
        },
        {
          "limitHit": false,
          "lineNumber": 132,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires a.x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 133,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures a.x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 158,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures true;"
        }
      ],
      "repository": {
        "name": "github.com/Flunzmas/gym-autokey",
        "url": "/github.com/Flunzmas/gym-autokey"
      }
    },
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "58a1b137d98e1240f442a87b239586b642dc69f2"
        },
        "content": "class AccessChain2 {\n  AccessChain2 a;\n  int x;\n  int y;\n\n\n  //@ requires a != null \u0026\u0026 a.a != null;\n  //@ requires a.a.x \u003e 0;\n  //@ ensures a.a.x \u003e 0;\n  void foo_1 () {\n    a.a.x++; bar();\n  }\n\n\n  //@ requires a != null \u0026\u0026 a.a != null \u0026\u0026 a.a.a != null \u0026\u0026 a.a.a.a != null;\n  //@ requires a.a.x \u003e 0;\n  //@ ensures a.a.x \u003e 0;\n  void foo_2 () {\n    a.a.x++; bar();\n    a.a.x++; bar();\n  }\n\n\n  //@ requires a != null \u0026\u0026 a.a != null \u0026\u0026 a.a.a != null \u0026\u0026 a.a.a.a != null;\n  //@ requires a.a.x \u003e 0;\n  //@ ensures a.a.x \u003e 0;\n  void foo_3 () {\n    a.a.x++; bar();\n    a.a.x++; bar();\n    a.a.x++; bar();\n  }\n\n\n  //@ requires a != null \u0026\u0026 a.a != null \u0026\u0026 a.a.a != null \u0026\u0026 a.a.a.a != null;\n  //@ requires a.a.x \u003e 0;\n  //@ ensures a.a.x \u003e 0;\n  void foo_4 () {\n    a.a.x++; bar();\n    a.a.x++; bar();\n    a.a.x++; bar();\n    a.a.x++; bar();\n  }\n\n\n  //@ requires a != null \u0026\u0026 a.a != null \u0026\u0026 a.a.a != null \u0026\u0026 a.a.a.a != null;\n  //@ requires a.a.x \u003e 0;\n  //@ ensures a.a.x \u003e 0;\n  void foo_5 () {\n    a.a.x++; bar();\n    a.a.x++; bar();\n    a.a.x++; bar();\n    a.a.x++; bar();\n    a.a.x++; bar();\n  }\n\n\n  //@ requires a != null \u0026\u0026 a.a != null \u0026\u0026 a.a.a != null \u0026\u0026 a.a.a.a != null;\n  //@ requires a.a.x \u003e 0;\n  //@ ensures a.a.x \u003e 0;\n  void foo_6 () {\n    a.a.x++; bar();\n    a.a.x++; bar();\n    a.a.x++; bar();\n    a.a.x++; bar();\n    a.a.x++; bar();\n    a.a.x++; bar();\n  }\n\n\n  //@ requires a != null \u0026\u0026 a.a != null \u0026\u0026 a.a.a != null \u0026\u0026 a.a.a.a != null;\n  //@ requires a.a.x \u003e 0;\n  //@ ensures a.a.x \u003e 0;\n  void foo_7 () {\n    a.a.x++; bar();\n    a.a.x++; bar();\n    a.a.x++; bar();\n    a.a.x++; bar();\n    a.a.x++; bar();\n    a.a.x++; bar();\n    a.a.x++; bar();\n  }\n\n\n  //@ requires a != null \u0026\u0026 a.a != null \u0026\u0026 a.a.a != null \u0026\u0026 a.a.a.a != null;\n  //@ requires a.a.x \u003e 0;\n  //@ ensures a.a.x \u003e 0;\n  void foo_8 () {\n    a.a.x++; bar();\n    a.a.x++; bar();\n    a.a.x++; bar();\n    a.a.x++; bar();\n    a.a.x++; bar();\n    a.a.x++; bar();\n    a.a.x++; bar();\n    a.a.x++; bar();\n  }\n\n\n  //@ requires a != null \u0026\u0026 a.a != null \u0026\u0026 a.a.a != null \u0026\u0026 a.a.a.a != null;\n  //@ requires a.a.x \u003e 0;\n  //@ ensures a.a.x \u003e 0;\n  void foo_9 () {\n    a.a.x++; bar();\n    a.a.x++; bar();\n    a.a.x++; bar();\n    a.a.x++; bar();\n    a.a.x++; bar();\n    a.a.x++; bar();\n    a.a.x++; bar();\n    a.a.x++; bar();\n    a.a.x++; bar();\n  }\n\n\n  //@ requires a != null \u0026\u0026 a.a != null \u0026\u0026 a.a.a != null \u0026\u0026 a.a.a.a != null;\n  //@ requires a.a.x \u003e 0;\n  //@ ensures a.a.x \u003e 0;\n  void foo_10 () {\n    a.a.x++; bar();\n    a.a.x++; bar();\n    a.a.x++; bar();\n    a.a.x++; bar();\n    a.a.x++; bar();\n    a.a.x++; bar();\n    a.a.x++; bar();\n    a.a.x++; bar();\n    a.a.x++; bar();\n    a.a.x++; bar();\n  }\n\n\n  //@ requires a != null \u0026\u0026 a.a != null \u0026\u0026 a.a.a != null \u0026\u0026 a.a.a.a != null;\n  //@ requires a.a.x \u003e 0;\n  //@ ensures a.a.x \u003e 0;\n  void foo_20 () {\n    a.a.x++; bar();\n    a.a.x++; bar();\n    a.a.x++; bar();\n    a.a.x++; bar();\n    a.a.x++; bar();\n    a.a.x++; bar();\n    a.a.x++; bar();\n    a.a.x++; bar();\n    a.a.x++; bar();\n    a.a.x++; bar();\n    a.a.x++; bar();\n    a.a.x++; bar();\n    a.a.x++; bar();\n    a.a.x++; bar();\n    a.a.x++; bar();\n    a.a.x++; bar();\n    a.a.x++; bar();\n    a.a.x++; bar();\n    a.a.x++; bar();\n    a.a.x++; bar();\n  }\n\n\n  //@ ensures true;\n  //@ assignable y;\n  void bar () {};\n\n}\n",
        "name": "AccessChain2.java",
        "path": "autokey_examples/performance-test/src.templates/AccessChain2.java",
        "url": "/github.com/Flunzmas/gym-autokey/-/blob/autokey_examples/performance-test/src.templates/AccessChain2.java"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 6,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires a != null \u0026\u0026 a.a != null;"
        },
        {
          "limitHit": false,
          "lineNumber": 7,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires a.a.x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 8,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures a.a.x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 14,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires a != null \u0026\u0026 a.a != null \u0026\u0026 a.a.a != null \u0026\u0026 a.a.a.a != null;"
        },
        {
          "limitHit": false,
          "lineNumber": 15,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires a.a.x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 16,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures a.a.x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 23,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires a != null \u0026\u0026 a.a != null \u0026\u0026 a.a.a != null \u0026\u0026 a.a.a.a != null;"
        },
        {
          "limitHit": false,
          "lineNumber": 24,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires a.a.x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 25,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures a.a.x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 33,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires a != null \u0026\u0026 a.a != null \u0026\u0026 a.a.a != null \u0026\u0026 a.a.a.a != null;"
        },
        {
          "limitHit": false,
          "lineNumber": 34,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires a.a.x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 35,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures a.a.x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 44,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires a != null \u0026\u0026 a.a != null \u0026\u0026 a.a.a != null \u0026\u0026 a.a.a.a != null;"
        },
        {
          "limitHit": false,
          "lineNumber": 45,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires a.a.x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 46,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures a.a.x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 56,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires a != null \u0026\u0026 a.a != null \u0026\u0026 a.a.a != null \u0026\u0026 a.a.a.a != null;"
        },
        {
          "limitHit": false,
          "lineNumber": 57,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires a.a.x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 58,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures a.a.x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 69,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires a != null \u0026\u0026 a.a != null \u0026\u0026 a.a.a != null \u0026\u0026 a.a.a.a != null;"
        },
        {
          "limitHit": false,
          "lineNumber": 70,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires a.a.x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 71,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures a.a.x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 83,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires a != null \u0026\u0026 a.a != null \u0026\u0026 a.a.a != null \u0026\u0026 a.a.a.a != null;"
        },
        {
          "limitHit": false,
          "lineNumber": 84,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires a.a.x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 85,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures a.a.x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 98,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires a != null \u0026\u0026 a.a != null \u0026\u0026 a.a.a != null \u0026\u0026 a.a.a.a != null;"
        },
        {
          "limitHit": false,
          "lineNumber": 99,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires a.a.x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 100,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures a.a.x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 114,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires a != null \u0026\u0026 a.a != null \u0026\u0026 a.a.a != null \u0026\u0026 a.a.a.a != null;"
        },
        {
          "limitHit": false,
          "lineNumber": 115,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires a.a.x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 116,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures a.a.x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 131,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires a != null \u0026\u0026 a.a != null \u0026\u0026 a.a.a != null \u0026\u0026 a.a.a.a != null;"
        },
        {
          "limitHit": false,
          "lineNumber": 132,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires a.a.x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 133,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures a.a.x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 158,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures true;"
        }
      ],
      "repository": {
        "name": "github.com/Flunzmas/gym-autokey",
        "url": "/github.com/Flunzmas/gym-autokey"
      }
    },
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "58a1b137d98e1240f442a87b239586b642dc69f2"
        },
        "content": "class AccessChain4 {\n  AccessChain4 a;\n  int x;\n  int y;\n\n\n  //@ requires a != null \u0026\u0026 a.a != null \u0026\u0026 a.a.a != null \u0026\u0026 a.a.a.a != null;\n  //@ requires a.a.a.a.x \u003e 0;\n  //@ ensures a.a.a.a.x \u003e 0;\n  void foo_1 () {\n    a.a.a.a.x++; bar();\n  }\n\n\n  //@ requires a != null \u0026\u0026 a.a != null \u0026\u0026 a.a.a != null \u0026\u0026 a.a.a.a != null;\n  //@ requires a.a.a.a.x \u003e 0;\n  //@ ensures a.a.a.a.x \u003e 0;\n  void foo_2 () {\n    a.a.a.a.x++; bar();\n    a.a.a.a.x++; bar();\n  }\n\n\n  //@ requires a != null \u0026\u0026 a.a != null \u0026\u0026 a.a.a != null \u0026\u0026 a.a.a.a != null;\n  //@ requires a.a.a.a.x \u003e 0;\n  //@ ensures a.a.a.a.x \u003e 0;\n  void foo_3 () {\n    a.a.a.a.x++; bar();\n    a.a.a.a.x++; bar();\n    a.a.a.a.x++; bar();\n  }\n\n\n  //@ requires a != null \u0026\u0026 a.a != null \u0026\u0026 a.a.a != null \u0026\u0026 a.a.a.a != null;\n  //@ requires a.a.a.a.x \u003e 0;\n  //@ ensures a.a.a.a.x \u003e 0;\n  void foo_4 () {\n    a.a.a.a.x++; bar();\n    a.a.a.a.x++; bar();\n    a.a.a.a.x++; bar();\n    a.a.a.a.x++; bar();\n  }\n\n\n  //@ requires a != null \u0026\u0026 a.a != null \u0026\u0026 a.a.a != null \u0026\u0026 a.a.a.a != null;\n  //@ requires a.a.a.a.x \u003e 0;\n  //@ ensures a.a.a.a.x \u003e 0;\n  void foo_5 () {\n    a.a.a.a.x++; bar();\n    a.a.a.a.x++; bar();\n    a.a.a.a.x++; bar();\n    a.a.a.a.x++; bar();\n    a.a.a.a.x++; bar();\n  }\n\n\n  //@ requires a != null \u0026\u0026 a.a != null \u0026\u0026 a.a.a != null \u0026\u0026 a.a.a.a != null;\n  //@ requires a.a.a.a.x \u003e 0;\n  //@ ensures a.a.a.a.x \u003e 0;\n  void foo_6 () {\n    a.a.a.a.x++; bar();\n    a.a.a.a.x++; bar();\n    a.a.a.a.x++; bar();\n    a.a.a.a.x++; bar();\n    a.a.a.a.x++; bar();\n    a.a.a.a.x++; bar();\n  }\n\n\n  //@ requires a != null \u0026\u0026 a.a != null \u0026\u0026 a.a.a != null \u0026\u0026 a.a.a.a != null;\n  //@ requires a.a.a.a.x \u003e 0;\n  //@ ensures a.a.a.a.x \u003e 0;\n  void foo_7 () {\n    a.a.a.a.x++; bar();\n    a.a.a.a.x++; bar();\n    a.a.a.a.x++; bar();\n    a.a.a.a.x++; bar();\n    a.a.a.a.x++; bar();\n    a.a.a.a.x++; bar();\n    a.a.a.a.x++; bar();\n  }\n\n\n  //@ requires a != null \u0026\u0026 a.a != null \u0026\u0026 a.a.a != null \u0026\u0026 a.a.a.a != null;\n  //@ requires a.a.a.a.x \u003e 0;\n  //@ ensures a.a.a.a.x \u003e 0;\n  void foo_8 () {\n    a.a.a.a.x++; bar();\n    a.a.a.a.x++; bar();\n    a.a.a.a.x++; bar();\n    a.a.a.a.x++; bar();\n    a.a.a.a.x++; bar();\n    a.a.a.a.x++; bar();\n    a.a.a.a.x++; bar();\n    a.a.a.a.x++; bar();\n  }\n\n\n  //@ requires a != null \u0026\u0026 a.a != null \u0026\u0026 a.a.a != null \u0026\u0026 a.a.a.a != null;\n  //@ requires a.a.a.a.x \u003e 0;\n  //@ ensures a.a.a.a.x \u003e 0;\n  void foo_9 () {\n    a.a.a.a.x++; bar();\n    a.a.a.a.x++; bar();\n    a.a.a.a.x++; bar();\n    a.a.a.a.x++; bar();\n    a.a.a.a.x++; bar();\n    a.a.a.a.x++; bar();\n    a.a.a.a.x++; bar();\n    a.a.a.a.x++; bar();\n    a.a.a.a.x++; bar();\n  }\n\n\n  //@ requires a != null \u0026\u0026 a.a != null \u0026\u0026 a.a.a != null \u0026\u0026 a.a.a.a != null;\n  //@ requires a.a.a.a.x \u003e 0;\n  //@ ensures a.a.a.a.x \u003e 0;\n  void foo_10 () {\n    a.a.a.a.x++; bar();\n    a.a.a.a.x++; bar();\n    a.a.a.a.x++; bar();\n    a.a.a.a.x++; bar();\n    a.a.a.a.x++; bar();\n    a.a.a.a.x++; bar();\n    a.a.a.a.x++; bar();\n    a.a.a.a.x++; bar();\n    a.a.a.a.x++; bar();\n    a.a.a.a.x++; bar();\n  }\n\n\n  //@ requires a != null \u0026\u0026 a.a != null \u0026\u0026 a.a.a != null \u0026\u0026 a.a.a.a != null;\n  //@ requires a.a.a.a.x \u003e 0;\n  //@ ensures a.a.a.a.x \u003e 0;\n  void foo_20 () {\n    a.a.a.a.x++; bar();\n    a.a.a.a.x++; bar();\n    a.a.a.a.x++; bar();\n    a.a.a.a.x++; bar();\n    a.a.a.a.x++; bar();\n    a.a.a.a.x++; bar();\n    a.a.a.a.x++; bar();\n    a.a.a.a.x++; bar();\n    a.a.a.a.x++; bar();\n    a.a.a.a.x++; bar();\n    a.a.a.a.x++; bar();\n    a.a.a.a.x++; bar();\n    a.a.a.a.x++; bar();\n    a.a.a.a.x++; bar();\n    a.a.a.a.x++; bar();\n    a.a.a.a.x++; bar();\n    a.a.a.a.x++; bar();\n    a.a.a.a.x++; bar();\n    a.a.a.a.x++; bar();\n    a.a.a.a.x++; bar();\n  }\n\n\n  //@ ensures true;\n  //@ assignable y;\n  void bar () {};\n\n}\n",
        "name": "AccessChain4.java",
        "path": "autokey_examples/performance-test/src.templates/AccessChain4.java",
        "url": "/github.com/Flunzmas/gym-autokey/-/blob/autokey_examples/performance-test/src.templates/AccessChain4.java"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 6,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires a != null \u0026\u0026 a.a != null \u0026\u0026 a.a.a != null \u0026\u0026 a.a.a.a != null;"
        },
        {
          "limitHit": false,
          "lineNumber": 7,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires a.a.a.a.x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 8,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures a.a.a.a.x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 14,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires a != null \u0026\u0026 a.a != null \u0026\u0026 a.a.a != null \u0026\u0026 a.a.a.a != null;"
        },
        {
          "limitHit": false,
          "lineNumber": 15,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires a.a.a.a.x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 16,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures a.a.a.a.x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 23,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires a != null \u0026\u0026 a.a != null \u0026\u0026 a.a.a != null \u0026\u0026 a.a.a.a != null;"
        },
        {
          "limitHit": false,
          "lineNumber": 24,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires a.a.a.a.x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 25,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures a.a.a.a.x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 33,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires a != null \u0026\u0026 a.a != null \u0026\u0026 a.a.a != null \u0026\u0026 a.a.a.a != null;"
        },
        {
          "limitHit": false,
          "lineNumber": 34,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires a.a.a.a.x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 35,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures a.a.a.a.x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 44,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires a != null \u0026\u0026 a.a != null \u0026\u0026 a.a.a != null \u0026\u0026 a.a.a.a != null;"
        },
        {
          "limitHit": false,
          "lineNumber": 45,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires a.a.a.a.x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 46,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures a.a.a.a.x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 56,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires a != null \u0026\u0026 a.a != null \u0026\u0026 a.a.a != null \u0026\u0026 a.a.a.a != null;"
        },
        {
          "limitHit": false,
          "lineNumber": 57,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires a.a.a.a.x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 58,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures a.a.a.a.x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 69,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires a != null \u0026\u0026 a.a != null \u0026\u0026 a.a.a != null \u0026\u0026 a.a.a.a != null;"
        },
        {
          "limitHit": false,
          "lineNumber": 70,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires a.a.a.a.x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 71,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures a.a.a.a.x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 83,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires a != null \u0026\u0026 a.a != null \u0026\u0026 a.a.a != null \u0026\u0026 a.a.a.a != null;"
        },
        {
          "limitHit": false,
          "lineNumber": 84,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires a.a.a.a.x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 85,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures a.a.a.a.x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 98,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires a != null \u0026\u0026 a.a != null \u0026\u0026 a.a.a != null \u0026\u0026 a.a.a.a != null;"
        },
        {
          "limitHit": false,
          "lineNumber": 99,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires a.a.a.a.x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 100,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures a.a.a.a.x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 114,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires a != null \u0026\u0026 a.a != null \u0026\u0026 a.a.a != null \u0026\u0026 a.a.a.a != null;"
        },
        {
          "limitHit": false,
          "lineNumber": 115,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires a.a.a.a.x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 116,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures a.a.a.a.x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 131,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires a != null \u0026\u0026 a.a != null \u0026\u0026 a.a.a != null \u0026\u0026 a.a.a.a != null;"
        },
        {
          "limitHit": false,
          "lineNumber": 132,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires a.a.a.a.x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 133,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures a.a.a.a.x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 158,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures true;"
        }
      ],
      "repository": {
        "name": "github.com/Flunzmas/gym-autokey",
        "url": "/github.com/Flunzmas/gym-autokey"
      }
    },
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "58a1b137d98e1240f442a87b239586b642dc69f2"
        },
        "content": "class Dynamic {\n  int x;\n  int y;\n\n  //@ model \\locset footprint;\n  //@ accessible footprint: footprint;\n\n  //@ requires x \u003e 0;\n  //@ requires \\disjoint(footprint,\\singleton(x));\n  //@ ensures x \u003e 0;\n  void foo_1 () {\n    x++; bar();\n  }\n\n  //@ requires x \u003e 0;\n  //@ requires \\disjoint(footprint,\\singleton(x));\n  //@ ensures x \u003e 0;\n  void foo_2 () {\n    x++; bar();\n    x++; bar();\n  }\n\n  //@ requires x \u003e 0;\n  //@ requires \\disjoint(footprint,\\singleton(x));\n  //@ ensures x \u003e 0;\n  void foo_3 () {\n    x++; bar();\n    x++; bar();\n    x++; bar();\n  }\n\n  //@ requires x \u003e 0;\n  //@ requires \\disjoint(footprint,\\singleton(x));\n  //@ ensures x \u003e 0;\n  void foo_4 () {\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n  }\n\n  //@ requires x \u003e 0;\n  //@ requires \\disjoint(footprint,\\singleton(x));\n  //@ ensures x \u003e 0;\n  void foo_5 () {\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n  }\n\n  //@ requires x \u003e 0;\n  //@ requires \\disjoint(footprint,\\singleton(x));\n  //@ ensures x \u003e 0;\n  void foo_6 () {\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n  }\n\n  //@ requires x \u003e 0;\n  //@ requires \\disjoint(footprint,\\singleton(x));\n  //@ ensures x \u003e 0;\n  void foo_7 () {\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n  }\n\n  //@ requires x \u003e 0;\n  //@ requires \\disjoint(footprint,\\singleton(x));\n  //@ ensures x \u003e 0;\n  void foo_8 () {\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n  }\n\n  //@ requires x \u003e 0;\n  //@ requires \\disjoint(footprint,\\singleton(x));\n  //@ ensures x \u003e 0;\n  void foo_9 () {\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n  }\n\n  //@ requires x \u003e 0;\n  //@ requires \\disjoint(footprint,\\singleton(x));\n  //@ ensures x \u003e 0;\n  void foo_10 () {\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n  }\n\n  //@ requires x \u003e 0;\n  //@ requires \\disjoint(footprint,\\singleton(x));\n  //@ ensures x \u003e 0;\n  void foo_20 () {\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n  }\n\n  //@ ensures \\new_elems_fresh(footprint);\n  //@ assignable footprint;\n  void bar () {};\n\n}\n",
        "name": "Dynamic.java",
        "path": "key/key/key.ui/examples/performance-test/src.templates/Dynamic.java",
        "url": "/github.com/Flunzmas/gym-autokey/-/blob/key/key/key.ui/examples/performance-test/src.templates/Dynamic.java"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 7,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 8,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires \\disjoint(footprint,\\singleton(x));"
        },
        {
          "limitHit": false,
          "lineNumber": 9,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 14,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 15,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires \\disjoint(footprint,\\singleton(x));"
        },
        {
          "limitHit": false,
          "lineNumber": 16,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 22,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 23,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires \\disjoint(footprint,\\singleton(x));"
        },
        {
          "limitHit": false,
          "lineNumber": 24,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 31,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 32,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires \\disjoint(footprint,\\singleton(x));"
        },
        {
          "limitHit": false,
          "lineNumber": 33,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 41,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 42,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires \\disjoint(footprint,\\singleton(x));"
        },
        {
          "limitHit": false,
          "lineNumber": 43,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 52,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 53,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires \\disjoint(footprint,\\singleton(x));"
        },
        {
          "limitHit": false,
          "lineNumber": 54,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 64,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 65,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires \\disjoint(footprint,\\singleton(x));"
        },
        {
          "limitHit": false,
          "lineNumber": 66,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 77,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 78,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires \\disjoint(footprint,\\singleton(x));"
        },
        {
          "limitHit": false,
          "lineNumber": 79,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 91,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 92,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires \\disjoint(footprint,\\singleton(x));"
        },
        {
          "limitHit": false,
          "lineNumber": 93,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 106,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 107,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires \\disjoint(footprint,\\singleton(x));"
        },
        {
          "limitHit": false,
          "lineNumber": 108,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 122,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 123,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires \\disjoint(footprint,\\singleton(x));"
        },
        {
          "limitHit": false,
          "lineNumber": 124,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 148,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures \\new_elems_fresh(footprint);"
        }
      ],
      "repository": {
        "name": "github.com/Flunzmas/gym-autokey",
        "url": "/github.com/Flunzmas/gym-autokey"
      }
    },
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "58a1b137d98e1240f442a87b239586b642dc69f2"
        },
        "content": "class Dynamic2 {\n  int x;\n  int y;\n\n  //@ model \\locset rep;\n  //@ accessible rep: rep;\n\n  //@ model \\locset rep2;\n  //@ accessible rep2: rep2;\n\n  //@ requires x \u003e 0 \u0026 y \u003e 0;\n  //@ requires \\subset(\\locset(x, y), rep);\n  //@ requires \\disjoint(rep, rep2);\n  //@ ensures x \u003e 0 \u0026 y \u003e 0;\n  void foo_1 () {\n    x++; y++; bar();\n  }\n\n  //@ requires x \u003e 0 \u0026 y \u003e 0;\n  //@ requires \\subset(\\locset(x, y), rep);\n  //@ requires \\disjoint(rep, rep2);\n  //@ ensures x \u003e 0 \u0026 y \u003e 0;\n  void foo_2 () {\n    x++; y++; bar();\n    x++; y++; bar();\n  }\n\n  //@ requires x \u003e 0 \u0026 y \u003e 0;\n  //@ requires \\subset(\\locset(x, y), rep);\n  //@ requires \\disjoint(rep, rep2);\n  //@ ensures x \u003e 0 \u0026 y \u003e 0;\n  void foo_3 () {\n    x++; y++; bar();\n    x++; y++; bar();\n    x++; y++; bar();\n  }\n\n  //@ requires x \u003e 0 \u0026 y \u003e 0;\n  //@ requires \\subset(\\locset(x, y), rep);\n  //@ requires \\disjoint(rep, rep2);\n  //@ ensures x \u003e 0 \u0026 y \u003e 0;\n  void foo_4 () {\n    x++; y++; bar();\n    x++; y++; bar();\n    x++; y++; bar();\n    x++; y++; bar();\n  }\n\n  //@ requires x \u003e 0 \u0026 y \u003e 0;\n  //@ requires \\subset(\\locset(x, y), rep);\n  //@ requires \\disjoint(rep, rep2);\n  //@ ensures x \u003e 0 \u0026 y \u003e 0;\n  void foo_5 () {\n    x++; y++; bar();\n    x++; y++; bar();\n    x++; y++; bar();\n    x++; y++; bar();\n    x++; y++; bar();\n  }\n\n  //@ requires x \u003e 0 \u0026 y \u003e 0;\n  //@ requires \\subset(\\locset(x, y), rep);\n  //@ requires \\disjoint(rep, rep2);\n  //@ ensures x \u003e 0 \u0026 y \u003e 0;\n  void foo_6 () {\n    x++; y++; bar();\n    x++; y++; bar();\n    x++; y++; bar();\n    x++; y++; bar();\n    x++; y++; bar();\n    x++; y++; bar();\n  }\n\n  //@ requires x \u003e 0 \u0026 y \u003e 0;\n  //@ requires \\subset(\\locset(x, y), rep);\n  //@ requires \\disjoint(rep, rep2);\n  //@ ensures x \u003e 0 \u0026 y \u003e 0;\n  void foo_7 () {\n    x++; y++; bar();\n    x++; y++; bar();\n    x++; y++; bar();\n    x++; y++; bar();\n    x++; y++; bar();\n    x++; y++; bar();\n    x++; y++; bar();\n  }\n\n  //@ requires x \u003e 0 \u0026 y \u003e 0;\n  //@ requires \\subset(\\locset(x, y), rep);\n  //@ requires \\disjoint(rep, rep2);\n  //@ ensures x \u003e 0 \u0026 y \u003e 0;\n  void foo_8 () {\n    x++; y++; bar();\n    x++; y++; bar();\n    x++; y++; bar();\n    x++; y++; bar();\n    x++; y++; bar();\n    x++; y++; bar();\n    x++; y++; bar();\n    x++; y++; bar();\n  }\n\n  //@ requires x \u003e 0 \u0026 y \u003e 0;\n  //@ requires \\subset(\\locset(x, y), rep);\n  //@ requires \\disjoint(rep, rep2);\n  //@ ensures x \u003e 0 \u0026 y \u003e 0;\n  void foo_9 () {\n    x++; y++; bar();\n    x++; y++; bar();\n    x++; y++; bar();\n    x++; y++; bar();\n    x++; y++; bar();\n    x++; y++; bar();\n    x++; y++; bar();\n    x++; y++; bar();\n    x++; y++; bar();\n  }\n\n  //@ requires x \u003e 0 \u0026 y \u003e 0;\n  //@ requires \\subset(\\locset(x, y), rep);\n  //@ requires \\disjoint(rep, rep2);\n  //@ ensures x \u003e 0 \u0026 y \u003e 0;\n  void foo_10 () {\n    x++; y++; bar();\n    x++; y++; bar();\n    x++; y++; bar();\n    x++; y++; bar();\n    x++; y++; bar();\n    x++; y++; bar();\n    x++; y++; bar();\n    x++; y++; bar();\n    x++; y++; bar();\n    x++; y++; bar();\n  }\n\n  //@ requires x \u003e 0 \u0026 y \u003e 0;\n  //@ requires \\subset(\\locset(x, y), rep);\n  //@ requires \\disjoint(rep, rep2);\n  //@ ensures x \u003e 0 \u0026 y \u003e 0;\n  void foo_20 () {\n    x++; y++; bar();\n    x++; y++; bar();\n    x++; y++; bar();\n    x++; y++; bar();\n    x++; y++; bar();\n    x++; y++; bar();\n    x++; y++; bar();\n    x++; y++; bar();\n    x++; y++; bar();\n    x++; y++; bar();\n    x++; y++; bar();\n    x++; y++; bar();\n    x++; y++; bar();\n    x++; y++; bar();\n    x++; y++; bar();\n    x++; y++; bar();\n    x++; y++; bar();\n    x++; y++; bar();\n    x++; y++; bar();\n    x++; y++; bar();\n  }\n\n  //@ ensures \\new_elems_fresh(rep2);\n  //@ assignable rep2;\n  void bar () {};\n\n}\n",
        "name": "Dynamic2.java",
        "path": "key/key/key.ui/examples/performance-test/src.templates/Dynamic2.java",
        "url": "/github.com/Flunzmas/gym-autokey/-/blob/key/key/key.ui/examples/performance-test/src.templates/Dynamic2.java"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 10,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires x \u003e 0 \u0026 y \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 11,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires \\subset(\\locset(x, y), rep);"
        },
        {
          "limitHit": false,
          "lineNumber": 12,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires \\disjoint(rep, rep2);"
        },
        {
          "limitHit": false,
          "lineNumber": 13,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures x \u003e 0 \u0026 y \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 18,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires x \u003e 0 \u0026 y \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 19,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires \\subset(\\locset(x, y), rep);"
        },
        {
          "limitHit": false,
          "lineNumber": 20,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires \\disjoint(rep, rep2);"
        },
        {
          "limitHit": false,
          "lineNumber": 21,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures x \u003e 0 \u0026 y \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 27,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires x \u003e 0 \u0026 y \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 28,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires \\subset(\\locset(x, y), rep);"
        },
        {
          "limitHit": false,
          "lineNumber": 29,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires \\disjoint(rep, rep2);"
        },
        {
          "limitHit": false,
          "lineNumber": 30,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures x \u003e 0 \u0026 y \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 37,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires x \u003e 0 \u0026 y \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 38,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires \\subset(\\locset(x, y), rep);"
        },
        {
          "limitHit": false,
          "lineNumber": 39,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires \\disjoint(rep, rep2);"
        },
        {
          "limitHit": false,
          "lineNumber": 40,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures x \u003e 0 \u0026 y \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 48,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires x \u003e 0 \u0026 y \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 49,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires \\subset(\\locset(x, y), rep);"
        },
        {
          "limitHit": false,
          "lineNumber": 50,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires \\disjoint(rep, rep2);"
        },
        {
          "limitHit": false,
          "lineNumber": 51,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures x \u003e 0 \u0026 y \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 60,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires x \u003e 0 \u0026 y \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 61,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires \\subset(\\locset(x, y), rep);"
        },
        {
          "limitHit": false,
          "lineNumber": 62,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires \\disjoint(rep, rep2);"
        },
        {
          "limitHit": false,
          "lineNumber": 63,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures x \u003e 0 \u0026 y \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 73,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires x \u003e 0 \u0026 y \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 74,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires \\subset(\\locset(x, y), rep);"
        },
        {
          "limitHit": false,
          "lineNumber": 75,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires \\disjoint(rep, rep2);"
        },
        {
          "limitHit": false,
          "lineNumber": 76,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures x \u003e 0 \u0026 y \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 87,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires x \u003e 0 \u0026 y \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 88,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires \\subset(\\locset(x, y), rep);"
        },
        {
          "limitHit": false,
          "lineNumber": 89,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires \\disjoint(rep, rep2);"
        },
        {
          "limitHit": false,
          "lineNumber": 90,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures x \u003e 0 \u0026 y \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 102,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires x \u003e 0 \u0026 y \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 103,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires \\subset(\\locset(x, y), rep);"
        },
        {
          "limitHit": false,
          "lineNumber": 104,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires \\disjoint(rep, rep2);"
        },
        {
          "limitHit": false,
          "lineNumber": 105,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures x \u003e 0 \u0026 y \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 118,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires x \u003e 0 \u0026 y \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 119,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires \\subset(\\locset(x, y), rep);"
        },
        {
          "limitHit": false,
          "lineNumber": 120,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires \\disjoint(rep, rep2);"
        },
        {
          "limitHit": false,
          "lineNumber": 121,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures x \u003e 0 \u0026 y \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 135,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires x \u003e 0 \u0026 y \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 136,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires \\subset(\\locset(x, y), rep);"
        },
        {
          "limitHit": false,
          "lineNumber": 137,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires \\disjoint(rep, rep2);"
        },
        {
          "limitHit": false,
          "lineNumber": 138,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures x \u003e 0 \u0026 y \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 162,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures \\new_elems_fresh(rep2);"
        }
      ],
      "repository": {
        "name": "github.com/Flunzmas/gym-autokey",
        "url": "/github.com/Flunzmas/gym-autokey"
      }
    },
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "58a1b137d98e1240f442a87b239586b642dc69f2"
        },
        "content": "class Test {\n\n  static RuntimeException e;\n  int x = 4;\n  int y;\n  int w;\n\n  //@ invariant x == 4 \u0026\u0026 w == 0;\n  //@ requires e != null;\n  //@ signals (Exception) y == z;\n  //@ signals_only RuntimeException;\n  Test (int z) {\n      y = z;\n      throw e;\n  }\n\n}\n\n",
        "name": "Test.java",
        "path": "autokey_examples/standard_key/java_dl/constructorException/Test.java",
        "url": "/github.com/Flunzmas/gym-autokey/-/blob/autokey_examples/standard_key/java_dl/constructorException/Test.java"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 8,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires e != null;"
        }
      ],
      "repository": {
        "name": "github.com/Flunzmas/gym-autokey",
        "url": "/github.com/Flunzmas/gym-autokey"
      }
    },
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "58a1b137d98e1240f442a87b239586b642dc69f2"
        },
        "content": "class Contract {\n  int x;\n  int y;\n\n\n  //@ requires x \u003e 0;\n  //@ ensures x \u003e 0;\n  void foo () {\n    x++; bar();\n  }\n\n\n  //@ ensures true;\n  //@ assignable y;\n  void bar () {};\n\n}\n",
        "name": "Contract.java",
        "path": "key/key/key.ui/examples/performance-test/src.templates/Contract.java",
        "url": "/github.com/Flunzmas/gym-autokey/-/blob/key/key/key.ui/examples/performance-test/src.templates/Contract.java"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 5,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 6,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 12,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures true;"
        }
      ],
      "repository": {
        "name": "github.com/Flunzmas/gym-autokey",
        "url": "/github.com/Flunzmas/gym-autokey"
      }
    },
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "58a1b137d98e1240f442a87b239586b642dc69f2"
        },
        "content": "class GhostFrame {\n  int x;\n  int y;\n\n  //@ ghost \\locset footprint;\n\n  //@ requires x \u003e 0;\n  //@ requires \\disjoint(footprint,\\singleton(x));\n  //@ ensures x \u003e 0;\n  void foo_1 () {\n    x++; bar();\n  }\n\n  //@ requires x \u003e 0;\n  //@ requires \\disjoint(footprint,\\singleton(x));\n  //@ ensures x \u003e 0;\n  void foo_2 () {\n    x++; bar();\n    x++; bar();\n  }\n\n  //@ requires x \u003e 0;\n  //@ requires \\disjoint(footprint,\\singleton(x));\n  //@ ensures x \u003e 0;\n  void foo_3 () {\n    x++; bar();\n    x++; bar();\n    x++; bar();\n  }\n\n  //@ requires x \u003e 0;\n  //@ requires \\disjoint(footprint,\\singleton(x));\n  //@ ensures x \u003e 0;\n  void foo_4 () {\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n  }\n\n  //@ requires x \u003e 0;\n  //@ requires \\disjoint(footprint,\\singleton(x));\n  //@ ensures x \u003e 0;\n  void foo_5 () {\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n  }\n\n  //@ requires x \u003e 0;\n  //@ requires \\disjoint(footprint,\\singleton(x));\n  //@ ensures x \u003e 0;\n  void foo_6 () {\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n  }\n\n  //@ requires x \u003e 0;\n  //@ requires \\disjoint(footprint,\\singleton(x));\n  //@ ensures x \u003e 0;\n  void foo_7 () {\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n  }\n\n  //@ requires x \u003e 0;\n  //@ requires \\disjoint(footprint,\\singleton(x));\n  //@ ensures x \u003e 0;\n  void foo_8 () {\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n  }\n\n  //@ requires x \u003e 0;\n  //@ requires \\disjoint(footprint,\\singleton(x));\n  //@ ensures x \u003e 0;\n  void foo_9 () {\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n  }\n\n  //@ requires x \u003e 0;\n  //@ requires \\disjoint(footprint,\\singleton(x));\n  //@ ensures x \u003e 0;\n  void foo_10 () {\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n  }\n\n  //@ requires x \u003e 0;\n  //@ requires \\disjoint(footprint,\\singleton(x));\n  //@ ensures x \u003e 0;\n  void foo_20 () {\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n  }\n\n\n  //@ ensures \\disjoint(footprint,\\singleton(x));\n  //@ assignable footprint;\n  void bar () {};\n\n}\n",
        "name": "GhostFrame.java",
        "path": "key/key/key.ui/examples/performance-test/src.templates/GhostFrame.java",
        "url": "/github.com/Flunzmas/gym-autokey/-/blob/key/key/key.ui/examples/performance-test/src.templates/GhostFrame.java"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 6,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 7,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires \\disjoint(footprint,\\singleton(x));"
        },
        {
          "limitHit": false,
          "lineNumber": 8,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 13,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 14,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires \\disjoint(footprint,\\singleton(x));"
        },
        {
          "limitHit": false,
          "lineNumber": 15,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 21,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 22,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires \\disjoint(footprint,\\singleton(x));"
        },
        {
          "limitHit": false,
          "lineNumber": 23,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 30,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 31,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires \\disjoint(footprint,\\singleton(x));"
        },
        {
          "limitHit": false,
          "lineNumber": 32,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 40,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 41,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires \\disjoint(footprint,\\singleton(x));"
        },
        {
          "limitHit": false,
          "lineNumber": 42,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 51,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 52,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires \\disjoint(footprint,\\singleton(x));"
        },
        {
          "limitHit": false,
          "lineNumber": 53,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 63,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 64,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires \\disjoint(footprint,\\singleton(x));"
        },
        {
          "limitHit": false,
          "lineNumber": 65,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 76,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 77,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires \\disjoint(footprint,\\singleton(x));"
        },
        {
          "limitHit": false,
          "lineNumber": 78,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 90,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 91,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires \\disjoint(footprint,\\singleton(x));"
        },
        {
          "limitHit": false,
          "lineNumber": 92,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 105,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 106,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires \\disjoint(footprint,\\singleton(x));"
        },
        {
          "limitHit": false,
          "lineNumber": 107,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 121,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 122,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires \\disjoint(footprint,\\singleton(x));"
        },
        {
          "limitHit": false,
          "lineNumber": 123,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 148,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures \\disjoint(footprint,\\singleton(x));"
        }
      ],
      "repository": {
        "name": "github.com/Flunzmas/gym-autokey",
        "url": "/github.com/Flunzmas/gym-autokey"
      }
    },
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "58a1b137d98e1240f442a87b239586b642dc69f2"
        },
        "content": "class Modelfield {\n  int x;\n  int y;\n\n  //@ model \\locset footprint;\n  //@ accessible footprint: \\empty;\n\n  //@ requires x \u003e 0;\n  //@ requires \\disjoint(footprint,\\singleton(x));\n  //@ ensures x \u003e 0;\n  void foo_1 () {\n    x++; bar();\n  }\n\n  //@ requires x \u003e 0;\n  //@ requires \\disjoint(footprint,\\singleton(x));\n  //@ ensures x \u003e 0;\n  void foo_2 () {\n    x++; bar();\n    x++; bar();\n  }\n\n  //@ requires x \u003e 0;\n  //@ requires \\disjoint(footprint,\\singleton(x));\n  //@ ensures x \u003e 0;\n  void foo_3 () {\n    x++; bar();\n    x++; bar();\n    x++; bar();\n  }\n\n  //@ requires x \u003e 0;\n  //@ requires \\disjoint(footprint,\\singleton(x));\n  //@ ensures x \u003e 0;\n  void foo_4 () {\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n  }\n\n  //@ requires x \u003e 0;\n  //@ requires \\disjoint(footprint,\\singleton(x));\n  //@ ensures x \u003e 0;\n  void foo_5 () {\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n  }\n\n  //@ requires x \u003e 0;\n  //@ requires \\disjoint(footprint,\\singleton(x));\n  //@ ensures x \u003e 0;\n  void foo_6 () {\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n  }\n\n  //@ requires x \u003e 0;\n  //@ requires \\disjoint(footprint,\\singleton(x));\n  //@ ensures x \u003e 0;\n  void foo_7 () {\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n  }\n\n  //@ requires x \u003e 0;\n  //@ requires \\disjoint(footprint,\\singleton(x));\n  //@ ensures x \u003e 0;\n  void foo_8 () {\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n  }\n\n  //@ requires x \u003e 0;\n  //@ requires \\disjoint(footprint,\\singleton(x));\n  //@ ensures x \u003e 0;\n  void foo_9 () {\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n  }\n\n  //@ requires x \u003e 0;\n  //@ requires \\disjoint(footprint,\\singleton(x));\n  //@ ensures x \u003e 0;\n  void foo_10 () {\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n  }\n\n  //@ requires x \u003e 0;\n  //@ requires \\disjoint(footprint,\\singleton(x));\n  //@ ensures x \u003e 0;\n  void foo_20 () {\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n    x++; bar();\n  }\n\n\n  //@ ensures true;\n  //@ assignable footprint;\n  void bar () {};\n\n}\n",
        "name": "Modelfield.java",
        "path": "key/key/key.ui/examples/performance-test/src.templates/Modelfield.java",
        "url": "/github.com/Flunzmas/gym-autokey/-/blob/key/key/key.ui/examples/performance-test/src.templates/Modelfield.java"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 7,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 8,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires \\disjoint(footprint,\\singleton(x));"
        },
        {
          "limitHit": false,
          "lineNumber": 9,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 14,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 15,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires \\disjoint(footprint,\\singleton(x));"
        },
        {
          "limitHit": false,
          "lineNumber": 16,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 22,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 23,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires \\disjoint(footprint,\\singleton(x));"
        },
        {
          "limitHit": false,
          "lineNumber": 24,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 31,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 32,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires \\disjoint(footprint,\\singleton(x));"
        },
        {
          "limitHit": false,
          "lineNumber": 33,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 41,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 42,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires \\disjoint(footprint,\\singleton(x));"
        },
        {
          "limitHit": false,
          "lineNumber": 43,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 52,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 53,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires \\disjoint(footprint,\\singleton(x));"
        },
        {
          "limitHit": false,
          "lineNumber": 54,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 64,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 65,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires \\disjoint(footprint,\\singleton(x));"
        },
        {
          "limitHit": false,
          "lineNumber": 66,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 77,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 78,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires \\disjoint(footprint,\\singleton(x));"
        },
        {
          "limitHit": false,
          "lineNumber": 79,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 91,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 92,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires \\disjoint(footprint,\\singleton(x));"
        },
        {
          "limitHit": false,
          "lineNumber": 93,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 106,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 107,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires \\disjoint(footprint,\\singleton(x));"
        },
        {
          "limitHit": false,
          "lineNumber": 108,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 122,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 123,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires \\disjoint(footprint,\\singleton(x));"
        },
        {
          "limitHit": false,
          "lineNumber": 124,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 149,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures true;"
        }
      ],
      "repository": {
        "name": "github.com/Flunzmas/gym-autokey",
        "url": "/github.com/Flunzmas/gym-autokey"
      }
    },
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "58a1b137d98e1240f442a87b239586b642dc69f2"
        },
        "content": "class DynamicGhost {\n    int x;\n    C c;\n\n    //@ public ghost \\locset rep;\n\n    //@ public invariant \\subset(\\locset(rep), rep);\n    //@ private invariant rep == this.*;\n\n    //@ private invariant \\disjoint(rep, c.rep);\n    //@ private invariant \\invariant_for(c);\n\n    //@ normal_behavior\n    //@ requires x \u003e 0;\n    //@ ensures x \u003e 0;\n    void dynamicGhost_1 () {\n        x++; c.helper();\n    }\n\n    //@ normal_behavior\n    //@ requires x \u003e 0;\n    //@ ensures x \u003e 0;\n    void dynamicGhost_2 () {\n        x++; c.helper();\n        x++; c.helper();\n    }\n\n    //@ normal_behavior\n    //@ requires x \u003e 0;\n    //@ ensures x \u003e 0;\n    void dynamicGhost_3 () {\n        x++; c.helper();\n        x++; c.helper();\n        x++; c.helper();\n    }\n\n    //@ normal_behavior\n    //@ requires x \u003e 0;\n    //@ ensures x \u003e 0;\n    void dynamicGhost_4 () {\n        x++; c.helper();\n        x++; c.helper();\n        x++; c.helper();\n        x++; c.helper();\n    }\n\n    //@ normal_behavior\n    //@ requires x \u003e 0;\n    //@ ensures x \u003e 0;\n    void dynamicGhost_5 () {\n        x++; c.helper();\n        x++; c.helper();\n        x++; c.helper();\n        x++; c.helper();\n        x++; c.helper();\n    }\n\n    //@ normal_behavior\n    //@ requires x \u003e 0;\n    //@ ensures x \u003e 0;\n    void dynamicGhost_6 () {\n        x++; c.helper();\n        x++; c.helper();\n        x++; c.helper();\n        x++; c.helper();\n        x++; c.helper();\n        x++; c.helper();\n    }\n\n    //@ normal_behavior\n    //@ requires x \u003e 0;\n    //@ ensures x \u003e 0;\n    void dynamicGhost_7 () {\n        x++; c.helper();\n        x++; c.helper();\n        x++; c.helper();\n        x++; c.helper();\n        x++; c.helper();\n        x++; c.helper();\n        x++; c.helper();\n    }\n\n    //@ normal_behavior\n    //@ requires x \u003e 0;\n    //@ ensures x \u003e 0;\n    void dynamicGhost_8 () {\n        x++; c.helper();\n        x++; c.helper();\n        x++; c.helper();\n        x++; c.helper();\n        x++; c.helper();\n        x++; c.helper();\n        x++; c.helper();\n        x++; c.helper();\n    }\n\n    //@ normal_behavior\n    //@ requires x \u003e 0;\n    //@ ensures x \u003e 0;\n    void dynamicGhost_9 () {\n        x++; c.helper();\n        x++; c.helper();\n        x++; c.helper();\n        x++; c.helper();\n        x++; c.helper();\n        x++; c.helper();\n        x++; c.helper();\n        x++; c.helper();\n        x++; c.helper();\n    }\n\n    //@ normal_behavior\n    //@ requires x \u003e 0;\n    //@ ensures x \u003e 0;\n    void dynamicGhost_10 () {\n        x++; c.helper();\n        x++; c.helper();\n        x++; c.helper();\n        x++; c.helper();\n        x++; c.helper();\n        x++; c.helper();\n        x++; c.helper();\n        x++; c.helper();\n        x++; c.helper();\n        x++; c.helper();\n    }\n\n    //@ normal_behavior\n    //@ requires x \u003e 0;\n    //@ ensures x \u003e 0;\n    void dynamicGhost_20 () {\n        x++; c.helper();\n        x++; c.helper();\n        x++; c.helper();\n        x++; c.helper();\n        x++; c.helper();\n        x++; c.helper();\n        x++; c.helper();\n        x++; c.helper();\n        x++; c.helper();\n        x++; c.helper();\n        x++; c.helper();\n        x++; c.helper();\n        x++; c.helper();\n        x++; c.helper();\n        x++; c.helper();\n        x++; c.helper();\n        x++; c.helper();\n        x++; c.helper();\n        x++; c.helper();\n        x++; c.helper();\n    }\n\n\n    class C {\n        int y;\n\n        //@ public ghost \\locset rep;\n        //@ public invariant \\subset(\\locset(rep), rep);\n        //@ private invariant rep == this.*;\n\n        //@ accessible \\inv: rep;\n\n        //@ normal_behavior\n        //@ ensures \\new_elems_fresh(rep);\n        //@ assignable rep;\n        public void helper() {}\n    }\n\n}",
        "name": "DynamicGhost.java",
        "path": "key/key/key.ui/examples/performance-test/src.templates/DynamicGhost.java",
        "url": "/github.com/Flunzmas/gym-autokey/-/blob/key/key/key.ui/examples/performance-test/src.templates/DynamicGhost.java"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 13,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 14,
          "offsetAndLengths": [
            [
              4,
              12
            ]
          ],
          "preview": "    //@ ensures x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 20,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 21,
          "offsetAndLengths": [
            [
              4,
              12
            ]
          ],
          "preview": "    //@ ensures x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 28,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 29,
          "offsetAndLengths": [
            [
              4,
              12
            ]
          ],
          "preview": "    //@ ensures x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 37,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 38,
          "offsetAndLengths": [
            [
              4,
              12
            ]
          ],
          "preview": "    //@ ensures x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 47,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 48,
          "offsetAndLengths": [
            [
              4,
              12
            ]
          ],
          "preview": "    //@ ensures x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 58,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 59,
          "offsetAndLengths": [
            [
              4,
              12
            ]
          ],
          "preview": "    //@ ensures x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 70,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 71,
          "offsetAndLengths": [
            [
              4,
              12
            ]
          ],
          "preview": "    //@ ensures x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 83,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 84,
          "offsetAndLengths": [
            [
              4,
              12
            ]
          ],
          "preview": "    //@ ensures x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 97,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 98,
          "offsetAndLengths": [
            [
              4,
              12
            ]
          ],
          "preview": "    //@ ensures x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 112,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 113,
          "offsetAndLengths": [
            [
              4,
              12
            ]
          ],
          "preview": "    //@ ensures x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 128,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 129,
          "offsetAndLengths": [
            [
              4,
              12
            ]
          ],
          "preview": "    //@ ensures x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 164,
          "offsetAndLengths": [
            [
              8,
              12
            ]
          ],
          "preview": "        //@ ensures \\new_elems_fresh(rep);"
        }
      ],
      "repository": {
        "name": "github.com/Flunzmas/gym-autokey",
        "url": "/github.com/Flunzmas/gym-autokey"
      }
    },
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "58a1b137d98e1240f442a87b239586b642dc69f2"
        },
        "content": "class AccessChain1 {\n  AccessChain1 a;\n  int x;\n  int y;\n\n\n  //@ requires a != null;\n  //@ requires a.x \u003e 0;\n  //@ ensures a.x \u003e 0;\n  void foo_1() {\n    a.x++; bar();\n  }\n\n\n  //@ requires a != null;\n  //@ requires a.x \u003e 0;\n  //@ ensures a.x \u003e 0;\n  void foo_2() {\n    a.x++; bar();\n    a.x++; bar();\n  }\n\n\n  //@ requires a != null;\n  //@ requires a.x \u003e 0;\n  //@ ensures a.x \u003e 0;\n  void foo_3() {\n    a.x++; bar();\n    a.x++; bar();\n    a.x++; bar();\n  }\n\n\n  //@ requires a != null;\n  //@ requires a.x \u003e 0;\n  //@ ensures a.x \u003e 0;\n  void foo_4() {\n    a.x++; bar();\n    a.x++; bar();\n    a.x++; bar();\n    a.x++; bar();\n  }\n\n\n  //@ requires a != null;\n  //@ requires a.x \u003e 0;\n  //@ ensures a.x \u003e 0;\n  void foo_5() {\n    a.x++; bar();\n    a.x++; bar();\n    a.x++; bar();\n    a.x++; bar();\n    a.x++; bar();\n  }\n\n\n  //@ requires a != null;\n  //@ requires a.x \u003e 0;\n  //@ ensures a.x \u003e 0;\n  void foo_6() {\n    a.x++; bar();\n    a.x++; bar();\n    a.x++; bar();\n    a.x++; bar();\n    a.x++; bar();\n    a.x++; bar();\n  }\n\n\n  //@ requires a != null;\n  //@ requires a.x \u003e 0;\n  //@ ensures a.x \u003e 0;\n  void foo_7() {\n    a.x++; bar();\n    a.x++; bar();\n    a.x++; bar();\n    a.x++; bar();\n    a.x++; bar();\n    a.x++; bar();\n    a.x++; bar();\n  }\n\n\n  //@ requires a != null;\n  //@ requires a.x \u003e 0;\n  //@ ensures a.x \u003e 0;\n  void foo_8() {\n    a.x++; bar();\n    a.x++; bar();\n    a.x++; bar();\n    a.x++; bar();\n    a.x++; bar();\n    a.x++; bar();\n    a.x++; bar();\n    a.x++; bar();\n  }\n\n\n  //@ requires a != null;\n  //@ requires a.x \u003e 0;\n  //@ ensures a.x \u003e 0;\n  void foo_9() {\n    a.x++; bar();\n    a.x++; bar();\n    a.x++; bar();\n    a.x++; bar();\n    a.x++; bar();\n    a.x++; bar();\n    a.x++; bar();\n    a.x++; bar();\n    a.x++; bar();\n  }\n\n\n  //@ requires a != null;\n  //@ requires a.x \u003e 0;\n  //@ ensures a.x \u003e 0;\n  void foo_10() {\n    a.x++; bar();\n    a.x++; bar();\n    a.x++; bar();\n    a.x++; bar();\n    a.x++; bar();\n    a.x++; bar();\n    a.x++; bar();\n    a.x++; bar();\n    a.x++; bar();\n    a.x++; bar();\n  }\n\n\n  //@ requires a != null;\n  //@ requires a.x \u003e 0;\n  //@ ensures a.x \u003e 0;\n  void foo_20() {\n    a.x++; bar();\n    a.x++; bar();\n    a.x++; bar();\n    a.x++; bar();\n    a.x++; bar();\n    a.x++; bar();\n    a.x++; bar();\n    a.x++; bar();\n    a.x++; bar();\n    a.x++; bar();\n    a.x++; bar();\n    a.x++; bar();\n    a.x++; bar();\n    a.x++; bar();\n    a.x++; bar();\n    a.x++; bar();\n    a.x++; bar();\n    a.x++; bar();\n    a.x++; bar();\n    a.x++; bar();\n  }\n\n\n  //@ ensures true;\n  //@ assignable y;\n  void bar () {};\n\n}\n",
        "name": "AccessChain1.java",
        "path": "key/key/key.ui/examples/performance-test/src.templates/AccessChain1.java",
        "url": "/github.com/Flunzmas/gym-autokey/-/blob/key/key/key.ui/examples/performance-test/src.templates/AccessChain1.java"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 6,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires a != null;"
        },
        {
          "limitHit": false,
          "lineNumber": 7,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires a.x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 8,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures a.x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 14,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires a != null;"
        },
        {
          "limitHit": false,
          "lineNumber": 15,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires a.x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 16,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures a.x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 23,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires a != null;"
        },
        {
          "limitHit": false,
          "lineNumber": 24,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires a.x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 25,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures a.x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 33,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires a != null;"
        },
        {
          "limitHit": false,
          "lineNumber": 34,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires a.x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 35,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures a.x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 44,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires a != null;"
        },
        {
          "limitHit": false,
          "lineNumber": 45,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires a.x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 46,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures a.x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 56,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires a != null;"
        },
        {
          "limitHit": false,
          "lineNumber": 57,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires a.x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 58,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures a.x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 69,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires a != null;"
        },
        {
          "limitHit": false,
          "lineNumber": 70,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires a.x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 71,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures a.x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 83,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires a != null;"
        },
        {
          "limitHit": false,
          "lineNumber": 84,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires a.x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 85,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures a.x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 98,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires a != null;"
        },
        {
          "limitHit": false,
          "lineNumber": 99,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires a.x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 100,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures a.x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 114,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires a != null;"
        },
        {
          "limitHit": false,
          "lineNumber": 115,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires a.x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 116,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures a.x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 131,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires a != null;"
        },
        {
          "limitHit": false,
          "lineNumber": 132,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires a.x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 133,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures a.x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 158,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures true;"
        }
      ],
      "repository": {
        "name": "github.com/Flunzmas/gym-autokey",
        "url": "/github.com/Flunzmas/gym-autokey"
      }
    },
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "58a1b137d98e1240f442a87b239586b642dc69f2"
        },
        "content": "class AccessChain2 {\n  AccessChain2 a;\n  int x;\n  int y;\n\n\n  //@ requires a != null \u0026\u0026 a.a != null;\n  //@ requires a.a.x \u003e 0;\n  //@ ensures a.a.x \u003e 0;\n  void foo_1 () {\n    a.a.x++; bar();\n  }\n\n\n  //@ requires a != null \u0026\u0026 a.a != null \u0026\u0026 a.a.a != null \u0026\u0026 a.a.a.a != null;\n  //@ requires a.a.x \u003e 0;\n  //@ ensures a.a.x \u003e 0;\n  void foo_2 () {\n    a.a.x++; bar();\n    a.a.x++; bar();\n  }\n\n\n  //@ requires a != null \u0026\u0026 a.a != null \u0026\u0026 a.a.a != null \u0026\u0026 a.a.a.a != null;\n  //@ requires a.a.x \u003e 0;\n  //@ ensures a.a.x \u003e 0;\n  void foo_3 () {\n    a.a.x++; bar();\n    a.a.x++; bar();\n    a.a.x++; bar();\n  }\n\n\n  //@ requires a != null \u0026\u0026 a.a != null \u0026\u0026 a.a.a != null \u0026\u0026 a.a.a.a != null;\n  //@ requires a.a.x \u003e 0;\n  //@ ensures a.a.x \u003e 0;\n  void foo_4 () {\n    a.a.x++; bar();\n    a.a.x++; bar();\n    a.a.x++; bar();\n    a.a.x++; bar();\n  }\n\n\n  //@ requires a != null \u0026\u0026 a.a != null \u0026\u0026 a.a.a != null \u0026\u0026 a.a.a.a != null;\n  //@ requires a.a.x \u003e 0;\n  //@ ensures a.a.x \u003e 0;\n  void foo_5 () {\n    a.a.x++; bar();\n    a.a.x++; bar();\n    a.a.x++; bar();\n    a.a.x++; bar();\n    a.a.x++; bar();\n  }\n\n\n  //@ requires a != null \u0026\u0026 a.a != null \u0026\u0026 a.a.a != null \u0026\u0026 a.a.a.a != null;\n  //@ requires a.a.x \u003e 0;\n  //@ ensures a.a.x \u003e 0;\n  void foo_6 () {\n    a.a.x++; bar();\n    a.a.x++; bar();\n    a.a.x++; bar();\n    a.a.x++; bar();\n    a.a.x++; bar();\n    a.a.x++; bar();\n  }\n\n\n  //@ requires a != null \u0026\u0026 a.a != null \u0026\u0026 a.a.a != null \u0026\u0026 a.a.a.a != null;\n  //@ requires a.a.x \u003e 0;\n  //@ ensures a.a.x \u003e 0;\n  void foo_7 () {\n    a.a.x++; bar();\n    a.a.x++; bar();\n    a.a.x++; bar();\n    a.a.x++; bar();\n    a.a.x++; bar();\n    a.a.x++; bar();\n    a.a.x++; bar();\n  }\n\n\n  //@ requires a != null \u0026\u0026 a.a != null \u0026\u0026 a.a.a != null \u0026\u0026 a.a.a.a != null;\n  //@ requires a.a.x \u003e 0;\n  //@ ensures a.a.x \u003e 0;\n  void foo_8 () {\n    a.a.x++; bar();\n    a.a.x++; bar();\n    a.a.x++; bar();\n    a.a.x++; bar();\n    a.a.x++; bar();\n    a.a.x++; bar();\n    a.a.x++; bar();\n    a.a.x++; bar();\n  }\n\n\n  //@ requires a != null \u0026\u0026 a.a != null \u0026\u0026 a.a.a != null \u0026\u0026 a.a.a.a != null;\n  //@ requires a.a.x \u003e 0;\n  //@ ensures a.a.x \u003e 0;\n  void foo_9 () {\n    a.a.x++; bar();\n    a.a.x++; bar();\n    a.a.x++; bar();\n    a.a.x++; bar();\n    a.a.x++; bar();\n    a.a.x++; bar();\n    a.a.x++; bar();\n    a.a.x++; bar();\n    a.a.x++; bar();\n  }\n\n\n  //@ requires a != null \u0026\u0026 a.a != null \u0026\u0026 a.a.a != null \u0026\u0026 a.a.a.a != null;\n  //@ requires a.a.x \u003e 0;\n  //@ ensures a.a.x \u003e 0;\n  void foo_10 () {\n    a.a.x++; bar();\n    a.a.x++; bar();\n    a.a.x++; bar();\n    a.a.x++; bar();\n    a.a.x++; bar();\n    a.a.x++; bar();\n    a.a.x++; bar();\n    a.a.x++; bar();\n    a.a.x++; bar();\n    a.a.x++; bar();\n  }\n\n\n  //@ requires a != null \u0026\u0026 a.a != null \u0026\u0026 a.a.a != null \u0026\u0026 a.a.a.a != null;\n  //@ requires a.a.x \u003e 0;\n  //@ ensures a.a.x \u003e 0;\n  void foo_20 () {\n    a.a.x++; bar();\n    a.a.x++; bar();\n    a.a.x++; bar();\n    a.a.x++; bar();\n    a.a.x++; bar();\n    a.a.x++; bar();\n    a.a.x++; bar();\n    a.a.x++; bar();\n    a.a.x++; bar();\n    a.a.x++; bar();\n    a.a.x++; bar();\n    a.a.x++; bar();\n    a.a.x++; bar();\n    a.a.x++; bar();\n    a.a.x++; bar();\n    a.a.x++; bar();\n    a.a.x++; bar();\n    a.a.x++; bar();\n    a.a.x++; bar();\n    a.a.x++; bar();\n  }\n\n\n  //@ ensures true;\n  //@ assignable y;\n  void bar () {};\n\n}\n",
        "name": "AccessChain2.java",
        "path": "key/key/key.ui/examples/performance-test/src.templates/AccessChain2.java",
        "url": "/github.com/Flunzmas/gym-autokey/-/blob/key/key/key.ui/examples/performance-test/src.templates/AccessChain2.java"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 6,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires a != null \u0026\u0026 a.a != null;"
        },
        {
          "limitHit": false,
          "lineNumber": 7,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires a.a.x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 8,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures a.a.x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 14,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires a != null \u0026\u0026 a.a != null \u0026\u0026 a.a.a != null \u0026\u0026 a.a.a.a != null;"
        },
        {
          "limitHit": false,
          "lineNumber": 15,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires a.a.x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 16,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures a.a.x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 23,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires a != null \u0026\u0026 a.a != null \u0026\u0026 a.a.a != null \u0026\u0026 a.a.a.a != null;"
        },
        {
          "limitHit": false,
          "lineNumber": 24,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires a.a.x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 25,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures a.a.x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 33,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires a != null \u0026\u0026 a.a != null \u0026\u0026 a.a.a != null \u0026\u0026 a.a.a.a != null;"
        },
        {
          "limitHit": false,
          "lineNumber": 34,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires a.a.x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 35,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures a.a.x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 44,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires a != null \u0026\u0026 a.a != null \u0026\u0026 a.a.a != null \u0026\u0026 a.a.a.a != null;"
        },
        {
          "limitHit": false,
          "lineNumber": 45,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires a.a.x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 46,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures a.a.x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 56,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires a != null \u0026\u0026 a.a != null \u0026\u0026 a.a.a != null \u0026\u0026 a.a.a.a != null;"
        },
        {
          "limitHit": false,
          "lineNumber": 57,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires a.a.x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 58,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures a.a.x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 69,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires a != null \u0026\u0026 a.a != null \u0026\u0026 a.a.a != null \u0026\u0026 a.a.a.a != null;"
        },
        {
          "limitHit": false,
          "lineNumber": 70,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires a.a.x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 71,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures a.a.x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 83,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires a != null \u0026\u0026 a.a != null \u0026\u0026 a.a.a != null \u0026\u0026 a.a.a.a != null;"
        },
        {
          "limitHit": false,
          "lineNumber": 84,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires a.a.x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 85,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures a.a.x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 98,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires a != null \u0026\u0026 a.a != null \u0026\u0026 a.a.a != null \u0026\u0026 a.a.a.a != null;"
        },
        {
          "limitHit": false,
          "lineNumber": 99,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires a.a.x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 100,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures a.a.x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 114,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires a != null \u0026\u0026 a.a != null \u0026\u0026 a.a.a != null \u0026\u0026 a.a.a.a != null;"
        },
        {
          "limitHit": false,
          "lineNumber": 115,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires a.a.x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 116,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures a.a.x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 131,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires a != null \u0026\u0026 a.a != null \u0026\u0026 a.a.a != null \u0026\u0026 a.a.a.a != null;"
        },
        {
          "limitHit": false,
          "lineNumber": 132,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires a.a.x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 133,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures a.a.x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 158,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures true;"
        }
      ],
      "repository": {
        "name": "github.com/Flunzmas/gym-autokey",
        "url": "/github.com/Flunzmas/gym-autokey"
      }
    },
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "58a1b137d98e1240f442a87b239586b642dc69f2"
        },
        "content": "class AccessChain4 {\n  AccessChain4 a;\n  int x;\n  int y;\n\n\n  //@ requires a != null \u0026\u0026 a.a != null \u0026\u0026 a.a.a != null \u0026\u0026 a.a.a.a != null;\n  //@ requires a.a.a.a.x \u003e 0;\n  //@ ensures a.a.a.a.x \u003e 0;\n  void foo_1 () {\n    a.a.a.a.x++; bar();\n  }\n\n\n  //@ requires a != null \u0026\u0026 a.a != null \u0026\u0026 a.a.a != null \u0026\u0026 a.a.a.a != null;\n  //@ requires a.a.a.a.x \u003e 0;\n  //@ ensures a.a.a.a.x \u003e 0;\n  void foo_2 () {\n    a.a.a.a.x++; bar();\n    a.a.a.a.x++; bar();\n  }\n\n\n  //@ requires a != null \u0026\u0026 a.a != null \u0026\u0026 a.a.a != null \u0026\u0026 a.a.a.a != null;\n  //@ requires a.a.a.a.x \u003e 0;\n  //@ ensures a.a.a.a.x \u003e 0;\n  void foo_3 () {\n    a.a.a.a.x++; bar();\n    a.a.a.a.x++; bar();\n    a.a.a.a.x++; bar();\n  }\n\n\n  //@ requires a != null \u0026\u0026 a.a != null \u0026\u0026 a.a.a != null \u0026\u0026 a.a.a.a != null;\n  //@ requires a.a.a.a.x \u003e 0;\n  //@ ensures a.a.a.a.x \u003e 0;\n  void foo_4 () {\n    a.a.a.a.x++; bar();\n    a.a.a.a.x++; bar();\n    a.a.a.a.x++; bar();\n    a.a.a.a.x++; bar();\n  }\n\n\n  //@ requires a != null \u0026\u0026 a.a != null \u0026\u0026 a.a.a != null \u0026\u0026 a.a.a.a != null;\n  //@ requires a.a.a.a.x \u003e 0;\n  //@ ensures a.a.a.a.x \u003e 0;\n  void foo_5 () {\n    a.a.a.a.x++; bar();\n    a.a.a.a.x++; bar();\n    a.a.a.a.x++; bar();\n    a.a.a.a.x++; bar();\n    a.a.a.a.x++; bar();\n  }\n\n\n  //@ requires a != null \u0026\u0026 a.a != null \u0026\u0026 a.a.a != null \u0026\u0026 a.a.a.a != null;\n  //@ requires a.a.a.a.x \u003e 0;\n  //@ ensures a.a.a.a.x \u003e 0;\n  void foo_6 () {\n    a.a.a.a.x++; bar();\n    a.a.a.a.x++; bar();\n    a.a.a.a.x++; bar();\n    a.a.a.a.x++; bar();\n    a.a.a.a.x++; bar();\n    a.a.a.a.x++; bar();\n  }\n\n\n  //@ requires a != null \u0026\u0026 a.a != null \u0026\u0026 a.a.a != null \u0026\u0026 a.a.a.a != null;\n  //@ requires a.a.a.a.x \u003e 0;\n  //@ ensures a.a.a.a.x \u003e 0;\n  void foo_7 () {\n    a.a.a.a.x++; bar();\n    a.a.a.a.x++; bar();\n    a.a.a.a.x++; bar();\n    a.a.a.a.x++; bar();\n    a.a.a.a.x++; bar();\n    a.a.a.a.x++; bar();\n    a.a.a.a.x++; bar();\n  }\n\n\n  //@ requires a != null \u0026\u0026 a.a != null \u0026\u0026 a.a.a != null \u0026\u0026 a.a.a.a != null;\n  //@ requires a.a.a.a.x \u003e 0;\n  //@ ensures a.a.a.a.x \u003e 0;\n  void foo_8 () {\n    a.a.a.a.x++; bar();\n    a.a.a.a.x++; bar();\n    a.a.a.a.x++; bar();\n    a.a.a.a.x++; bar();\n    a.a.a.a.x++; bar();\n    a.a.a.a.x++; bar();\n    a.a.a.a.x++; bar();\n    a.a.a.a.x++; bar();\n  }\n\n\n  //@ requires a != null \u0026\u0026 a.a != null \u0026\u0026 a.a.a != null \u0026\u0026 a.a.a.a != null;\n  //@ requires a.a.a.a.x \u003e 0;\n  //@ ensures a.a.a.a.x \u003e 0;\n  void foo_9 () {\n    a.a.a.a.x++; bar();\n    a.a.a.a.x++; bar();\n    a.a.a.a.x++; bar();\n    a.a.a.a.x++; bar();\n    a.a.a.a.x++; bar();\n    a.a.a.a.x++; bar();\n    a.a.a.a.x++; bar();\n    a.a.a.a.x++; bar();\n    a.a.a.a.x++; bar();\n  }\n\n\n  //@ requires a != null \u0026\u0026 a.a != null \u0026\u0026 a.a.a != null \u0026\u0026 a.a.a.a != null;\n  //@ requires a.a.a.a.x \u003e 0;\n  //@ ensures a.a.a.a.x \u003e 0;\n  void foo_10 () {\n    a.a.a.a.x++; bar();\n    a.a.a.a.x++; bar();\n    a.a.a.a.x++; bar();\n    a.a.a.a.x++; bar();\n    a.a.a.a.x++; bar();\n    a.a.a.a.x++; bar();\n    a.a.a.a.x++; bar();\n    a.a.a.a.x++; bar();\n    a.a.a.a.x++; bar();\n    a.a.a.a.x++; bar();\n  }\n\n\n  //@ requires a != null \u0026\u0026 a.a != null \u0026\u0026 a.a.a != null \u0026\u0026 a.a.a.a != null;\n  //@ requires a.a.a.a.x \u003e 0;\n  //@ ensures a.a.a.a.x \u003e 0;\n  void foo_20 () {\n    a.a.a.a.x++; bar();\n    a.a.a.a.x++; bar();\n    a.a.a.a.x++; bar();\n    a.a.a.a.x++; bar();\n    a.a.a.a.x++; bar();\n    a.a.a.a.x++; bar();\n    a.a.a.a.x++; bar();\n    a.a.a.a.x++; bar();\n    a.a.a.a.x++; bar();\n    a.a.a.a.x++; bar();\n    a.a.a.a.x++; bar();\n    a.a.a.a.x++; bar();\n    a.a.a.a.x++; bar();\n    a.a.a.a.x++; bar();\n    a.a.a.a.x++; bar();\n    a.a.a.a.x++; bar();\n    a.a.a.a.x++; bar();\n    a.a.a.a.x++; bar();\n    a.a.a.a.x++; bar();\n    a.a.a.a.x++; bar();\n  }\n\n\n  //@ ensures true;\n  //@ assignable y;\n  void bar () {};\n\n}\n",
        "name": "AccessChain4.java",
        "path": "key/key/key.ui/examples/performance-test/src.templates/AccessChain4.java",
        "url": "/github.com/Flunzmas/gym-autokey/-/blob/key/key/key.ui/examples/performance-test/src.templates/AccessChain4.java"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 6,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires a != null \u0026\u0026 a.a != null \u0026\u0026 a.a.a != null \u0026\u0026 a.a.a.a != null;"
        },
        {
          "limitHit": false,
          "lineNumber": 7,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires a.a.a.a.x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 8,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures a.a.a.a.x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 14,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires a != null \u0026\u0026 a.a != null \u0026\u0026 a.a.a != null \u0026\u0026 a.a.a.a != null;"
        },
        {
          "limitHit": false,
          "lineNumber": 15,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires a.a.a.a.x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 16,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures a.a.a.a.x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 23,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires a != null \u0026\u0026 a.a != null \u0026\u0026 a.a.a != null \u0026\u0026 a.a.a.a != null;"
        },
        {
          "limitHit": false,
          "lineNumber": 24,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires a.a.a.a.x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 25,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures a.a.a.a.x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 33,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires a != null \u0026\u0026 a.a != null \u0026\u0026 a.a.a != null \u0026\u0026 a.a.a.a != null;"
        },
        {
          "limitHit": false,
          "lineNumber": 34,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires a.a.a.a.x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 35,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures a.a.a.a.x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 44,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires a != null \u0026\u0026 a.a != null \u0026\u0026 a.a.a != null \u0026\u0026 a.a.a.a != null;"
        },
        {
          "limitHit": false,
          "lineNumber": 45,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires a.a.a.a.x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 46,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures a.a.a.a.x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 56,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires a != null \u0026\u0026 a.a != null \u0026\u0026 a.a.a != null \u0026\u0026 a.a.a.a != null;"
        },
        {
          "limitHit": false,
          "lineNumber": 57,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires a.a.a.a.x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 58,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures a.a.a.a.x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 69,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires a != null \u0026\u0026 a.a != null \u0026\u0026 a.a.a != null \u0026\u0026 a.a.a.a != null;"
        },
        {
          "limitHit": false,
          "lineNumber": 70,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires a.a.a.a.x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 71,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures a.a.a.a.x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 83,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires a != null \u0026\u0026 a.a != null \u0026\u0026 a.a.a != null \u0026\u0026 a.a.a.a != null;"
        },
        {
          "limitHit": false,
          "lineNumber": 84,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires a.a.a.a.x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 85,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures a.a.a.a.x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 98,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires a != null \u0026\u0026 a.a != null \u0026\u0026 a.a.a != null \u0026\u0026 a.a.a.a != null;"
        },
        {
          "limitHit": false,
          "lineNumber": 99,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires a.a.a.a.x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 100,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures a.a.a.a.x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 114,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires a != null \u0026\u0026 a.a != null \u0026\u0026 a.a.a != null \u0026\u0026 a.a.a.a != null;"
        },
        {
          "limitHit": false,
          "lineNumber": 115,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires a.a.a.a.x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 116,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures a.a.a.a.x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 131,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires a != null \u0026\u0026 a.a != null \u0026\u0026 a.a.a != null \u0026\u0026 a.a.a.a != null;"
        },
        {
          "limitHit": false,
          "lineNumber": 132,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires a.a.a.a.x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 133,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures a.a.a.a.x \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 158,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures true;"
        }
      ],
      "repository": {
        "name": "github.com/Flunzmas/gym-autokey",
        "url": "/github.com/Flunzmas/gym-autokey"
      }
    },
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "58a1b137d98e1240f442a87b239586b642dc69f2"
        },
        "content": "class Test {\n\n  static RuntimeException e;\n  int x = 4;\n  int y;\n  int w;\n\n  //@ invariant x == 4 \u0026\u0026 w == 0;\n  //@ requires e != null;\n  //@ signals (Exception) y == z;\n  //@ signals_only RuntimeException;\n  Test (int z) {\n      y = z;\n      throw e;\n  }\n\n}\n\n",
        "name": "Test.java",
        "path": "key/key/key.ui/examples/standard_key/java_dl/constructorException/Test.java",
        "url": "/github.com/Flunzmas/gym-autokey/-/blob/key/key/key.ui/examples/standard_key/java_dl/constructorException/Test.java"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 8,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires e != null;"
        }
      ],
      "repository": {
        "name": "github.com/Flunzmas/gym-autokey",
        "url": "/github.com/Flunzmas/gym-autokey"
      }
    },
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "58a1b137d98e1240f442a87b239586b642dc69f2"
        },
        "content": "// This file is part of KeY - Integrated Deductive Software Design\n//\n// Copyright (C) 2001-2011 Universitaet Karlsruhe (TH), Germany\n//                         Universitaet Koblenz-Landau, Germany\n//                         Chalmers University of Technology, Sweden\n// Copyright (C) 2011-2014 Karlsruhe Institute of Technology, Germany\n//                         Technical University Darmstadt, Germany\n//                         Chalmers University of Technology, Sweden\n//\n// The KeY system is protected by the GNU General\n// Public License. See LICENSE.TXT for details.\n//\n\npackage de.uka.ilkd.key.speclang.jml.pretranslation;\n\nimport junit.framework.TestCase;\n\nimport org.key_project.util.collection.ImmutableList;\n\nimport de.uka.ilkd.key.java.Position;\nimport de.uka.ilkd.key.speclang.translation.SLTranslationException;\n\n\npublic class TestJMLPreTranslator extends TestCase {\n    \n    private ImmutableList\u003cTextualJMLConstruct\u003e parseMethodSpec(String ms) \n            throws SLTranslationException {\n        KeYJMLPreParser preParser \n                = new KeYJMLPreParser(ms, \"no file\", Position.UNDEFINED);\n        return preParser.parseClasslevelComment();\n    }\n\n    \n    public void testSimpleSpec() throws SLTranslationException {\n        ImmutableList\u003cTextualJMLConstruct\u003e constructs\n            = parseMethodSpec(  \"/*@ normal_behavior\\n\"\n                              + \"     requires true;\\n\"\n                              + \"  */\");\n\n        assertTrue(constructs != null);\n        assertTrue(constructs.size() == 1);\n        assertTrue(constructs.head() instanceof TextualJMLSpecCase);\n        TextualJMLSpecCase specCase = (TextualJMLSpecCase) constructs.head();\n        \n        assertTrue(specCase.getBehavior() == Behavior.NORMAL_BEHAVIOR);\n        assertTrue(specCase.getRequires().size() == 1);\n        assertTrue(specCase.getAssignable().size() == 0);\n        assertTrue(specCase.getEnsures().size() == 0);\n        assertTrue(specCase.getSignals().size() == 0);\n        assertTrue(specCase.getSignalsOnly().size() == 0);\n        \n        assertTrue(specCase.getRequires().head().text.trim().equals(\"requires true;\"));\n    }\n    \n\n    public void testComplexSpec() throws SLTranslationException {\n        ImmutableList\u003cTextualJMLConstruct\u003e constructs\n            = parseMethodSpec(  \"/*@ behaviour\\n\"\n                              + \"  @  requires true;\\n\"\n                              + \"  @  requires ((;;(;););(););\\n\" \n                              + \"  @  ensures false;\\n\"\n                              + \"  @  signals exception;\\n\"\n                              + \"  @  signals_only onlythis;\\n\"\n                              + \"  @  assignable \\\\nothing;\\n\"\n                              + \"  @*/\");\n\n        assertTrue(constructs != null);\n        assertTrue(constructs.size() == 1);\n        assertTrue(constructs.head() instanceof TextualJMLSpecCase);\n        TextualJMLSpecCase specCase = (TextualJMLSpecCase) constructs.head();\n                \n        assertTrue(specCase.getBehavior() == Behavior.BEHAVIOR);\n        assertTrue(specCase.getRequires().size() == 2);\n        assertTrue(specCase.getAssignable().size() == 1);\n        assertTrue(specCase.getEnsures().size() == 1);\n        assertTrue(specCase.getSignals().size() == 1);\n        assertTrue(specCase.getSignalsOnly().size() == 1);\n\n        assertTrue(specCase.getEnsures().head().text.trim().equals(\"ensures false;\"));\n        assertTrue(specCase.getAssignable().head().text.trim().equals(\n                \"assignable \\\\nothing;\"));\n    }\n\n    \n    public void testMultipleSpecs() throws SLTranslationException {\n        ImmutableList\u003cTextualJMLConstruct\u003e constructs \n            = parseMethodSpec(  \"//@ normal_behaviour\\n\"\n                              + \"//@  ensures false\\n\"\n                              + \"//@          || true;\\n\"\n                              + \"//@  assignable \\\\nothing;\\n\"\n                              + \"//@ also exceptional_behaviour\\n\"\n                              + \"//@  requires o == null;\\n\"\n                              + \"//@  signals Exception;\\n\");\n        \n        assertTrue(constructs != null);\n        assertTrue(constructs.size() == 2);\n        assertTrue(constructs.head() instanceof TextualJMLSpecCase);\n        assertTrue(constructs.tail().head() instanceof TextualJMLSpecCase);\n        TextualJMLSpecCase specCase1 = (TextualJMLSpecCase) constructs.head();\n        TextualJMLSpecCase specCase2 = (TextualJMLSpecCase) constructs.tail().head();\n\n        assertTrue(specCase1.getBehavior() == Behavior.NORMAL_BEHAVIOR);\n        assertTrue(specCase1.getRequires().size() == 0);\n        assertTrue(specCase1.getAssignable().size() == 1);\n        assertTrue(specCase1.getEnsures().size() == 1);\n        assertTrue(specCase1.getSignals().size() == 0);\n        assertTrue(specCase1.getSignalsOnly().size() == 0);\n        \n        assertTrue(specCase2.getBehavior() == Behavior.EXCEPTIONAL_BEHAVIOR);\n        assertTrue(specCase2.getRequires().size() == 1);\n        assertTrue(specCase2.getAssignable().size() == 0);\n        assertTrue(specCase2.getEnsures().size() == 0);\n        assertTrue(specCase2.getSignals().size() == 1);\n        assertTrue(specCase2.getSignalsOnly().size() == 0);\n    }\n\n    public void testAtInModelmethod() throws SLTranslationException {\n        parseMethodSpec(\n                \"/*@ model_behaviour\\n\" +\n                \"  @   requires true;\\n\" +\n                \"  @ model int f(int x) {\\n\" +\n                \"  @   return x+1;\\n\" +\n                \"  @ }\\n\" +\n                \"  @*/\");\n    }\n\n    // used to be accepted\n    public void disabled_testMLCommentEndInSLComment() throws Exception {\n        try {\n            parseMethodSpec(\n                \"//@ requires @*/ true;\");\n            fail(\"Characters '@*/' should not be parsed\");\n        } catch(SLTranslationException ex) {\n            // anticipated\n        }\n\n        try {\n            parseMethodSpec(\n                \"//@ requires */ true;\");\n            fail(\"Characters '*/' should not be parsed\");\n        } catch(SLTranslationException ex) {\n            // anticipated\n        }\n\n    }\n    \n    public void testFailure() {\n        try {\n            parseMethodSpec(\"/*@ normal_behaviour \\n @ signals ohoh;\" + \"  @*/\");\n            assertTrue(false);\n        } catch (SLTranslationException e) {\n            //fine\n        }\n    }\n    \n    \n    public void testFailure2() {\n        try {\n            parseMethodSpec(  \"/*@ behaviour\\n\"\n                            + \"  @  requires (;((;;);();();(();;;(;)));\\n\"\n                            + \"  @*/\");\n            assertTrue(false);\n        } catch (SLTranslationException e) {\n            //fine\n        }\n    }\n}",
        "name": "TestJMLPreTranslator.java",
        "path": "key/key/key.core/src/test/java/de/uka/ilkd/key/speclang/jml/pretranslation/TestJMLPreTranslator.java",
        "url": "/github.com/Flunzmas/gym-autokey/-/blob/key/key/key.core/src/test/java/de/uka/ilkd/key/speclang/jml/pretranslation/TestJMLPreTranslator.java"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 130,
          "offsetAndLengths": [
            [
              17,
              13
            ]
          ],
          "preview": "                \"//@ requires @*/ true;\");"
        },
        {
          "limitHit": false,
          "lineNumber": 138,
          "offsetAndLengths": [
            [
              17,
              13
            ]
          ],
          "preview": "                \"//@ requires */ true;\");"
        }
      ],
      "repository": {
        "name": "github.com/Flunzmas/gym-autokey",
        "url": "/github.com/Flunzmas/gym-autokey"
      }
    },
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "58a1b137d98e1240f442a87b239586b642dc69f2"
        },
        "content": "package test;\n\n// ensures true;\n\n/**\n * \n * ensures true ;\n *\n */\npublic class TestClass {\n   /*\n    * ensures true;\n    */\n   /*@\n     @ ensures true;\n     @*/\n   \n   public static void main(String[] args) throws Exception {\n      System.out.println(\"//@Hello  World!@//\");\n      ensures true;\n      //@ ensures true;\n   }\n   public void a(){\n      /**\n       * requires ;\n       */\n      /*\n       * requires ;\n       */\n      // requires ;\n      int x;\n      /*@\n        @ requires ; \n        @*/\n      int y;\n      //@ requires ;\n      requires ;\n   }\n   public void b(){\n      /**\n       * asdf ;\n       */\n      /*\n       * asdf ;\n       */\n      // asdf ;\n      /*@\n        @ asdf ; \n        @*/\n      //@ asdf ;\n      asdf ;  \n   }\n}\n",
        "name": "KeywordHighlightingTestClass.java",
        "path": "key/JMLEditing/src/tests/org.key_project.jmlediting.ui.test/data/template/KeywordHighlightingTestClass.java",
        "url": "/github.com/Flunzmas/gym-autokey/-/blob/key/JMLEditing/src/tests/org.key_project.jmlediting.ui.test/data/template/KeywordHighlightingTestClass.java"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 20,
          "offsetAndLengths": [
            [
              6,
              12
            ]
          ],
          "preview": "      //@ ensures true;"
        },
        {
          "limitHit": false,
          "lineNumber": 35,
          "offsetAndLengths": [
            [
              6,
              13
            ]
          ],
          "preview": "      //@ requires ;"
        }
      ],
      "repository": {
        "name": "github.com/Flunzmas/gym-autokey",
        "url": "/github.com/Flunzmas/gym-autokey"
      }
    },
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "58a1b137d98e1240f442a87b239586b642dc69f2"
        },
        "content": "\npublic class File {\n\n\t //@ ensures \\result == x + y;\n\tpublic static int add(int x, int y) {\n\t\treturn x + y;\n\t}\n\t\n\t//@ ensures \\result == x - y;\n\tpublic static int sub(int x, int y) {\n\t\treturn x - y;\n\t}\n}\n",
        "name": "File.java",
        "path": "key/KeY4Eclipse/src/tests/org.key_project.key4eclipse.resources.test/data/BuilderTests/testFileDeleted/File.java",
        "url": "/github.com/Flunzmas/gym-autokey/-/blob/key/KeY4Eclipse/src/tests/org.key_project.key4eclipse.resources.test/data/BuilderTests/testFileDeleted/File.java"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 3,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "\t //@ ensures \\result == x + y;"
        },
        {
          "limitHit": false,
          "lineNumber": 8,
          "offsetAndLengths": [
            [
              1,
              12
            ]
          ],
          "preview": "\t//@ ensures \\result == x - y;"
        }
      ],
      "repository": {
        "name": "github.com/Flunzmas/gym-autokey",
        "url": "/github.com/Flunzmas/gym-autokey"
      }
    },
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "58a1b137d98e1240f442a87b239586b642dc69f2"
        },
        "content": "public class A {\n   \n   //@ ensures \\result == x; \n   public int id(int x) {\n      return x;\n   }\n   \n}",
        "name": "A.java",
        "path": "key/KeY4Eclipse/src/tests/org.key_project.key4eclipse.resources.test/data/BuilderTests/testTestCaseGeneration/A.java",
        "url": "/github.com/Flunzmas/gym-autokey/-/blob/key/KeY4Eclipse/src/tests/org.key_project.key4eclipse.resources.test/data/BuilderTests/testTestCaseGeneration/A.java"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 2,
          "offsetAndLengths": [
            [
              3,
              12
            ]
          ],
          "preview": "   //@ ensures \\result == x; "
        }
      ],
      "repository": {
        "name": "github.com/Flunzmas/gym-autokey",
        "url": "/github.com/Flunzmas/gym-autokey"
      }
    },
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "58a1b137d98e1240f442a87b239586b642dc69f2"
        },
        "content": "public class A {\n   \n   //@ ensures \\result == x; \n   public int id(int x) {\n      return x;\n   }\n   \n}",
        "name": "A.java",
        "path": "key/KeY4Eclipse/src/tests/org.key_project.key4eclipse.resources.test/data/BuilderTests/testTestSuiteGeneration/src/A.java",
        "url": "/github.com/Flunzmas/gym-autokey/-/blob/key/KeY4Eclipse/src/tests/org.key_project.key4eclipse.resources.test/data/BuilderTests/testTestSuiteGeneration/src/A.java"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 2,
          "offsetAndLengths": [
            [
              3,
              12
            ]
          ],
          "preview": "   //@ ensures \\result == x; "
        }
      ],
      "repository": {
        "name": "github.com/Flunzmas/gym-autokey",
        "url": "/github.com/Flunzmas/gym-autokey"
      }
    },
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "58a1b137d98e1240f442a87b239586b642dc69f2"
        },
        "content": "public class ArrayCreationTest {\n   private static int[] array;\n   \n   //@ requires n \u003e= 4;\n   public static int[] main(int n) {\n      array = new int[n];\n      array[0] = 100;\n      array[1] = array[2];\n      array[3] = array[0];\n      return array;\n   }\n}\n",
        "name": "ArrayCreationTest.java",
        "path": "key/key/key.core.symbolic_execution/src/test/resources/testcase/set/variablesArrayCreationTest/test/ArrayCreationTest.java",
        "url": "/github.com/Flunzmas/gym-autokey/-/blob/key/key/key.core.symbolic_execution/src/test/resources/testcase/set/variablesArrayCreationTest/test/ArrayCreationTest.java"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 3,
          "offsetAndLengths": [
            [
              3,
              13
            ]
          ],
          "preview": "   //@ requires n \u003e= 4;"
        }
      ],
      "repository": {
        "name": "github.com/Flunzmas/gym-autokey",
        "url": "/github.com/Flunzmas/gym-autokey"
      }
    },
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "58a1b137d98e1240f442a87b239586b642dc69f2"
        },
        "content": "public class ArrayAssignmentTest {\n   //@ requires array.length \u003e= 4;\n   public static int[] main(int[] array) {\n      array[0] = 100;\n      array[1] = array[2];\n      array[3] = array[0];\n      return array;\n   }\n}\n",
        "name": "ArrayAssignmentTest.java",
        "path": "key/key/key.core.symbolic_execution/src/test/resources/testcase/set/variablesArrayAssignmentTest/test/ArrayAssignmentTest.java",
        "url": "/github.com/Flunzmas/gym-autokey/-/blob/key/key/key.core.symbolic_execution/src/test/resources/testcase/set/variablesArrayAssignmentTest/test/ArrayAssignmentTest.java"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 1,
          "offsetAndLengths": [
            [
              3,
              13
            ]
          ],
          "preview": "   //@ requires array.length \u003e= 4;"
        }
      ],
      "repository": {
        "name": "github.com/Flunzmas/gym-autokey",
        "url": "/github.com/Flunzmas/gym-autokey"
      }
    },
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "58a1b137d98e1240f442a87b239586b642dc69f2"
        },
        "content": "package testpackage;\n\npublic class B {\n   \n   //@ ensures \\result == x; \n   public int id(int x) {\n      return x;\n   }\n   \n}",
        "name": "B.java",
        "path": "key/KeY4Eclipse/src/tests/org.key_project.key4eclipse.resources.test/data/BuilderTests/testTestCaseGeneration/testpackage/B.java",
        "url": "/github.com/Flunzmas/gym-autokey/-/blob/key/KeY4Eclipse/src/tests/org.key_project.key4eclipse.resources.test/data/BuilderTests/testTestCaseGeneration/testpackage/B.java"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 4,
          "offsetAndLengths": [
            [
              3,
              12
            ]
          ],
          "preview": "   //@ ensures \\result == x; "
        }
      ],
      "repository": {
        "name": "github.com/Flunzmas/gym-autokey",
        "url": "/github.com/Flunzmas/gym-autokey"
      }
    },
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "58a1b137d98e1240f442a87b239586b642dc69f2"
        },
        "content": "package org.key_project.jmlediting.core.test.utilities;\n\nimport static org.junit.Assert.*;\n\nimport java.util.List;\n\nimport org.junit.Test;\nimport org.key_project.jmlediting.core.utilities.CommentLocator;\nimport org.key_project.jmlediting.core.utilities.CommentRange;\n\npublic class JMLLocatorTest {\n\n   private static final String eol = \" \\n\";\n\n   private static final String PACKAGE_NAME = \"jml.test\";\n   private static final String CLASS_NAME = \"TextClass\";\n   private static final String EDITOR_TEXT = \"package \" + PACKAGE_NAME + \";\"\n         + eol + eol + \"public class \" + CLASS_NAME + \" {\" + eol + eol\n         /* 49 */+ \"\\t /*@ blabla *x \" + eol + \"\\t * \" + eol + \"\\t */\" + eol\n         /* 78 */+ \"\\tpublic static void main(String[] args) {\" + eol\n         + \"//normal \"\n         /* 130 */+ eol + \"\\t\" + eol + \"Char x= \\'bjkb \\\\' \\'\" + eol\n         /* 155 */+ \"String temp=\\\"//@ ensures \\\\ \\\" ;\" + eol\n         /* 187 */+ \"//@ requires blabla\" + eol\n         /* 208 */+ \"\\t\\tSystem.out.println(\\\"Hello World\\\");\" + eol + \"\\t}\"\n         + eol + \"}\" + eol + \"//\";\n   private static final String TEXT2 = \"package \" + PACKAGE_NAME + \";\" + eol\n         + eol + \"public class \" + CLASS_NAME + \" {\" + eol + eol\n         + \"\\t /*@ blabla *x \" + eol + \"\\t * \" + eol + \"\\t */\" + eol\n         + \"\\tpublic static void main(String[] args) {\" + eol + \"//normal \"\n         + eol + \"\\t\" + eol + \"Char x= \\'bjkb \\\\' \\'\" + eol + \"/a\" + eol\n         + \"String temp=\\\"//@ ensures \\\\ \\\" ;\" + eol + \"//@ requires blabla\"\n         + eol + \"\\t\\tSystem.out.println(\\\"Hello World\\\");\" + eol + \"\\t}\" + eol\n         + \"}\" + eol + \"/\";\n   private static final String TEXT3 = \"package \" + PACKAGE_NAME + \";\" + eol\n         + eol + \"public class \" + CLASS_NAME + \" {\" + eol + eol\n         + \"\\t /*@ blabla *x \" + eol + \"\\t * \" + eol + \"\\t */\" + eol\n         + \"\\tpublic static void main(String[] args) {\" + eol + \"//normal \"\n         + eol + \"\\t\" + eol + \"Char x= \\'bjkb \\\\' \\'\" + eol + \"/a\" + eol\n         + \"String temp=\\\"//@ ensures \\\\ \\\" ;\" + eol + \"//@ requires blabla\"\n         + eol + \"\\t\\tSystem.out.println(\\\"Hello World\\\");\" + eol + \"\\t}\" + eol\n         + \"}\" + eol + \"/*   *\";\n\n   @Test\n   public void findCommentsTest() {\n      \n      assertFalse(\"No JML Comments found\", CommentLocator.listJMLCommentRanges(EDITOR_TEXT)\n            .isEmpty());\n      assertFalse(\"No JML Comments found\", CommentLocator.listJMLCommentRanges(TEXT2)\n            .isEmpty());\n      assertFalse(\"No JML Comments found\", CommentLocator.listJMLCommentRanges(TEXT3)\n            .isEmpty());\n   }\n\n   @Test\n   public void isInJMLTest() {\n      // Test in JML Comment\n      assertTrue(\"Offset should be in JML Comment but result was false\",\n            CommentLocator.isJMLComment(EDITOR_TEXT, EDITOR_TEXT.indexOf(\"/*@\")));\n      // Test in normal Comment\n      assertFalse(\"Offset was wrongly recognized as in a JML Comment\",\n            CommentLocator.isJMLComment(EDITOR_TEXT, EDITOR_TEXT.indexOf(\"//\")));\n      // Test outside a comment\n      assertFalse(\"Offset was wrongly recognized as in a JML Comment\",\n            CommentLocator.isJMLComment(EDITOR_TEXT, 0));\n      // Test in JML Singleline\n      assertTrue(\n            \"Offset was wrongly recognized as not in a JML Comment\",\n            CommentLocator.isJMLComment(EDITOR_TEXT, EDITOR_TEXT.indexOf(\"//@\")));\n\n   }\n\n   @Test\n   public void findJMLCommentsTest() {\n      List\u003cCommentRange\u003e comments = CommentLocator.listJMLCommentRanges(EDITOR_TEXT);\n      assertEquals(\"The expected number of JML Comments was not found\", 2,\n            comments.size());\n      comments = CommentLocator.listJMLCommentRanges(TEXT2);\n      assertEquals(\"The expected number of JML Comments was not found\", 2,\n            comments.size());\n      comments = CommentLocator.listJMLCommentRanges(TEXT3);\n      assertEquals(\"The expected number of JML Comments was not found\", 2,\n            comments.size());\n   }\n\n   @Test\n   public void indexTest() {\n      final List\u003cCommentRange\u003e comments = CommentLocator.listCommentRanges(EDITOR_TEXT);\n      assertEquals(\"Begin of first Comment did not Match the Expectation\",\n            EDITOR_TEXT.indexOf(\"/*@\"), comments.get(0).getBeginOffset());\n      assertEquals(\"End of first Comment did not Match the Expectation\",\n            EDITOR_TEXT.indexOf(\"*/\") + 1, comments.get(0).getEndOffset());\n      assertEquals(\"Wrong begin offset for single line comment\",\n            EDITOR_TEXT.indexOf(\"//\", 78), comments.get(1).getBeginOffset());\n      assertEquals(\"Wrong end offset for single line comment\",\n            EDITOR_TEXT.indexOf(eol, 130), comments.get(1).getEndOffset());\n      assertEquals(\"Wrong begin offset for single line comment\",\n            EDITOR_TEXT.indexOf(\"//\", 187), comments.get(2).getBeginOffset());\n      assertEquals(\"Wrong end offset for single line comment\",\n            EDITOR_TEXT.indexOf(eol, 188), comments.get(2).getEndOffset());\n      assertEquals(\"Wrong begin offset for single line comment\",\n            EDITOR_TEXT.indexOf(\"//\", 208), comments.get(3).getBeginOffset());\n      assertEquals(\"Wrong end offset for single line comment\",\n            EDITOR_TEXT.length() - 1, comments.get(3).getEndOffset());\n   }\n\n   @Test\n   public void contentOffsetTest() {\n      final List\u003cCommentRange\u003e comments = CommentLocator.listCommentRanges(EDITOR_TEXT);\n      assertEquals(\"Begin of first Comment did not Match the Expectation\",\n            EDITOR_TEXT.indexOf(\"/*@\") + 2, comments.get(0)\n                  .getContentBeginOffset());\n      assertEquals(\"End of first Comment did not Match the Expectation\",\n            EDITOR_TEXT.indexOf(\"*/\") - 1, comments.get(0)\n                  .getContentEndOffset());\n      assertEquals(\"Wrong begin offset for single line comment\",\n            EDITOR_TEXT.indexOf(\"//\", 78) + 2, comments.get(1)\n                  .getContentBeginOffset());\n      assertEquals(\"Wrong end offset for single line comment\",\n            EDITOR_TEXT.indexOf(eol, 130), comments.get(1)\n                  .getContentEndOffset());\n      assertEquals(\"Wrong begin offset for single line comment\",\n            EDITOR_TEXT.indexOf(\"//\", 187) + 2, comments.get(2)\n                  .getContentBeginOffset());\n      assertEquals(\"Wrong end offset for single line comment\",\n            EDITOR_TEXT.indexOf(eol, 188), comments.get(2)\n                  .getContentEndOffset());\n      assertEquals(\"Wrong begin offset for single line comment\",\n            EDITOR_TEXT.indexOf(\"//\", 208) + 2, comments.get(3)\n                  .getContentBeginOffset());\n      assertEquals(\"Wrong end offset for single line comment\",\n            EDITOR_TEXT.length() - 1, comments.get(3).getContentEndOffset());\n   }\n\n   @Test\n   public void commentLengthTest() {\n      final List\u003cCommentRange\u003e comments = CommentLocator.listJMLCommentRanges(EDITOR_TEXT);\n      assertEquals(\"Wrong length of first JMLComment\", comments.get(0)\n            .getLength(), 26);\n      assertEquals(\"Wrong length of second JMLComment\", comments.get(1)\n            .getLength(), 20);\n   }\n\n   @Test\n   public void contentLengthTest() {\n      final List\u003cCommentRange\u003e comments = CommentLocator.listJMLCommentRanges(EDITOR_TEXT);\n      assertEquals(\"Wrong length of first JMLComment content\", comments.get(0)\n            .getContentLength(), 22);\n      assertEquals(\"Wrong length of second JMLComment content\", comments.get(1)\n            .getContentLength(), 18);\n   }\n}\n",
        "name": "JMLLocatorTest.java",
        "path": "key/JMLEditing/src/tests/org.key_project.jmlediting.core.test/src/org/key_project/jmlediting/core/test/utilities/JMLLocatorTest.java",
        "url": "/github.com/Flunzmas/gym-autokey/-/blob/key/JMLEditing/src/tests/org.key_project.jmlediting.core.test/src/org/key_project/jmlediting/core/test/utilities/JMLLocatorTest.java"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 22,
          "offsetAndLengths": [
            [
              35,
              12
            ]
          ],
          "preview": "         /* 155 */+ \"String temp=\\\"//@ ensures \\\\ \\\" ;\" + eol"
        },
        {
          "limitHit": false,
          "lineNumber": 23,
          "offsetAndLengths": [
            [
              21,
              13
            ]
          ],
          "preview": "         /* 187 */+ \"//@ requires blabla\" + eol"
        },
        {
          "limitHit": false,
          "lineNumber": 31,
          "offsetAndLengths": [
            [
              26,
              12
            ],
            [
              56,
              13
            ]
          ],
          "preview": "         + \"String temp=\\\"//@ ensures \\\\ \\\" ;\" + eol + \"//@ requires blabla\""
        },
        {
          "limitHit": false,
          "lineNumber": 39,
          "offsetAndLengths": [
            [
              26,
              12
            ],
            [
              56,
              13
            ]
          ],
          "preview": "         + \"String temp=\\\"//@ ensures \\\\ \\\" ;\" + eol + \"//@ requires blabla\""
        }
      ],
      "repository": {
        "name": "github.com/Flunzmas/gym-autokey",
        "url": "/github.com/Flunzmas/gym-autokey"
      }
    },
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "58a1b137d98e1240f442a87b239586b642dc69f2"
        },
        "content": "public class EmptyArrayCreationTest {\n   private int[] array;\n   \n   //@ requires n == 0;\n   public static int[] main(EmptyArrayCreationTest obj, int n) {\n      obj.array = new int[n];\n      return obj.array;\n   }\n}\n",
        "name": "EmptyArrayCreationTest.java",
        "path": "key/key/key.core.symbolic_execution/src/test/resources/testcase/set/variablesEmptyArrayCreationTest/test/EmptyArrayCreationTest.java",
        "url": "/github.com/Flunzmas/gym-autokey/-/blob/key/key/key.core.symbolic_execution/src/test/resources/testcase/set/variablesEmptyArrayCreationTest/test/EmptyArrayCreationTest.java"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 3,
          "offsetAndLengths": [
            [
              3,
              13
            ]
          ],
          "preview": "   //@ requires n == 0;"
        }
      ],
      "repository": {
        "name": "github.com/Flunzmas/gym-autokey",
        "url": "/github.com/Flunzmas/gym-autokey"
      }
    },
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "58a1b137d98e1240f442a87b239586b642dc69f2"
        },
        "content": "package testpackage;\n\npublic class B {\n   \n   //@ ensures \\result == x; \n   public int id(int x) {\n      return x;\n   }\n   \n}",
        "name": "B.java",
        "path": "key/KeY4Eclipse/src/tests/org.key_project.key4eclipse.resources.test/data/BuilderTests/testTestSuiteGeneration/src/testpackage/B.java",
        "url": "/github.com/Flunzmas/gym-autokey/-/blob/key/KeY4Eclipse/src/tests/org.key_project.key4eclipse.resources.test/data/BuilderTests/testTestSuiteGeneration/src/testpackage/B.java"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 4,
          "offsetAndLengths": [
            [
              3,
              12
            ]
          ],
          "preview": "   //@ ensures \\result == x; "
        }
      ],
      "repository": {
        "name": "github.com/Flunzmas/gym-autokey",
        "url": "/github.com/Flunzmas/gym-autokey"
      }
    },
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "58a1b137d98e1240f442a87b239586b642dc69f2"
        },
        "content": "public class ArrayCreationTest {\n   private static int[] array;\n   \n   //@ requires n \u003e= 4;\n   public static int[] compute(int n) {\n      array = new int[n];\n      array[0] = 100;\n      array[1] = array[2];\n      array[3] = array[0];\n      return array;\n   }\n}\n",
        "name": "ArrayCreationTest.java",
        "path": "key/key/key.core.symbolic_execution/src/test/resources/testcase/set/configurationExtractorArrayCreationTest/test/ArrayCreationTest.java",
        "url": "/github.com/Flunzmas/gym-autokey/-/blob/key/key/key.core.symbolic_execution/src/test/resources/testcase/set/configurationExtractorArrayCreationTest/test/ArrayCreationTest.java"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 3,
          "offsetAndLengths": [
            [
              3,
              13
            ]
          ],
          "preview": "   //@ requires n \u003e= 4;"
        }
      ],
      "repository": {
        "name": "github.com/Flunzmas/gym-autokey",
        "url": "/github.com/Flunzmas/gym-autokey"
      }
    },
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "58a1b137d98e1240f442a87b239586b642dc69f2"
        },
        "content": "package testpackage.sub.sub;\n\npublic class C {\n   \n   //@ ensures \\result == x; \n   public int id(int x) {\n      return x;\n   }\n   \n}",
        "name": "C.java",
        "path": "key/KeY4Eclipse/src/tests/org.key_project.key4eclipse.resources.test/data/BuilderTests/testTestCaseGeneration/testpackage/sub/sub/C.java",
        "url": "/github.com/Flunzmas/gym-autokey/-/blob/key/KeY4Eclipse/src/tests/org.key_project.key4eclipse.resources.test/data/BuilderTests/testTestCaseGeneration/testpackage/sub/sub/C.java"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 4,
          "offsetAndLengths": [
            [
              3,
              12
            ]
          ],
          "preview": "   //@ ensures \\result == x; "
        }
      ],
      "repository": {
        "name": "github.com/Flunzmas/gym-autokey",
        "url": "/github.com/Flunzmas/gym-autokey"
      }
    },
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "58a1b137d98e1240f442a87b239586b642dc69f2"
        },
        "content": "package testpackage.sub.sub;\n\npublic class D {\n   \n   //@ ensures \\result == x; \n   public int id(int x) {\n      return x;\n   }\n   \n}",
        "name": "D.java",
        "path": "key/KeY4Eclipse/src/tests/org.key_project.key4eclipse.resources.test/data/BuilderTests/testTestCaseGeneration/testpackage/sub/sub/D.java",
        "url": "/github.com/Flunzmas/gym-autokey/-/blob/key/KeY4Eclipse/src/tests/org.key_project.key4eclipse.resources.test/data/BuilderTests/testTestCaseGeneration/testpackage/sub/sub/D.java"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 4,
          "offsetAndLengths": [
            [
              3,
              12
            ]
          ],
          "preview": "   //@ ensures \\result == x; "
        }
      ],
      "repository": {
        "name": "github.com/Flunzmas/gym-autokey",
        "url": "/github.com/Flunzmas/gym-autokey"
      }
    },
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "58a1b137d98e1240f442a87b239586b642dc69f2"
        },
        "content": "public class ArrayCreationInstanceTest {\n   private int[] array;\n   \n   //@ requires n \u003e= 4;\n   public static int[] main(ArrayCreationInstanceTest obj, int n) {\n      obj.array = new int[n];\n      obj.array[0] = 100;\n      obj.array[1] = obj.array[2];\n      obj.array[3] = obj.array[0];\n      return obj.array;\n   }\n}\n",
        "name": "ArrayCreationInstanceTest.java",
        "path": "key/key/key.core.symbolic_execution/src/test/resources/testcase/set/variablesArrayCreationInstanceTest/test/ArrayCreationInstanceTest.java",
        "url": "/github.com/Flunzmas/gym-autokey/-/blob/key/key/key.core.symbolic_execution/src/test/resources/testcase/set/variablesArrayCreationInstanceTest/test/ArrayCreationInstanceTest.java"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 3,
          "offsetAndLengths": [
            [
              3,
              13
            ]
          ],
          "preview": "   //@ requires n \u003e= 4;"
        }
      ],
      "repository": {
        "name": "github.com/Flunzmas/gym-autokey",
        "url": "/github.com/Flunzmas/gym-autokey"
      }
    },
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "58a1b137d98e1240f442a87b239586b642dc69f2"
        },
        "content": "public class NonSimpleArrayCreationTest {\n   private static NonSimpleArrayCreationTest[] array;\n   \n   private int value;\n   \n   //@ requires n \u003e= 4;\n   //@ requires instance.value == 100;\n   public static NonSimpleArrayCreationTest[] main(int n, NonSimpleArrayCreationTest instance) {\n      array = new NonSimpleArrayCreationTest[n];\n      array[0] = instance;\n      array[1] = array[2];\n      array[3] = array[0];\n      return array;\n   }\n}\n",
        "name": "NonSimpleArrayCreationTest.java",
        "path": "key/key/key.core.symbolic_execution/src/test/resources/testcase/set/variablesNonSimpleArrayCreationTest/test/NonSimpleArrayCreationTest.java",
        "url": "/github.com/Flunzmas/gym-autokey/-/blob/key/key/key.core.symbolic_execution/src/test/resources/testcase/set/variablesNonSimpleArrayCreationTest/test/NonSimpleArrayCreationTest.java"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 5,
          "offsetAndLengths": [
            [
              3,
              13
            ]
          ],
          "preview": "   //@ requires n \u003e= 4;"
        },
        {
          "limitHit": false,
          "lineNumber": 6,
          "offsetAndLengths": [
            [
              3,
              13
            ]
          ],
          "preview": "   //@ requires instance.value == 100;"
        }
      ],
      "repository": {
        "name": "github.com/Flunzmas/gym-autokey",
        "url": "/github.com/Flunzmas/gym-autokey"
      }
    },
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "58a1b137d98e1240f442a87b239586b642dc69f2"
        },
        "content": "public class NonSimpleArrayAssignmentTest {\n   private int value;\n   \n   //@ requires array.length \u003e= 4;\n   public static NonSimpleArrayAssignmentTest[] main(NonSimpleArrayAssignmentTest[] array) {\n      array[0].value = 100;\n      array[1].value = array[2].value;\n      array[3].value = array[0].value;\n      return array;\n   }\n}\n",
        "name": "NonSimpleArrayAssignmentTest.java",
        "path": "key/key/key.core.symbolic_execution/src/test/resources/testcase/set/variablesNonSimpleArrayAssignmentTest/test/NonSimpleArrayAssignmentTest.java",
        "url": "/github.com/Flunzmas/gym-autokey/-/blob/key/key/key.core.symbolic_execution/src/test/resources/testcase/set/variablesNonSimpleArrayAssignmentTest/test/NonSimpleArrayAssignmentTest.java"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 3,
          "offsetAndLengths": [
            [
              3,
              13
            ]
          ],
          "preview": "   //@ requires array.length \u003e= 4;"
        }
      ],
      "repository": {
        "name": "github.com/Flunzmas/gym-autokey",
        "url": "/github.com/Flunzmas/gym-autokey"
      }
    },
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "58a1b137d98e1240f442a87b239586b642dc69f2"
        },
        "content": "public class EmptyArrayCreationTest {\n   private int[] array;\n   \n   //@ requires n == 0;\n   public static int[] compute(EmptyArrayCreationTest obj, int n) {\n      obj.array = new int[n];\n      return obj.array;\n   }\n}\n",
        "name": "EmptyArrayCreationTest.java",
        "path": "key/key/key.core.symbolic_execution/src/test/resources/testcase/set/configurationExtractorEmptyArrayCreationTest/test/EmptyArrayCreationTest.java",
        "url": "/github.com/Flunzmas/gym-autokey/-/blob/key/key/key.core.symbolic_execution/src/test/resources/testcase/set/configurationExtractorEmptyArrayCreationTest/test/EmptyArrayCreationTest.java"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 3,
          "offsetAndLengths": [
            [
              3,
              13
            ]
          ],
          "preview": "   //@ requires n == 0;"
        }
      ],
      "repository": {
        "name": "github.com/Flunzmas/gym-autokey",
        "url": "/github.com/Flunzmas/gym-autokey"
      }
    },
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "58a1b137d98e1240f442a87b239586b642dc69f2"
        },
        "content": "package object;\n\n/**\n *\n * @author christoph\n */\npublic final class ObjectOrientation {\n    int i;\n\n    \n    public ObjectOrientation(int i) {\n        this.i = i;\n    }\n\n    \n//--------------\n\n    \n    //@ determines \\result \\by \\nothing \\new_objects \\result;\n    public ObjectOrientation secure_object_creation() {\n        return new ObjectOrientation(1);\n    }\n\n    //@ determines \\result.i \\by \\nothing;\n    public ObjectOrientation secure_object_creation_2() {\n        return new ObjectOrientation(1);\n    }\n    \n    //@ determines \\result.i \\by \\nothing \\new_objects \\result;\n    public ObjectOrientation secure_object_creation_3() {\n        return new ObjectOrientation(1);\n    }\n    \n   \n//--------------\n    \n    \n    public static ObjectOrientation o0, o1, o2;\n    ObjectOrientation next;\n    private static ObjectOrientation high_object;\n    private static boolean high;\n    \n    //@ determines o0, o1, o2 \\by \\itself;\n    //@ also\n    //@ determines o0, o1, o2 \\by \\nothing \\new_objects o0, o1, o2;\n    public void insecure_object_assignment() {\n        o0 = high_object;\n    }\n\n    /*@ normal_behavior\n      @ determines o0, o1, o2 \\by \\nothing \\new_objects o0, o1, o2;\n      @ */\n    public void secure_two_object_creation() {\n        o0 = new ObjectOrientation(0);\n        o1 = new ObjectOrientation(1);\n        o2 = o0;\n    }\n    \n    //@ determines o0, o1, o2 \\by \\nothing \\new_objects o0, o1, o2;\n    public void insecure_two_object_creation() {\n        o0 = new ObjectOrientation(0);\n        o1 = new ObjectOrientation(1);\n        o2 = (high ? o0 : o1);\n    }\n\n    //@ determines o0, o1 \\by \\nothing \\new_objects o0, o1;\n    public void secure_if_two_object_creation() {\n        if(high) {\n            o0 = new ObjectOrientation(0);\n            o1 = new ObjectOrientation(1);\n        } else {\n            o1 = new ObjectOrientation(1);\n            o0 = new ObjectOrientation(0);\n        }\n    }\n\n    //@ determines o0, o1 \\by \\nothing \\new_objects o0, o1;\n    //@ also\n    // the following contract does not hold\n    //@ determines o0, o1, o1.next \\by \\nothing \\new_objects o0, o1, o1.next;\n    public void if_two_object_creation_next() {\n        if(high) {\n            o0 = new ObjectOrientation(0);\n            o1 = new ObjectOrientation(1);\n            o1.next = o1;\n        } else {\n            o1 = new ObjectOrientation(1);\n            o0 = new ObjectOrientation(0);\n            o1.next = o0;\n        }\n    }\n\n\n//--------------\n\n\n    //@ determines o0, o1, o2 \\by \\itself;\n    public void secure_method_call() {\n        secure_two_object_creation();\n        o2 = o1;\n    }\n\n\n//--------------\n\n    //@ requires    \\typeof(a) == \\type(Object[]);\n    //@ determines  (\\seq_def int i; 0; a.length; a[i]) \\by a.length;\n    public void secure_while_i(Object[] a) {\n        /*@ loop_invariant 0 \u003c= i \u0026\u0026 i \u003c= a.length;\n            loop_invariant a != null \u0026\u0026 \\typeof(a) == \\type(Object[]);\n            assignable a[*];\n            decreases a.length - i;\n            determines i, a.length, (\\seq_def int j; 0; i; a[j])\n                   \\by \\itself\n                   \\new_objects a[i-1];\n          @*/\n        for (int i = 0; i \u003c a.length; i++) {\n            a[i] = new Object();\n        }\n    }\n\n}\n",
        "name": "ObjectOrientation.java",
        "path": "autokey_examples/InformationFlow/NewObjects/src/object/ObjectOrientation.java",
        "url": "/github.com/Flunzmas/gym-autokey/-/blob/autokey_examples/InformationFlow/NewObjects/src/object/ObjectOrientation.java"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 105,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires    \\typeof(a) == \\type(Object[]);"
        }
      ],
      "repository": {
        "name": "github.com/Flunzmas/gym-autokey",
        "url": "/github.com/Flunzmas/gym-autokey"
      }
    },
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "58a1b137d98e1240f442a87b239586b642dc69f2"
        },
        "content": "package object;\n\n/**\n *\n * @author christoph\n */\npublic final class ObjectOrientation {\n    int i;\n\n    \n    public ObjectOrientation(int i) {\n        this.i = i;\n    }\n\n    \n//--------------\n\n    \n    //@ determines \\result \\by \\nothing \\new_objects \\result;\n    public ObjectOrientation secure_object_creation() {\n        return new ObjectOrientation(1);\n    }\n\n    //@ determines \\result.i \\by \\nothing;\n    public ObjectOrientation secure_object_creation_2() {\n        return new ObjectOrientation(1);\n    }\n    \n    //@ determines \\result.i \\by \\nothing \\new_objects \\result;\n    public ObjectOrientation secure_object_creation_3() {\n        return new ObjectOrientation(1);\n    }\n    \n   \n//--------------\n    \n    \n    public static ObjectOrientation o0, o1, o2;\n    ObjectOrientation next;\n    private static ObjectOrientation high_object;\n    private static boolean high;\n    \n    //@ determines o0, o1, o2 \\by \\itself;\n    //@ also\n    //@ determines o0, o1, o2 \\by \\nothing \\new_objects o0, o1, o2;\n    public void insecure_object_assignment() {\n        o0 = high_object;\n    }\n\n    /*@ normal_behavior\n      @ determines o0, o1, o2 \\by \\nothing \\new_objects o0, o1, o2;\n      @ */\n    public void secure_two_object_creation() {\n        o0 = new ObjectOrientation(0);\n        o1 = new ObjectOrientation(1);\n        o2 = o0;\n    }\n    \n    //@ determines o0, o1, o2 \\by \\nothing \\new_objects o0, o1, o2;\n    public void insecure_two_object_creation() {\n        o0 = new ObjectOrientation(0);\n        o1 = new ObjectOrientation(1);\n        o2 = (high ? o0 : o1);\n    }\n\n    //@ determines o0, o1 \\by \\nothing \\new_objects o0, o1;\n    public void secure_if_two_object_creation() {\n        if(high) {\n            o0 = new ObjectOrientation(0);\n            o1 = new ObjectOrientation(1);\n        } else {\n            o1 = new ObjectOrientation(1);\n            o0 = new ObjectOrientation(0);\n        }\n    }\n\n    //@ determines o0, o1 \\by \\nothing \\new_objects o0, o1;\n    //@ also\n    // the following contract does not hold\n    //@ determines o0, o1, o1.next \\by \\nothing \\new_objects o0, o1, o1.next;\n    public void if_two_object_creation_next() {\n        if(high) {\n            o0 = new ObjectOrientation(0);\n            o1 = new ObjectOrientation(1);\n            o1.next = o1;\n        } else {\n            o1 = new ObjectOrientation(1);\n            o0 = new ObjectOrientation(0);\n            o1.next = o0;\n        }\n    }\n\n\n//--------------\n\n\n    //@ determines o0, o1, o2 \\by \\itself;\n    public void secure_method_call() {\n        secure_two_object_creation();\n        o2 = o1;\n    }\n\n\n//--------------\n\n    //@ requires    \\typeof(a) == \\type(Object[]);\n    //@ determines  (\\seq_def int i; 0; a.length; a[i]) \\by a.length;\n    public void secure_while_i(Object[] a) {\n        /*@ loop_invariant 0 \u003c= i \u0026\u0026 i \u003c= a.length;\n            loop_invariant a != null \u0026\u0026 \\typeof(a) == \\type(Object[]);\n            assignable a[*];\n            decreases a.length - i;\n            determines i, a.length, (\\seq_def int j; 0; i; a[j])\n                   \\by \\itself\n                   \\new_objects a[i-1];\n          @*/\n        for (int i = 0; i \u003c a.length; i++) {\n            a[i] = new Object();\n        }\n    }\n\n}\n",
        "name": "ObjectOrientation.java",
        "path": "key/key/key.ui/examples/InformationFlow/NewObjects/src/object/ObjectOrientation.java",
        "url": "/github.com/Flunzmas/gym-autokey/-/blob/key/key/key.ui/examples/InformationFlow/NewObjects/src/object/ObjectOrientation.java"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 105,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires    \\typeof(a) == \\type(Object[]);"
        }
      ],
      "repository": {
        "name": "github.com/Flunzmas/gym-autokey",
        "url": "/github.com/Flunzmas/gym-autokey"
      }
    },
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "58a1b137d98e1240f442a87b239586b642dc69f2"
        },
        "content": "\npublic class Child {\n\t/*@\n\t  @ public invariant x \u003e= 0 \u0026\u0026 x \u003c= 10;\n\t  @*/\n\tpublic int x;\n\t\n\t//@ ensures \\result == x + y;\n\tpublic int add(int x, int y){\n\t\treturn x + y;\n\t}\n}\n",
        "name": "Child.java",
        "path": "key/KeY4Eclipse/src/tests/org.key_project.key4eclipse.resources.test/data/BuilderTests/testChangeInvariant/Child.java",
        "url": "/github.com/Flunzmas/gym-autokey/-/blob/key/KeY4Eclipse/src/tests/org.key_project.key4eclipse.resources.test/data/BuilderTests/testChangeInvariant/Child.java"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 7,
          "offsetAndLengths": [
            [
              1,
              12
            ]
          ],
          "preview": "\t//@ ensures \\result == x + y;"
        }
      ],
      "repository": {
        "name": "github.com/Flunzmas/gym-autokey",
        "url": "/github.com/Flunzmas/gym-autokey"
      }
    },
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "58a1b137d98e1240f442a87b239586b642dc69f2"
        },
        "content": "\npublic class Child {\n\t/*@\n\t  @ public invariant x \u003e= 2 \u0026\u0026 x \u003c= 10;\n\t  @*/\n\tpublic int x;\n\t\n\t//@ ensures \\result == x + y;\n\tpublic int add(int x, int y){\n\t\treturn x + y;\n\t}\n}\n",
        "name": "ChangedChild.java",
        "path": "key/KeY4Eclipse/src/tests/org.key_project.key4eclipse.resources.test/data/BuilderTests/testChangeInvariant/ChangedChild.java",
        "url": "/github.com/Flunzmas/gym-autokey/-/blob/key/KeY4Eclipse/src/tests/org.key_project.key4eclipse.resources.test/data/BuilderTests/testChangeInvariant/ChangedChild.java"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 7,
          "offsetAndLengths": [
            [
              1,
              12
            ]
          ],
          "preview": "\t//@ ensures \\result == x + y;"
        }
      ],
      "repository": {
        "name": "github.com/Flunzmas/gym-autokey",
        "url": "/github.com/Flunzmas/gym-autokey"
      }
    },
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "58a1b137d98e1240f442a87b239586b642dc69f2"
        },
        "content": "\npublic class InvariantInOperationContract {\n\t\n\t/*@ requires \\invariant_for(child);\n\t  @ ensures child.x == newValue;\n\t  @ ensures \\invariant_for(child);\n\t  @ assignable \\everything;\n\t  @*/\n\tpublic static void main(Child child, int newValue) {\n\t\tchild.x = newValue;\n\t}\n\t\n\n\t//@ ensures \\result == x + y;\n\tpublic int add(int x, int y){\n\t\treturn x + y;\n\t}\n}\n",
        "name": "InvariantInOperationContract.java",
        "path": "key/KeY4Eclipse/src/tests/org.key_project.key4eclipse.resources.test/data/BuilderTests/testChangeInvariant/InvariantInOperationContract.java",
        "url": "/github.com/Flunzmas/gym-autokey/-/blob/key/KeY4Eclipse/src/tests/org.key_project.key4eclipse.resources.test/data/BuilderTests/testChangeInvariant/InvariantInOperationContract.java"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 13,
          "offsetAndLengths": [
            [
              1,
              12
            ]
          ],
          "preview": "\t//@ ensures \\result == x + y;"
        }
      ],
      "repository": {
        "name": "github.com/Flunzmas/gym-autokey",
        "url": "/github.com/Flunzmas/gym-autokey"
      }
    }
  ],
  "LimitHit": false,
  "Cloning": [],
  "Missing": [],
  "Timedout": [],
  "ResultCount": 775,
  "ElapsedMilliseconds": 1098,
  "Alert": {
    "Title": "",
    "Description": "",
    "ProposedQueries": null
  }
}
