{
  "SourcegraphEndpoint": "https://sourcegraph.com",
  "Query": "(//@ requires )|(//@ ensures ) repo:github.com/FreeAndFair/ColoradoRLA lang:java count:all case:yes type:file patterntype:regexp",
  "Site": {
    "BuildVersion": "238702_2023-08-16_5.1-acf4bcc841e5"
  },
  "Results": [
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "fbbc9aba46c4db4b9c7349a855397a27439d2a5b"
        },
        "content": "/*\n * Free \u0026 Fair Colorado RLA System\n * \n * @title ColoradoRLA\n * @created Jul 27, 2017\n * @copyright 2017 Colorado Department of State\n * @license SPDX-License-Identifier: AGPL-3.0-or-later\n * @creator Daniel M. Zimmerman \u003cdmz@freeandfair.us\u003e\n * @model_review Joseph R. Kiniry \u003ckiniry@freeandfair.us\u003e\n * @description A system to assist in conducting statewide risk-limiting audits.\n */\n\npackage us.freeandfair.corla.model;\n\nimport static us.freeandfair.corla.util.EqualsHashcodeHelper.*;\n\nimport java.io.Serializable;\nimport java.util.Collections;\nimport java.util.HashSet;\nimport java.util.Set;\n\nimport javax.persistence.Cacheable;\nimport javax.persistence.CollectionTable;\nimport javax.persistence.ElementCollection;\nimport javax.persistence.Embedded;\nimport javax.persistence.Entity;\nimport javax.persistence.FetchType;\nimport javax.persistence.Id;\nimport javax.persistence.JoinColumn;\nimport javax.persistence.Table;\nimport javax.persistence.Version;\n\nimport us.freeandfair.corla.persistence.PersistentEntity;\n\n/**\n * The Department of State dashboard.\n * \n * @author Daniel M. Zimmerman \u003cdmz@freeandfair.us\u003e\n * @version 1.0.0\n */\n// this is an unusual entity, in that it is a singleton; it thus has only one\n// possible id (0).\n@Entity\n@Cacheable(true)\n@Table(name = \"dos_dashboard\")\n// this class has many fields that would normally be declared final, but\n// cannot be for compatibility with Hibernate and JPA.\n@SuppressWarnings(\"PMD.ImmutableField\")\npublic class DoSDashboard implements PersistentEntity, Serializable {  \n  /**\n   * The DoS dashboard ID (it is a singleton).\n   */\n  public static final Long ID = Long.valueOf(0);\n  \n  /**\n   * The minimum number of random seed characters.\n   */\n  public static final int MIN_SEED_LENGTH = 20;\n  \n  /**\n   * The serialVersionUID.\n   */\n  private static final long serialVersionUID = 1; \n  \n  /**\n   * The ID. This is always 0, because this object is a singleton.\n   */\n  @Id\n  private Long my_id = ID;\n  \n  /**\n   * The version (for optimistic locking).\n   */\n  @Version\n  private Long my_version;\n  \n  /**\n   * The contests to be audited and the reasons for auditing.\n   */\n  @ElementCollection(fetch = FetchType.EAGER)\n  @CollectionTable(name = \"contest_to_audit\",\n                   joinColumns = @JoinColumn(name = \"dashboard_id\", \n                                             referencedColumnName = \"my_id\"))\n  private Set\u003cContestToAudit\u003e my_contests_to_audit = new HashSet\u003c\u003e();\n  \n  /**\n   * The election info.\n   */\n  @Embedded\n  private AuditInfo my_audit_info = new AuditInfo();\n  \n  /**\n   * Constructs a new Department of State dashboard with default values.\n   */\n  // if we delete this constructor, we get warned that each class should\n  // define at least one constructor; we can't win in this situation.\n  @SuppressWarnings(\"PMD.UnnecessaryConstructor\")\n  public DoSDashboard() {\n    super();\n  }\n  \n  /**\n   * @return the database ID for this dashboard, which is the same as\n   * its county ID.\n   */\n  @Override\n  public Long id() {\n    return my_id;\n  }\n  \n  /**\n   * Sets the database ID for this dashboard.\n   * \n   * @param the_id The ID, effectively ignored; the database ID for a DoS \n   * dashboard is always 0.\n   * @exception IllegalArgumentException if the ID is not 0.\n   */\n  @Override\n  public final void setID(final Long the_id) {\n    if (!ID.equals(the_id)) {\n      throw new IllegalArgumentException(\"the only valid ID for a DoSDashboard is 0\");\n    }\n    my_id = ID;\n  }\n\n  /**\n   * @return the version for this dashboard.\n   */\n  @Override\n  public Long version() {\n    return my_version;\n  }\n  \n  /**\n   * Checks the validity of a random seed. To be valid, a random seed must\n   * have at least MIN_SEED_CHARACTERS characters, and all characters must\n   * be digits.\n   * \n   * @param the_seed The seed.\n   * @return true if the seed meets the validity requirements, false otherwise.\n   */\n  public static boolean isValidSeed(final String the_seed) {\n    boolean result = true;\n    \n    if (the_seed != null \u0026\u0026 the_seed.length() \u003e= MIN_SEED_LENGTH) {\n      for (final char c : the_seed.toCharArray()) {\n        if (!Character.isDigit(c)) {\n          result = false;\n          break;\n        }\n      }\n    } else {\n      result = false;\n    }\n    \n    return result;\n  }\n  \n  /**\n   * @return the audit info.\n   */\n  public AuditInfo auditInfo() {\n    return my_audit_info;\n  }\n  \n  /**\n   * Updates the audit info, using the non-null fields of the specified \n   * AuditInfo. This method does not do any sanity checks on the fields;\n   * it is assumed that they are checked by the caller.\n   * \n   * @param the_new_info The new info.\n   */\n  public void updateAuditInfo(final AuditInfo the_new_info) {\n    my_audit_info.updateFrom(the_new_info);\n  }\n  \n  /**\n   * Removes all contests to audit for the specified county. This is \n   * typically done if the county re-uploads their CVRs (generating new\n   * contest information).\n   * \n   * @param the_county The county.\n   * @return true if any contests to audit were removed, false otherwise.\n   */\n  public boolean removeContestsToAuditForCounty(final County the_county) {\n    boolean result = false;\n    \n    final Set\u003cContestToAudit\u003e contests_to_remove = new HashSet\u003c\u003e();\n    for (final ContestToAudit c : my_contests_to_audit) {\n      if (c.contest().county().equals(the_county)) {\n        contests_to_remove.add(c);\n        result = true;\n      }\n    }\n    my_contests_to_audit.removeAll(contests_to_remove);\n    \n    return result;\n  }\n  /**\n   * Update the audit status of a contest. \n   * \n   * @param the_contest_to_audit The new status of the contest to audit.\n   * @return true if the contest was already being audited or hand counted, \n   * false otherwise.\n   */\n  //@ requires the_contest_to_audit != null;\n  public boolean updateContestToAudit(final ContestToAudit the_contest_to_audit) {\n    boolean auditable = true;\n    \n    // check to see if the contest is in our set\n    ContestToAudit contest_to_remove = null;\n    for (final ContestToAudit c : my_contests_to_audit) {\n      if (c.contest().equals(the_contest_to_audit.contest())) {\n        // check if the entry is auditable; if so, it will be removed later\n        auditable = !c.audit().equals(AuditType.NOT_AUDITABLE);\n        contest_to_remove = c;\n        break;\n      }\n    }\n    \n    if (auditable) {\n      my_contests_to_audit.remove(contest_to_remove);\n      if (the_contest_to_audit.audit() != AuditType.NONE) {\n        my_contests_to_audit.add(the_contest_to_audit);\n      }\n    }\n    \n    return auditable;\n  }\n  \n  /**\n   * @return the current set of contests to audit. This is an unmodifiable\n   * set; to update, use updateContestToAudit().\n   */\n  public Set\u003cContestToAudit\u003e contestsToAudit() {\n    return Collections.unmodifiableSet(my_contests_to_audit);\n  }\n  \n  /**\n   * @return a String representation of this contest.\n   */\n  @Override\n  public String toString() {\n    return \"DoSDashboard [county=\" + id() + \"]\";\n  }\n  \n  /**\n   * Compare this object with another for equivalence.\n   * \n   * @param the_other The other object.\n   * @return true if the objects are equivalent, false otherwise.\n   */\n  @Override\n  public boolean equals(final Object the_other) {\n    boolean result = true;\n    if (the_other instanceof DoSDashboard) {\n      final DoSDashboard other_ddb = (DoSDashboard) the_other;\n      // there can only be one DoS dashboard in the system for each\n      // ID, so we check their equivalence by ID\n      result \u0026= nullableEquals(other_ddb.contestsToAudit(), contestsToAudit());\n      result \u0026= nullableEquals(other_ddb.auditInfo(), auditInfo());\n    } else {\n      result = false;\n    }\n    return result;\n  }\n  \n  /**\n   * @return a hash code for this object.\n   */\n  @Override\n  public int hashCode() {\n    return nullableHashCode(auditInfo());\n  }\n}\n",
        "name": "DoSDashboard.java",
        "path": "server/eclipse-project/src/main/java/us/freeandfair/corla/model/DoSDashboard.java",
        "url": "/github.com/FreeAndFair/ColoradoRLA/-/blob/server/eclipse-project/src/main/java/us/freeandfair/corla/model/DoSDashboard.java"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 205,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires the_contest_to_audit != null;"
        }
      ],
      "repository": {
        "name": "github.com/FreeAndFair/ColoradoRLA",
        "url": "/github.com/FreeAndFair/ColoradoRLA"
      }
    },
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "fbbc9aba46c4db4b9c7349a855397a27439d2a5b"
        },
        "content": "/*\n * Free \u0026 Fair Colorado RLA System\n * \n * @title ColoradoRLA\n * @created Aug 11, 2017\n * @copyright 2017 Colorado Department of State\n * @license SPDX-License-Identifier: AGPL-3.0-or-later\n * @creator Daniel M. Zimmerman \u003cdmz@galois.com\u003e\n * @description A system to assist in conducting statewide risk-limiting audits.\n */\n\npackage us.freeandfair.corla.asm;\n\nimport static us.freeandfair.corla.util.EqualsHashcodeHelper.nullableEquals;\n\nimport java.io.Serializable;\n\nimport javax.persistence.Column;\nimport javax.persistence.Entity;\nimport javax.persistence.GeneratedValue;\nimport javax.persistence.GenerationType;\nimport javax.persistence.Id;\nimport javax.persistence.Table;\nimport javax.persistence.Version;\n\nimport us.freeandfair.corla.persistence.PersistentEntity;\n\n/**\n * An abstract state machine state, and sufficient information to\n * reconstruct the state machine it belongs to.\n * \n * @author Daniel M. Zimmerman \u003cdmz@freeandfair.us\u003e\n * @version 1.0.0\n */\n@Entity\n@Table(name = \"asm_state\")\n// this class has many fields that would normally be declared final, but\n// cannot be for compatibility with Hibernate and JPA.\n@SuppressWarnings(\"PMD.ImmutableField\")\npublic class PersistentASMState implements PersistentEntity, Serializable {\n  /**\n   * The serialVersionUID.\n   */\n  private static final long serialVersionUID = 1L;\n  \n  /**\n   * The ID number.\n   */\n  @Id\n  @Column(updatable = false, nullable = false)\n  @GeneratedValue(strategy = GenerationType.SEQUENCE)\n  private Long my_id;\n  \n  /**\n   * The version (for optimistic locking).\n   */\n  @Version\n  private Long my_version;\n  \n  /**\n   * The class of AbstractStateMachine to which this state belongs, as\n   * a String.\n   */\n  @Column(updatable = false, nullable = false)\n  private String my_asm_class;\n  \n  /**\n   * The identifying information for the state machine, if any, as a\n   * String.\n   */\n  @Column(updatable = false)\n  private String my_asm_identity;\n  \n  /**\n   * The ASMState class (enum) containing this state, as a String.\n   */\n  private String my_state_class;\n  \n  /**\n   * The state value, as a String.\n   */\n  private String my_state_value;\n  \n  /**\n   * Constructs an empty PersistentASMState, solely for persistence.\n   */\n  protected PersistentASMState() {\n    super();\n  }\n  \n  /**\n   * Constructs a PersistentASMState with the specified parameters.\n   */\n  protected PersistentASMState(final String the_asm_class,\n                               final String the_asm_identity,\n                               final String the_state_class,\n                               final String the_state_value) {\n    super();\n    my_asm_class = the_asm_class;\n    my_asm_identity = the_asm_identity;\n    my_state_class = the_state_class;\n    my_state_value = the_state_value;\n  }\n  \n  /**\n   * Obtains a PersistentASMState from an abstract state machine.\n   * \n   * @param the_asm The ASM from which to obtain the state.\n   * @return The state.\n   */\n  //@ requires the_asm != null;\n  public static PersistentASMState stateFor(final AbstractStateMachine the_asm) {\n    final String asm_class = the_asm.getClass().getName();\n    // identifying info to be dealt with later\n    final ASMState state = the_asm.currentState();\n    final String state_class = state.getClass().getName();\n    String state_value = null;\n    if (state instanceof Enum\u003c?\u003e) {\n      final Enum\u003c?\u003e state_enum = (Enum\u003c?\u003e) state;\n      state_value = state_enum.name();\n    }\n    return new PersistentASMState(asm_class, the_asm.identity(), state_class, state_value);\n  }\n  \n  /**\n   * Obtains an abstract state machine from a PersistentASMState.\n   * \n   * @param the_state The state.\n   * @return the state machine.\n   * @exception IllegalArgumentException if the state machine cannot\n   * be constructed because the persistent state contains invalid\n   * information.\n   */\n  //@ requires the_state != null;\n  public static AbstractStateMachine asmFor(final PersistentASMState the_state) {\n    try {\n      // first, construct an ASM of the correct class\n      final AbstractStateMachine result = \n          (AbstractStateMachine) Class.forName(the_state.asmClass()).newInstance();\n      result.setIdentity(the_state.asmIdentity());\n      the_state.applyTo(result);\n      return result;\n    } catch (final ClassNotFoundException | IllegalAccessException | \n                   InstantiationException e) {\n      throw new IllegalArgumentException(e);\n    }\n  }\n  \n  /**\n   * Constructs a state value for the specified PersistentASMState.\n   * \n   * @param the_state The state, or null if no matching state could\n   * be constructed.\n   */\n  public static ASMState asmStateFor(final PersistentASMState the_state) {\n    ASMState result = null;\n    try {\n      // construct the class for the ASM state\n      final Class\u003c?\u003e state_class = Class.forName(the_state.stateClass());\n      if (state_class.isEnum() \u0026\u0026 ASMState.class.isAssignableFrom(state_class)) {\n        // see if it has the right enum value\n        for (final Object o : state_class.getEnumConstants()) {\n          final Enum\u003c?\u003e enum_constant = (Enum\u003c?\u003e) o;\n          if (enum_constant.name().equals(the_state.stateValue())) {\n            result = (ASMState) enum_constant;\n            break;\n          }\n        }\n      }\n    } catch (final ClassNotFoundException e) {\n      // result is already null\n    }\n    return result;\n  }\n  \n  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public Long id() {\n    return my_id;\n  }\n\n  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public void setID(final Long the_id) {\n    my_id = the_id;\n  }\n  \n  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public Long version() {\n    return my_version;\n  }\n  \n  /**\n   * Applies the state in this PersistentASMState to an existing state\n   * machine.\n   * \n   * @param the_asm The ASM.\n   * @exception IllegalArgumentException if the ASM is not the one\n   * described in this persistent state, or if this persistent state\n   * contains invalid information.\n   */\n  //@ requires the_asm != null\n  public void applyTo(final AbstractStateMachine the_asm) {\n    if (the_asm.getClass().getName().equals(asmClass()) \u0026\u0026\n        nullableEquals(the_asm.identity(), asmIdentity())) {\n      final ASMState state = asmStateFor(this);\n      if (state == null) {\n        throw new IllegalArgumentException(\"no ASM state found for state \" + this);\n      } else {\n        the_asm.setCurrentState(state);\n      }\n    } else {\n      throw new IllegalArgumentException(\"invalid ASM class \" + \n                                         the_asm.getClass().getName() + \n                                         \" for state \" + this);\n    }\n  }\n  \n  /**\n   * Updates this PersistentASMState from an existing state machine.\n   * \n   * @param the_asm The ASM\n   * @exception IllegalArgumentException if the specified state\n   * machine is not the one described in this persistent state.\n   */\n  //@ requires the_asm != null\n  public void updateFrom(final AbstractStateMachine the_asm) {\n    final PersistentASMState new_state = stateFor(the_asm);\n    if (new_state.asmClass().equals(asmClass()) \u0026\u0026\n        nullableEquals(new_state.asmIdentity(), asmIdentity())) {\n      my_state_class = new_state.stateClass();\n      my_state_value = new_state.stateValue();\n    } else {\n      throw new IllegalArgumentException(\"invalid ASM \" + the_asm + \n                                         \" for updating state \" + this);\n    }\n  }\n  \n  /**\n   * @return the ASM class.\n   */\n  public String asmClass() {\n    return my_asm_class;\n  }\n  \n  /**\n   * @return the ASM identity.\n   */\n  public String asmIdentity() {\n    return my_asm_identity;\n  }\n  \n  /**\n   * @return the state class.\n   */\n  public String stateClass() {\n    return my_state_class;\n  }\n  \n  /**\n   * @return the state value.\n   */\n  public String stateValue() {\n    return my_state_value;\n  }\n  \n  /**\n   * @return a String representation of this ASM state.\n   */\n  @Override\n  public String toString() {\n    return \"PersistentASMState [asm_class=\" + my_asm_class + \n           \", asm_identity=\" + my_asm_identity + \n           \", state_class=\" + my_state_class + \n           \", state_value=\" + my_state_value + \"]\";\n  }\n\n  /**\n   * Compare this object with another for equivalence.\n   * \n   * @param the_other The other object.\n   * @return true if the objects are equivalent, false otherwise.\n   */\n  @Override\n  public boolean equals(final Object the_other) {\n    boolean result = true;\n    if (the_other instanceof PersistentASMState) {\n      final PersistentASMState other_state = (PersistentASMState) the_other;\n      result \u0026= nullableEquals(other_state.asmClass(), asmClass());\n      result \u0026= nullableEquals(other_state.asmIdentity(), asmIdentity());\n      result \u0026= nullableEquals(other_state.stateClass(), stateClass());\n      result \u0026= nullableEquals(other_state.stateValue(), stateValue());\n    } else {\n      result = false;\n    }\n    return result;\n  }\n  \n  /**\n   * @return a hash code for this object.\n   */\n  @Override\n  public int hashCode() {\n    return toString().hashCode();\n  }\n}\n",
        "name": "PersistentASMState.java",
        "path": "server/eclipse-project/src/main/java/us/freeandfair/corla/asm/PersistentASMState.java",
        "url": "/github.com/FreeAndFair/ColoradoRLA/-/blob/server/eclipse-project/src/main/java/us/freeandfair/corla/asm/PersistentASMState.java"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 110,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires the_asm != null;"
        },
        {
          "limitHit": false,
          "lineNumber": 133,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires the_state != null;"
        },
        {
          "limitHit": false,
          "lineNumber": 208,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires the_asm != null"
        },
        {
          "limitHit": false,
          "lineNumber": 232,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires the_asm != null"
        }
      ],
      "repository": {
        "name": "github.com/FreeAndFair/ColoradoRLA",
        "url": "/github.com/FreeAndFair/ColoradoRLA"
      }
    },
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "fbbc9aba46c4db4b9c7349a855397a27439d2a5b"
        },
        "content": "/*\n * Free \u0026 Fair Colorado RLA System\n * \n * @title ColoradoRLA\n * @created Aug 8, 2017\n * @copyright 2017 Colorado Department of State\n * @license SPDX-License-Identifier: AGPL-3.0-or-later\n * @creator Joseph R. Kiniry \u003ckiniry@freeandfair.us\u003e\n * @description A system to assist in conducting statewide risk-limiting audits.\n */\n\npackage us.freeandfair.corla.asm;\n\nimport java.util.Arrays;\nimport java.util.HashSet;\n\nimport javax.persistence.DiscriminatorValue;\nimport javax.persistence.Entity;\n\nimport us.freeandfair.corla.asm.ASMEvent.CountyDashboardEvent;\nimport us.freeandfair.corla.asm.ASMState.CountyDashboardState;\nimport us.freeandfair.corla.asm.ASMTransitionFunction.CountyDashboardTransitionFunction;\nimport us.freeandfair.corla.util.SetCreator;\n\n/**\n * The ASM for the County Dashboard.\n * @trace asm.dos_dashboard_next_state\n * @author Joseph R. Kiniry \u003ckiniry@freeandfair.us\u003e\n * @version 1.0.0\n */\n@Entity\n@DiscriminatorValue(value = \"CountyDashboardASM\")\npublic class CountyDashboardASM extends AbstractStateMachine {\n  /**\n   * The serialVersionUID.\n   */\n  private static final long serialVersionUID = 1;\n\n  /**\n   * The final states of this ASM.\n   */\n  private static final ASMState[] FINAL_STATES =\n      {CountyDashboardState.DEADLINE_MISSED,\n       CountyDashboardState.COUNTY_AUDIT_COMPLETE};\n\n  /**\n   * Create the County Dashboard ASM.\n   * \n   * @param the_county_id The county identifier.\n   * @trace asm.county_dashboard_asm\n   */\n  //@ requires the_county_id != null\n  public CountyDashboardASM(final String the_county_id) {\n    super(new HashSet\u003cASMState\u003e(Arrays.asList(CountyDashboardState.values())),\n          new HashSet\u003cASMEvent\u003e(Arrays.asList(CountyDashboardEvent.values())),\n          transitionsFor(Arrays.\n                         asList(CountyDashboardTransitionFunction.values())),\n          CountyDashboardState.COUNTY_INITIAL_STATE,\n          SetCreator.setOf(FINAL_STATES),\n          the_county_id);\n  }\n}\n",
        "name": "CountyDashboardASM.java",
        "path": "server/eclipse-project/src/main/java/us/freeandfair/corla/asm/CountyDashboardASM.java",
        "url": "/github.com/FreeAndFair/ColoradoRLA/-/blob/server/eclipse-project/src/main/java/us/freeandfair/corla/asm/CountyDashboardASM.java"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 51,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires the_county_id != null"
        }
      ],
      "repository": {
        "name": "github.com/FreeAndFair/ColoradoRLA",
        "url": "/github.com/FreeAndFair/ColoradoRLA"
      }
    },
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "fbbc9aba46c4db4b9c7349a855397a27439d2a5b"
        },
        "content": "/*\n * Free \u0026 Fair Colorado RLA System\n * \n * @title ColoradoRLA\n * @created Aug 8, 2017\n * @copyright 2017 Colorado Department of State\n * @license SPDX-License-Identifier: AGPL-3.0-or-later\n * @creator Joseph R. Kiniry \u003ckiniry@freeandfair.us\u003e\n * @description A system to assist in conducting statewide risk-limiting audits.\n */\n\npackage us.freeandfair.corla.asm;\n\nimport java.util.Arrays;\nimport java.util.HashSet;\n\nimport javax.persistence.DiscriminatorValue;\nimport javax.persistence.Entity;\n\nimport us.freeandfair.corla.asm.ASMEvent.AuditBoardDashboardEvent;\nimport us.freeandfair.corla.asm.ASMState.AuditBoardDashboardState;\nimport us.freeandfair.corla.asm.ASMTransitionFunction.AuditBoardDashboardTransitionFunction;\nimport us.freeandfair.corla.util.SetCreator;\n\n/**\n * The ASM for the Audit Board Dashboard.\n * @trace asm.dos_dashboard_next_state\n * @author Joseph R. Kiniry \u003ckiniry@freeandfair.us\u003e\n * @version 1.0.0\n */\n@Entity\n@DiscriminatorValue(value = \"AuditBoardDashboardASM\")\npublic class AuditBoardDashboardASM extends AbstractStateMachine {\n  /**\n   * The serialVersionUID.\n   */\n  private static final long serialVersionUID = 1; \n\n  /**\n   * The final states of this ASM.\n   */\n  private static final ASMState[] FINAL_STATES = \n      {AuditBoardDashboardState.AUDIT_COMPLETE,\n       AuditBoardDashboardState.UNABLE_TO_AUDIT,\n       AuditBoardDashboardState.AUDIT_ABORTED};\n  \n  /**\n   * Create the Audit Board Dashboard ASM for the specified county.\n   * \n   * @param the_county_id The county identifier.\n   * @trace asm.county_dashboard_asm\n   */\n  //@ requires the_county_id != null;\n  public AuditBoardDashboardASM(final String the_county_id) {\n    super(new HashSet\u003cASMState\u003e(Arrays.asList(AuditBoardDashboardState.values())),\n          new HashSet\u003cASMEvent\u003e(Arrays.asList(AuditBoardDashboardEvent.values())),\n          transitionsFor(Arrays.\n                         asList(AuditBoardDashboardTransitionFunction.values())),\n          AuditBoardDashboardState.AUDIT_INITIAL_STATE,\n          SetCreator.setOf(FINAL_STATES),\n          the_county_id);\n  }\n}\n",
        "name": "AuditBoardDashboardASM.java",
        "path": "server/eclipse-project/src/main/java/us/freeandfair/corla/asm/AuditBoardDashboardASM.java",
        "url": "/github.com/FreeAndFair/ColoradoRLA/-/blob/server/eclipse-project/src/main/java/us/freeandfair/corla/asm/AuditBoardDashboardASM.java"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 52,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires the_county_id != null;"
        }
      ],
      "repository": {
        "name": "github.com/FreeAndFair/ColoradoRLA",
        "url": "/github.com/FreeAndFair/ColoradoRLA"
      }
    },
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "fbbc9aba46c4db4b9c7349a855397a27439d2a5b"
        },
        "content": "/*\n * Free \u0026 Fair Colorado RLA System\n * \n * @title ColoradoRLA\n * @created Aug 27, 2017\n * @copyright 2017 Colorado Department of State\n * @license GNU Affero General Public License v3 with\n *          Grant of Additional Permission\n * @creator Joseph R. Kiniry \u003ckiniry@freeandfair.us\u003e\n * @description A system to assist in conducting statewide risk-limiting audits.\n */\n\n/*\nThis code is licensed under the GNU Affero General Public License Version 3\n(AGPLv3) with the following additional permission.\n\n1. Grant of Additional Permission.\n\nThe copyright holders of this software give you permission to link the\nColoradoRLA application server with an alternative implementation of\nus.freeandfair.corla.auth.AuthenticationInterface.java to produce an\nexecutable, regardless of the license terms of the implementation, and to copy\nand distribute the resulting executable under terms of your choice, provided\nthat you also meet the terms and conditions of the license of that\nimplementation.\n\nIf you modify the application server, you may extend this exception to your\nversion of the software, but you are not obliged to do so. If you do not wish\nto do so, delete this exception statement from your version.\n\nThis Grant of Additional Permission is only for the purpose of allowing the\napplication server to be linked with a proprietary two-factor authentication\nmethod.\n*/\n\npackage us.freeandfair.corla.auth;\n\nimport org.apache.log4j.Logger;\n\nimport com.google.gson.Gson;\n\nimport spark.Request;\nimport spark.Response;\n\nimport us.freeandfair.corla.json.SubmittedCredentials;\nimport us.freeandfair.corla.model.Administrator;\nimport us.freeandfair.corla.model.Administrator.AdministratorType;\nimport us.freeandfair.corla.model.County;\n\n/**\n * The interface to authentication providers.\n * \n * @author Joseph R. Kiniry \u003ckiniry@freeandfair.us\u003e\n * @author Daniel M. Zimmerman \u003cdmz@freeandfair.us\u003e\n * @version 1.0.0\n * @todo Add a model for authentication to make the specifications herein much\n * more clear.\n */\npublic interface AuthenticationInterface {\n  /**\n   * The constant for the \"admin\" attribute of the current session.\n   */\n  String ADMIN = \"admin\";\n  \n  /**\n   * The constant for the \"challenge\" attribute of the current session.\n   */\n  String CHALLENGE = \"challenge\";\n  \n  /**\n   * The constant for the \"username\" request parameter.\n   */\n  String USERNAME = \"username\";\n  \n  /**\n   * The constant for the \"password\" request parameter.\n   */\n  String PASSWORD = \"password\";\n  \n  /**\n   * The constant for the \"second factor\" request parameter.\n   */\n  String SECOND_FACTOR = \"second_factor\";\n  \n  /**\n   * The constant used to denote which authentication stage the session is in. \n   * The value of this attribute in a value of the `AuthenticationStage` \n   * enumeration.\n   */\n  String AUTH_STAGE = \"authentication_stage\";\n  \n  /**\n   * Set the logger for the authentication subsystem.  This method should\n   * be called immediately after construction and before the subsystem is used.\n   * @param the_logger the logger to use.\n   */\n  void setLogger(Logger the_logger);\n\n  /**\n   * Set the GSON serialization/deserialization subsystem to use. This method\n   * should be called immediately after construction and before the subsystem\n   * is used.\n   * @param the_gson the GSON subsystem to use.\n   */\n  void setGSON(Gson the_gson);\n\n  /**\n   * Set the DNS name of the authentication server to use for this particular\n   * authentication service. \n   * @param the_name the full DNS name of the authentication server.\n   */\n  void setAuthenticationServerName(String the_name);\n  \n  /**\n   * Authenticate the administrator `the_username` with credentials\n   * `the_password` (for traditional authentication) or `the_second_factor`\n   * (for two-factor authentication).\n   * @trace authentication.authenticate_county_administrator\n   * @trace authentication.authenticate_state_administrator\n   * @return true iff authentication succeeds.\n   * @param the_request The request.\n   * @param the_response The response, which is used in the case that a second\n   * factor challenge must be sent to the client.\n   * @param the_username the username of the person to attempt to authenticate.\n   * @param the_password the password for `username`.\n   * @param the_second_factor the second factor for `username`.\n   */\n  //@ requires 0 \u003c the_username.length();\n  //@ requires the_password != null || the_second_factor != null;\n  boolean authenticateAdministrator(Request the_request,\n                                    Response the_response,\n                                    String the_username,\n                                    String the_password,\n                                    String the_second_factor);\n\n  /**\n   * Attempt to authenticate `the_username` using `the_second_factor`.\n   * @trace authentication.second_factor_authenticate\n   * @return true iff two-factor authentication with credential pair \n   * (username, password) succeeds.\n   * @param the_request The request.\n   * @param the_username the username of the person to attempt to authenticate.\n   * @param the_second_factor the second factor for `username`.\n   */\n  //@ requires 0 \u003c the_username.length();\n  //@ requires the_second_factor != null;\n  //@ ensures (* If the_second_factor is a correct response to the challenge \n  //@            returned in the AuthenticateResult from the immediately preceding\n  //@            successful traditionalAuthenticate call for the_username, then \n  //@            secondFactorAuthenticate(the_request) holds and a true is returned;\n  //@            otherwise, a false is returned and \n  //@            secondFactorAuthenticated(the_request) will be false. *);\n  boolean secondFactorAuthenticate(Request the_request,\n                                   String the_username,\n                                   String the_second_factor);\n\n  /**\n   * Is the session authenticated with a second factor?\n   * @trace authenticated.second_factor_authenticated?\n   * @param the_request The request.\n   * @return true iff the session is second-factor authenticated\n   */\n  boolean secondFactorAuthenticated(Request the_request);\n\n  /**\n   * @trace authentication.traditional_authenticate\n   * @return an AuthenticationResult with a positive success() and a second factor \n   * challenge() if traditional authentication with credential pair \n   * (username, password) succeeds; a negative success() otherwise.\n   * @param the_request The request.\n   * @param the_response The response.\n   * @param the_username the username of the person to attempt to authenticate.\n   * @param the_password the password for `username`.\n   */\n  //@ requires 0 \u003c the_username.length();\n  //@ requires the_password != null;\n  //@ ensures (* If the provided credentials are correct, then \n  //@            traditionalAuthenticate(the_request) holds and the returned\n  //@            AuthenticationResult will contain a second factor challenge and\n  //@            will claim success. *);\n  AuthenticationResult traditionalAuthenticate(Request the_request,\n                                               Response the_response,\n                                               String the_username, \n                                               String the_password);\n\n  /**\n   * @trace authentication.traditional_authenticated?\n   * @return true iff the session is traditionally authenticated.\n   * @param the_request The request.\n   */\n  boolean traditionalAuthenticated(Request the_request);\n  \n  /**\n   * @return true iff the session is authenticated either traditionally\n   * or with a second factor.\n   */\n  boolean authenticated(Request the_request);\n  \n  /**\n   * @return true iff the session is authenticated in any way\n   * as the specified administrator type and username.\n   * @param the_request The request.\n   * @param the_username the username of the person to check.\n   * @param the_type the type of the administrator.\n   */\n  boolean authenticatedAs(Request the_request,\n                          AdministratorType the_type,\n                          String the_username);\n     \n  /**\n   * @return true iff the session is authenticated with a second factor\n   * as the specified administrator type and username.\n   * @param the_request The request.\n   * @param the_username the username of the person to check.\n   * @param the_type the type of the administrator.\n   */\n  boolean secondFactorAuthenticatedAs(Request the_request,\n                                      AdministratorType the_type,\n                                      String the_username);\n  \n  /**\n   * Deauthenticate the currently authenticated user.\n   * @param the_request The request.\n   */\n  void deauthenticate(Request the_request);\n      \n  /**\n   * @trace authentication.traditional_deauthenticate\n   * @param the_request The request.\n   * @param the_username the user to deauthenticate.\n   */\n  //@ ensures (* If `the_username` was logged in via traditional authentication, \n  //@            now they are not. *);\n  void traditionalDeauthenticate(Request the_request,\n                                 String the_username);\n\n  /**\n   * @trace authentication.two_factor_deauthenticate\n   * @param the_request The request.\n   * @param the_username the user to deauthenticate.\n   */\n  //@ ensures (* If `the_username` was logged in via two-factor authentication, \n  //@            now they are not. *);\n  void twoFactorDeauthenticate(Request the_request,\n                               String the_username);\n  \n  /**\n   * Gets the authenticated county for a request.\n   * \n   * @param the_request The request.\n   * @return the authenticated county, or null if this session is not authenticated \n   * as a county administrator.\n   */\n  County authenticatedCounty(Request the_request);\n  \n  /** \n   * Gets the authenticated administrator for a request.\n   * \n   * @param the_request The request.\n   * @return the authenticated administrator, or null if this session is not \n   * authenticated.\n   */\n  Administrator authenticatedAdministrator(Request the_request);\n  \n  /**\n   * Gets an authentication response based on the current status of a request.\n   * \n   * @param the_request The request.\n   * @return the authentication response.\n   */\n  AuthenticationStatus authenticationStatus(Request the_request);\n  \n  /**\n   * Gets the authenticated username.\n   */\n  /**\n   * @return the submitted credentials associated with any request.\n   * @param the_request The request.\n   */\n  SubmittedCredentials authenticationCredentials(Request the_request);\n}\n",
        "name": "AuthenticationInterface.java",
        "path": "server/eclipse-project/src/main/java/us/freeandfair/corla/auth/AuthenticationInterface.java",
        "url": "/github.com/FreeAndFair/ColoradoRLA/-/blob/server/eclipse-project/src/main/java/us/freeandfair/corla/auth/AuthenticationInterface.java"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 127,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires 0 \u003c the_username.length();"
        },
        {
          "limitHit": false,
          "lineNumber": 128,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires the_password != null || the_second_factor != null;"
        },
        {
          "limitHit": false,
          "lineNumber": 144,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires 0 \u003c the_username.length();"
        },
        {
          "limitHit": false,
          "lineNumber": 145,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires the_second_factor != null;"
        },
        {
          "limitHit": false,
          "lineNumber": 146,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures (* If the_second_factor is a correct response to the challenge "
        },
        {
          "limitHit": false,
          "lineNumber": 174,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires 0 \u003c the_username.length();"
        },
        {
          "limitHit": false,
          "lineNumber": 175,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires the_password != null;"
        },
        {
          "limitHit": false,
          "lineNumber": 176,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures (* If the provided credentials are correct, then "
        },
        {
          "limitHit": false,
          "lineNumber": 231,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures (* If `the_username` was logged in via traditional authentication, "
        },
        {
          "limitHit": false,
          "lineNumber": 241,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures (* If `the_username` was logged in via two-factor authentication, "
        }
      ],
      "repository": {
        "name": "github.com/FreeAndFair/ColoradoRLA",
        "url": "/github.com/FreeAndFair/ColoradoRLA"
      }
    },
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "fbbc9aba46c4db4b9c7349a855397a27439d2a5b"
        },
        "content": "/*\n * Free \u0026 Fair Colorado RLA System\n * \n * @title ColoradoRLA\n * @created Jul 25, 2017\n * @copyright 2017 Colorado Department of State\n * @license SPDX-License-Identifier: AGPL-3.0-or-later\n * @creator Joey Dodds \u003cjdodds@freeandfair.us\u003e\n * @description A system to assist in conducting state-wide risk-limiting audits.\n */\n\npackage us.freeandfair.corla.crypto;\n\nimport java.math.BigInteger;\nimport java.nio.charset.StandardCharsets;\nimport java.security.MessageDigest;\nimport java.security.NoSuchAlgorithmException;\nimport java.util.LinkedList;\nimport java.util.List;\n\n/**\n * A pseudo-random number generator based on Philip Stark's pseudo-random number\n * generator found at\n * \u003ca href=\"https://www.stat.berkeley.edu/~stark/Java/Html/sha256Rand.htm\"\u003e\n * https://www.stat.berkeley.edu/~stark/Java/Html/sha256Rand.htm\u003c/a\u003e.\n * \n * @author Joey Dodds \u003cjdodds@freeandfair.us\u003e\n * @author Joseph R. Kiniry \u003ckiniry@freeandfair.us\u003e\n * @version 1.0.0\n * @review kiniry Why is this not just a static class?\n */\npublic class PseudoRandomNumberGenerator {\n  /**\n   * The minimum seed length specified in CRLS, and hence our formal specification,\n   * is 20 characters.\n   * @trace corla.randomness.seed\n   */\n  public static final int MINIMUM_SEED_LENGTH = 20;\n  \n  /**\n   * The message digest we will use for generating hashes.\n   */\n  private MessageDigest my_sha256_digest;\n\n  /**\n   * The random numbers generated so far.\n   */\n  private final List\u003cInteger\u003e my_random_numbers;\n\n  /**\n   * The current number to use for generation.\n   */\n  //@ private invariant 0 \u003c= my_count;\n  private int my_count;\n\n  /**\n   * True if we should \"replace\" drawn numbers once they are drawn. True allows\n   * repeats.\n   */\n  private final boolean my_with_replacement;\n\n  /**\n   * The seed given, which must be at least of length MININUM_SEED_LENGTH and\n   * whose contents must only be digits.\n   */\n  //@ private invariant MINIMUM_SEED_LENGTH \u003c= my_seed.length();\n  //@ private invariant seedOnlyContainsDigits(my_seed);\n  private final String my_seed;\n\n  /**\n   * The minimum value to generate.\n   */\n  private final int my_minimum;\n\n  /**\n   * The maximum value to generate.\n   */\n  private final int my_maximum;\n  \n  //@ private invariant my_minimum \u003c= my_maximum;\n\n  /**\n   * The maximum index that can be generated without replacement.\n   */\n  private final int my_maximum_index;\n\n  /**\n   * Create a pseudo-random number generator with functionality identical to \n   * Rivest's \u003ccode\u003esampler.py\u003c/code\u003e example implementation in Python of an \n   * RLA sampler.\n   * \n   * @param the_seed The seed to generate random numbers from\n   * @param the_with_replacement True if duplicates can be generated\n   * @param the_minimum The minimum value to generate\n   * @param the_maximum The maximum value to generate\n   */\n  //@ requires 20 \u003c= the_seed.length();\n  //@ requires seedOnlyContainsDigits(the_seed);\n  //@ requires the_minimum \u003c= the_maximum;\n  public PseudoRandomNumberGenerator(final String the_seed, \n                                     final boolean the_with_replacement,\n                                     final int the_minimum, \n                                     final int the_maximum) {\n    // @trace randomness.seed side condition\n    assert MINIMUM_SEED_LENGTH \u003c= the_seed.length();\n    try {\n      my_sha256_digest = MessageDigest.getInstance(\"SHA-256\");\n    } catch (final NoSuchAlgorithmException e) {\n      assert false;\n    }\n    my_random_numbers = new LinkedList\u003cInteger\u003e();\n    my_with_replacement = the_with_replacement;\n    my_seed = the_seed;\n    assert the_minimum \u003c the_maximum;\n    my_minimum = the_minimum;\n    my_maximum = the_maximum;\n    my_maximum_index = my_maximum - my_minimum + 1;\n  }\n\n  /**\n   * Generate the specified list of random numbers.\n   * \n   * @param the_from the \"index\" of the first random number to give\n   * @param the_to the \"index\" of the final random number to give\n   * \n   * @return A list containing the_to - the_from + 1 random numbers\n   */\n  //@ requires the_from \u003c= the_to;\n  // @todo kiniry Refine this specification to include public model fields.\n  // requires my_with_replacement || the_to \u003c= my_maximum_index;\n  public List\u003cInteger\u003e getRandomNumbers(final int the_from, final int the_to) {\n    assert the_from \u003c= the_to;\n    assert my_with_replacement || the_to \u003c= my_maximum_index;\n    if (the_to + 1 \u003e my_random_numbers.size()) {\n      extendList(the_to + 1);\n    }\n    // subList has an exclusive upper bound, but we have an inclusive one\n    return my_random_numbers.subList(the_from, the_to + 1);\n  }\n\n  /**\n   * A helper function to extend the list of generated random numbers.\n   * @param the_length the number of random numbers to generate.\n   */\n  //@ private behavior\n  //@   requires 0 \u003c= the_length;\n  //@   ensures my_random_numbers.size() == the_length;\n  private void extendList(final int the_length) {\n    while (my_random_numbers.size() \u003c the_length) {\n      generateNext();\n    }\n  }\n\n  /**\n   * Attempt to generate the next random number. This will either extend the\n   * list of random numbers in length or leave it the same. It will always \n   * advance the count.\n   */\n  public void generateNext() {\n    my_count++;\n    assert my_with_replacement || my_count \u003c= my_maximum_index;\n\n    final String hash_input = my_seed + \",\" + my_count;\n\n    final byte[] hash_output =\n        my_sha256_digest.digest(hash_input.getBytes(StandardCharsets.UTF_8));\n    final BigInteger int_output = new BigInteger(1, hash_output);\n\n    final BigInteger in_range =\n        int_output.mod(BigInteger.valueOf(my_maximum - my_minimum + 1));\n    final int pick = my_minimum + in_range.intValueExact();\n\n    if (my_with_replacement || !my_random_numbers.contains(pick)) {\n      my_random_numbers.add(pick);\n    }\n  }\n  \n  /**\n   * Checks to see if the passed potential seed only contains digits.\n   * @param the_seed is the seed to check.\n   */\n  /*@ behavior\n    @   ensures (\\forall int i; 0 \u003c= i \u0026\u0026 i \u003c the_seed.length(); \n    @            Character.isDigit(the_seed.charAt(i)));\n    @*/ \n  public /*@ pure @*/ static boolean seedOnlyContainsDigits(final String the_seed) {\n    for (int i = 0; i \u003c the_seed.length(); i++) {\n      if (!Character.isDigit(the_seed.charAt(i))) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n",
        "name": "PseudoRandomNumberGenerator.java",
        "path": "server/eclipse-project/src/main/java/us/freeandfair/corla/crypto/PseudoRandomNumberGenerator.java",
        "url": "/github.com/FreeAndFair/ColoradoRLA/-/blob/server/eclipse-project/src/main/java/us/freeandfair/corla/crypto/PseudoRandomNumberGenerator.java"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 96,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires 20 \u003c= the_seed.length();"
        },
        {
          "limitHit": false,
          "lineNumber": 97,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires seedOnlyContainsDigits(the_seed);"
        },
        {
          "limitHit": false,
          "lineNumber": 98,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires the_minimum \u003c= the_maximum;"
        },
        {
          "limitHit": false,
          "lineNumber": 127,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires the_from \u003c= the_to;"
        }
      ],
      "repository": {
        "name": "github.com/FreeAndFair/ColoradoRLA",
        "url": "/github.com/FreeAndFair/ColoradoRLA"
      }
    },
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "fbbc9aba46c4db4b9c7349a855397a27439d2a5b"
        },
        "content": "/*\n * Free \u0026 Fair Colorado RLA System\n * \n * @title ColoradoRLA\n * @created Jul 25, 2017\n * @copyright 2017 Colorado Department of State\n * @license SPDX-License-Identifier: AGPL-3.0-or-later\n * @creator Joey Dodds \u003cjdodds@galois.com\u003e\n * @model_review Joseph R. Kiniry \u003ckiniry@freeandfair.us\u003e\n * @description A system to assist in conducting statewide risk-limiting audits.\n */\n\npackage us.freeandfair.corla.model;\n\nimport static us.freeandfair.corla.util.EqualsHashcodeHelper.*;\n\nimport java.io.Serializable;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\n\nimport javax.persistence.Cacheable;\nimport javax.persistence.CollectionTable;\nimport javax.persistence.Column;\nimport javax.persistence.ElementCollection;\nimport javax.persistence.Entity;\nimport javax.persistence.FetchType;\nimport javax.persistence.GeneratedValue;\nimport javax.persistence.GenerationType;\nimport javax.persistence.Id;\nimport javax.persistence.Index;\nimport javax.persistence.JoinColumn;\nimport javax.persistence.ManyToOne;\nimport javax.persistence.OrderColumn;\nimport javax.persistence.Table;\nimport javax.persistence.UniqueConstraint;\nimport javax.persistence.Version;\n\nimport com.google.gson.annotations.JsonAdapter;\n\nimport us.freeandfair.corla.json.ContestJsonAdapter;\nimport us.freeandfair.corla.persistence.PersistentEntity;\n\n/**\n * The definition of a contest; comprises a contest name and a set of\n * possible choices.\n * \n * @author Daniel M. Zimmerman \u003cdmz@freeandfair.us\u003e\n * @version 1.0.0\n */\n@Entity\n@Cacheable(true)\n@Table(name = \"contest\",\n       uniqueConstraints = {\n           @UniqueConstraint(columnNames = {\"name\", \"county_id\", \"description\", \"votes_allowed\"}) },\n       indexes = { @Index(name = \"idx_contest_name\", columnList = \"name\"),\n                   @Index(name = \"idx_contest_name_county_description_votes_allowed\", \n                          columnList = \"name, county_id, description, votes_allowed\") })\n@JsonAdapter(ContestJsonAdapter.class)\n//this class has many fields that would normally be declared final, but\n//cannot be for compatibility with Hibernate and JPA.\n@SuppressWarnings(\"PMD.ImmutableField\")\npublic class Contest implements PersistentEntity, Serializable {\n  /**\n   * The serialVersionUID.\n   */\n  private static final long serialVersionUID = 1L;\n  \n  /**\n   * The ID number.\n   */\n  @Id\n  @Column(updatable = false, nullable = false)\n  @GeneratedValue(strategy = GenerationType.SEQUENCE)\n  private Long my_id;\n  \n  /**\n   * The version (for optimistic locking).\n   */\n  @Version\n  private Long my_version;\n  \n  /**\n   * The contest name.\n   */\n  @Column(name = \"name\", updatable = false, nullable = false)\n  private String my_name;\n\n  /**\n   * The county to which this contest result set belongs. \n   */\n  @ManyToOne(optional = false, fetch = FetchType.LAZY)\n  @JoinColumn  \n  private County my_county;\n  \n  /**\n   * The contest description.\n   */\n  @Column(name = \"description\", updatable = false, nullable = false)\n  private String my_description;\n    \n  /**\n   * The contest choices.\n   */\n  @ElementCollection(fetch = FetchType.EAGER)\n  @OrderColumn(name = \"index\")\n  @CollectionTable(name = \"contest_choice\",\n                   joinColumns = @JoinColumn(name = \"contest_id\", \n                                             referencedColumnName = \"my_id\"))\n  private List\u003cChoice\u003e my_choices = new ArrayList\u003c\u003e();\n  \n  /**\n   * The maximum number of votes that can be made in this contest.\n   */\n  @Column(name = \"votes_allowed\", updatable = false, nullable = false)\n  private Integer my_votes_allowed;\n  \n  /**\n   * The maximum number of winners in this contest.\n   */\n  @Column(name = \"winners_allowed\", updatable = false, nullable = false)\n  private Integer my_winners_allowed;\n  \n  /**\n   * The import sequence number.\n   */\n  @Column(updatable = false, nullable = false)\n  private Integer my_sequence_number;\n\n  /**\n   * Constructs an empty contest, solely for persistence.\n   */\n  public Contest() {\n    super();\n    // default values for everything\n  }\n  \n  /**\n   * Constructs a contest with the specified parameters.\n   * \n   * @param the_name The contest name.\n   * @param the_county The county for this contest.\n   * @param the_description The contest description.\n   * @param the_choices The set of contest choices.\n   * @param the_votes_allowed The maximum number of votes that can\n   * be made in this contest.\n   * @param the_winners_allowed The maximum number of winners for\n   * this contest.\n   * @param the_sequence_number The sequence number.\n   */\n  //@ requires 1 \u003c= the_votes_allowed;\n  //@ requires the_votes_allowed \u003c= the_choices.size();\n  public Contest(final String the_name, final County the_county, \n                 final String the_description, final List\u003cChoice\u003e the_choices, \n                 final int the_votes_allowed, final int the_winners_allowed,\n                 final int the_sequence_number)  {\n    super();\n    my_name = the_name;\n    my_county = the_county;\n    my_description = the_description;\n    my_choices.addAll(the_choices);\n    my_votes_allowed = the_votes_allowed;\n    my_winners_allowed = the_winners_allowed;\n    my_sequence_number = the_sequence_number;\n  }\n\n  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public Long id() {\n    return my_id;\n  }\n\n  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public void setID(final Long the_id) {\n    my_id = the_id;\n  }\n  \n  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public Long version() {\n    return my_version;\n  }\n  \n  /**\n   * @return the contest name.\n   */\n  public String name() {\n    return my_name;\n  }\n  \n  /**\n   * @return the contest description.\n   */\n  public String description() {\n    return my_description;\n  }\n  \n  /**\n   * @return the county ID.\n   */\n  public County county() {\n    return my_county;\n  }\n  \n  /**\n   * Checks to see if the specified choice is valid for this contest.\n   * \n   * @param the_choice The choice.\n   * @return true if the choice is valid, false otherwise.\n   */\n  public boolean isValidChoice(final String the_choice) {\n    for (final Choice c : my_choices) {\n      if (c.name().equals(the_choice)) {\n        return true;\n      }\n    }\n    return false;\n  }\n  \n  /**\n   * @return the contest choices.\n   */\n  public List\u003cChoice\u003e choices() {\n    return Collections.unmodifiableList(my_choices);\n  }\n  \n  /**\n   * @return the maximum number of votes that can be made in this contest.\n   */\n  public Integer votesAllowed() {\n    return my_votes_allowed;\n  }\n\n  /**\n   * @return the maximum number of winners in this contest.\n   */\n  public Integer winnersAllowed() {\n    return my_winners_allowed;\n  }\n  \n  /**\n   * @return the sequence number of this contest.\n   */\n  public Integer sequenceNumber() {\n    return my_sequence_number;\n  }\n  \n  /**\n   * @return a String representation of this contest.\n   */\n  @Override\n  public String toString() {\n    return \"Contest [name=\" + my_name + \", description=\" +\n           my_description + \", choices=\" + choices() + \n           \", votes_allowed=\" + my_votes_allowed + \"]\";\n  }\n  \n  /**\n   * Compare this object with another for equivalence.\n   * \n   * @param the_other The other object.\n   * @return true if the objects are equivalent, false otherwise.\n   */\n  @Override\n  public boolean equals(final Object the_other) {\n    boolean result = true;\n    if (the_other instanceof Contest) {\n      final Contest other_contest = (Contest) the_other;\n      result \u0026= nullableEquals(other_contest.name(), name());\n      result \u0026= nullableEquals(other_contest.county(), county());\n      result \u0026= nullableEquals(other_contest.description(), description());\n      result \u0026= nullableEquals(other_contest.choices(), choices());\n      result \u0026= nullableEquals(other_contest.votesAllowed(), votesAllowed());\n      result \u0026= nullableEquals(other_contest.sequenceNumber(), sequenceNumber());\n    } else {\n      result = false;\n    }\n    return result;\n  }\n  \n  /**\n   * @return a hash code for this object.\n   */\n  @Override\n  public int hashCode() {\n    return nullableHashCode(name().hashCode());\n  }\n}\n",
        "name": "Contest.java",
        "path": "server/eclipse-project/src/main/java/us/freeandfair/corla/model/Contest.java",
        "url": "/github.com/FreeAndFair/ColoradoRLA/-/blob/server/eclipse-project/src/main/java/us/freeandfair/corla/model/Contest.java"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 150,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires 1 \u003c= the_votes_allowed;"
        },
        {
          "limitHit": false,
          "lineNumber": 151,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires the_votes_allowed \u003c= the_choices.size();"
        }
      ],
      "repository": {
        "name": "github.com/FreeAndFair/ColoradoRLA",
        "url": "/github.com/FreeAndFair/ColoradoRLA"
      }
    }
  ],
  "LimitHit": false,
  "Cloning": [],
  "Missing": [],
  "Timedout": [],
  "ResultCount": 23,
  "ElapsedMilliseconds": 1291,
  "Alert": {
    "Title": "",
    "Description": "",
    "ProposedQueries": null
  }
}
