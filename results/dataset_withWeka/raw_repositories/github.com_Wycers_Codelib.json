{
  "SourcegraphEndpoint": "https://sourcegraph.com",
  "Query": "(//@ requires )|(//@ ensures ) repo:github.com/Wycers/Codelib lang:java count:all case:yes type:file patterntype:regexp",
  "Site": {
    "BuildVersion": "238702_2023-08-16_5.1-acf4bcc841e5"
  },
  "Results": [
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "7d54dce875a69bc998597abb1c2e2c814587c9b8"
        },
        "content": "package net.mooctest;\n\n// BinaryHeap class\n//\n// CONSTRUCTION: with optional capacity (that defaults to 100)\n//\n// ******************PUBLIC OPERATIONS*********************\n// void insert( x )       --\u003e Insert x\n// int deleteMin( )--\u003e Return and remove smallest item\n// int findMin( )  --\u003e Return smallest item\n// boolean isEmpty( )     --\u003e Return true if empty; else false\n// boolean isFull( )      --\u003e Return true if full; else false\n// void makeEmpty( )      --\u003e Remove all items\n// ******************ERRORS********************************\n// Throws Overflow if capacity exceeded\n\n/**\n * Implements a binary heap.\n * Note that all \"matching\" is based on the compareTo method.\n *\n * @author Mark Allen Weiss\n */\npublic class BinaryHeap {\n    //@ invariant wellFormed();\n\n    /**\n     * Construct the binary heap.\n     */\n    public BinaryHeap() {\n        this(DEFAULT_CAPACITY);\n    }\n\n    /**\n     * Construct the binary heap.\n     *\n     * @param capacity the capacity of the binary heap.\n     */\n    //@ requires capacity \u003e 0;\n    //@ ensures isEmpty();\n    public BinaryHeap(int capacity) {\n        currentSize = 0;\n        array = new int[capacity + 1];\n    }\n\n    /**\n     * Insert into the priority queue, maintaining heap order.\n     * Duplicates are allowed.\n     *\n     * @param x the item to insert.\n     * @throws Overflow if container is full.\n     */\n    public void insert(int x) throws Overflow {\n        if (isFull())\n            throw new Overflow();\n\n        // Percolate up\n        int hole = ++currentSize;\n        for (; hole \u003e 1 \u0026\u0026 x \u003c array[hole / 2]; hole /= 2)\n            array[hole] = array[hole / 2];\n        array[hole] = x;\n    }\n\n    /**\n     * Find the smallest item in the priority queue.\n     *\n     * @return the smallest item, or null, if empty.\n     */\n    public int findMin() {\n        if (isEmpty())\n            return -1;\n        return array[1];\n    }\n\n    boolean wellFormed() {\n        if (array == null) {//array!=null\n            return false;\n        }\n        if (currentSize \u003c 0 || currentSize \u003e= array.length) {//currentSize\u003e=0; currentSize\u003carray.length;\n            return false;\n        }\n        for (int i = 1; i \u003c currentSize; i++) {\n            if (i * 2 \u003c= currentSize \u0026\u0026 array[i] \u003e array[2 * i]) {\n                return false;\n            }\n            if (i * 2 + 1 \u003c= currentSize \u0026\u0026 array[i] \u003e array[2 * i + 1]) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /**\n     * Remove the smallest item from the priority queue.\n     *\n     * @return the smallest item, or null, if empty.\n     */\n    public int deleteMin() {\n        if (isEmpty())\n            return -1;\n\n        int minItem = findMin();\n        array[1] = array[currentSize--];\n        percolateDown(1);\n\n        return minItem;\n    }\n\n    /**\n     * Establish heap order property from an arbitrary\n     * arrangement of items. Runs in linear time.\n     */\n    public void buildHeap() {\n        for (int i = currentSize / 2; i \u003e 0; i--)\n            percolateDown(i);\n    }\n\n    /**\n     * Test if the priority queue is logically empty.\n     *\n     * @return true if empty, false otherwise.\n     */\n    public boolean isEmpty() {\n        return currentSize == 0;\n    }\n\n    /**\n     * Test if the priority queue is logically full.\n     *\n     * @return true if full, false otherwise.\n     */\n    public boolean isFull() {\n        return currentSize == array.length - 1;\n    }\n\n    /**\n     * Make the priority queue logically empty.\n     */\n    //@ ensures isEmpty();\n    public void makeEmpty() {\n        currentSize = 0;\n    }\n\n    private static final int DEFAULT_CAPACITY = 100;\n\n    private int currentSize;      // Number of elements in heap\n    private int[] array; // The heap array\n\n    /**\n     * Internal method to percolate down in the heap.\n     *\n     * @param hole the index at which the percolate begins.\n     */\n    private void percolateDown(int hole) {\n        int child;\n        int tmp = array[hole];\n\n        for (; hole * 2 \u003c= currentSize; hole = child) {\n            child = hole * 2;\n\n            if (child != currentSize \u0026\u0026\n                    array[child + 1] \u003c array[child])\n                child++;\n            if (array[child] \u003c tmp)\n                array[hole] = array[child];\n            else\n                break;\n        }\n        array[hole] = tmp;\n    }\n\n\n}\n",
        "name": "BinaryHeap.java",
        "path": "Software Testing/binaryheap/src/main/java/net/mooctest/BinaryHeap.java",
        "url": "/github.com/Wycers/Codelib/-/blob/Software%20Testing/binaryheap/src/main/java/net/mooctest/BinaryHeap.java"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 37,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires capacity \u003e 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 38,
          "offsetAndLengths": [
            [
              4,
              12
            ]
          ],
          "preview": "    //@ ensures isEmpty();"
        },
        {
          "limitHit": false,
          "lineNumber": 137,
          "offsetAndLengths": [
            [
              4,
              12
            ]
          ],
          "preview": "    //@ ensures isEmpty();"
        }
      ],
      "repository": {
        "name": "github.com/Wycers/Codelib",
        "url": "/github.com/Wycers/Codelib"
      }
    }
  ],
  "LimitHit": false,
  "Cloning": [],
  "Missing": [],
  "Timedout": [],
  "ResultCount": 3,
  "ElapsedMilliseconds": 1505,
  "Alert": {
    "Title": "",
    "Description": "",
    "ProposedQueries": null
  }
}
