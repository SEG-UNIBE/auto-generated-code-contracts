{
  "SourcegraphEndpoint": "https://sourcegraph.com",
  "Query": "(//@ requires )|(//@ ensures ) repo:github.com/triguero/MRPR lang:java count:all case:yes type:file patterntype:regexp",
  "Site": {
    "BuildVersion": "238702_2023-08-16_5.1-acf4bcc841e5"
  },
  "Results": [
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "fa027a4d3f254710aad868d79c75ce32aa285ee9"
        },
        "content": "/***********************************************************************\r\n\r\n\tThis file is part of KEEL-software, the Data Mining tool for regression, \r\n\tclassification, clustering, pattern mining and so on.\r\n\r\n\tCopyright (C) 2004-2010\r\n\t\r\n\tF. Herrera (herrera@decsai.ugr.es)\r\n    L. S�nchez (luciano@uniovi.es)\r\n    J. Alcal�-Fdez (jalcala@decsai.ugr.es)\r\n    S. Garc�a (sglopez@ujaen.es)\r\n    A. Fern�ndez (alberto.fernandez@ujaen.es)\r\n    J. Luengo (julianlm@decsai.ugr.es)\r\n\r\n\tThis program is free software: you can redistribute it and/or modify\r\n\tit under the terms of the GNU General Public License as published by\r\n\tthe Free Software Foundation, either version 3 of the License, or\r\n\t(at your option) any later version.\r\n\r\n\tThis program is distributed in the hope that it will be useful,\r\n\tbut WITHOUT ANY WARRANTY; without even the implied warranty of\r\n\tMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n\tGNU General Public License for more details.\r\n\r\n\tYou should have received a copy of the GNU General Public License\r\n\talong with this program.  If not, see http://www.gnu.org/licenses/\r\n  \r\n**********************************************************************/\r\n\r\n/*\r\n *    This program is free software; you can redistribute it and/or modify\r\n *    it under the terms of the GNU General Public License as published by\r\n *    the Free Software Foundation; either version 2 of the License, or\r\n *    (at your option) any later version.\r\n *\r\n *    This program is distributed in the hope that it will be useful,\r\n *    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n *    GNU General Public License for more details.\r\n *\r\n *    You should have received a copy of the GNU General Public License\r\n *    along with this program; if not, write to the Free Software\r\n *    Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.\r\n */\r\n\r\n/*\r\n *    Utils.java\r\n *    Copyright (C) 1999-2004 University of Waikato, Hamilton, New Zealand\r\n *\r\n */\r\n\r\npackage org.apache.mahout.keel.Algorithms.SVM.SMO.core;\r\n\r\nimport java.lang.Math;\r\nimport java.lang.reflect.Array;\r\nimport java.util.Properties;\r\nimport java.io.File;\r\nimport java.io.FileInputStream;\r\nimport java.util.Random;\r\n\r\n/**\r\n * Class implementing some simple utility methods.\r\n *\r\n * @author Eibe Frank \r\n * @author Yong Wang \r\n * @author Len Trigg \r\n * @author Julien Prados\r\n * @version $Revision: 1.1 $\r\n */\r\npublic final class Utils {\r\n\r\n  /** The natural logarithm of 2. */\r\n  public static double log2 = Math.log(2);\r\n\r\n  /** The small deviation allowed in double comparisons */\r\n  public static double SMALL = 1e-6;\r\n\r\n  \r\n  /**\r\n   * Reads properties that inherit from three locations. Properties\r\n   * are first defined in the system resource location (i.e. in the\r\n   * CLASSPATH).  These default properties must exist. Properties\r\n   * defined in the users home directory (optional) override default\r\n   * settings. Properties defined in the current directory (optional)\r\n   * override all these settings.\r\n   *\r\n   * @param resourceName the location of the resource that should be\r\n   * loaded.  e.g.: \"weka/core/Utils.props\". (The use of hardcoded\r\n   * forward slashes here is OK - see\r\n   * jdk1.1/docs/guide/misc/resources.html) This routine will also\r\n   * look for the file (in this case) \"Utils.props\" in the users home\r\n   * directory and the current directory.\r\n   * @return the Properties\r\n   * @exception Exception if no default properties are defined, or if\r\n   * an error occurs reading the properties files.  \r\n   */\r\n  public static Properties readProperties(String resourceName)\r\n    throws Exception {\r\n\r\n    Properties defaultProps = new Properties();\r\n    try {\r\n      // Apparently hardcoded slashes are OK here\r\n      // jdk1.1/docs/guide/misc/resources.html\r\n      defaultProps.load(ClassLoader.getSystemResourceAsStream(resourceName));\r\n    } catch (Exception ex) {\r\n/*      throw new Exception(\"Problem reading default properties: \"\r\n\t+ ex.getMessage()); */\r\n      System.err.println(\"Warning, unable to load properties file from \"\r\n\t\t\t +\"system resource (Utils.java)\");\r\n    }\r\n\r\n    // Hardcoded slash is OK here\r\n    // eg: see jdk1.1/docs/guide/misc/resources.html\r\n    int slInd = resourceName.lastIndexOf('/');\r\n    if (slInd != -1) {\r\n      resourceName = resourceName.substring(slInd + 1);\r\n    }\r\n\r\n    // Allow a properties file in the home directory to override\r\n    Properties userProps = new Properties(defaultProps);    \r\n    File propFile = new File(System.getProperties().getProperty(\"user.home\")\r\n                             + File.separatorChar\r\n                             + resourceName);\r\n    if (propFile.exists()) {\r\n      try {\r\n        userProps.load(new FileInputStream(propFile));\r\n      } catch (Exception ex) {\r\n        throw new Exception(\"Problem reading user properties: \" + propFile);\r\n      }\r\n    }\r\n\r\n    // Allow a properties file in the current directory to override\r\n    Properties localProps = new Properties(userProps);\r\n    propFile = new File(resourceName);\r\n    if (propFile.exists()) {\r\n      try {\r\n        localProps.load(new FileInputStream(propFile));\r\n      } catch (Exception ex) {\r\n        throw new Exception(\"Problem reading local properties: \" + propFile);\r\n      }\r\n    }\r\n    \r\n    return localProps;\r\n  }\r\n\r\n  /**\r\n   * Returns the correlation coefficient of two double vectors.\r\n   *\r\n   * @param y1 double vector 1\r\n   * @param y2 double vector 2\r\n   * @param n the length of two double vectors\r\n   * @return the correlation coefficient\r\n   */\r\n  public static final double correlation(double y1[],double y2[],int n) {\r\n\r\n    int i;\r\n    double av1 = 0.0, av2 = 0.0, y11 = 0.0, y22 = 0.0, y12 = 0.0, c;\r\n    \r\n    if (n \u003c= 1) {\r\n      return 1.0;\r\n    }\r\n    for (i = 0; i \u003c n; i++) {\r\n      av1 += y1[i];\r\n      av2 += y2[i];\r\n    }\r\n    av1 /= (double) n;\r\n    av2 /= (double) n;\r\n    for (i = 0; i \u003c n; i++) {\r\n      y11 += (y1[i] - av1) * (y1[i] - av1);\r\n      y22 += (y2[i] - av2) * (y2[i] - av2);\r\n      y12 += (y1[i] - av1) * (y2[i] - av2);\r\n    }\r\n    if (y11 * y22 == 0.0) {\r\n      c=1.0;\r\n    } else {\r\n      c = y12 / Math.sqrt(Math.abs(y11 * y22));\r\n    }\r\n    \r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * Removes all occurrences of a string from another string.\r\n   *\r\n   * @param inString the string to remove substrings from.\r\n   * @param substring the substring to remove.\r\n   * @return the input string with occurrences of substring removed.\r\n   */\r\n  public static String removeSubstring(String inString, String substring) {\r\n\r\n    StringBuffer result = new StringBuffer();\r\n    int oldLoc = 0, loc = 0;\r\n    while ((loc = inString.indexOf(substring, oldLoc))!= -1) {\r\n      result.append(inString.substring(oldLoc, loc));\r\n      oldLoc = loc + substring.length();\r\n    }\r\n    result.append(inString.substring(oldLoc));\r\n    return result.toString();\r\n  }\r\n\r\n  /**\r\n   * Replaces with a new string, all occurrences of a string from \r\n   * another string.\r\n   *\r\n   * @param inString the string to replace substrings in.\r\n   * @param subString the substring to replace.\r\n   * @param replaceString the replacement substring\r\n   * @return the input string with occurrences of substring replaced.\r\n   */\r\n  public static String replaceSubstring(String inString, String subString,\r\n\t\t\t\t\tString replaceString) {\r\n\r\n    StringBuffer result = new StringBuffer();\r\n    int oldLoc = 0, loc = 0;\r\n    while ((loc = inString.indexOf(subString, oldLoc))!= -1) {\r\n      result.append(inString.substring(oldLoc, loc));\r\n      result.append(replaceString);\r\n      oldLoc = loc + subString.length();\r\n    }\r\n    result.append(inString.substring(oldLoc));\r\n    return result.toString();\r\n  }\r\n\r\n\r\n  /**\r\n   * Pads a string to a specified length, inserting spaces on the left\r\n   * as required. If the string is too long, characters are removed (from\r\n   * the right).\r\n   *\r\n   * @param inString the input string\r\n   * @param length the desired length of the output string\r\n   * @return the output string\r\n   */\r\n  public static String padLeft(String inString, int length) {\r\n\r\n    return fixStringLength(inString, length, false);\r\n  }\r\n  \r\n  /**\r\n   * Pads a string to a specified length, inserting spaces on the right\r\n   * as required. If the string is too long, characters are removed (from\r\n   * the right).\r\n   *\r\n   * @param inString the input string\r\n   * @param length the desired length of the output string\r\n   * @return the output string\r\n   */\r\n  public static String padRight(String inString, int length) {\r\n\r\n    return fixStringLength(inString, length, true);\r\n  }\r\n  \r\n  /**\r\n   * Pads a string to a specified length, inserting spaces as\r\n   * required. If the string is too long, characters are removed (from\r\n   * the right).\r\n   *\r\n   * @param inString the input string\r\n   * @param length the desired length of the output string\r\n   * @param right true if inserted spaces should be added to the right\r\n   * @return the output string\r\n   */\r\n  private static /*@pure@*/ String fixStringLength(String inString, int length,\r\n\t\t\t\t\tboolean right) {\r\n\r\n    if (inString.length() \u003c length) {\r\n      while (inString.length() \u003c length) {\r\n\tinString = (right ? inString.concat(\" \") : \" \".concat(inString));\r\n      }\r\n    } else if (inString.length() \u003e length) {\r\n      inString = inString.substring(0, length);\r\n    }\r\n    return inString;\r\n  }\r\n \r\n  /**\r\n   * Rounds a double and converts it into String.\r\n   *\r\n   * @param value the double value\r\n   * @param afterDecimalPoint the (maximum) number of digits permitted\r\n   * after the decimal point\r\n   * @return the double as a formatted string\r\n   */\r\n  public static /*@pure@*/ String doubleToString(double value, int afterDecimalPoint) {\r\n    \r\n    StringBuffer stringBuffer;\r\n    double temp;\r\n    int dotPosition;\r\n    long precisionValue;\r\n    \r\n    temp = value * Math.pow(10.0, afterDecimalPoint);\r\n    if (Math.abs(temp) \u003c Long.MAX_VALUE) {\r\n      precisionValue = \t(temp \u003e 0) ? (long)(temp + 0.5) \r\n                                   : -(long)(Math.abs(temp) + 0.5);\r\n      if (precisionValue == 0) {\r\n\tstringBuffer = new StringBuffer(String.valueOf(0));\r\n      } else {\r\n\tstringBuffer = new StringBuffer(String.valueOf(precisionValue));\r\n      }\r\n      if (afterDecimalPoint == 0) {\r\n\treturn stringBuffer.toString();\r\n      }\r\n      dotPosition = stringBuffer.length() - afterDecimalPoint;\r\n      while (((precisionValue \u003c 0) \u0026\u0026 (dotPosition \u003c 1)) ||\r\n\t     (dotPosition \u003c 0)) {\r\n\tif (precisionValue \u003c 0) {\r\n\t  stringBuffer.insert(1, '0');\r\n\t} else {\r\n\t  stringBuffer.insert(0, '0');\r\n\t}\r\n\tdotPosition++;\r\n      }\r\n      stringBuffer.insert(dotPosition, '.');\r\n      if ((precisionValue \u003c 0) \u0026\u0026 (stringBuffer.charAt(1) == '.')) {\r\n\tstringBuffer.insert(1, '0');\r\n      } else if (stringBuffer.charAt(0) == '.') {\r\n\tstringBuffer.insert(0, '0');\r\n      }\r\n      int currentPos = stringBuffer.length() - 1;\r\n      while ((currentPos \u003e dotPosition) \u0026\u0026\r\n\t     (stringBuffer.charAt(currentPos) == '0')) {\r\n\tstringBuffer.setCharAt(currentPos--, ' ');\r\n      }\r\n      if (stringBuffer.charAt(currentPos) == '.') {\r\n\tstringBuffer.setCharAt(currentPos, ' ');\r\n      }\r\n      \r\n      return stringBuffer.toString().trim();\r\n    }\r\n    return new String(\"\" + value);\r\n  }\r\n\r\n  /**\r\n   * Rounds a double and converts it into a formatted decimal-justified String.\r\n   * Trailing 0's are replaced with spaces.\r\n   *\r\n   * @param value the double value\r\n   * @param width the width of the string\r\n   * @param afterDecimalPoint the number of digits after the decimal point\r\n   * @return the double as a formatted string\r\n   */\r\n  public static /*@pure@*/ String doubleToString(double value, int width,\r\n\t\t\t\t      int afterDecimalPoint) {\r\n    \r\n    String tempString = doubleToString(value, afterDecimalPoint);\r\n    char[] result;\r\n    int dotPosition;\r\n\r\n    if ((afterDecimalPoint \u003e= width) \r\n        || (tempString.indexOf('E') != -1)) { // Protects sci notation\r\n      return tempString;\r\n    }\r\n\r\n    // Initialize result\r\n    result = new char[width];\r\n    for (int i = 0; i \u003c result.length; i++) {\r\n      result[i] = ' ';\r\n    }\r\n\r\n    if (afterDecimalPoint \u003e 0) {\r\n      // Get position of decimal point and insert decimal point\r\n      dotPosition = tempString.indexOf('.');\r\n      if (dotPosition == -1) {\r\n\tdotPosition = tempString.length();\r\n      } else {\r\n\tresult[width - afterDecimalPoint - 1] = '.';\r\n      }\r\n    } else {\r\n      dotPosition = tempString.length();\r\n    }\r\n    \r\n\r\n    int offset = width - afterDecimalPoint - dotPosition;\r\n    if (afterDecimalPoint \u003e 0) {\r\n      offset--;\r\n    }\r\n\r\n    // Not enough room to decimal align within the supplied width\r\n    if (offset \u003c 0) {\r\n      return tempString;\r\n    }\r\n\r\n    // Copy characters before decimal point\r\n    for (int i = 0; i \u003c dotPosition; i++) {\r\n      result[offset + i] = tempString.charAt(i);\r\n    }\r\n\r\n    // Copy characters after decimal point\r\n    for (int i = dotPosition + 1; i \u003c tempString.length(); i++) {\r\n      result[offset + i] = tempString.charAt(i);\r\n    }\r\n\r\n    return new String(result);\r\n  }\r\n\r\n  /**\r\n   * Returns the basic class of an array class (handles multi-dimensional\r\n   * arrays).\r\n   * @param c        the array to inspect\r\n   * @return         the class of the innermost elements\r\n   */\r\n  public static Class getArrayClass(Class c) {\r\n     if (c.getComponentType().isArray())\r\n        return getArrayClass(c.getComponentType());\r\n     else\r\n        return c.getComponentType();\r\n  }\r\n\r\n  /**\r\n   * Returns the dimensions of the given array. Even though the\r\n   * parameter is of type \"Object\" one can hand over primitve arrays, e.g.\r\n   * int[3] or double[2][4].\r\n   *\r\n   * @param array       the array to determine the dimensions for\r\n   * @return            the dimensions of the array\r\n   */\r\n  public static int getArrayDimensions(Class array) {\r\n    if (array.getComponentType().isArray())\r\n      return 1 + getArrayDimensions(array.getComponentType());\r\n    else\r\n      return 1;\r\n  }\r\n\r\n  /**\r\n   * Returns the dimensions of the given array. Even though the\r\n   * parameter is of type \"Object\" one can hand over primitve arrays, e.g.\r\n   * int[3] or double[2][4].\r\n   *\r\n   * @param array       the array to determine the dimensions for\r\n   * @return            the dimensions of the array\r\n   */\r\n  public static int getArrayDimensions(Object array) {\r\n    return getArrayDimensions(array.getClass());\r\n  }\r\n\r\n  /**\r\n   * Returns the given Array in a string representation. Even though the\r\n   * parameter is of type \"Object\" one can hand over primitve arrays, e.g.\r\n   * int[3] or double[2][4].\r\n   * \r\n   * @param array       the array to return in a string representation\r\n   * @return            the array as string\r\n   */\r\n  public static String arrayToString(Object array) {\r\n    String        result;\r\n    int           dimensions;\r\n    int           i;       \r\n\r\n    result     = \"\";\r\n    dimensions = getArrayDimensions(array);\r\n    \r\n    if (dimensions == 0) {\r\n      result = \"null\";\r\n    }\r\n    else if (dimensions == 1) {\r\n      for (i = 0; i \u003c Array.getLength(array); i++) {\r\n        if (i \u003e 0)\r\n          result += \",\";\r\n        if (Array.get(array, i) == null)\r\n          result += \"null\";\r\n        else\r\n          result += Array.get(array, i).toString();\r\n      }\r\n    }\r\n    else {\r\n      for (i = 0; i \u003c Array.getLength(array); i++) {\r\n        if (i \u003e 0)\r\n          result += \",\";\r\n        result += \"[\" + arrayToString(Array.get(array, i)) + \"]\";\r\n      }\r\n    }\r\n    \r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Tests if a is equal to b.\r\n   *\r\n   * @param a a double\r\n   * @param b a double\r\n   */\r\n  public static /*@pure@*/ boolean eq(double a, double b){\r\n    \r\n    return (a - b \u003c SMALL) \u0026\u0026 (b - a \u003c SMALL); \r\n  }\r\n\r\n  /**\r\n   * Checks if the given array contains any non-empty options.\r\n   *\r\n   * @param options an array of strings\r\n   * @exception Exception if there are any non-empty options\r\n   */\r\n  public static void checkForRemainingOptions(String[] options) \r\n    throws Exception {\r\n    \r\n    int illegalOptionsFound = 0;\r\n    StringBuffer text = new StringBuffer();\r\n\r\n    if (options == null) {\r\n      return;\r\n    }\r\n    for (int i = 0; i \u003c options.length; i++) {\r\n      if (options[i].length() \u003e 0) {\r\n\tillegalOptionsFound++;\r\n\ttext.append(options[i] + ' ');\r\n      }\r\n    }\r\n    if (illegalOptionsFound \u003e 0) {\r\n      throw new Exception(\"Illegal options: \" + text);\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Checks if the given array contains the flag \"-Char\". Stops\r\n   * searching at the first marker \"--\". If the flag is found,\r\n   * it is replaced with the empty string.\r\n   *\r\n   * @param flag the character indicating the flag.\r\n   * @param options the array of strings containing all the options.\r\n   * @return true if the flag was found\r\n   * @exception Exception if an illegal option was found\r\n   */\r\n  public static boolean getFlag(char flag, String[] options) \r\n    throws Exception {\r\n    \r\n    return getFlag(\"\" + flag, options);\r\n  }\r\n  \r\n  /**\r\n   * Checks if the given array contains the flag \"-String\". Stops\r\n   * searching at the first marker \"--\". If the flag is found,\r\n   * it is replaced with the empty string.\r\n   *\r\n   * @param flag the String indicating the flag.\r\n   * @param options the array of strings containing all the options.\r\n   * @return true if the flag was found\r\n   * @exception Exception if an illegal option was found\r\n   */\r\n  public static boolean getFlag(String flag, String[] options) \r\n    throws Exception {\r\n    \r\n    int pos = getOptionPos(flag, options);\r\n\r\n    if (pos \u003e -1)\r\n      options[pos] = \"\";\r\n    \r\n    return (pos \u003e -1);\r\n  }\r\n\r\n  /**\r\n   * Gets an option indicated by a flag \"-Char\" from the given array\r\n   * of strings. Stops searching at the first marker \"--\". Replaces \r\n   * flag and option with empty strings.\r\n   *\r\n   * @param flag the character indicating the option.\r\n   * @param options the array of strings containing all the options.\r\n   * @return the indicated option or an empty string\r\n   * @exception Exception if the option indicated by the flag can't be found\r\n   */\r\n  public static /*@non_null@*/ String getOption(char flag, String[] options) \r\n    throws Exception {\r\n    \r\n    return getOption(\"\" + flag, options);\r\n  }\r\n\r\n  /**\r\n   * Gets an option indicated by a flag \"-String\" from the given array\r\n   * of strings. Stops searching at the first marker \"--\". Replaces \r\n   * flag and option with empty strings.\r\n   *\r\n   * @param flag the String indicating the option.\r\n   * @param options the array of strings containing all the options.\r\n   * @return the indicated option or an empty string\r\n   * @exception Exception if the option indicated by the flag can't be found\r\n   */\r\n  public static /*@non_null@*/ String getOption(String flag, String[] options) \r\n    throws Exception {\r\n\r\n    String newString;\r\n    int i = getOptionPos(flag, options);\r\n\r\n    if (i \u003e -1) {\r\n      if (options[i].equals(\"-\" + flag)) {\r\n\tif (i + 1 == options.length) {\r\n\t  throw new Exception(\"No value given for -\" + flag + \" option.\");\r\n\t}\r\n\toptions[i] = \"\";\r\n\tnewString = new String(options[i + 1]);\r\n\toptions[i + 1] = \"\";\r\n\treturn newString;\r\n      }\r\n      if (options[i].charAt(1) == '-') {\r\n\treturn \"\";\r\n      }\r\n    }\r\n    \r\n    return \"\";\r\n  }\r\n\r\n  /**\r\n   * Gets the index of an option or flag indicated by a flag \"-Char\" from \r\n   * the given array of strings. Stops searching at the first marker \"--\".\r\n   *\r\n   * @param flag \tthe character indicating the option.\r\n   * @param options \tthe array of strings containing all the options.\r\n   * @return \t\tthe position if found, or -1 otherwise\r\n   */\r\n  public static int getOptionPos(char flag, String[] options) {\r\n     return getOptionPos(\"\" + flag, options);\r\n  }\r\n\r\n  /**\r\n   * Gets the index of an option or flag indicated by a flag \"-String\" from \r\n   * the given array of strings. Stops searching at the first marker \"--\".\r\n   *\r\n   * @param flag \tthe String indicating the option.\r\n   * @param options \tthe array of strings containing all the options.\r\n   * @return \t\tthe position if found, or -1 otherwise\r\n   */\r\n  public static int getOptionPos(String flag, String[] options) {\r\n    if (options == null)\r\n      return -1;\r\n    \r\n    for (int i = 0; i \u003c options.length; i++) {\r\n      if ((options[i].length() \u003e 0) \u0026\u0026 (options[i].charAt(0) == '-')) {\r\n\t// Check if it is a negative number\r\n\ttry {\r\n\t  Double.valueOf(options[i]);\r\n\t} \r\n\tcatch (NumberFormatException e) {\r\n\t  // found?\r\n\t  if (options[i].equals(\"-\" + flag))\r\n\t    return i;\r\n\t  // did we reach \"--\"?\r\n\t  if (options[i].charAt(1) == '-')\r\n\t    return -1;\r\n\t}\r\n      }\r\n    }\r\n    \r\n    return -1;\r\n  }\r\n\r\n  /**\r\n   * Quotes a string if it contains special characters.\r\n   * \r\n   * The following rules are applied:\r\n   *\r\n   * A character is backquoted version of it is one \r\n   * of \u003ctt\u003e\" ' % \\ \\n \\r \\t\u003c/tt\u003e.\r\n   *\r\n   * A string is enclosed within single quotes if a character has been\r\n   * backquoted using the previous rule above or contains \r\n   * \u003ctt\u003e{ }\u003c/tt\u003e or is exactly equal to the strings \r\n   * \u003ctt\u003e, ? space or \"\"\u003c/tt\u003e (empty string).\r\n   *\r\n   * A quoted question mark distinguishes it from the missing value which\r\n   * is represented as an unquoted question mark in arff files.\r\n   *\r\n   * @param string \tthe string to be quoted\r\n   * @return \t\tthe string (possibly quoted)\r\n   * @see\t\t#unquote(String)\r\n   */\r\n  public static /*@pure@*/ String quote(String string) {\r\n      boolean quote = false;\r\n\r\n      // backquote the following characters \r\n      if ((string.indexOf('\\n') != -1) || (string.indexOf('\\r') != -1) || \r\n\t  (string.indexOf('\\'') != -1) || (string.indexOf('\"') != -1) || \r\n\t  (string.indexOf('\\\\') != -1) || \r\n\t  (string.indexOf('\\t') != -1) || (string.indexOf('%') != -1)) {\r\n\t  string = backQuoteChars(string);\r\n\t  quote = true;\r\n      }\r\n\r\n      // Enclose the string in 's if the string contains a recently added\r\n      // backquote or contains one of the following characters.\r\n      if((quote == true) || \r\n\t (string.indexOf('{') != -1) || (string.indexOf('}') != -1) ||\r\n\t (string.indexOf(',') != -1) || (string.equals(\"?\")) ||\r\n\t (string.indexOf(' ') != -1) || (string.equals(\"\"))) {\r\n\t  string = (\"'\".concat(string)).concat(\"'\");\r\n      }\r\n\r\n      return string;\r\n  }\r\n\r\n  /**\r\n   * unquotes are previously quoted string (but only if necessary), i.e., it\r\n   * removes the single quotes around it. Inverse to quote(String).\r\n   * \r\n   * @param string\tthe string to process\r\n   * @return\t\tthe unquoted string\r\n   * @see\t\t#quote(String)\r\n   */\r\n  public static String unquote(String string) {\r\n    if (string.startsWith(\"'\") \u0026\u0026 string.endsWith(\"'\")) {\r\n      string = string.substring(1, string.length() - 1);\r\n      \r\n      if ((string.indexOf(\"\\\\n\") != -1) || (string.indexOf(\"\\\\r\") != -1) || \r\n\t  (string.indexOf(\"\\\\'\") != -1) || (string.indexOf(\"\\\\\\\"\") != -1) || \r\n\t  (string.indexOf(\"\\\\\\\\\") != -1) || \r\n\t  (string.indexOf(\"\\\\t\") != -1) || (string.indexOf(\"\\\\%\") != -1)) {\r\n\tstring = unbackQuoteChars(string);\r\n      }\r\n    }\r\n\r\n    return string;\r\n  }\r\n\r\n  /**\r\n   * Converts carriage returns and new lines in a string into \\r and \\n.\r\n   * Backquotes the following characters: ` \" \\ \\t and %\r\n   * \r\n   * @param string \tthe string\r\n   * @return \t\tthe converted string\r\n   * @see\t\t#unbackQuoteChars(String)\r\n   */\r\n  public static /*@pure@*/ String backQuoteChars(String string) {\r\n\r\n    int index;\r\n    StringBuffer newStringBuffer;\r\n\r\n    // replace each of the following characters with the backquoted version\r\n    char   charsFind[] =    {'\\\\',   '\\'',  '\\t',  '\\n',  '\\r',  '\"',    '%'};\r\n    String charsReplace[] = {\"\\\\\\\\\", \"\\\\'\", \"\\\\t\", \"\\\\n\", \"\\\\r\", \"\\\\\\\"\", \"\\\\%\"};\r\n    for (int i = 0; i \u003c charsFind.length; i++) {\r\n      if (string.indexOf(charsFind[i]) != -1 ) {\r\n\tnewStringBuffer = new StringBuffer();\r\n\twhile ((index = string.indexOf(charsFind[i])) != -1) {\r\n\t  if (index \u003e 0) {\r\n\t    newStringBuffer.append(string.substring(0, index));\r\n\t  }\r\n\t  newStringBuffer.append(charsReplace[i]);\r\n\t  if ((index + 1) \u003c string.length()) {\r\n\t    string = string.substring(index + 1);\r\n\t  } else {\r\n\t    string = \"\";\r\n\t  }\r\n\t}\r\n\tnewStringBuffer.append(string);\r\n\tstring = newStringBuffer.toString();\r\n      }\r\n    }\r\n\r\n    return string;\r\n  }\r\n\r\n  /**\r\n   * Converts carriage returns and new lines in a string into \\r and \\n.\r\n   *\r\n   * @param string the string\r\n   * @return the converted string\r\n   */\r\n  public static String convertNewLines(String string) {\r\n    int index;\r\n\r\n    // Replace with \\n\r\n    StringBuffer newStringBuffer = new StringBuffer();\r\n    while ((index = string.indexOf('\\n')) != -1) {\r\n      if (index \u003e 0) {\r\n\tnewStringBuffer.append(string.substring(0, index));\r\n      }\r\n      newStringBuffer.append('\\\\');\r\n      newStringBuffer.append('n');\r\n      if ((index + 1) \u003c string.length()) {\r\n\tstring = string.substring(index + 1);\r\n      } else {\r\n\tstring = \"\";\r\n      }\r\n    }\r\n    newStringBuffer.append(string);\r\n    string = newStringBuffer.toString();\r\n\r\n    // Replace with \\r\r\n    newStringBuffer = new StringBuffer();\r\n    while ((index = string.indexOf('\\r')) != -1) {\r\n      if (index \u003e 0) {\r\n\tnewStringBuffer.append(string.substring(0, index));\r\n      }\r\n      newStringBuffer.append('\\\\');\r\n      newStringBuffer.append('r');\r\n      if ((index + 1) \u003c string.length()){\r\n\tstring = string.substring(index + 1);\r\n      } else {\r\n\tstring = \"\";\r\n      }\r\n    }\r\n    newStringBuffer.append(string);\r\n    return newStringBuffer.toString();\r\n  }\r\n\r\n  /**\r\n   * Reverts \\r and \\n in a string into carriage returns and new lines.\r\n   * \r\n   * @param string the string\r\n   * @return the converted string\r\n   */\r\n  public static String revertNewLines(String string) {\r\n    int index;\r\n\r\n    // Replace with \\n\r\n    StringBuffer newStringBuffer = new StringBuffer();\r\n    while ((index = string.indexOf(\"\\\\n\")) != -1) {\r\n      if (index \u003e 0) {\r\n\tnewStringBuffer.append(string.substring(0, index));\r\n      }\r\n      newStringBuffer.append('\\n');\r\n      if ((index + 2) \u003c string.length()) {\r\n\tstring = string.substring(index + 2);\r\n      } else {\r\n\tstring = \"\";\r\n      }\r\n    }\r\n    newStringBuffer.append(string);\r\n    string = newStringBuffer.toString();\r\n\r\n    // Replace with \\r\r\n    newStringBuffer = new StringBuffer();\r\n    while ((index = string.indexOf(\"\\\\r\")) != -1) {\r\n      if (index \u003e 0) {\r\n\tnewStringBuffer.append(string.substring(0, index));\r\n      }\r\n      newStringBuffer.append('\\r');\r\n      if ((index + 2) \u003c string.length()){\r\n\tstring = string.substring(index + 2);\r\n      } else {\r\n\tstring = \"\";\r\n      }\r\n    }\r\n    newStringBuffer.append(string);\r\n    \r\n    return newStringBuffer.toString();\r\n  }\r\n\r\n  /**\r\n   * Returns the secondary set of options (if any) contained in\r\n   * the supplied options array. The secondary set is defined to\r\n   * be any options after the first \"--\". These options are removed from\r\n   * the original options array.\r\n   *\r\n   * @param options the input array of options\r\n   * @return the array of secondary options\r\n   */\r\n  public static String[] partitionOptions(String[] options) {\r\n\r\n    for (int i = 0; i \u003c options.length; i++) {\r\n      if (options[i].equals(\"--\")) {\r\n\toptions[i++] = \"\";\r\n\tString[] result = new String [options.length - i];\r\n\tfor (int j = i; j \u003c options.length; j++) {\r\n\t  result[j - i] = options[j];\r\n\t  options[j] = \"\";\r\n\t}\r\n\treturn result;\r\n      }\r\n    }\r\n    return new String [0];\r\n  }\r\n    \r\n  /**\r\n   * The inverse operation of backQuoteChars().\r\n   * Converts back-quoted carriage returns and new lines in a string \r\n   * to the corresponding character ('\\r' and '\\n').\r\n   * Also \"un\"-back-quotes the following characters: ` \" \\ \\t and %\r\n   *\r\n   * @param string \tthe string\r\n   * @return \t\tthe converted string\r\n   * @see\t\t#backQuoteChars(String)\r\n   */\r\n  public static String unbackQuoteChars(String string) {\r\n\r\n    int index;\r\n    StringBuffer newStringBuffer;\r\n    \r\n    // replace each of the following characters with the backquoted version\r\n    String charsFind[]    = {\"\\\\\\\\\", \"\\\\'\", \"\\\\t\", \"\\\\n\", \"\\\\r\", \"\\\\\\\"\", \"\\\\%\"};\r\n    char   charsReplace[] = {'\\\\',   '\\'',  '\\t',  '\\n',  '\\r',  '\"',    '%'};\r\n    int pos[] = new int[charsFind.length];\r\n    int\tcurPos;\r\n    \r\n    String str = new String(string);\r\n    newStringBuffer = new StringBuffer();\r\n    while (str.length() \u003e 0) {\r\n      // get positions and closest character to replace\r\n      curPos = str.length();\r\n      index  = -1;\r\n      for (int i = 0; i \u003c pos.length; i++) {\r\n\tpos[i] = str.indexOf(charsFind[i]);\r\n\tif ( (pos[i] \u003e -1) \u0026\u0026 (pos[i] \u003c curPos) ) {\r\n\t  index  = i;\r\n\t  curPos = pos[i];\r\n\t}\r\n      }\r\n      \r\n      // replace character if found, otherwise finished\r\n      if (index == -1) {\r\n\tnewStringBuffer.append(str);\r\n\tstr = \"\";\r\n      }\r\n      else {\r\n\tnewStringBuffer.append(str.substring(0, pos[index]));\r\n\tnewStringBuffer.append(charsReplace[index]);\r\n\tstr = str.substring(pos[index] + charsFind[index].length());\r\n      }\r\n    }\r\n\r\n    return newStringBuffer.toString();\r\n  }    \r\n  \r\n  /**\r\n   * Split up a string containing options into an array of strings,\r\n   * one for each option.\r\n   *\r\n   * @param \t\tquotedOptionString the string containing the options\r\n   * @return \t\tthe array of options\r\n   * @throws Exception \tin case of an unterminated string, unknown character or\r\n   * \t\t\ta parse error\r\n   */\r\n  public static String[] splitOptions(String quotedOptionString) throws Exception{\r\n\r\n    FastVector optionsVec = new FastVector();\r\n    String str = new String(quotedOptionString);\r\n    int i;\r\n    \r\n    while (true){\r\n\r\n      //trimLeft \r\n      i = 0;\r\n      while ((i \u003c str.length()) \u0026\u0026 (Character.isWhitespace(str.charAt(i)))) i++;\r\n      str = str.substring(i);\r\n      \r\n      //stop when str is empty\r\n      if (str.length() == 0) break;\r\n      \r\n      //if str start with a double quote\r\n      if (str.charAt(0) == '\"'){\r\n\t\r\n\t//find the first not anti-slached double quote\r\n\ti = 1;\r\n\twhile(i \u003c str.length()){\r\n\t  if (str.charAt(i) == str.charAt(0)) break;\r\n\t  if (str.charAt(i) == '\\\\'){\r\n\t    i += 1;\r\n\t    if (i \u003e= str.length()) \r\n\t      throw new Exception(\"String should not finish with \\\\\");\r\n\t  }\r\n\t  i += 1;\r\n\t}\r\n\tif (i \u003e= str.length()) throw new Exception(\"Quote parse error.\");\r\n\t\r\n\t//add the founded string to the option vector (without quotes)\r\n\tString optStr = str.substring(1,i);\r\n\toptStr = unbackQuoteChars(optStr);\r\n\toptionsVec.addElement(optStr);\r\n\tstr = str.substring(i+1);\r\n      } else {\r\n\t//find first whiteSpace\r\n\ti=0;\r\n\twhile((i \u003c str.length()) \u0026\u0026 (!Character.isWhitespace(str.charAt(i)))) i++;\r\n\t\r\n\t//add the founded string to the option vector\r\n\tString optStr = str.substring(0,i);\r\n\toptionsVec.addElement(optStr);\r\n\tstr = str.substring(i);\r\n      }\r\n    }\r\n    \r\n    //convert optionsVec to an array of String\r\n    String[] options = new String[optionsVec.size()];\r\n    for (i = 0; i \u003c optionsVec.size(); i++) {\r\n      options[i] = (String)optionsVec.elementAt(i);\r\n    }\r\n    return options;\r\n  }    \r\n\r\n  /**\r\n   * Joins all the options in an option array into a single string,\r\n   * as might be used on the command line.\r\n   *\r\n   * @param optionArray the array of options\r\n   * @return the string containing all options.\r\n   */\r\n  public static String joinOptions(String[] optionArray) {\r\n\r\n    String optionString = \"\";\r\n    for (int i = 0; i \u003c optionArray.length; i++) {\r\n      if (optionArray[i].equals(\"\")) {\r\n\tcontinue;\r\n      }\r\n      boolean escape = false;\r\n      for (int n = 0; n \u003c optionArray[i].length(); n++) {\r\n\tif (Character.isWhitespace(optionArray[i].charAt(n))) {\r\n\t  escape = true;\r\n\t  break;\r\n\t}\r\n      }\r\n      if (escape) {\r\n\toptionString += '\"' + backQuoteChars(optionArray[i]) + '\"';\r\n      } else {\r\n\toptionString += optionArray[i];\r\n      }\r\n      optionString += \" \";\r\n    }\r\n    return optionString.trim();\r\n  }\r\n  \r\n  /**\r\n   * Creates a new instance of an object given it's class name and\r\n   * (optional) arguments to pass to it's setOptions method. If the\r\n   * object implements OptionHandler and the options parameter is\r\n   * non-null, the object will have it's options set. Example use:\u003cp\u003e\r\n   *\r\n   * \u003ccode\u003e \u003cpre\u003e\r\n   * String classifierName = Utils.getOption('W', options);\r\n   * Classifier c = (Classifier)Utils.forName(Classifier.class,\r\n   *                                          classifierName,\r\n   *                                          options);\r\n   * setClassifier(c);\r\n   * \u003c/pre\u003e\u003c/code\u003e\r\n   *\r\n   * @param classType the class that the instantiated object should\r\n   * be assignable to -- an exception is thrown if this is not the case\r\n   * @param className the fully qualified class name of the object\r\n   * @param options an array of options suitable for passing to setOptions. May\r\n   * be null. Any options accepted by the object will be removed from the\r\n   * array.\r\n   * @return the newly created object, ready for use.\r\n   * @exception Exception if the class name is invalid, or if the\r\n   * class is not assignable to the desired class type, or the options\r\n   * supplied are not acceptable to the object\r\n   */\r\n  public static Object forName(Class classType,\r\n\t\t\t       String className,\r\n\t\t\t       String[] options) throws Exception {\r\n\r\n    Class c = null;\r\n    try {\r\n      c = Class.forName(className);\r\n    } catch (Exception ex) {\r\n      throw new Exception(\"Can't find class called: \" + className);\r\n    }\r\n    if (!classType.isAssignableFrom(c)) {\r\n      throw new Exception(classType.getName() + \" is not assignable from \"\r\n\t\t\t  + className);\r\n    }\r\n    Object o = c.newInstance();\r\n    if ((o instanceof OptionHandler)\r\n\t\u0026\u0026 (options != null)) {\r\n      ((OptionHandler)o).setOptions(options);\r\n      Utils.checkForRemainingOptions(options);\r\n    }\r\n    return o;\r\n  }\r\n\r\n  /**\r\n   * Computes entropy for an array of integers.\r\n   *\r\n   * @param counts array of counts\r\n   * @return - a log2 a - b log2 b - c log2 c + (a+b+c) log2 (a+b+c)\r\n   * when given array [a b c]\r\n   */\r\n  public static /*@pure@*/ double info(int counts[]) {\r\n    \r\n    int total = 0;\r\n    double x = 0;\r\n    for (int j = 0; j \u003c counts.length; j++) {\r\n      x -= xlogx(counts[j]);\r\n      total += counts[j];\r\n    }\r\n    return x + xlogx(total);\r\n  }\r\n\r\n  /**\r\n   * Tests if a is smaller or equal to b.\r\n   *\r\n   * @param a a double\r\n   * @param b a double\r\n   */\r\n  public static /*@pure@*/ boolean smOrEq(double a,double b) {\r\n    \r\n    return (a-b \u003c SMALL);\r\n  }\r\n\r\n  /**\r\n   * Tests if a is greater or equal to b.\r\n   *\r\n   * @param a a double\r\n   * @param b a double\r\n   */\r\n  public static /*@pure@*/ boolean grOrEq(double a,double b) {\r\n    \r\n    return (b-a \u003c SMALL);\r\n  }\r\n  \r\n  /**\r\n   * Tests if a is smaller than b.\r\n   *\r\n   * @param a a double\r\n   * @param b a double\r\n   */\r\n  public static /*@pure@*/ boolean sm(double a,double b) {\r\n    \r\n    return (b-a \u003e SMALL);\r\n  }\r\n\r\n  /**\r\n   * Tests if a is greater than b.\r\n   *\r\n   * @param a a double\r\n   * @param b a double \r\n   */\r\n  public static /*@pure@*/ boolean gr(double a,double b) {\r\n    \r\n    return (a-b \u003e SMALL);\r\n  }\r\n\r\n  /**\r\n   * Returns the kth-smallest value in the array.\r\n   *\r\n   * @param array the array of integers\r\n   * @param k the value of k\r\n   * @return the kth-smallest value\r\n   */\r\n  public static double kthSmallestValue(int[] array, int k) {\r\n\r\n    int[] index = new int[array.length];\r\n    \r\n    for (int i = 0; i \u003c index.length; i++) {\r\n      index[i] = i;\r\n    }\r\n\r\n    return array[index[select(array, index, 0, array.length - 1, k)]];\r\n  }\r\n\r\n  /**\r\n   * Returns the kth-smallest value in the array\r\n   *\r\n   * @param array the array of double\r\n   * @param k the value of k\r\n   * @return the kth-smallest value\r\n   */\r\n  public static double kthSmallestValue(double[] array, int k) {\r\n\r\n    int[] index = new int[array.length];\r\n    \r\n    for (int i = 0; i \u003c index.length; i++) {\r\n      index[i] = i;\r\n    }\r\n\r\n    return array[index[select(array, index, 0, array.length - 1, k)]];\r\n  }\r\n\r\n  /**\r\n   * Returns the logarithm of a for base 2.\r\n   *\r\n   * @param a \ta double\r\n   * @return\tthe logarithm for base 2\r\n   */\r\n  public static /*@pure@*/ double log2(double a) {\r\n    \r\n    return Math.log(a) / log2;\r\n  }\r\n\r\n  /**\r\n   * Returns index of maximum element in a given\r\n   * array of doubles. First maximum is returned.\r\n   *\r\n   * @param doubles the array of doubles\r\n   * @return the index of the maximum element\r\n   */\r\n  public static /*@pure@*/ int maxIndex(double[] doubles) {\r\n\r\n    double maximum = 0;\r\n    int maxIndex = 0;\r\n\r\n    for (int i = 0; i \u003c doubles.length; i++) {\r\n      if ((i == 0) || (doubles[i] \u003e maximum)) {\r\n\tmaxIndex = i;\r\n\tmaximum = doubles[i];\r\n      }\r\n    }\r\n\r\n    return maxIndex;\r\n  }\r\n\r\n  /**\r\n   * Returns index of maximum element in a given\r\n   * array of integers. First maximum is returned.\r\n   *\r\n   * @param ints the array of integers\r\n   * @return the index of the maximum element\r\n   */\r\n  public static /*@pure@*/ int maxIndex(int[] ints) {\r\n\r\n    int maximum = 0;\r\n    int maxIndex = 0;\r\n\r\n    for (int i = 0; i \u003c ints.length; i++) {\r\n      if ((i == 0) || (ints[i] \u003e maximum)) {\r\n\tmaxIndex = i;\r\n\tmaximum = ints[i];\r\n      }\r\n    }\r\n\r\n    return maxIndex;\r\n  }\r\n\r\n  /**\r\n   * Computes the mean for an array of doubles.\r\n   *\r\n   * @param vector the array\r\n   * @return the mean\r\n   */\r\n  public static /*@pure@*/ double mean(double[] vector) {\r\n  \r\n    double sum = 0;\r\n\r\n    if (vector.length == 0) {\r\n      return 0;\r\n    }\r\n    for (int i = 0; i \u003c vector.length; i++) {\r\n      sum += vector[i];\r\n    }\r\n    return sum / (double) vector.length;\r\n  }\r\n\r\n  /**\r\n   * Returns index of minimum element in a given\r\n   * array of integers. First minimum is returned.\r\n   *\r\n   * @param ints the array of integers\r\n   * @return the index of the minimum element\r\n   */\r\n  public static /*@pure@*/ int minIndex(int[] ints) {\r\n\r\n    int minimum = 0;\r\n    int minIndex = 0;\r\n\r\n    for (int i = 0; i \u003c ints.length; i++) {\r\n      if ((i == 0) || (ints[i] \u003c minimum)) {\r\n\tminIndex = i;\r\n\tminimum = ints[i];\r\n      }\r\n    }\r\n\r\n    return minIndex;\r\n  }\r\n\r\n  /**\r\n   * Returns index of minimum element in a given\r\n   * array of doubles. First minimum is returned.\r\n   *\r\n   * @param doubles the array of doubles\r\n   * @return the index of the minimum element\r\n   */\r\n  public static /*@pure@*/ int minIndex(double[] doubles) {\r\n\r\n    double minimum = 0;\r\n    int minIndex = 0;\r\n\r\n    for (int i = 0; i \u003c doubles.length; i++) {\r\n      if ((i == 0) || (doubles[i] \u003c minimum)) {\r\n\tminIndex = i;\r\n\tminimum = doubles[i];\r\n      }\r\n    }\r\n\r\n    return minIndex;\r\n  }\r\n\r\n  /**\r\n   * Normalizes the doubles in the array by their sum.\r\n   *\r\n   * @param doubles the array of double\r\n   * @exception IllegalArgumentException if sum is Zero or NaN\r\n   */\r\n  public static void normalize(double[] doubles) {\r\n\r\n    double sum = 0;\r\n    for (int i = 0; i \u003c doubles.length; i++) {\r\n      sum += doubles[i];\r\n    }\r\n    normalize(doubles, sum);\r\n  }\r\n\r\n  /**\r\n   * Normalizes the doubles in the array using the given value.\r\n   *\r\n   * @param doubles the array of double\r\n   * @param sum the value by which the doubles are to be normalized\r\n   * @exception IllegalArgumentException if sum is zero or NaN\r\n   */\r\n  public static void normalize(double[] doubles, double sum) {\r\n\r\n    if (Double.isNaN(sum)) {\r\n      throw new IllegalArgumentException(\"Can't normalize array. Sum is NaN.\");\r\n    }\r\n    if (sum != 0) {\r\n    \t\r\n    \t// MODIFIED isaak: peude darse el caso que sea 0. NO se normaliza y listo.\r\n    \t\r\n      // Maybe this should just be a return.\r\n      //throw new IllegalArgumentException(\"Can't normalize array. Sum is zero.\");\r\n        for (int i = 0; i \u003c doubles.length; i++) {\r\n        \tdoubles[i] /= sum;\r\n        }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Converts an array containing the natural logarithms of\r\n   * probabilities stored in a vector back into probabilities.\r\n   * The probabilities are assumed to sum to one.\r\n   *\r\n   * @param a an array holding the natural logarithms of the probabilities\r\n   * @return the converted array \r\n   */\r\n  public static double[] logs2probs(double[] a) {\r\n\r\n    double max = a[maxIndex(a)];\r\n    double sum = 0.0;\r\n\r\n    double[] result = new double[a.length];\r\n    for(int i = 0; i \u003c a.length; i++) {\r\n      result[i] = Math.exp(a[i] - max);\r\n      sum += result[i];\r\n    }\r\n\r\n    normalize(result, sum);\r\n\r\n    return result;\r\n  } \r\n\r\n  /**\r\n   * Returns the log-odds for a given probabilitiy.\r\n   *\r\n   * @param prob the probabilitiy\r\n   *\r\n   * @return the log-odds after the probability has been mapped to\r\n   * [Utils.SMALL, 1-Utils.SMALL]\r\n   */\r\n  public static /*@pure@*/ double probToLogOdds(double prob) {\r\n\r\n    if (gr(prob, 1) || (sm(prob, 0))) {\r\n      throw new IllegalArgumentException(\"probToLogOdds: probability must \" +\r\n\t\t\t\t     \"be in [0,1] \"+prob);\r\n    }\r\n    double p = SMALL + (1.0 - 2 * SMALL) * prob;\r\n    return Math.log(p / (1 - p));\r\n  }\r\n\r\n  /**\r\n   * Rounds a double to the next nearest integer value. The JDK version\r\n   * of it doesn't work properly.\r\n   *\r\n   * @param value the double value\r\n   * @return the resulting integer value\r\n   */\r\n  public static /*@pure@*/ int round(double value) {\r\n\r\n    int roundedValue = value \u003e 0\r\n      ? (int)(value + 0.5)\r\n      : -(int)(Math.abs(value) + 0.5);\r\n    \r\n    return roundedValue;\r\n  }\r\n\r\n  /**\r\n   * Rounds a double to the next nearest integer value in a probabilistic\r\n   * fashion (e.g. 0.8 has a 20% chance of being rounded down to 0 and a\r\n   * 80% chance of being rounded up to 1). In the limit, the average of\r\n   * the rounded numbers generated by this procedure should converge to\r\n   * the original double.\r\n   *\r\n   * @param value the double value\r\n   * @param rand the random number generator\r\n   * @return the resulting integer value\r\n   */\r\n  public static int probRound(double value, Random rand) {\r\n\r\n    if (value \u003e= 0) {\r\n      double lower = Math.floor(value);\r\n      double prob = value - lower;\r\n      if (rand.nextDouble() \u003c prob) {\r\n\treturn (int)lower + 1;\r\n      } else {\r\n\treturn (int)lower;\r\n      }\r\n    } else {\r\n      double lower = Math.floor(Math.abs(value));\r\n      double prob = Math.abs(value) - lower;\r\n      if (rand.nextDouble() \u003c prob) {\r\n\treturn -((int)lower + 1);\r\n      } else {\r\n\treturn -(int)lower;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Rounds a double to the given number of decimal places.\r\n   *\r\n   * @param value the double value\r\n   * @param afterDecimalPoint the number of digits after the decimal point\r\n   * @return the double rounded to the given precision\r\n   */\r\n  public static /*@pure@*/ double roundDouble(double value,int afterDecimalPoint) {\r\n\r\n    double mask = Math.pow(10.0, (double)afterDecimalPoint);\r\n\r\n    return (double)(Math.round(value * mask)) / mask;\r\n  }\r\n\r\n  /**\r\n   * Sorts a given array of integers in ascending order and returns an \r\n   * array of integers with the positions of the elements of the original \r\n   * array in the sorted array. The sort is stable. (Equal elements remain\r\n   * in their original order.)\r\n   *\r\n   * @param array this array is not changed by the method!\r\n   * @return an array of integers with the positions in the sorted\r\n   * array.\r\n   */\r\n  public static /*@pure@*/ int[] sort(int[] array) {\r\n\r\n    int[] index = new int[array.length];\r\n    int[] newIndex = new int[array.length];\r\n    int[] helpIndex;\r\n    int numEqual;\r\n    \r\n    for (int i = 0; i \u003c index.length; i++) {\r\n      index[i] = i;\r\n    }\r\n    quickSort(array, index, 0, array.length - 1);\r\n\r\n    // Make sort stable\r\n    int i = 0;\r\n    while (i \u003c index.length) {\r\n      numEqual = 1;\r\n      for (int j = i + 1; ((j \u003c index.length)\r\n\t\t\t   \u0026\u0026 (array[index[i]] == array[index[j]]));\r\n\t   j++) {\r\n\tnumEqual++;\r\n      }\r\n      if (numEqual \u003e 1) {\r\n\thelpIndex = new int[numEqual];\r\n\tfor (int j = 0; j \u003c numEqual; j++) {\r\n\t  helpIndex[j] = i + j;\r\n\t}\r\n\tquickSort(index, helpIndex, 0, numEqual - 1);\r\n\tfor (int j = 0; j \u003c numEqual; j++) {\r\n\t  newIndex[i + j] = index[helpIndex[j]];\r\n\t}\r\n\ti += numEqual;\r\n      } else {\r\n\tnewIndex[i] = index[i];\r\n\ti++;\r\n      }\r\n    }\r\n    return newIndex;\r\n  }\r\n\r\n  /**\r\n   * Sorts a given array of doubles in ascending order and returns an\r\n   * array of integers with the positions of the elements of the\r\n   * original array in the sorted array. NOTE THESE CHANGES: the sort\r\n   * is no longer stable and it doesn't use safe floating-point\r\n   * comparisons anymore. Occurrences of Double.NaN are treated as \r\n   * Double.MAX_VALUE\r\n   *\r\n   * @param array this array is not changed by the method!\r\n   * @return an array of integers with the positions in the sorted\r\n   * array.  \r\n   */\r\n  public static /*@pure@*/ int[] sort(/*@non_null@*/ double[] array) {\r\n\r\n    int[] index = new int[array.length];\r\n    array = (double[])array.clone();\r\n    for (int i = 0; i \u003c index.length; i++) {\r\n      index[i] = i;\r\n      if (Double.isNaN(array[i])) {\r\n        array[i] = Double.MAX_VALUE;\r\n      }\r\n    }\r\n    quickSort(array, index, 0, array.length - 1);\r\n    return index;\r\n  }\r\n\r\n  /**\r\n   * Sorts a given array of doubles in ascending order and returns an \r\n   * array of integers with the positions of the elements of the original \r\n   * array in the sorted array. The sort is stable (Equal elements remain\r\n   * in their original order.) Occurrences of Double.NaN are treated as \r\n   * Double.MAX_VALUE\r\n   *\r\n   * @param array this array is not changed by the method!\r\n   * @return an array of integers with the positions in the sorted\r\n   * array.\r\n   */\r\n  public static /*@pure@*/ int[] stableSort(double[] array){\r\n\r\n    int[] index = new int[array.length];\r\n    int[] newIndex = new int[array.length];\r\n    int[] helpIndex;\r\n    int numEqual;\r\n    \r\n    array = (double[])array.clone();\r\n    for (int i = 0; i \u003c index.length; i++) {\r\n      index[i] = i;\r\n      if (Double.isNaN(array[i])) {\r\n        array[i] = Double.MAX_VALUE;\r\n      }\r\n    }\r\n    quickSort(array,index,0,array.length-1);\r\n\r\n    // Make sort stable\r\n\r\n    int i = 0;\r\n    while (i \u003c index.length) {\r\n      numEqual = 1;\r\n      for (int j = i+1; ((j \u003c index.length) \u0026\u0026 Utils.eq(array[index[i]],\r\n\t\t\t\t\t\t\tarray[index[j]])); j++)\r\n\tnumEqual++;\r\n      if (numEqual \u003e 1) {\r\n\thelpIndex = new int[numEqual];\r\n\tfor (int j = 0; j \u003c numEqual; j++)\r\n\t  helpIndex[j] = i+j;\r\n\tquickSort(index, helpIndex, 0, numEqual-1);\r\n\tfor (int j = 0; j \u003c numEqual; j++) \r\n\t  newIndex[i+j] = index[helpIndex[j]];\r\n\ti += numEqual;\r\n      } else {\r\n\tnewIndex[i] = index[i];\r\n\ti++;\r\n      }\r\n    }\r\n\r\n    return newIndex;\r\n  }\r\n\r\n  /**\r\n   * Computes the variance for an array of doubles.\r\n   *\r\n   * @param vector the array\r\n   * @return the variance\r\n   */\r\n  public static /*@pure@*/ double variance(double[] vector) {\r\n  \r\n    double sum = 0, sumSquared = 0;\r\n\r\n    if (vector.length \u003c= 1) {\r\n      return 0;\r\n    }\r\n    for (int i = 0; i \u003c vector.length; i++) {\r\n      sum += vector[i];\r\n      sumSquared += (vector[i] * vector[i]);\r\n    }\r\n    double result = (sumSquared - (sum * sum / (double) vector.length)) / \r\n      (double) (vector.length - 1);\r\n\r\n    // We don't like negative variance\r\n    if (result \u003c 0) {\r\n      return 0;\r\n    } else {\r\n      return result;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Computes the sum of the elements of an array of doubles.\r\n   *\r\n   * @param doubles the array of double\r\n   * @return the sum of the elements\r\n   */\r\n  public static /*@pure@*/ double sum(double[] doubles) {\r\n\r\n    double sum = 0;\r\n\r\n    for (int i = 0; i \u003c doubles.length; i++) {\r\n      sum += doubles[i];\r\n    }\r\n    return sum;\r\n  }\r\n\r\n  /**\r\n   * Computes the sum of the elements of an array of integers.\r\n   *\r\n   * @param ints the array of integers\r\n   * @return the sum of the elements\r\n   */\r\n  public static /*@pure@*/ int sum(int[] ints) {\r\n\r\n    int sum = 0;\r\n\r\n    for (int i = 0; i \u003c ints.length; i++) {\r\n      sum += ints[i];\r\n    }\r\n    return sum;\r\n  }\r\n\r\n  /**\r\n   * Returns c*log2(c) for a given integer value c.\r\n   *\r\n   * @param c an integer value\r\n   * @return c*log2(c) (but is careful to return 0 if c is 0)\r\n   */\r\n  public static /*@pure@*/ double xlogx(int c) {\r\n    \r\n    if (c == 0) {\r\n      return 0.0;\r\n    }\r\n    return c * Utils.log2((double) c);\r\n  }\r\n\r\n  /**\r\n   * Partitions the instances around a pivot. Used by quicksort and\r\n   * kthSmallestValue.\r\n   *\r\n   * @param array the array of doubles to be sorted\r\n   * @param index the index into the array of doubles\r\n   * @param l the first index of the subset \r\n   * @param r the last index of the subset \r\n   *\r\n   * @return the index of the middle element\r\n   */\r\n  private static int partition(double[] array, int[] index, int l, int r) {\r\n    \r\n    double pivot = array[index[(l + r) / 2]];\r\n    int help;\r\n\r\n    while (l \u003c r) {\r\n      while ((array[index[l]] \u003c pivot) \u0026\u0026 (l \u003c r)) {\r\n        l++;\r\n      }\r\n      while ((array[index[r]] \u003e pivot) \u0026\u0026 (l \u003c r)) {\r\n        r--;\r\n      }\r\n      if (l \u003c r) {\r\n        help = index[l];\r\n        index[l] = index[r];\r\n        index[r] = help;\r\n        l++;\r\n        r--;\r\n      }\r\n    }\r\n    if ((l == r) \u0026\u0026 (array[index[r]] \u003e pivot)) {\r\n      r--;\r\n    } \r\n\r\n    return r;\r\n  }\r\n\r\n  /**\r\n   * Partitions the instances around a pivot. Used by quicksort and\r\n   * kthSmallestValue.\r\n   *\r\n   * @param array the array of integers to be sorted\r\n   * @param index the index into the array of integers\r\n   * @param l the first index of the subset \r\n   * @param r the last index of the subset \r\n   *\r\n   * @return the index of the middle element\r\n   */\r\n  private static int partition(int[] array, int[] index, int l, int r) {\r\n    \r\n    double pivot = array[index[(l + r) / 2]];\r\n    int help;\r\n\r\n    while (l \u003c r) {\r\n      while ((array[index[l]] \u003c pivot) \u0026\u0026 (l \u003c r)) {\r\n        l++;\r\n      }\r\n      while ((array[index[r]] \u003e pivot) \u0026\u0026 (l \u003c r)) {\r\n        r--;\r\n      }\r\n      if (l \u003c r) {\r\n        help = index[l];\r\n        index[l] = index[r];\r\n        index[r] = help;\r\n        l++;\r\n        r--;\r\n      }\r\n    }\r\n    if ((l == r) \u0026\u0026 (array[index[r]] \u003e pivot)) {\r\n      r--;\r\n    } \r\n\r\n    return r;\r\n  }\r\n  \r\n  /**\r\n   * Implements quicksort according to Manber's \"Introduction to\r\n   * Algorithms\".\r\n   *\r\n   * @param array the array of doubles to be sorted\r\n   * @param index the index into the array of doubles\r\n   * @param left the first index of the subset to be sorted\r\n   * @param right the last index of the subset to be sorted\r\n   */\r\n  //@ requires 0 \u003c= first \u0026\u0026 first \u003c= right \u0026\u0026 right \u003c array.length;\r\n  //@ requires (\\forall int i; 0 \u003c= i \u0026\u0026 i \u003c index.length; 0 \u003c= index[i] \u0026\u0026 index[i] \u003c array.length);\r\n  //@ requires array != index;\r\n  //  assignable index;\r\n  private static void quickSort(/*@non_null@*/ double[] array, /*@non_null@*/ int[] index, \r\n                                int left, int right) {\r\n\r\n    if (left \u003c right) {\r\n      int middle = partition(array, index, left, right);\r\n      quickSort(array, index, left, middle);\r\n      quickSort(array, index, middle + 1, right);\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Implements quicksort according to Manber's \"Introduction to\r\n   * Algorithms\".\r\n   *\r\n   * @param array the array of integers to be sorted\r\n   * @param index the index into the array of integers\r\n   * @param left the first index of the subset to be sorted\r\n   * @param right the last index of the subset to be sorted\r\n   */\r\n  //@ requires 0 \u003c= first \u0026\u0026 first \u003c= right \u0026\u0026 right \u003c array.length;\r\n  //@ requires (\\forall int i; 0 \u003c= i \u0026\u0026 i \u003c index.length; 0 \u003c= index[i] \u0026\u0026 index[i] \u003c array.length);\r\n  //@ requires array != index;\r\n  //  assignable index;\r\n  private static void quickSort(/*@non_null@*/ int[] array, /*@non_null@*/  int[] index, \r\n                                int left, int right) {\r\n\r\n    if (left \u003c right) {\r\n      int middle = partition(array, index, left, right);\r\n      quickSort(array, index, left, middle);\r\n      quickSort(array, index, middle + 1, right);\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Implements computation of the kth-smallest element according\r\n   * to Manber's \"Introduction to Algorithms\".\r\n   *\r\n   * @param array the array of double\r\n   * @param index the index into the array of doubles\r\n   * @param left the first index of the subset \r\n   * @param right the last index of the subset \r\n   * @param k the value of k\r\n   *\r\n   * @return the index of the kth-smallest element\r\n   */\r\n  //@ requires 0 \u003c= first \u0026\u0026 first \u003c= right \u0026\u0026 right \u003c array.length;\r\n  private static int select(/*@non_null@*/ double[] array, /*@non_null@*/ int[] index, \r\n                            int left, int right, int k) {\r\n    \r\n    if (left == right) {\r\n      return left;\r\n    } else {\r\n      int middle = partition(array, index, left, right);\r\n      if ((middle - left + 1) \u003e= k) {\r\n        return select(array, index, left, middle, k);\r\n      } else {\r\n        return select(array, index, middle + 1, right, k - (middle - left + 1));\r\n      }\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Implements computation of the kth-smallest element according\r\n   * to Manber's \"Introduction to Algorithms\".\r\n   *\r\n   * @param array the array of integers\r\n   * @param index the index into the array of integers\r\n   * @param left the first index of the subset \r\n   * @param right the last index of the subset \r\n   * @param k the value of k\r\n   *\r\n   * @return the index of the kth-smallest element\r\n   */\r\n  //@ requires 0 \u003c= first \u0026\u0026 first \u003c= right \u0026\u0026 right \u003c array.length;\r\n  private static int select(/*@non_null@*/ int[] array, /*@non_null@*/ int[] index, \r\n                            int left, int right, int k) {\r\n    \r\n    if (left == right) {\r\n      return left;\r\n    } else {\r\n      int middle = partition(array, index, left, right);\r\n      if ((middle - left + 1) \u003e= k) {\r\n        return select(array, index, left, middle, k);\r\n      } else {\r\n        return select(array, index, middle + 1, right, k - (middle - left + 1));\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Main method for testing this class.\r\n   *\r\n   * @param ops some dummy options\r\n   */\r\n  public static void main(String[] ops) {\r\n\r\n    double[] doublesWithNaN = {4.5, 6.7, Double.NaN, 3.4, 4.8, 1.2, 3.4};\r\n    double[] doubles = {4.5, 6.7, 6.7, 3.4, 4.8, 1.2, 3.4, 6.7, 6.7, 3.4};\r\n    int[] ints = {12, 6, 2, 18, 16, 6, 7, 5, 18, 18, 17};\r\n\r\n    try {\r\n\r\n      // Option handling\r\n      System.out.println(\"First option split up:\");\r\n      if (ops.length \u003e 0) {\r\n\tString[] firstOptionSplitUp = Utils.splitOptions(ops[0]);\r\n\tfor (int i = 0; i \u003c firstOptionSplitUp.length; i ++) {\r\n\t  System.out.println(firstOptionSplitUp[i]);\r\n\t}\r\n      }\t\t\t\t\t       \r\n      System.out.println(\"Partitioned options: \");\r\n      String[] partitionedOptions = Utils.partitionOptions(ops);\r\n      for (int i  = 0; i \u003c partitionedOptions.length; i++) {\r\n\tSystem.out.println(partitionedOptions[i]);\r\n      }\r\n      System.out.println(\"Get position of flag -f: \" + Utils.getOptionPos('f', ops));\r\n      System.out.println(\"Get flag -f: \" + Utils.getFlag('f', ops));\r\n      System.out.println(\"Get position of option -o: \" + Utils.getOptionPos('o', ops));\r\n      System.out.println(\"Get option -o: \" + Utils.getOption('o', ops));\r\n      System.out.println(\"Checking for remaining options... \");\r\n      Utils.checkForRemainingOptions(ops);\r\n      \r\n      // Statistics\r\n      System.out.println(\"Original array with NaN (doubles): \");\r\n      for (int i = 0; i \u003c doublesWithNaN.length; i++) {\r\n\tSystem.out.print(doublesWithNaN[i] + \" \");\r\n      }\r\n      System.out.println();\r\n      System.out.println(\"Original array (doubles): \");\r\n      for (int i = 0; i \u003c doubles.length; i++) {\r\n\tSystem.out.print(doubles[i] + \" \");\r\n      }\r\n      System.out.println();\r\n      System.out.println(\"Original array (ints): \");\r\n      for (int i = 0; i \u003c ints.length; i++) {\r\n\tSystem.out.print(ints[i] + \" \");\r\n      }\r\n      System.out.println();\r\n      System.out.println(\"Correlation: \" + Utils.correlation(doubles, doubles, \r\n\t\t\t\t\t\t\t     doubles.length));\r\n      System.out.println(\"Mean: \" + Utils.mean(doubles));\r\n      System.out.println(\"Variance: \" + Utils.variance(doubles));\r\n      System.out.println(\"Sum (doubles): \" + Utils.sum(doubles));\r\n      System.out.println(\"Sum (ints): \" + Utils.sum(ints));\r\n      System.out.println(\"Max index (doubles): \" + Utils.maxIndex(doubles));\r\n      System.out.println(\"Max index (ints): \" + Utils.maxIndex(ints));\r\n      System.out.println(\"Min index (doubles): \" + Utils.minIndex(doubles));\r\n      System.out.println(\"Min index (ints): \" + Utils.minIndex(ints));\r\n      System.out.println(\"Median (doubles): \" + \r\n                         Utils.kthSmallestValue(doubles, doubles.length / 2));\r\n      System.out.println(\"Median (ints): \" + \r\n                         Utils.kthSmallestValue(ints, ints.length / 2));\r\n\r\n      // Sorting and normalizing\r\n      System.out.println(\"Sorted array with NaN (doubles): \");\r\n      int[] sorted = Utils.sort(doublesWithNaN);\r\n      for (int i = 0; i \u003c doublesWithNaN.length; i++) {\r\n\tSystem.out.print(doublesWithNaN[sorted[i]] + \" \");\r\n      }\r\n      System.out.println();\r\n      System.out.println(\"Sorted array (doubles): \");\r\n      sorted = Utils.sort(doubles);\r\n      for (int i = 0; i \u003c doubles.length; i++) {\r\n\tSystem.out.print(doubles[sorted[i]] + \" \");\r\n      }\r\n      System.out.println();\r\n      System.out.println(\"Sorted array (ints): \");\r\n      sorted = Utils.sort(ints);\r\n      for (int i = 0; i \u003c ints.length; i++) {\r\n\tSystem.out.print(ints[sorted[i]] + \" \");\r\n      }\r\n      System.out.println();\r\n      System.out.println(\"Indices from stable sort (doubles): \");\r\n      sorted = Utils.stableSort(doubles);\r\n      for (int i = 0; i \u003c doubles.length; i++) {\r\n\tSystem.out.print(sorted[i] + \" \");\r\n      }\r\n      System.out.println();\r\n      System.out.println(\"Indices from sort (ints): \");\r\n      sorted = Utils.sort(ints);\r\n      for (int i = 0; i \u003c ints.length; i++) {\r\n\tSystem.out.print(sorted[i] + \" \");\r\n      }\r\n      System.out.println();\r\n      System.out.println(\"Normalized array (doubles): \");\r\n      Utils.normalize(doubles);\r\n      for (int i = 0; i \u003c doubles.length; i++) {\r\n\tSystem.out.print(doubles[i] + \" \");\r\n      }\r\n      System.out.println();\r\n      System.out.println(\"Normalized again (doubles): \");\r\n      Utils.normalize(doubles, Utils.sum(doubles));\r\n      for (int i = 0; i \u003c doubles.length; i++) {\r\n\tSystem.out.print(doubles[i] + \" \");\r\n      }\r\n      System.out.println();\r\n      \r\n      // Pretty-printing\r\n      System.out.println(\"-4.58: \" + Utils.doubleToString(-4.57826535, 2));\r\n      System.out.println(\"-6.78: \" + Utils.doubleToString(-6.78214234, 6,2));\r\n      \r\n      // Comparisons\r\n      System.out.println(\"5.70001 == 5.7 ? \" + Utils.eq(5.70001, 5.7));\r\n      System.out.println(\"5.70001 \u003e 5.7 ? \" + Utils.gr(5.70001, 5.7));\r\n      System.out.println(\"5.70001 \u003e= 5.7 ? \" + Utils.grOrEq(5.70001, 5.7));\r\n      System.out.println(\"5.7 \u003c 5.70001 ? \" + Utils.sm(5.7, 5.70001));\r\n      System.out.println(\"5.7 \u003c= 5.70001 ? \" + Utils.smOrEq(5.7, 5.70001));\r\n      \r\n      // Math\r\n      System.out.println(\"Info (ints): \" + Utils.info(ints));\r\n      System.out.println(\"log2(4.6): \" + Utils.log2(4.6));\r\n      System.out.println(\"5 * log(5): \" + Utils.xlogx(5));\r\n      System.out.println(\"5.5 rounded: \" + Utils.round(5.5));\r\n      System.out.println(\"5.55555 rounded to 2 decimal places: \" + \r\n\t\t\t Utils.roundDouble(5.55555, 2));\r\n      \r\n      // Arrays\r\n      System.out.println(\"Array-Dimensions of 'new int[][]': \" + Utils.getArrayDimensions(new int[][]{}));\r\n      System.out.println(\"Array-Dimensions of 'new int[][]{{1,2,3},{4,5,6}}': \" + Utils.getArrayDimensions(new int[][]{{1,2,3},{4,5,6}}));\r\n      String[][][] s = new String[3][4][];\r\n      System.out.println(\"Array-Dimensions of 'new String[3][4][]': \" + Utils.getArrayDimensions(s));\r\n    } catch (Exception e) {\r\n      e.printStackTrace();\r\n    }\r\n  }\r\n}\r\n  \r\n\r\n",
        "name": "Utils.java",
        "path": "src/org/apache/mahout/keel/Algorithms/SVM/SMO/core/Utils.java",
        "url": "/github.com/triguero/MRPR/-/blob/src/org/apache/mahout/keel/Algorithms/SVM/SMO/core/Utils.java"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 1700,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires 0 \u003c= first \u0026\u0026 first \u003c= right \u0026\u0026 right \u003c array.length;\r"
        },
        {
          "limitHit": false,
          "lineNumber": 1701,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires (\\forall int i; 0 \u003c= i \u0026\u0026 i \u003c index.length; 0 \u003c= index[i] \u0026\u0026 index[i] \u003c array.length);\r"
        },
        {
          "limitHit": false,
          "lineNumber": 1702,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires array != index;\r"
        },
        {
          "limitHit": false,
          "lineNumber": 1723,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires 0 \u003c= first \u0026\u0026 first \u003c= right \u0026\u0026 right \u003c array.length;\r"
        },
        {
          "limitHit": false,
          "lineNumber": 1724,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires (\\forall int i; 0 \u003c= i \u0026\u0026 i \u003c index.length; 0 \u003c= index[i] \u0026\u0026 index[i] \u003c array.length);\r"
        },
        {
          "limitHit": false,
          "lineNumber": 1725,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires array != index;\r"
        },
        {
          "limitHit": false,
          "lineNumber": 1749,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires 0 \u003c= first \u0026\u0026 first \u003c= right \u0026\u0026 right \u003c array.length;\r"
        },
        {
          "limitHit": false,
          "lineNumber": 1777,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires 0 \u003c= first \u0026\u0026 first \u003c= right \u0026\u0026 right \u003c array.length;\r"
        }
      ],
      "repository": {
        "name": "github.com/triguero/MRPR",
        "url": "/github.com/triguero/MRPR"
      }
    },
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "fa027a4d3f254710aad868d79c75ce32aa285ee9"
        },
        "content": "/***********************************************************************\r\n\r\n\tThis file is part of KEEL-software, the Data Mining tool for regression, \r\n\tclassification, clustering, pattern mining and so on.\r\n\r\n\tCopyright (C) 2004-2010\r\n\t\r\n\tF. Herrera (herrera@decsai.ugr.es)\r\n    L. S�nchez (luciano@uniovi.es)\r\n    J. Alcal�-Fdez (jalcala@decsai.ugr.es)\r\n    S. Garc�a (sglopez@ujaen.es)\r\n    A. Fern�ndez (alberto.fernandez@ujaen.es)\r\n    J. Luengo (julianlm@decsai.ugr.es)\r\n\r\n\tThis program is free software: you can redistribute it and/or modify\r\n\tit under the terms of the GNU General Public License as published by\r\n\tthe Free Software Foundation, either version 3 of the License, or\r\n\t(at your option) any later version.\r\n\r\n\tThis program is distributed in the hope that it will be useful,\r\n\tbut WITHOUT ANY WARRANTY; without even the implied warranty of\r\n\tMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n\tGNU General Public License for more details.\r\n\r\n\tYou should have received a copy of the GNU General Public License\r\n\talong with this program.  If not, see http://www.gnu.org/licenses/\r\n  \r\n**********************************************************************/\r\n\r\n/*\r\n *    This program is free software; you can redistribute it and/or modify\r\n *    it under the terms of the GNU General Public License as published by\r\n *    the Free Software Foundation; either version 2 of the License, or\r\n *    (at your option) any later version.\r\n *\r\n *    This program is distributed in the hope that it will be useful,\r\n *    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n *    GNU General Public License for more details.\r\n *\r\n *    You should have received a copy of the GNU General Public License\r\n *    along with this program; if not, write to the Free Software\r\n *    Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.\r\n */\r\n\r\n/*\r\n *    Queue.java\r\n *    Copyright (C) 1999 University of Waikato, Hamilton, New Zealand\r\n *\r\n *    Modified March-May 2004 by Mark Utting to add JML specs\r\n *    (this was done as the example solution of an assignment for a\r\n *     software engineering course, so the specifications are more precise\r\n *     and complete than one would normally do).\r\n *    Passed a static analysis using ESC/Java-2.0a6 with no warnings.\r\n */\r\n\r\npackage org.apache.mahout.keel.Algorithms.SVM.SMO.core;\r\n\r\nimport java.io.Serializable;\r\n\r\n/** \r\n * Class representing a FIFO queue.\r\n *\r\n * @author Len Trigg (trigg@cs.waikato.ac.nz)\r\n * @version $Revision: 1.1 $\r\n */\r\npublic class Queue\r\n  extends Object\r\n  implements Serializable {\r\n\r\n  /** for serialization */\r\n  private static final long serialVersionUID = -1141282001146389780L;\r\n\r\n  /**\r\n   * Represents one node in the queue.\r\n   */\r\n  protected class QueueNode\r\n    implements Serializable {\r\n\r\n    /** for serialization */\r\n    private static final long serialVersionUID = -5119358279412097455L;\r\n\r\n    /** The next node in the queue */\r\n    protected /*@ spec_public @*/ QueueNode m_Next;\r\n\r\n    /** The nodes contents\r\n     */\r\n    protected /*@ non_null spec_public @*/ Object m_Contents;\r\n\r\n    /** \r\n     * Creates a queue node with the given contents \r\n     */\r\n    //@ requires contents != null;\r\n    //@ assignable m_Contents, m_Next;\r\n    //@ ensures m_Contents == contents;\r\n    //@ ensures m_Next == null;\r\n    public QueueNode(Object contents) {\r\n      m_Contents = contents;\r\n      next(null);\r\n    }\r\n\r\n    /**\r\n     * Sets the next node in the queue, and returns it.\r\n     */\r\n    //@ requires next != this ;\r\n    //@ assignable m_Next;\r\n    //@ ensures m_Next==next \u0026\u0026 \\result==next;\r\n    public QueueNode next(QueueNode next) {\r\n      return m_Next = next;\r\n    } //@ nowarn Invariant; // Because it stupidly checks the Queue invariant!\r\n\r\n    /**\r\n     * Gets the next node in the queue. \r\n     */\r\n    //@ ensures \\result == m_Next;\r\n    public /*@ pure @*/ QueueNode next() {\r\n      return m_Next;\r\n    }\r\n\r\n    /**\r\n     * Sets the contents of the node.\r\n     */\r\n    //@ requires contents != null;\r\n    //@ assignable m_Contents;\r\n    //@ ensures  m_Contents == contents \u0026\u0026 \\result == contents;\r\n    public Object contents(Object contents) {\r\n      return m_Contents = contents;\r\n    }\r\n\r\n    /**\r\n     * Returns the contents in the node.\r\n     */\r\n      //@ ensures \\result == m_Contents;\r\n    public /*@ pure @*/ Object contents() {\r\n      return m_Contents;\r\n    }\r\n  }\r\n\r\n  /** Store a reference to the head of the queue */\r\n  protected /*@ spec_public @*/ QueueNode m_Head = null;\r\n\r\n  /** Store a reference to the tail of the queue */\r\n  protected /*@ spec_public @*/ QueueNode m_Tail = null;\r\n\r\n  /** Store the c m_Tail.m_Nexturrent number of elements in the queue */\r\n  protected /*@ spec_public @*/ int m_Size = 0;\r\n\r\n  //@ public invariant m_Head == null \u003c==\u003e m_Tail == null;\r\n  //@public invariant m_Tail != null ==\u003e m_Tail.m_Next == null;\r\n  //@ public invariant m_Size \u003e= 0;\r\n  //@ public invariant m_Size == 0 \u003c==\u003e m_Head == null;\r\n  //@ public invariant m_Size == 1 \u003c==\u003e m_Head != null \u0026\u0026 m_Head == m_Tail;\r\n  //@ public invariant m_Size \u003e 1 ==\u003e m_Head != m_Tail;\r\n  //@ public invariant m_Size \u003e 1 \u003c== m_Head != m_Tail;\r\n\r\n\r\n\r\n  /**\r\n   * Removes all objects from the queue m_Tail.m_Next.\r\n   */\r\n  //@ assignable m_Size, m_Head, m_Tail;\r\n  //@ ensures m_Size == 0;\r\n  //@ ensures m_Head == null;\r\n  //@ ensures m_Tail == null;\r\n  public final synchronized void removeAllElements() {\r\n    m_Size = 0;\r\n    m_Head = null;\r\n    m_Tail = null;\r\n  }\r\n\r\n  /**\r\n   * Appends an object to the back of the queue.\r\n   *\r\n   * @param item the object to be appended\r\n   * @return the object appended\r\n   */\r\n  //@ requires item != null;\r\n  //@ assignable m_Head, m_Tail, m_Tail.m_Next, m_Head.m_Next, m_Size;\r\n  //@ ensures m_Head != null;\r\n  //@ ensures m_Tail != \\old(m_Tail);\r\n  //@ ensures m_Size == \\old(m_Size) + 1;\r\n  //@ ensures \\old(m_Size) == 0 ==\u003e m_Head == m_Tail; \r\n  //@ ensures \\old(m_Size) != 0 ==\u003e m_Head == \\old(m_Head);\r\n  //@ ensures m_Tail.contents() == \\old(item);\r\n  //@ ensures \\result == item;\r\n  public synchronized Object push(Object item) {\r\n    QueueNode newNode = new QueueNode(item);\r\n    \r\n    if (m_Head == null) {\r\n      m_Head = m_Tail = newNode;\r\n    } else {\r\n      m_Tail = m_Tail.next(newNode);\r\n    }\r\n    m_Size++;\r\n    return item;\r\n  }\r\n\r\n  /**\r\n   * Pops an object from the front of the queue.\r\n   *\r\n   * @return the object at the front of the queue\r\n   * @exception RuntimeException if the queue is empty\r\n   */\r\n  //@ assignable m_Head, m_Tail, m_Size;\r\n  //@ ensures m_Size == \\old(m_Size) - 1;\r\n  //@ ensures m_Head == \\old(m_Head.m_Next);\r\n  //@ ensures m_Head != null ==\u003e m_Tail == \\old(m_Tail);\r\n  //@ ensures \\result == \\old(m_Head.m_Contents);\r\n  //@ signals (RuntimeException) \\old(m_Head) == null;\r\n  public synchronized Object pop() \r\n      throws RuntimeException   // REDUNDANT, BUT ESCJAVA REQUIRES THIS\r\n  {\r\n    if (m_Head == null) {\r\n\tthrow new RuntimeException(\"Queue is empty\");\r\n    }\r\n    Object retval = m_Head.contents();\r\n    m_Size--;\r\n    m_Head = m_Head.next();\r\n    // Here we need to either tell ESC/Java some facts about\r\n    // the contents of the list after popping off the head,\r\n    // or turn off the 'invariant' warnings.\r\n    //\r\n    //@ assume m_Size == 0 \u003c==\u003e m_Head == null;\r\n    //@ assume m_Size == 1 \u003c==\u003e m_Head == m_Tail;\r\n    if (m_Head == null) {\r\n      m_Tail = null;\r\n    }\r\n    return retval;\r\n  }\r\n\r\n  /**\r\n   * Gets object from the front of the queue.\r\n   *\r\n   * @return the object at the front of the queue\r\n   * @exception RuntimeException if the queue is empty\r\n   */\r\n  //@ ensures \\result == \\old(m_Head.m_Contents);\r\n  //@ signals (RuntimeException) \\old(m_Head) == null;\r\n  public /*@ pure @*/ synchronized Object peek() \r\n    throws RuntimeException\r\n  { \r\n    if (m_Head == null) {\r\n      throw new RuntimeException(\"Queue is empty\");\r\n    }\r\n    return m_Head.contents();\r\n  }\r\n\r\n  /**\r\n   * Checks if queue is empty.\r\n   * \r\n   * @return true if queue is empty\r\n   */\r\n  //@ ensures \\result \u003c==\u003e m_Head == null;\r\n  public /*@ pure @*/ boolean empty() {\r\n    return m_Head == null;\r\n  }\r\n\r\n  /**\r\n   * Gets queue's size.\r\n   *\r\n   * @return size of queue\r\n   */\r\n  //@ ensures \\result == m_Size;\r\n  public /*@ pure @*/ int size() {\r\n    return m_Size;\r\n  }\r\n\r\n  /**\r\n   * Produces textual description of queue.\r\n   *\r\n   * @return textual description of queue\r\n   */\r\n  //@ also\r\n  //@ ensures \\result != null;\r\n  //@ ensures (* \\result == textual description of the queue *);\r\n  public  /*@ pure @*/ String toString() {\r\n\r\n    String retval = \"Queue Contents \"+m_Size+\" elements\\n\";\r\n    QueueNode current = m_Head;\r\n    if (current == null) {\r\n      return retval + \"Empty\\n\";\r\n    } else {\r\n      while (current != null) {\r\n        retval += current.contents().toString()+\"\\n\"; //@nowarn Modifies;\r\n\tcurrent = current.next();\r\n      }\r\n    }\r\n    return retval;\r\n  } //@ nowarn Post;\r\n\r\n  /**\r\n   * Main method for testing this class.\r\n   *\r\n   * @param argv a set of strings that are pushed on a test queue\r\n   */\r\n  //@ requires argv.length \u003e= 0;\r\n  //@ requires argv != null;\r\n  //@ requires (\\forall int i; 0 \u003c= i \u0026\u0026 i \u003c argv.length; argv[i] != null);\r\n  public static void main(String [] argv) {\r\n\r\n    try {\r\n      Queue queue = new Queue();\r\n      for(int i = 0; i \u003c argv.length; i++) {\r\n\tqueue.push(argv[i]);\r\n      }\r\n      System.out.println(\"After pushing command line arguments\");\r\n      System.out.println(queue.toString());\r\n      while (!queue.empty()) {\r\n\tSystem.out.println(\"Pop: \" + queue.pop().toString());\r\n      }\r\n      // try one more pop, to make sure we get an exception\r\n      try \r\n\t{\r\n\t  queue.pop();\r\n\t  System.out.println(\"ERROR: pop did not throw exception!\");\r\n\t}\r\n      catch (RuntimeException ex)\r\n        {\r\n\t  System.out.println(\"Pop on empty queue correctly gave exception.\");\r\n\t}\r\n    } catch (Exception ex) {\r\n      System.out.println(ex.getMessage());\r\n    }\r\n  }\r\n}\r\n\r\n",
        "name": "Queue.java",
        "path": "src/org/apache/mahout/keel/Algorithms/SVM/SMO/core/Queue.java",
        "url": "/github.com/triguero/MRPR/-/blob/src/org/apache/mahout/keel/Algorithms/SVM/SMO/core/Queue.java"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 92,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires contents != null;\r"
        },
        {
          "limitHit": false,
          "lineNumber": 94,
          "offsetAndLengths": [
            [
              4,
              12
            ]
          ],
          "preview": "    //@ ensures m_Contents == contents;\r"
        },
        {
          "limitHit": false,
          "lineNumber": 95,
          "offsetAndLengths": [
            [
              4,
              12
            ]
          ],
          "preview": "    //@ ensures m_Next == null;\r"
        },
        {
          "limitHit": false,
          "lineNumber": 104,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires next != this ;\r"
        },
        {
          "limitHit": false,
          "lineNumber": 106,
          "offsetAndLengths": [
            [
              4,
              12
            ]
          ],
          "preview": "    //@ ensures m_Next==next \u0026\u0026 \\result==next;\r"
        },
        {
          "limitHit": false,
          "lineNumber": 114,
          "offsetAndLengths": [
            [
              4,
              12
            ]
          ],
          "preview": "    //@ ensures \\result == m_Next;\r"
        },
        {
          "limitHit": false,
          "lineNumber": 122,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires contents != null;\r"
        },
        {
          "limitHit": false,
          "lineNumber": 132,
          "offsetAndLengths": [
            [
              6,
              12
            ]
          ],
          "preview": "      //@ ensures \\result == m_Contents;\r"
        },
        {
          "limitHit": false,
          "lineNumber": 161,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures m_Size == 0;\r"
        },
        {
          "limitHit": false,
          "lineNumber": 162,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures m_Head == null;\r"
        },
        {
          "limitHit": false,
          "lineNumber": 163,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures m_Tail == null;\r"
        },
        {
          "limitHit": false,
          "lineNumber": 176,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires item != null;\r"
        },
        {
          "limitHit": false,
          "lineNumber": 178,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures m_Head != null;\r"
        },
        {
          "limitHit": false,
          "lineNumber": 179,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures m_Tail != \\old(m_Tail);\r"
        },
        {
          "limitHit": false,
          "lineNumber": 180,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures m_Size == \\old(m_Size) + 1;\r"
        },
        {
          "limitHit": false,
          "lineNumber": 181,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures \\old(m_Size) == 0 ==\u003e m_Head == m_Tail; \r"
        },
        {
          "limitHit": false,
          "lineNumber": 182,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures \\old(m_Size) != 0 ==\u003e m_Head == \\old(m_Head);\r"
        },
        {
          "limitHit": false,
          "lineNumber": 183,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures m_Tail.contents() == \\old(item);\r"
        },
        {
          "limitHit": false,
          "lineNumber": 184,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures \\result == item;\r"
        },
        {
          "limitHit": false,
          "lineNumber": 204,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures m_Size == \\old(m_Size) - 1;\r"
        },
        {
          "limitHit": false,
          "lineNumber": 205,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures m_Head == \\old(m_Head.m_Next);\r"
        },
        {
          "limitHit": false,
          "lineNumber": 206,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures m_Head != null ==\u003e m_Tail == \\old(m_Tail);\r"
        },
        {
          "limitHit": false,
          "lineNumber": 207,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures \\result == \\old(m_Head.m_Contents);\r"
        },
        {
          "limitHit": false,
          "lineNumber": 236,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures \\result == \\old(m_Head.m_Contents);\r"
        },
        {
          "limitHit": false,
          "lineNumber": 252,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures \\result \u003c==\u003e m_Head == null;\r"
        },
        {
          "limitHit": false,
          "lineNumber": 262,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures \\result == m_Size;\r"
        },
        {
          "limitHit": false,
          "lineNumber": 273,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures \\result != null;\r"
        },
        {
          "limitHit": false,
          "lineNumber": 274,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures (* \\result == textual description of the queue *);\r"
        },
        {
          "limitHit": false,
          "lineNumber": 295,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires argv.length \u003e= 0;\r"
        },
        {
          "limitHit": false,
          "lineNumber": 296,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires argv != null;\r"
        },
        {
          "limitHit": false,
          "lineNumber": 297,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires (\\forall int i; 0 \u003c= i \u0026\u0026 i \u003c argv.length; argv[i] != null);\r"
        },
        {
          "limitHit": false,
          "lineNumber": 124,
          "offsetAndLengths": [
            [
              4,
              12
            ]
          ],
          "preview": "    //@ ensures  m_Contents == contents \u0026\u0026 \\result == contents;\r"
        }
      ],
      "repository": {
        "name": "github.com/triguero/MRPR",
        "url": "/github.com/triguero/MRPR"
      }
    },
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "fa027a4d3f254710aad868d79c75ce32aa285ee9"
        },
        "content": "/***********************************************************************\r\n\r\n\tThis file is part of KEEL-software, the Data Mining tool for regression, \r\n\tclassification, clustering, pattern mining and so on.\r\n\r\n\tCopyright (C) 2004-2010\r\n\t\r\n\tF. Herrera (herrera@decsai.ugr.es)\r\n    L. S�nchez (luciano@uniovi.es)\r\n    J. Alcal�-Fdez (jalcala@decsai.ugr.es)\r\n    S. Garc�a (sglopez@ujaen.es)\r\n    A. Fern�ndez (alberto.fernandez@ujaen.es)\r\n    J. Luengo (julianlm@decsai.ugr.es)\r\n\r\n\tThis program is free software: you can redistribute it and/or modify\r\n\tit under the terms of the GNU General Public License as published by\r\n\tthe Free Software Foundation, either version 3 of the License, or\r\n\t(at your option) any later version.\r\n\r\n\tThis program is distributed in the hope that it will be useful,\r\n\tbut WITHOUT ANY WARRANTY; without even the implied warranty of\r\n\tMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n\tGNU General Public License for more details.\r\n\r\n\tYou should have received a copy of the GNU General Public License\r\n\talong with this program.  If not, see http://www.gnu.org/licenses/\r\n  \r\n**********************************************************************/\r\n\r\n/*\r\n *    This program is free software; you can redistribute it and/or modify\r\n *    it under the terms of the GNU General Public License as published by\r\n *    the Free Software Foundation; either version 2 of the License, or\r\n *    (at your option) any later version.\r\n *\r\n *    This program is distributed in the hope that it will be useful,\r\n *    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n *    GNU General Public License for more details.\r\n *\r\n *    You should have received a copy of the GNU General Public License\r\n *    along with this program; if not, write to the Free Software\r\n *    Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.\r\n */\r\n\r\n/*\r\n *    FastVector.java\r\n *    Copyright (C) 1999 University of Waikato, Hamilton, New Zealand\r\n *\r\n */\r\n\r\npackage org.apache.mahout.keel.Algorithms.SVM.SMO.core;\r\n\r\nimport java.io.Serializable;\r\nimport java.util.Enumeration;\r\n\r\n/**\r\n * Implements a fast vector class without synchronized\r\n * methods. Replaces java.util.Vector. (Synchronized methods tend to\r\n * be slow.)\r\n *\r\n * @author Eibe Frank (eibe@cs.waikato.ac.nz)\r\n * @version $Revision: 1.1 $\r\n */\r\npublic class FastVector\r\n  implements Copyable, Serializable {\r\n\r\n  /** for serialization */\r\n  private static final long serialVersionUID = -2173635135622930169L;\r\n\r\n  /**\r\n   * Class for enumerating the vector's elements.\r\n   */\r\n  public class FastVectorEnumeration implements Enumeration {\r\n\r\n    /** The counter. */\r\n    private int m_Counter;\r\n    // These JML commands say how m_Counter implements Enumeration\r\n    //@ in moreElements;\r\n    //@ private represents moreElements = m_Counter \u003c m_Vector.size();\r\n    //@ private invariant 0 \u003c= m_Counter \u0026\u0026 m_Counter \u003c= m_Vector.size();\r\n\r\n    /** The vector. */\r\n    private /*@non_null@*/ FastVector m_Vector;\r\n\r\n    /** Special element. Skipped during enumeration. */\r\n    private int m_SpecialElement;\r\n    //@ private invariant -1 \u003c= m_SpecialElement;\r\n    //@ private invariant m_SpecialElement \u003c m_Vector.size();\r\n    //@ private invariant m_SpecialElement\u003e=0 ==\u003e m_Counter!=m_SpecialElement;\r\n\r\n    /**\r\n     * Constructs an enumeration.\r\n     *\r\n     * @param vector the vector which is to be enumerated\r\n     */\r\n    public FastVectorEnumeration(/*@non_null@*/FastVector vector) {\r\n\r\n      m_Counter = 0;\r\n      m_Vector = vector;\r\n      m_SpecialElement = -1;\r\n    }\r\n\r\n    /**\r\n     * Constructs an enumeration with a special element.\r\n     * The special element is skipped during the enumeration.\r\n     *\r\n     * @param vector the vector which is to be enumerated\r\n     * @param special the index of the special element\r\n     */\r\n    //@ requires 0 \u003c= special \u0026\u0026 special \u003c vector.size();\r\n    public FastVectorEnumeration(/*@non_null@*/FastVector vector, int special){\r\n\r\n      m_Vector = vector;\r\n      m_SpecialElement = special;\r\n      if (special == 0) {\r\n\tm_Counter = 1;\r\n      } else {\r\n\tm_Counter = 0;\r\n      }\r\n    }\r\n\r\n\r\n    /**\r\n     * Tests if there are any more elements to enumerate.\r\n     *\r\n     * @return true if there are some elements left\r\n     */\r\n    public final /*@pure@*/ boolean hasMoreElements() {\r\n\r\n      if (m_Counter \u003c m_Vector.size()) {\r\n\treturn true;\r\n      }\r\n      return false;\r\n    }\r\n\r\n    /**\r\n     * Returns the next element.\r\n     *\r\n     * @return the next element to be enumerated\r\n     */\r\n    //@ also requires hasMoreElements();\r\n    public final Object nextElement() {\r\n  \r\n      Object result = m_Vector.elementAt(m_Counter);\r\n\r\n      m_Counter++;\r\n      if (m_Counter == m_SpecialElement) {\r\n\tm_Counter++;\r\n      }\r\n      return result;\r\n    }\r\n  }\r\n\r\n  /** The array of objects. */\r\n  private /*@spec_public@*/ Object[] m_Objects;\r\n  //@ invariant m_Objects != null;\r\n  //@ invariant m_Objects.length \u003e= 0;\r\n\r\n  /** The current size; */\r\n  private /*@spec_public@*/ int m_Size = 0;\r\n  //@ invariant 0 \u003c= m_Size;\r\n  //@ invariant m_Size \u003c= m_Objects.length;\r\n\r\n  /** The capacity increment */\r\n  private /*@spec_public@*/ int m_CapacityIncrement = 1;\r\n  //@ invariant 1 \u003c= m_CapacityIncrement;\r\n  \r\n  /** The capacity multiplier. */\r\n  private /*@spec_public@*/ int m_CapacityMultiplier = 2;\r\n  //@ invariant 1 \u003c= m_CapacityMultiplier;\r\n\r\n  // Make sure the size will increase...\r\n  //@ invariant 3 \u003c= m_CapacityMultiplier + m_CapacityIncrement;\r\n\r\n  /**\r\n   * Constructs an empty vector with initial\r\n   * capacity zero.\r\n   */\r\n  public FastVector() {\r\n  \r\n    m_Objects = new Object[0];\r\n  }\r\n\r\n  /**\r\n   * Constructs a vector with the given capacity.\r\n   *\r\n   * @param capacity the vector's initial capacity\r\n   */\r\n  //@ requires capacity \u003e= 0;\r\n  public FastVector(int capacity) {\r\n\r\n    m_Objects = new Object[capacity];\r\n  }\r\n\r\n  /**\r\n   * Adds an element to this vector. Increases its\r\n   * capacity if its not large enough.\r\n   *\r\n   * @param element the element to add\r\n   */\r\n  public final void addElement(Object element) {\r\n\r\n    Object[] newObjects;\r\n\r\n    if (m_Size == m_Objects.length) {\r\n      newObjects = new Object[m_CapacityMultiplier *\r\n\t\t\t     (m_Objects.length +\r\n\t\t\t      m_CapacityIncrement)];\r\n      System.arraycopy(m_Objects, 0, newObjects, 0, m_Size);\r\n      m_Objects = newObjects;\r\n    }\r\n    m_Objects[m_Size] = element;\r\n    m_Size++;\r\n  }\r\n\r\n  /**\r\n   * Returns the capacity of the vector.\r\n   *\r\n   * @return the capacity of the vector\r\n   */\r\n  //@ ensures \\result == m_Objects.length;\r\n  public final /*@pure@*/ int capacity() {\r\n  \r\n    return m_Objects.length;\r\n  }\r\n\r\n  /**\r\n   * Produces a shallow copy of this vector.\r\n   *\r\n   * @return the new vector\r\n   */\r\n  public final Object copy() {\r\n\r\n    FastVector copy = new FastVector(m_Objects.length);\r\n\r\n    copy.m_Size = m_Size;\r\n    copy.m_CapacityIncrement = m_CapacityIncrement;\r\n    copy.m_CapacityMultiplier = m_CapacityMultiplier;\r\n    System.arraycopy(m_Objects, 0, copy.m_Objects, 0, m_Size);\r\n    return copy;\r\n  }\r\n\r\n  /**\r\n   * Clones the vector and shallow copies all its elements.\r\n   * The elements have to implement the Copyable interface.\r\n   * \r\n   * @return the new vector\r\n   */\r\n  public final Object copyElements() {\r\n\r\n    FastVector copy = new FastVector(m_Objects.length);\r\n\r\n    copy.m_Size = m_Size;\r\n    copy.m_CapacityIncrement = m_CapacityIncrement;\r\n    copy.m_CapacityMultiplier = m_CapacityMultiplier;\r\n    for (int i = 0; i \u003c m_Size; i++) {\r\n      copy.m_Objects[i] = ((Copyable)m_Objects[i]).copy();\r\n    }\r\n    return copy;\r\n  }\r\n\r\n  /**\r\n   * Returns the element at the given position.\r\n   *\r\n   * @param index the element's index\r\n   * @return the element with the given index\r\n   */\r\n  //@ requires 0 \u003c= index;\r\n  //@ requires index \u003c m_Objects.length;\r\n  public final /*@pure@*/ Object elementAt(int index) {\r\n\r\n    return m_Objects[index];\r\n  }\r\n\r\n  /**\r\n   * Returns an enumeration of this vector.\r\n   *\r\n   * @return an enumeration of this vector\r\n   */\r\n  public final /*@pure@*/ Enumeration elements() {\r\n  \r\n    return new FastVectorEnumeration(this);\r\n  }\r\n\r\n  /**\r\n   * Returns an enumeration of this vector, skipping the\r\n   * element with the given index.\r\n   *\r\n   * @param index the element to skip\r\n   * @return an enumeration of this vector\r\n   */\r\n  //@ requires 0 \u003c= index \u0026\u0026 index \u003c size();\r\n  public final /*@pure@*/ Enumeration elements(int index) {\r\n  \r\n    return new FastVectorEnumeration(this, index);\r\n  }\r\n\r\n    /**\r\n     * added by akibriya\r\n     */\r\n  public /*@pure@*/ boolean contains(Object o) {\r\n      if(o==null)\r\n\t  return false;\r\n\r\n      for(int i=0; i\u003cm_Objects.length; i++) \r\n\t  if(o.equals(m_Objects[i]))\r\n\t      return true;\r\n      \r\n      return false;\r\n  }\r\n\r\n\r\n  /**\r\n   * Returns the first element of the vector.\r\n   *\r\n   * @return the first element of the vector\r\n   */\r\n  //@ requires m_Size \u003e 0;\r\n  public final /*@pure@*/ Object firstElement() {\r\n\r\n    return m_Objects[0];\r\n  }\r\n\r\n  /**\r\n   * Searches for the first occurence of the given argument, \r\n   * testing for equality using the equals method. \r\n   *\r\n   * @param element the element to be found\r\n   * @return the index of the first occurrence of the argument \r\n   * in this vector; returns -1 if the object is not found\r\n   */\r\n  public final /*@pure@*/ int indexOf(/*@non_null@*/ Object element) {\r\n\r\n    for (int i = 0; i \u003c m_Size; i++) {\r\n      if (element.equals(m_Objects[i])) {\r\n\treturn i;\r\n      }\r\n    }\r\n    return -1;\r\n  }\r\n\r\n  /**\r\n   * Inserts an element at the given position.\r\n   *\r\n   * @param element the element to be inserted\r\n   * @param index the element's index\r\n   */\r\n  public final void insertElementAt(Object element, int index) {\r\n\r\n    Object[] newObjects;\r\n\r\n    if (m_Size \u003c m_Objects.length) {\r\n      System.arraycopy(m_Objects, index, m_Objects, index + 1, \r\n                       m_Size - index);\r\n      m_Objects[index] = element;\r\n    } else {\r\n      newObjects = new Object[m_CapacityMultiplier *\r\n\t\t\t     (m_Objects.length +\r\n\t\t\t      m_CapacityIncrement)];\r\n      System.arraycopy(m_Objects, 0, newObjects, 0, index);\r\n      newObjects[index] = element;\r\n      System.arraycopy(m_Objects, index, newObjects, index + 1,\r\n\t\t       m_Size - index);\r\n      m_Objects = newObjects;\r\n    }\r\n    m_Size++;\r\n  }\r\n\r\n  /**\r\n   * Returns the last element of the vector.\r\n   *\r\n   * @return the last element of the vector\r\n   */\r\n  //@ requires m_Size \u003e 0;\r\n  public final /*@pure@*/ Object lastElement() {\r\n\r\n    return m_Objects[m_Size - 1];\r\n  }\r\n\r\n  /**\r\n   * Deletes an element from this vector.\r\n   *\r\n   * @param index the index of the element to be deleted\r\n   */\r\n  //@ requires 0 \u003c= index \u0026\u0026 index \u003c m_Size;\r\n  public final void removeElementAt(int index) {\r\n\r\n    System.arraycopy(m_Objects, index + 1, m_Objects, index, \r\n                     m_Size - index - 1);\r\n    m_Size--;\r\n  }\r\n\r\n  /**\r\n   * Removes all components from this vector and sets its \r\n   * size to zero. \r\n   */\r\n  public final void removeAllElements() {\r\n\r\n    m_Objects = new Object[m_Objects.length];\r\n    m_Size = 0;\r\n  }\r\n\r\n  /**\r\n   * Appends all elements of the supplied vector to this vector.\r\n   *\r\n   * @param toAppend the FastVector containing elements to append.\r\n   */\r\n  public final void appendElements(FastVector toAppend) {\r\n\r\n    setCapacity(size() + toAppend.size());\r\n    System.arraycopy(toAppend.m_Objects, 0, m_Objects, size(), toAppend.size());\r\n    m_Size = m_Objects.length;\r\n  }\r\n\r\n  /** \r\n   * Returns all the elements of this vector as an array\r\n   *\r\n   * @return an array containing all the elements of this vector\r\n   */\r\n  public final Object [] toArray() {\r\n\r\n    Object [] newObjects = new Object[size()];\r\n    System.arraycopy(m_Objects, 0, newObjects, 0, size());\r\n    return newObjects;\r\n  }\r\n\r\n  /**\r\n   * Sets the vector's capacity to the given value.\r\n   *\r\n   * @param capacity the new capacity\r\n   */\r\n  public final void setCapacity(int capacity) {\r\n\r\n    Object[] newObjects = new Object[capacity];\r\n   \r\n    System.arraycopy(m_Objects, 0, newObjects, 0, Math.min(capacity, m_Size));\r\n    m_Objects = newObjects;\r\n    if (m_Objects.length \u003c m_Size)\r\n      m_Size = m_Objects.length;\r\n  }\r\n\r\n  /**\r\n   * Sets the element at the given index.\r\n   *\r\n   * @param element the element to be put into the vector\r\n   * @param index the index at which the element is to be placed\r\n   */\r\n  //@ requires 0 \u003c= index \u0026\u0026 index \u003c size();\r\n  public final void setElementAt(Object element, int index) {\r\n\r\n    m_Objects[index] = element;\r\n  }\r\n\r\n  /**\r\n   * Returns the vector's current size.\r\n   *\r\n   * @return the vector's current size\r\n   */\r\n  //@ ensures \\result == m_Size;\r\n  public final /*@pure@*/ int size() {\r\n\r\n    return m_Size;\r\n  }\r\n\r\n  /**\r\n   * Swaps two elements in the vector.\r\n   *\r\n   * @param first index of the first element\r\n   * @param second index of the second element\r\n   */\r\n  //@ requires 0 \u003c= first \u0026\u0026 first \u003c size();\r\n  //@ requires 0 \u003c= second \u0026\u0026 second \u003c size();\r\n  public final void swap(int first, int second) {\r\n\r\n    Object help = m_Objects[first];\r\n\r\n    m_Objects[first] = m_Objects[second];\r\n    m_Objects[second] = help;\r\n  }\r\n\r\n  /**\r\n   * Sets the vector's capacity to its size.\r\n   */\r\n  public final void trimToSize() {\r\n\r\n    Object[] newObjects = new Object[m_Size];\r\n    \r\n    System.arraycopy(m_Objects, 0, newObjects, 0, m_Size);\r\n    m_Objects = newObjects;\r\n  }\r\n}\r\n\r\n\r\n",
        "name": "FastVector.java",
        "path": "src/org/apache/mahout/keel/Algorithms/SVM/SMO/core/FastVector.java",
        "url": "/github.com/triguero/MRPR/-/blob/src/org/apache/mahout/keel/Algorithms/SVM/SMO/core/FastVector.java"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 110,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires 0 \u003c= special \u0026\u0026 special \u003c vector.size();\r"
        },
        {
          "limitHit": false,
          "lineNumber": 189,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires capacity \u003e= 0;\r"
        },
        {
          "limitHit": false,
          "lineNumber": 221,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures \\result == m_Objects.length;\r"
        },
        {
          "limitHit": false,
          "lineNumber": 268,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires 0 \u003c= index;\r"
        },
        {
          "limitHit": false,
          "lineNumber": 269,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires index \u003c m_Objects.length;\r"
        },
        {
          "limitHit": false,
          "lineNumber": 292,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires 0 \u003c= index \u0026\u0026 index \u003c size();\r"
        },
        {
          "limitHit": false,
          "lineNumber": 318,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires m_Size \u003e 0;\r"
        },
        {
          "limitHit": false,
          "lineNumber": 374,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires m_Size \u003e 0;\r"
        },
        {
          "limitHit": false,
          "lineNumber": 385,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires 0 \u003c= index \u0026\u0026 index \u003c m_Size;\r"
        },
        {
          "limitHit": false,
          "lineNumber": 448,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires 0 \u003c= index \u0026\u0026 index \u003c size();\r"
        },
        {
          "limitHit": false,
          "lineNumber": 459,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures \\result == m_Size;\r"
        },
        {
          "limitHit": false,
          "lineNumber": 471,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires 0 \u003c= first \u0026\u0026 first \u003c size();\r"
        },
        {
          "limitHit": false,
          "lineNumber": 472,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires 0 \u003c= second \u0026\u0026 second \u003c size();\r"
        }
      ],
      "repository": {
        "name": "github.com/triguero/MRPR",
        "url": "/github.com/triguero/MRPR"
      }
    },
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "fa027a4d3f254710aad868d79c75ce32aa285ee9"
        },
        "content": "/***********************************************************************\r\n\r\n\tThis file is part of KEEL-software, the Data Mining tool for regression, \r\n\tclassification, clustering, pattern mining and so on.\r\n\r\n\tCopyright (C) 2004-2010\r\n\t\r\n\tF. Herrera (herrera@decsai.ugr.es)\r\n    L. S�nchez (luciano@uniovi.es)\r\n    J. Alcal�-Fdez (jalcala@decsai.ugr.es)\r\n    S. Garc�a (sglopez@ujaen.es)\r\n    A. Fern�ndez (alberto.fernandez@ujaen.es)\r\n    J. Luengo (julianlm@decsai.ugr.es)\r\n\r\n\tThis program is free software: you can redistribute it and/or modify\r\n\tit under the terms of the GNU General Public License as published by\r\n\tthe Free Software Foundation, either version 3 of the License, or\r\n\t(at your option) any later version.\r\n\r\n\tThis program is distributed in the hope that it will be useful,\r\n\tbut WITHOUT ANY WARRANTY; without even the implied warranty of\r\n\tMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n\tGNU General Public License for more details.\r\n\r\n\tYou should have received a copy of the GNU General Public License\r\n\talong with this program.  If not, see http://www.gnu.org/licenses/\r\n  \r\n**********************************************************************/\r\n\r\n/*\r\n *    This program is free software; you can redistribute it and/or modify\r\n *    it under the terms of the GNU General Public License as published by\r\n *    the Free Software Foundation; either version 2 of the License, or\r\n *    (at your option) any later version.\r\n *\r\n *    This program is distributed in the hope that it will be useful,\r\n *    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n *    GNU General Public License for more details.\r\n *\r\n *    You should have received a copy of the GNU General Public License\r\n *    along with this program; if not, write to the Free Software\r\n *    Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.\r\n */\r\n\r\n/*\r\n *    OptionHandler.java\r\n *    Copyright (C) 1999 University of Waikato, Hamilton, New Zealand\r\n *\r\n */\r\n\r\npackage org.apache.mahout.keel.Algorithms.SVM.SMO.core;\r\n\r\nimport java.util.*;\r\n\r\n/** \r\n * Interface to something that understands options.\r\n *\r\n * @author Eibe Frank (eibe@cs.waikato.ac.nz)\r\n * @author Len Trigg (trigg@cs.waikato.ac.nz)\r\n * @version $Revision: 1.1 $\r\n */\r\npublic interface OptionHandler {\r\n\r\n  /**\r\n   * Returns an enumeration of all the available options..\r\n   *\r\n   * @return an enumeration of all available options.\r\n   */\r\n  Enumeration listOptions();\r\n\r\n  /**\r\n   * Sets the OptionHandler's options using the given list. All options\r\n   * will be set (or reset) during this call (i.e. incremental setting\r\n   * of options is not possible).\r\n   *\r\n   * @param options the list of options as an array of strings\r\n   * @exception Exception if an option is not supported\r\n   */\r\n  //@ requires options != null;\r\n  //@ requires \\nonnullelements(options);\r\n  void setOptions(String[] options) throws Exception;\r\n\r\n  /**\r\n   * Gets the current option settings for the OptionHandler.\r\n   *\r\n   * @return the list of current option settings as an array of strings\r\n   */\r\n  //@ ensures \\result != null;\r\n  //@ ensures \\nonnullelements(\\result);\r\n  /*@pure@*/ String[] getOptions();\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
        "name": "OptionHandler.java",
        "path": "src/org/apache/mahout/keel/Algorithms/SVM/SMO/core/OptionHandler.java",
        "url": "/github.com/triguero/MRPR/-/blob/src/org/apache/mahout/keel/Algorithms/SVM/SMO/core/OptionHandler.java"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 79,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires options != null;\r"
        },
        {
          "limitHit": false,
          "lineNumber": 80,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires \\nonnullelements(options);\r"
        },
        {
          "limitHit": false,
          "lineNumber": 88,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures \\result != null;\r"
        },
        {
          "limitHit": false,
          "lineNumber": 89,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures \\nonnullelements(\\result);\r"
        }
      ],
      "repository": {
        "name": "github.com/triguero/MRPR",
        "url": "/github.com/triguero/MRPR"
      }
    },
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "fa027a4d3f254710aad868d79c75ce32aa285ee9"
        },
        "content": "/***********************************************************************\r\n\r\n\tThis file is part of KEEL-software, the Data Mining tool for regression, \r\n\tclassification, clustering, pattern mining and so on.\r\n\r\n\tCopyright (C) 2004-2010\r\n\t\r\n\tF. Herrera (herrera@decsai.ugr.es)\r\n    L. S�nchez (luciano@uniovi.es)\r\n    J. Alcal�-Fdez (jalcala@decsai.ugr.es)\r\n    S. Garc�a (sglopez@ujaen.es)\r\n    A. Fern�ndez (alberto.fernandez@ujaen.es)\r\n    J. Luengo (julianlm@decsai.ugr.es)\r\n\r\n\tThis program is free software: you can redistribute it and/or modify\r\n\tit under the terms of the GNU General Public License as published by\r\n\tthe Free Software Foundation, either version 3 of the License, or\r\n\t(at your option) any later version.\r\n\r\n\tThis program is distributed in the hope that it will be useful,\r\n\tbut WITHOUT ANY WARRANTY; without even the implied warranty of\r\n\tMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n\tGNU General Public License for more details.\r\n\r\n\tYou should have received a copy of the GNU General Public License\r\n\talong with this program.  If not, see http://www.gnu.org/licenses/\r\n  \r\n**********************************************************************/\r\n\r\n/*\r\n *    This program is free software; you can redistribute it and/or modify\r\n *    it under the terms of the GNU General Public License as published by\r\n *    the Free Software Foundation; either version 2 of the License, or\r\n *    (at your option) any later version.\r\n *\r\n *    This program is distributed in the hope that it will be useful,\r\n *    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n *    GNU General Public License for more details.\r\n *\r\n *    You should have received a copy of the GNU General Public License\r\n *    along with this program; if not, write to the Free Software\r\n *    Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.\r\n */\r\n\r\n/*\r\n *    Utils.java\r\n *    Copyright (C) 1999-2004 University of Waikato, Hamilton, New Zealand\r\n *\r\n */\r\n\r\npackage org.apache.mahout.keel.Algorithms.Statistical_Classifiers.Logistic.core;\r\n\r\nimport java.lang.Math;\r\nimport java.lang.reflect.Array;\r\nimport java.util.Properties;\r\nimport java.io.File;\r\nimport java.io.FileInputStream;\r\nimport java.util.Random;\r\n\r\n/**\r\n * Class implementing some simple utility methods.\r\n *\r\n * @author Eibe Frank \r\n * @author Yong Wang \r\n * @author Len Trigg \r\n * @author Julien Prados\r\n * @version $Revision: 1.1 $\r\n */\r\npublic final class Utils {\r\n\r\n  /** The natural logarithm of 2. */\r\n  public static double log2 = Math.log(2);\r\n\r\n  /** The small deviation allowed in double comparisons */\r\n  public static double SMALL = 1e-6;\r\n\r\n  \r\n  /**\r\n   * Reads properties that inherit from three locations. Properties\r\n   * are first defined in the system resource location (i.e. in the\r\n   * CLASSPATH).  These default properties must exist. Properties\r\n   * defined in the users home directory (optional) override default\r\n   * settings. Properties defined in the current directory (optional)\r\n   * override all these settings.\r\n   *\r\n   * @param resourceName the location of the resource that should be\r\n   * loaded.  e.g.: \"keel.Algorithms.Statistical_Classifiers.Logistic.core/Utils.props\". (The use of hardcoded\r\n   * forward slashes here is OK - see\r\n   * jdk1.1/docs/guide/misc/resources.html) This routine will also\r\n   * look for the file (in this case) \"Utils.props\" in the users home\r\n   * directory and the current directory.\r\n   * @return the Properties\r\n   * @exception Exception if no default properties are defined, or if\r\n   * an error occurs reading the properties files.  \r\n   */\r\n  public static Properties readProperties(String resourceName)\r\n    throws Exception {\r\n\r\n    Properties defaultProps = new Properties();\r\n    try {\r\n      // Apparently hardcoded slashes are OK here\r\n      // jdk1.1/docs/guide/misc/resources.html\r\n      defaultProps.load(ClassLoader.getSystemResourceAsStream(resourceName));\r\n    } catch (Exception ex) {\r\n/*      throw new Exception(\"Problem reading default properties: \"\r\n\t+ ex.getMessage()); */\r\n      System.err.println(\"Warning, unable to load properties file from \"\r\n\t\t\t +\"system resource (Utils.java)\");\r\n    }\r\n\r\n    // Hardcoded slash is OK here\r\n    // eg: see jdk1.1/docs/guide/misc/resources.html\r\n    int slInd = resourceName.lastIndexOf('/');\r\n    if (slInd != -1) {\r\n      resourceName = resourceName.substring(slInd + 1);\r\n    }\r\n\r\n    // Allow a properties file in the home directory to override\r\n    Properties userProps = new Properties(defaultProps);    \r\n    File propFile = new File(System.getProperties().getProperty(\"user.home\")\r\n                             + File.separatorChar\r\n                             + resourceName);\r\n    if (propFile.exists()) {\r\n      try {\r\n        userProps.load(new FileInputStream(propFile));\r\n      } catch (Exception ex) {\r\n        throw new Exception(\"Problem reading user properties: \" + propFile);\r\n      }\r\n    }\r\n\r\n    // Allow a properties file in the current directory to override\r\n    Properties localProps = new Properties(userProps);\r\n    propFile = new File(resourceName);\r\n    if (propFile.exists()) {\r\n      try {\r\n        localProps.load(new FileInputStream(propFile));\r\n      } catch (Exception ex) {\r\n        throw new Exception(\"Problem reading local properties: \" + propFile);\r\n      }\r\n    }\r\n    \r\n    return localProps;\r\n  }\r\n\r\n  /**\r\n   * Returns the correlation coefficient of two double vectors.\r\n   *\r\n   * @param y1 double vector 1\r\n   * @param y2 double vector 2\r\n   * @param n the length of two double vectors\r\n   * @return the correlation coefficient\r\n   */\r\n  public static final double correlation(double y1[],double y2[],int n) {\r\n\r\n    int i;\r\n    double av1 = 0.0, av2 = 0.0, y11 = 0.0, y22 = 0.0, y12 = 0.0, c;\r\n    \r\n    if (n \u003c= 1) {\r\n      return 1.0;\r\n    }\r\n    for (i = 0; i \u003c n; i++) {\r\n      av1 += y1[i];\r\n      av2 += y2[i];\r\n    }\r\n    av1 /= (double) n;\r\n    av2 /= (double) n;\r\n    for (i = 0; i \u003c n; i++) {\r\n      y11 += (y1[i] - av1) * (y1[i] - av1);\r\n      y22 += (y2[i] - av2) * (y2[i] - av2);\r\n      y12 += (y1[i] - av1) * (y2[i] - av2);\r\n    }\r\n    if (y11 * y22 == 0.0) {\r\n      c=1.0;\r\n    } else {\r\n      c = y12 / Math.sqrt(Math.abs(y11 * y22));\r\n    }\r\n    \r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * Removes all occurrences of a string from another string.\r\n   *\r\n   * @param inString the string to remove substrings from.\r\n   * @param substring the substring to remove.\r\n   * @return the input string with occurrences of substring removed.\r\n   */\r\n  public static String removeSubstring(String inString, String substring) {\r\n\r\n    StringBuffer result = new StringBuffer();\r\n    int oldLoc = 0, loc = 0;\r\n    while ((loc = inString.indexOf(substring, oldLoc))!= -1) {\r\n      result.append(inString.substring(oldLoc, loc));\r\n      oldLoc = loc + substring.length();\r\n    }\r\n    result.append(inString.substring(oldLoc));\r\n    return result.toString();\r\n  }\r\n\r\n  /**\r\n   * Replaces with a new string, all occurrences of a string from \r\n   * another string.\r\n   *\r\n   * @param inString the string to replace substrings in.\r\n   * @param subString the substring to replace.\r\n   * @param replaceString the replacement substring\r\n   * @return the input string with occurrences of substring replaced.\r\n   */\r\n  public static String replaceSubstring(String inString, String subString,\r\n\t\t\t\t\tString replaceString) {\r\n\r\n    StringBuffer result = new StringBuffer();\r\n    int oldLoc = 0, loc = 0;\r\n    while ((loc = inString.indexOf(subString, oldLoc))!= -1) {\r\n      result.append(inString.substring(oldLoc, loc));\r\n      result.append(replaceString);\r\n      oldLoc = loc + subString.length();\r\n    }\r\n    result.append(inString.substring(oldLoc));\r\n    return result.toString();\r\n  }\r\n\r\n\r\n  /**\r\n   * Pads a string to a specified length, inserting spaces on the left\r\n   * as required. If the string is too long, characters are removed (from\r\n   * the right).\r\n   *\r\n   * @param inString the input string\r\n   * @param length the desired length of the output string\r\n   * @return the output string\r\n   */\r\n  public static String padLeft(String inString, int length) {\r\n\r\n    return fixStringLength(inString, length, false);\r\n  }\r\n  \r\n  /**\r\n   * Pads a string to a specified length, inserting spaces on the right\r\n   * as required. If the string is too long, characters are removed (from\r\n   * the right).\r\n   *\r\n   * @param inString the input string\r\n   * @param length the desired length of the output string\r\n   * @return the output string\r\n   */\r\n  public static String padRight(String inString, int length) {\r\n\r\n    return fixStringLength(inString, length, true);\r\n  }\r\n  \r\n  /**\r\n   * Pads a string to a specified length, inserting spaces as\r\n   * required. If the string is too long, characters are removed (from\r\n   * the right).\r\n   *\r\n   * @param inString the input string\r\n   * @param length the desired length of the output string\r\n   * @param right true if inserted spaces should be added to the right\r\n   * @return the output string\r\n   */\r\n  private static /*@pure@*/ String fixStringLength(String inString, int length,\r\n\t\t\t\t\tboolean right) {\r\n\r\n    if (inString.length() \u003c length) {\r\n      while (inString.length() \u003c length) {\r\n\tinString = (right ? inString.concat(\" \") : \" \".concat(inString));\r\n      }\r\n    } else if (inString.length() \u003e length) {\r\n      inString = inString.substring(0, length);\r\n    }\r\n    return inString;\r\n  }\r\n \r\n  /**\r\n   * Rounds a double and converts it into String.\r\n   *\r\n   * @param value the double value\r\n   * @param afterDecimalPoint the (maximum) number of digits permitted\r\n   * after the decimal point\r\n   * @return the double as a formatted string\r\n   */\r\n  public static /*@pure@*/ String doubleToString(double value, int afterDecimalPoint) {\r\n    \r\n    StringBuffer stringBuffer;\r\n    double temp;\r\n    int dotPosition;\r\n    long precisionValue;\r\n    \r\n    temp = value * Math.pow(10.0, afterDecimalPoint);\r\n    if (Math.abs(temp) \u003c Long.MAX_VALUE) {\r\n      precisionValue = \t(temp \u003e 0) ? (long)(temp + 0.5) \r\n                                   : -(long)(Math.abs(temp) + 0.5);\r\n      if (precisionValue == 0) {\r\n\tstringBuffer = new StringBuffer(String.valueOf(0));\r\n      } else {\r\n\tstringBuffer = new StringBuffer(String.valueOf(precisionValue));\r\n      }\r\n      if (afterDecimalPoint == 0) {\r\n\treturn stringBuffer.toString();\r\n      }\r\n      dotPosition = stringBuffer.length() - afterDecimalPoint;\r\n      while (((precisionValue \u003c 0) \u0026\u0026 (dotPosition \u003c 1)) ||\r\n\t     (dotPosition \u003c 0)) {\r\n\tif (precisionValue \u003c 0) {\r\n\t  stringBuffer.insert(1, '0');\r\n\t} else {\r\n\t  stringBuffer.insert(0, '0');\r\n\t}\r\n\tdotPosition++;\r\n      }\r\n      stringBuffer.insert(dotPosition, '.');\r\n      if ((precisionValue \u003c 0) \u0026\u0026 (stringBuffer.charAt(1) == '.')) {\r\n\tstringBuffer.insert(1, '0');\r\n      } else if (stringBuffer.charAt(0) == '.') {\r\n\tstringBuffer.insert(0, '0');\r\n      }\r\n      int currentPos = stringBuffer.length() - 1;\r\n      while ((currentPos \u003e dotPosition) \u0026\u0026\r\n\t     (stringBuffer.charAt(currentPos) == '0')) {\r\n\tstringBuffer.setCharAt(currentPos--, ' ');\r\n      }\r\n      if (stringBuffer.charAt(currentPos) == '.') {\r\n\tstringBuffer.setCharAt(currentPos, ' ');\r\n      }\r\n      \r\n      return stringBuffer.toString().trim();\r\n    }\r\n    return new String(\"\" + value);\r\n  }\r\n\r\n  /**\r\n   * Rounds a double and converts it into a formatted decimal-justified String.\r\n   * Trailing 0's are replaced with spaces.\r\n   *\r\n   * @param value the double value\r\n   * @param width the width of the string\r\n   * @param afterDecimalPoint the number of digits after the decimal point\r\n   * @return the double as a formatted string\r\n   */\r\n  public static /*@pure@*/ String doubleToString(double value, int width,\r\n\t\t\t\t      int afterDecimalPoint) {\r\n    \r\n    String tempString = doubleToString(value, afterDecimalPoint);\r\n    char[] result;\r\n    int dotPosition;\r\n\r\n    if ((afterDecimalPoint \u003e= width) \r\n        || (tempString.indexOf('E') != -1)) { // Protects sci notation\r\n      return tempString;\r\n    }\r\n\r\n    // Initialize result\r\n    result = new char[width];\r\n    for (int i = 0; i \u003c result.length; i++) {\r\n      result[i] = ' ';\r\n    }\r\n\r\n    if (afterDecimalPoint \u003e 0) {\r\n      // Get position of decimal point and insert decimal point\r\n      dotPosition = tempString.indexOf('.');\r\n      if (dotPosition == -1) {\r\n\tdotPosition = tempString.length();\r\n      } else {\r\n\tresult[width - afterDecimalPoint - 1] = '.';\r\n      }\r\n    } else {\r\n      dotPosition = tempString.length();\r\n    }\r\n    \r\n\r\n    int offset = width - afterDecimalPoint - dotPosition;\r\n    if (afterDecimalPoint \u003e 0) {\r\n      offset--;\r\n    }\r\n\r\n    // Not enough room to decimal align within the supplied width\r\n    if (offset \u003c 0) {\r\n      return tempString;\r\n    }\r\n\r\n    // Copy characters before decimal point\r\n    for (int i = 0; i \u003c dotPosition; i++) {\r\n      result[offset + i] = tempString.charAt(i);\r\n    }\r\n\r\n    // Copy characters after decimal point\r\n    for (int i = dotPosition + 1; i \u003c tempString.length(); i++) {\r\n      result[offset + i] = tempString.charAt(i);\r\n    }\r\n\r\n    return new String(result);\r\n  }\r\n\r\n  /**\r\n   * Returns the basic class of an array class (handles multi-dimensional\r\n   * arrays).\r\n   * @param c        the array to inspect\r\n   * @return         the class of the innermost elements\r\n   */\r\n  public static Class getArrayClass(Class c) {\r\n     if (c.getComponentType().isArray())\r\n        return getArrayClass(c.getComponentType());\r\n     else\r\n        return c.getComponentType();\r\n  }\r\n\r\n  /**\r\n   * Returns the dimensions of the given array. Even though the\r\n   * parameter is of type \"Object\" one can hand over primitve arrays, e.g.\r\n   * int[3] or double[2][4].\r\n   *\r\n   * @param array       the array to determine the dimensions for\r\n   * @return            the dimensions of the array\r\n   */\r\n  public static int getArrayDimensions(Class array) {\r\n    if (array.getComponentType().isArray())\r\n      return 1 + getArrayDimensions(array.getComponentType());\r\n    else\r\n      return 1;\r\n  }\r\n\r\n  /**\r\n   * Returns the dimensions of the given array. Even though the\r\n   * parameter is of type \"Object\" one can hand over primitve arrays, e.g.\r\n   * int[3] or double[2][4].\r\n   *\r\n   * @param array       the array to determine the dimensions for\r\n   * @return            the dimensions of the array\r\n   */\r\n  public static int getArrayDimensions(Object array) {\r\n    return getArrayDimensions(array.getClass());\r\n  }\r\n\r\n  /**\r\n   * Returns the given Array in a string representation. Even though the\r\n   * parameter is of type \"Object\" one can hand over primitve arrays, e.g.\r\n   * int[3] or double[2][4].\r\n   * \r\n   * @param array       the array to return in a string representation\r\n   * @return            the array as string\r\n   */\r\n  public static String arrayToString(Object array) {\r\n    String        result;\r\n    int           dimensions;\r\n    int           i;       \r\n\r\n    result     = \"\";\r\n    dimensions = getArrayDimensions(array);\r\n    \r\n    if (dimensions == 0) {\r\n      result = \"null\";\r\n    }\r\n    else if (dimensions == 1) {\r\n      for (i = 0; i \u003c Array.getLength(array); i++) {\r\n        if (i \u003e 0)\r\n          result += \",\";\r\n        if (Array.get(array, i) == null)\r\n          result += \"null\";\r\n        else\r\n          result += Array.get(array, i).toString();\r\n      }\r\n    }\r\n    else {\r\n      for (i = 0; i \u003c Array.getLength(array); i++) {\r\n        if (i \u003e 0)\r\n          result += \",\";\r\n        result += \"[\" + arrayToString(Array.get(array, i)) + \"]\";\r\n      }\r\n    }\r\n    \r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Tests if a is equal to b.\r\n   *\r\n   * @param a a double\r\n   * @param b a double\r\n   */\r\n  public static /*@pure@*/ boolean eq(double a, double b){\r\n    \r\n    return (a - b \u003c SMALL) \u0026\u0026 (b - a \u003c SMALL); \r\n  }\r\n\r\n  /**\r\n   * Checks if the given array contains any non-empty options.\r\n   *\r\n   * @param options an array of strings\r\n   * @exception Exception if there are any non-empty options\r\n   */\r\n  public static void checkForRemainingOptions(String[] options) \r\n    throws Exception {\r\n    \r\n    int illegalOptionsFound = 0;\r\n    StringBuffer text = new StringBuffer();\r\n\r\n    if (options == null) {\r\n      return;\r\n    }\r\n    for (int i = 0; i \u003c options.length; i++) {\r\n      if (options[i].length() \u003e 0) {\r\n\tillegalOptionsFound++;\r\n\ttext.append(options[i] + ' ');\r\n      }\r\n    }\r\n    if (illegalOptionsFound \u003e 0) {\r\n      throw new Exception(\"Illegal options: \" + text);\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Checks if the given array contains the flag \"-Char\". Stops\r\n   * searching at the first marker \"--\". If the flag is found,\r\n   * it is replaced with the empty string.\r\n   *\r\n   * @param flag the character indicating the flag.\r\n   * @param options the array of strings containing all the options.\r\n   * @return true if the flag was found\r\n   * @exception Exception if an illegal option was found\r\n   */\r\n  public static boolean getFlag(char flag, String[] options) \r\n    throws Exception {\r\n    \r\n    return getFlag(\"\" + flag, options);\r\n  }\r\n  \r\n  /**\r\n   * Checks if the given array contains the flag \"-String\". Stops\r\n   * searching at the first marker \"--\". If the flag is found,\r\n   * it is replaced with the empty string.\r\n   *\r\n   * @param flag the String indicating the flag.\r\n   * @param options the array of strings containing all the options.\r\n   * @return true if the flag was found\r\n   * @exception Exception if an illegal option was found\r\n   */\r\n  public static boolean getFlag(String flag, String[] options) \r\n    throws Exception {\r\n    \r\n    int pos = getOptionPos(flag, options);\r\n\r\n    if (pos \u003e -1)\r\n      options[pos] = \"\";\r\n    \r\n    return (pos \u003e -1);\r\n  }\r\n\r\n  /**\r\n   * Gets an option indicated by a flag \"-Char\" from the given array\r\n   * of strings. Stops searching at the first marker \"--\". Replaces \r\n   * flag and option with empty strings.\r\n   *\r\n   * @param flag the character indicating the option.\r\n   * @param options the array of strings containing all the options.\r\n   * @return the indicated option or an empty string\r\n   * @exception Exception if the option indicated by the flag can't be found\r\n   */\r\n  public static /*@non_null@*/ String getOption(char flag, String[] options) \r\n    throws Exception {\r\n    \r\n    return getOption(\"\" + flag, options);\r\n  }\r\n\r\n  /**\r\n   * Gets an option indicated by a flag \"-String\" from the given array\r\n   * of strings. Stops searching at the first marker \"--\". Replaces \r\n   * flag and option with empty strings.\r\n   *\r\n   * @param flag the String indicating the option.\r\n   * @param options the array of strings containing all the options.\r\n   * @return the indicated option or an empty string\r\n   * @exception Exception if the option indicated by the flag can't be found\r\n   */\r\n  public static /*@non_null@*/ String getOption(String flag, String[] options) \r\n    throws Exception {\r\n\r\n    String newString;\r\n    int i = getOptionPos(flag, options);\r\n\r\n    if (i \u003e -1) {\r\n      if (options[i].equals(\"-\" + flag)) {\r\n\tif (i + 1 == options.length) {\r\n\t  throw new Exception(\"No value given for -\" + flag + \" option.\");\r\n\t}\r\n\toptions[i] = \"\";\r\n\tnewString = new String(options[i + 1]);\r\n\toptions[i + 1] = \"\";\r\n\treturn newString;\r\n      }\r\n      if (options[i].charAt(1) == '-') {\r\n\treturn \"\";\r\n      }\r\n    }\r\n    \r\n    return \"\";\r\n  }\r\n\r\n  /**\r\n   * Gets the index of an option or flag indicated by a flag \"-Char\" from \r\n   * the given array of strings. Stops searching at the first marker \"--\".\r\n   *\r\n   * @param flag \tthe character indicating the option.\r\n   * @param options \tthe array of strings containing all the options.\r\n   * @return \t\tthe position if found, or -1 otherwise\r\n   */\r\n  public static int getOptionPos(char flag, String[] options) {\r\n     return getOptionPos(\"\" + flag, options);\r\n  }\r\n\r\n  /**\r\n   * Gets the index of an option or flag indicated by a flag \"-String\" from \r\n   * the given array of strings. Stops searching at the first marker \"--\".\r\n   *\r\n   * @param flag \tthe String indicating the option.\r\n   * @param options \tthe array of strings containing all the options.\r\n   * @return \t\tthe position if found, or -1 otherwise\r\n   */\r\n  public static int getOptionPos(String flag, String[] options) {\r\n    if (options == null)\r\n      return -1;\r\n    \r\n    for (int i = 0; i \u003c options.length; i++) {\r\n      if ((options[i].length() \u003e 0) \u0026\u0026 (options[i].charAt(0) == '-')) {\r\n\t// Check if it is a negative number\r\n\ttry {\r\n\t  Double.valueOf(options[i]);\r\n\t} \r\n\tcatch (NumberFormatException e) {\r\n\t  // found?\r\n\t  if (options[i].equals(\"-\" + flag))\r\n\t    return i;\r\n\t  // did we reach \"--\"?\r\n\t  if (options[i].charAt(1) == '-')\r\n\t    return -1;\r\n\t}\r\n      }\r\n    }\r\n    \r\n    return -1;\r\n  }\r\n\r\n  /**\r\n   * Quotes a string if it contains special characters.\r\n   * \r\n   * The following rules are applied:\r\n   *\r\n   * A character is backquoted version of it is one \r\n   * of \u003ctt\u003e\" ' % \\ \\n \\r \\t\u003c/tt\u003e.\r\n   *\r\n   * A string is enclosed within single quotes if a character has been\r\n   * backquoted using the previous rule above or contains \r\n   * \u003ctt\u003e{ }\u003c/tt\u003e or is exactly equal to the strings \r\n   * \u003ctt\u003e, ? space or \"\"\u003c/tt\u003e (empty string).\r\n   *\r\n   * A quoted question mark distinguishes it from the missing value which\r\n   * is represented as an unquoted question mark in arff files.\r\n   *\r\n   * @param string \tthe string to be quoted\r\n   * @return \t\tthe string (possibly quoted)\r\n   * @see\t\t#unquote(String)\r\n   */\r\n  public static /*@pure@*/ String quote(String string) {\r\n      boolean quote = false;\r\n\r\n      // backquote the following characters \r\n      if ((string.indexOf('\\n') != -1) || (string.indexOf('\\r') != -1) || \r\n\t  (string.indexOf('\\'') != -1) || (string.indexOf('\"') != -1) || \r\n\t  (string.indexOf('\\\\') != -1) || \r\n\t  (string.indexOf('\\t') != -1) || (string.indexOf('%') != -1)) {\r\n\t  string = backQuoteChars(string);\r\n\t  quote = true;\r\n      }\r\n\r\n      // Enclose the string in 's if the string contains a recently added\r\n      // backquote or contains one of the following characters.\r\n      if((quote == true) || \r\n\t (string.indexOf('{') != -1) || (string.indexOf('}') != -1) ||\r\n\t (string.indexOf(',') != -1) || (string.equals(\"?\")) ||\r\n\t (string.indexOf(' ') != -1) || (string.equals(\"\"))) {\r\n\t  string = (\"'\".concat(string)).concat(\"'\");\r\n      }\r\n\r\n      return string;\r\n  }\r\n\r\n  /**\r\n   * unquotes are previously quoted string (but only if necessary), i.e., it\r\n   * removes the single quotes around it. Inverse to quote(String).\r\n   * \r\n   * @param string\tthe string to process\r\n   * @return\t\tthe unquoted string\r\n   * @see\t\t#quote(String)\r\n   */\r\n  public static String unquote(String string) {\r\n    if (string.startsWith(\"'\") \u0026\u0026 string.endsWith(\"'\")) {\r\n      string = string.substring(1, string.length() - 1);\r\n      \r\n      if ((string.indexOf(\"\\\\n\") != -1) || (string.indexOf(\"\\\\r\") != -1) || \r\n\t  (string.indexOf(\"\\\\'\") != -1) || (string.indexOf(\"\\\\\\\"\") != -1) || \r\n\t  (string.indexOf(\"\\\\\\\\\") != -1) || \r\n\t  (string.indexOf(\"\\\\t\") != -1) || (string.indexOf(\"\\\\%\") != -1)) {\r\n\tstring = unbackQuoteChars(string);\r\n      }\r\n    }\r\n\r\n    return string;\r\n  }\r\n\r\n  /**\r\n   * Converts carriage returns and new lines in a string into \\r and \\n.\r\n   * Backquotes the following characters: ` \" \\ \\t and %\r\n   * \r\n   * @param string \tthe string\r\n   * @return \t\tthe converted string\r\n   * @see\t\t#unbackQuoteChars(String)\r\n   */\r\n  public static /*@pure@*/ String backQuoteChars(String string) {\r\n\r\n    int index;\r\n    StringBuffer newStringBuffer;\r\n\r\n    // replace each of the following characters with the backquoted version\r\n    char   charsFind[] =    {'\\\\',   '\\'',  '\\t',  '\\n',  '\\r',  '\"',    '%'};\r\n    String charsReplace[] = {\"\\\\\\\\\", \"\\\\'\", \"\\\\t\", \"\\\\n\", \"\\\\r\", \"\\\\\\\"\", \"\\\\%\"};\r\n    for (int i = 0; i \u003c charsFind.length; i++) {\r\n      if (string.indexOf(charsFind[i]) != -1 ) {\r\n\tnewStringBuffer = new StringBuffer();\r\n\twhile ((index = string.indexOf(charsFind[i])) != -1) {\r\n\t  if (index \u003e 0) {\r\n\t    newStringBuffer.append(string.substring(0, index));\r\n\t  }\r\n\t  newStringBuffer.append(charsReplace[i]);\r\n\t  if ((index + 1) \u003c string.length()) {\r\n\t    string = string.substring(index + 1);\r\n\t  } else {\r\n\t    string = \"\";\r\n\t  }\r\n\t}\r\n\tnewStringBuffer.append(string);\r\n\tstring = newStringBuffer.toString();\r\n      }\r\n    }\r\n\r\n    return string;\r\n  }\r\n\r\n  /**\r\n   * Converts carriage returns and new lines in a string into \\r and \\n.\r\n   *\r\n   * @param string the string\r\n   * @return the converted string\r\n   */\r\n  public static String convertNewLines(String string) {\r\n    int index;\r\n\r\n    // Replace with \\n\r\n    StringBuffer newStringBuffer = new StringBuffer();\r\n    while ((index = string.indexOf('\\n')) != -1) {\r\n      if (index \u003e 0) {\r\n\tnewStringBuffer.append(string.substring(0, index));\r\n      }\r\n      newStringBuffer.append('\\\\');\r\n      newStringBuffer.append('n');\r\n      if ((index + 1) \u003c string.length()) {\r\n\tstring = string.substring(index + 1);\r\n      } else {\r\n\tstring = \"\";\r\n      }\r\n    }\r\n    newStringBuffer.append(string);\r\n    string = newStringBuffer.toString();\r\n\r\n    // Replace with \\r\r\n    newStringBuffer = new StringBuffer();\r\n    while ((index = string.indexOf('\\r')) != -1) {\r\n      if (index \u003e 0) {\r\n\tnewStringBuffer.append(string.substring(0, index));\r\n      }\r\n      newStringBuffer.append('\\\\');\r\n      newStringBuffer.append('r');\r\n      if ((index + 1) \u003c string.length()){\r\n\tstring = string.substring(index + 1);\r\n      } else {\r\n\tstring = \"\";\r\n      }\r\n    }\r\n    newStringBuffer.append(string);\r\n    return newStringBuffer.toString();\r\n  }\r\n\r\n  /**\r\n   * Reverts \\r and \\n in a string into carriage returns and new lines.\r\n   * \r\n   * @param string the string\r\n   * @return the converted string\r\n   */\r\n  public static String revertNewLines(String string) {\r\n    int index;\r\n\r\n    // Replace with \\n\r\n    StringBuffer newStringBuffer = new StringBuffer();\r\n    while ((index = string.indexOf(\"\\\\n\")) != -1) {\r\n      if (index \u003e 0) {\r\n\tnewStringBuffer.append(string.substring(0, index));\r\n      }\r\n      newStringBuffer.append('\\n');\r\n      if ((index + 2) \u003c string.length()) {\r\n\tstring = string.substring(index + 2);\r\n      } else {\r\n\tstring = \"\";\r\n      }\r\n    }\r\n    newStringBuffer.append(string);\r\n    string = newStringBuffer.toString();\r\n\r\n    // Replace with \\r\r\n    newStringBuffer = new StringBuffer();\r\n    while ((index = string.indexOf(\"\\\\r\")) != -1) {\r\n      if (index \u003e 0) {\r\n\tnewStringBuffer.append(string.substring(0, index));\r\n      }\r\n      newStringBuffer.append('\\r');\r\n      if ((index + 2) \u003c string.length()){\r\n\tstring = string.substring(index + 2);\r\n      } else {\r\n\tstring = \"\";\r\n      }\r\n    }\r\n    newStringBuffer.append(string);\r\n    \r\n    return newStringBuffer.toString();\r\n  }\r\n\r\n  /**\r\n   * Returns the secondary set of options (if any) contained in\r\n   * the supplied options array. The secondary set is defined to\r\n   * be any options after the first \"--\". These options are removed from\r\n   * the original options array.\r\n   *\r\n   * @param options the input array of options\r\n   * @return the array of secondary options\r\n   */\r\n  public static String[] partitionOptions(String[] options) {\r\n\r\n    for (int i = 0; i \u003c options.length; i++) {\r\n      if (options[i].equals(\"--\")) {\r\n\toptions[i++] = \"\";\r\n\tString[] result = new String [options.length - i];\r\n\tfor (int j = i; j \u003c options.length; j++) {\r\n\t  result[j - i] = options[j];\r\n\t  options[j] = \"\";\r\n\t}\r\n\treturn result;\r\n      }\r\n    }\r\n    return new String [0];\r\n  }\r\n    \r\n  /**\r\n   * The inverse operation of backQuoteChars().\r\n   * Converts back-quoted carriage returns and new lines in a string \r\n   * to the corresponding character ('\\r' and '\\n').\r\n   * Also \"un\"-back-quotes the following characters: ` \" \\ \\t and %\r\n   *\r\n   * @param string \tthe string\r\n   * @return \t\tthe converted string\r\n   * @see\t\t#backQuoteChars(String)\r\n   */\r\n  public static String unbackQuoteChars(String string) {\r\n\r\n    int index;\r\n    StringBuffer newStringBuffer;\r\n    \r\n    // replace each of the following characters with the backquoted version\r\n    String charsFind[]    = {\"\\\\\\\\\", \"\\\\'\", \"\\\\t\", \"\\\\n\", \"\\\\r\", \"\\\\\\\"\", \"\\\\%\"};\r\n    char   charsReplace[] = {'\\\\',   '\\'',  '\\t',  '\\n',  '\\r',  '\"',    '%'};\r\n    int pos[] = new int[charsFind.length];\r\n    int\tcurPos;\r\n    \r\n    String str = new String(string);\r\n    newStringBuffer = new StringBuffer();\r\n    while (str.length() \u003e 0) {\r\n      // get positions and closest character to replace\r\n      curPos = str.length();\r\n      index  = -1;\r\n      for (int i = 0; i \u003c pos.length; i++) {\r\n\tpos[i] = str.indexOf(charsFind[i]);\r\n\tif ( (pos[i] \u003e -1) \u0026\u0026 (pos[i] \u003c curPos) ) {\r\n\t  index  = i;\r\n\t  curPos = pos[i];\r\n\t}\r\n      }\r\n      \r\n      // replace character if found, otherwise finished\r\n      if (index == -1) {\r\n\tnewStringBuffer.append(str);\r\n\tstr = \"\";\r\n      }\r\n      else {\r\n\tnewStringBuffer.append(str.substring(0, pos[index]));\r\n\tnewStringBuffer.append(charsReplace[index]);\r\n\tstr = str.substring(pos[index] + charsFind[index].length());\r\n      }\r\n    }\r\n\r\n    return newStringBuffer.toString();\r\n  }    \r\n  \r\n  /**\r\n   * Split up a string containing options into an array of strings,\r\n   * one for each option.\r\n   *\r\n   * @param \t\tquotedOptionString the string containing the options\r\n   * @return \t\tthe array of options\r\n   * @throws Exception \tin case of an unterminated string, unknown character or\r\n   * \t\t\ta parse error\r\n   */\r\n  public static String[] splitOptions(String quotedOptionString) throws Exception{\r\n\r\n    FastVector optionsVec = new FastVector();\r\n    String str = new String(quotedOptionString);\r\n    int i;\r\n    \r\n    while (true){\r\n\r\n      //trimLeft \r\n      i = 0;\r\n      while ((i \u003c str.length()) \u0026\u0026 (Character.isWhitespace(str.charAt(i)))) i++;\r\n      str = str.substring(i);\r\n      \r\n      //stop when str is empty\r\n      if (str.length() == 0) break;\r\n      \r\n      //if str start with a double quote\r\n      if (str.charAt(0) == '\"'){\r\n\t\r\n\t//find the first not anti-slached double quote\r\n\ti = 1;\r\n\twhile(i \u003c str.length()){\r\n\t  if (str.charAt(i) == str.charAt(0)) break;\r\n\t  if (str.charAt(i) == '\\\\'){\r\n\t    i += 1;\r\n\t    if (i \u003e= str.length()) \r\n\t      throw new Exception(\"String should not finish with \\\\\");\r\n\t  }\r\n\t  i += 1;\r\n\t}\r\n\tif (i \u003e= str.length()) throw new Exception(\"Quote parse error.\");\r\n\t\r\n\t//add the founded string to the option vector (without quotes)\r\n\tString optStr = str.substring(1,i);\r\n\toptStr = unbackQuoteChars(optStr);\r\n\toptionsVec.addElement(optStr);\r\n\tstr = str.substring(i+1);\r\n      } else {\r\n\t//find first whiteSpace\r\n\ti=0;\r\n\twhile((i \u003c str.length()) \u0026\u0026 (!Character.isWhitespace(str.charAt(i)))) i++;\r\n\t\r\n\t//add the founded string to the option vector\r\n\tString optStr = str.substring(0,i);\r\n\toptionsVec.addElement(optStr);\r\n\tstr = str.substring(i);\r\n      }\r\n    }\r\n    \r\n    //convert optionsVec to an array of String\r\n    String[] options = new String[optionsVec.size()];\r\n    for (i = 0; i \u003c optionsVec.size(); i++) {\r\n      options[i] = (String)optionsVec.elementAt(i);\r\n    }\r\n    return options;\r\n  }    \r\n\r\n  /**\r\n   * Joins all the options in an option array into a single string,\r\n   * as might be used on the command line.\r\n   *\r\n   * @param optionArray the array of options\r\n   * @return the string containing all options.\r\n   */\r\n  public static String joinOptions(String[] optionArray) {\r\n\r\n    String optionString = \"\";\r\n    for (int i = 0; i \u003c optionArray.length; i++) {\r\n      if (optionArray[i].equals(\"\")) {\r\n\tcontinue;\r\n      }\r\n      boolean escape = false;\r\n      for (int n = 0; n \u003c optionArray[i].length(); n++) {\r\n\tif (Character.isWhitespace(optionArray[i].charAt(n))) {\r\n\t  escape = true;\r\n\t  break;\r\n\t}\r\n      }\r\n      if (escape) {\r\n\toptionString += '\"' + backQuoteChars(optionArray[i]) + '\"';\r\n      } else {\r\n\toptionString += optionArray[i];\r\n      }\r\n      optionString += \" \";\r\n    }\r\n    return optionString.trim();\r\n  }\r\n  \r\n  /**\r\n   * Creates a new instance of an object given it's class name and\r\n   * (optional) arguments to pass to it's setOptions method. If the\r\n   * object implements OptionHandler and the options parameter is\r\n   * non-null, the object will have it's options set. Example use:\u003cp\u003e\r\n   *\r\n   * \u003ccode\u003e \u003cpre\u003e\r\n   * String classifierName = Utils.getOption('W', options);\r\n   * Classifier c = (Classifier)Utils.forName(Classifier.class,\r\n   *                                          classifierName,\r\n   *                                          options);\r\n   * setClassifier(c);\r\n   * \u003c/pre\u003e\u003c/code\u003e\r\n   *\r\n   * @param classType the class that the instantiated object should\r\n   * be assignable to -- an exception is thrown if this is not the case\r\n   * @param className the fully qualified class name of the object\r\n   * @param options an array of options suitable for passing to setOptions. May\r\n   * be null. Any options accepted by the object will be removed from the\r\n   * array.\r\n   * @return the newly created object, ready for use.\r\n   * @exception Exception if the class name is invalid, or if the\r\n   * class is not assignable to the desired class type, or the options\r\n   * supplied are not acceptable to the object\r\n   */\r\n  public static Object forName(Class classType,\r\n\t\t\t       String className,\r\n\t\t\t       String[] options) throws Exception {\r\n\r\n    Class c = null;\r\n    try {\r\n      c = Class.forName(className);\r\n    } catch (Exception ex) {\r\n      throw new Exception(\"Can't find class called: \" + className);\r\n    }\r\n    if (!classType.isAssignableFrom(c)) {\r\n      throw new Exception(classType.getName() + \" is not assignable from \"\r\n\t\t\t  + className);\r\n    }\r\n    Object o = c.newInstance();\r\n    if ((o instanceof OptionHandler)\r\n\t\u0026\u0026 (options != null)) {\r\n      ((OptionHandler)o).setOptions(options);\r\n      Utils.checkForRemainingOptions(options);\r\n    }\r\n    return o;\r\n  }\r\n\r\n  /**\r\n   * Computes entropy for an array of integers.\r\n   *\r\n   * @param counts array of counts\r\n   * @return - a log2 a - b log2 b - c log2 c + (a+b+c) log2 (a+b+c)\r\n   * when given array [a b c]\r\n   */\r\n  public static /*@pure@*/ double info(int counts[]) {\r\n    \r\n    int total = 0;\r\n    double x = 0;\r\n    for (int j = 0; j \u003c counts.length; j++) {\r\n      x -= xlogx(counts[j]);\r\n      total += counts[j];\r\n    }\r\n    return x + xlogx(total);\r\n  }\r\n\r\n  /**\r\n   * Tests if a is smaller or equal to b.\r\n   *\r\n   * @param a a double\r\n   * @param b a double\r\n   */\r\n  public static /*@pure@*/ boolean smOrEq(double a,double b) {\r\n    \r\n    return (a-b \u003c SMALL);\r\n  }\r\n\r\n  /**\r\n   * Tests if a is greater or equal to b.\r\n   *\r\n   * @param a a double\r\n   * @param b a double\r\n   */\r\n  public static /*@pure@*/ boolean grOrEq(double a,double b) {\r\n    \r\n    return (b-a \u003c SMALL);\r\n  }\r\n  \r\n  /**\r\n   * Tests if a is smaller than b.\r\n   *\r\n   * @param a a double\r\n   * @param b a double\r\n   */\r\n  public static /*@pure@*/ boolean sm(double a,double b) {\r\n    \r\n    return (b-a \u003e SMALL);\r\n  }\r\n\r\n  /**\r\n   * Tests if a is greater than b.\r\n   *\r\n   * @param a a double\r\n   * @param b a double \r\n   */\r\n  public static /*@pure@*/ boolean gr(double a,double b) {\r\n    \r\n    return (a-b \u003e SMALL);\r\n  }\r\n\r\n  /**\r\n   * Returns the kth-smallest value in the array.\r\n   *\r\n   * @param array the array of integers\r\n   * @param k the value of k\r\n   * @return the kth-smallest value\r\n   */\r\n  public static double kthSmallestValue(int[] array, int k) {\r\n\r\n    int[] index = new int[array.length];\r\n    \r\n    for (int i = 0; i \u003c index.length; i++) {\r\n      index[i] = i;\r\n    }\r\n\r\n    return array[index[select(array, index, 0, array.length - 1, k)]];\r\n  }\r\n\r\n  /**\r\n   * Returns the kth-smallest value in the array\r\n   *\r\n   * @param array the array of double\r\n   * @param k the value of k\r\n   * @return the kth-smallest value\r\n   */\r\n  public static double kthSmallestValue(double[] array, int k) {\r\n\r\n    int[] index = new int[array.length];\r\n    \r\n    for (int i = 0; i \u003c index.length; i++) {\r\n      index[i] = i;\r\n    }\r\n\r\n    return array[index[select(array, index, 0, array.length - 1, k)]];\r\n  }\r\n\r\n  /**\r\n   * Returns the logarithm of a for base 2.\r\n   *\r\n   * @param a \ta double\r\n   * @return\tthe logarithm for base 2\r\n   */\r\n  public static /*@pure@*/ double log2(double a) {\r\n    \r\n    return Math.log(a) / log2;\r\n  }\r\n\r\n  /**\r\n   * Returns index of maximum element in a given\r\n   * array of doubles. First maximum is returned.\r\n   *\r\n   * @param doubles the array of doubles\r\n   * @return the index of the maximum element\r\n   */\r\n  public static /*@pure@*/ int maxIndex(double[] doubles) {\r\n\r\n    double maximum = 0;\r\n    int maxIndex = 0;\r\n\r\n    for (int i = 0; i \u003c doubles.length; i++) {\r\n      if ((i == 0) || (doubles[i] \u003e maximum)) {\r\n\tmaxIndex = i;\r\n\tmaximum = doubles[i];\r\n      }\r\n    }\r\n\r\n    return maxIndex;\r\n  }\r\n\r\n  /**\r\n   * Returns index of maximum element in a given\r\n   * array of integers. First maximum is returned.\r\n   *\r\n   * @param ints the array of integers\r\n   * @return the index of the maximum element\r\n   */\r\n  public static /*@pure@*/ int maxIndex(int[] ints) {\r\n\r\n    int maximum = 0;\r\n    int maxIndex = 0;\r\n\r\n    for (int i = 0; i \u003c ints.length; i++) {\r\n      if ((i == 0) || (ints[i] \u003e maximum)) {\r\n\tmaxIndex = i;\r\n\tmaximum = ints[i];\r\n      }\r\n    }\r\n\r\n    return maxIndex;\r\n  }\r\n\r\n  /**\r\n   * Computes the mean for an array of doubles.\r\n   *\r\n   * @param vector the array\r\n   * @return the mean\r\n   */\r\n  public static /*@pure@*/ double mean(double[] vector) {\r\n  \r\n    double sum = 0;\r\n\r\n    if (vector.length == 0) {\r\n      return 0;\r\n    }\r\n    for (int i = 0; i \u003c vector.length; i++) {\r\n      sum += vector[i];\r\n    }\r\n    return sum / (double) vector.length;\r\n  }\r\n\r\n  /**\r\n   * Returns index of minimum element in a given\r\n   * array of integers. First minimum is returned.\r\n   *\r\n   * @param ints the array of integers\r\n   * @return the index of the minimum element\r\n   */\r\n  public static /*@pure@*/ int minIndex(int[] ints) {\r\n\r\n    int minimum = 0;\r\n    int minIndex = 0;\r\n\r\n    for (int i = 0; i \u003c ints.length; i++) {\r\n      if ((i == 0) || (ints[i] \u003c minimum)) {\r\n\tminIndex = i;\r\n\tminimum = ints[i];\r\n      }\r\n    }\r\n\r\n    return minIndex;\r\n  }\r\n\r\n  /**\r\n   * Returns index of minimum element in a given\r\n   * array of doubles. First minimum is returned.\r\n   *\r\n   * @param doubles the array of doubles\r\n   * @return the index of the minimum element\r\n   */\r\n  public static /*@pure@*/ int minIndex(double[] doubles) {\r\n\r\n    double minimum = 0;\r\n    int minIndex = 0;\r\n\r\n    for (int i = 0; i \u003c doubles.length; i++) {\r\n      if ((i == 0) || (doubles[i] \u003c minimum)) {\r\n\tminIndex = i;\r\n\tminimum = doubles[i];\r\n      }\r\n    }\r\n\r\n    return minIndex;\r\n  }\r\n\r\n  /**\r\n   * Normalizes the doubles in the array by their sum.\r\n   *\r\n   * @param doubles the array of double\r\n   * @exception IllegalArgumentException if sum is Zero or NaN\r\n   */\r\n  public static void normalize(double[] doubles) {\r\n\r\n    double sum = 0;\r\n    for (int i = 0; i \u003c doubles.length; i++) {\r\n      sum += doubles[i];\r\n    }\r\n    normalize(doubles, sum);\r\n  }\r\n\r\n  /**\r\n   * Normalizes the doubles in the array using the given value.\r\n   *\r\n   * @param doubles the array of double\r\n   * @param sum the value by which the doubles are to be normalized\r\n   * @exception IllegalArgumentException if sum is zero or NaN\r\n   */\r\n  public static void normalize(double[] doubles, double sum) {\r\n\r\n    if (Double.isNaN(sum)) {\r\n      throw new IllegalArgumentException(\"Can't normalize array. Sum is NaN.\");\r\n    }\r\n    if (sum == 0) {\r\n      // Maybe this should just be a return.\r\n      throw new IllegalArgumentException(\"Can't normalize array. Sum is zero.\");\r\n    }\r\n    for (int i = 0; i \u003c doubles.length; i++) {\r\n      doubles[i] /= sum;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Converts an array containing the natural logarithms of\r\n   * probabilities stored in a vector back into probabilities.\r\n   * The probabilities are assumed to sum to one.\r\n   *\r\n   * @param a an array holding the natural logarithms of the probabilities\r\n   * @return the converted array \r\n   */\r\n  public static double[] logs2probs(double[] a) {\r\n\r\n    double max = a[maxIndex(a)];\r\n    double sum = 0.0;\r\n\r\n    double[] result = new double[a.length];\r\n    for(int i = 0; i \u003c a.length; i++) {\r\n      result[i] = Math.exp(a[i] - max);\r\n      sum += result[i];\r\n    }\r\n\r\n    normalize(result, sum);\r\n\r\n    return result;\r\n  } \r\n\r\n  /**\r\n   * Returns the log-odds for a given probabilitiy.\r\n   *\r\n   * @param prob the probabilitiy\r\n   *\r\n   * @return the log-odds after the probability has been mapped to\r\n   * [Utils.SMALL, 1-Utils.SMALL]\r\n   */\r\n  public static /*@pure@*/ double probToLogOdds(double prob) {\r\n\r\n    if (gr(prob, 1) || (sm(prob, 0))) {\r\n      throw new IllegalArgumentException(\"probToLogOdds: probability must \" +\r\n\t\t\t\t     \"be in [0,1] \"+prob);\r\n    }\r\n    double p = SMALL + (1.0 - 2 * SMALL) * prob;\r\n    return Math.log(p / (1 - p));\r\n  }\r\n\r\n  /**\r\n   * Rounds a double to the next nearest integer value. The JDK version\r\n   * of it doesn't work properly.\r\n   *\r\n   * @param value the double value\r\n   * @return the resulting integer value\r\n   */\r\n  public static /*@pure@*/ int round(double value) {\r\n\r\n    int roundedValue = value \u003e 0\r\n      ? (int)(value + 0.5)\r\n      : -(int)(Math.abs(value) + 0.5);\r\n    \r\n    return roundedValue;\r\n  }\r\n\r\n  /**\r\n   * Rounds a double to the next nearest integer value in a probabilistic\r\n   * fashion (e.g. 0.8 has a 20% chance of being rounded down to 0 and a\r\n   * 80% chance of being rounded up to 1). In the limit, the average of\r\n   * the rounded numbers generated by this procedure should converge to\r\n   * the original double.\r\n   *\r\n   * @param value the double value\r\n   * @param rand the random number generator\r\n   * @return the resulting integer value\r\n   */\r\n  public static int probRound(double value, Random rand) {\r\n\r\n    if (value \u003e= 0) {\r\n      double lower = Math.floor(value);\r\n      double prob = value - lower;\r\n      if (rand.nextDouble() \u003c prob) {\r\n\treturn (int)lower + 1;\r\n      } else {\r\n\treturn (int)lower;\r\n      }\r\n    } else {\r\n      double lower = Math.floor(Math.abs(value));\r\n      double prob = Math.abs(value) - lower;\r\n      if (rand.nextDouble() \u003c prob) {\r\n\treturn -((int)lower + 1);\r\n      } else {\r\n\treturn -(int)lower;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Rounds a double to the given number of decimal places.\r\n   *\r\n   * @param value the double value\r\n   * @param afterDecimalPoint the number of digits after the decimal point\r\n   * @return the double rounded to the given precision\r\n   */\r\n  public static /*@pure@*/ double roundDouble(double value,int afterDecimalPoint) {\r\n\r\n    double mask = Math.pow(10.0, (double)afterDecimalPoint);\r\n\r\n    return (double)(Math.round(value * mask)) / mask;\r\n  }\r\n\r\n  /**\r\n   * Sorts a given array of integers in ascending order and returns an \r\n   * array of integers with the positions of the elements of the original \r\n   * array in the sorted array. The sort is stable. (Equal elements remain\r\n   * in their original order.)\r\n   *\r\n   * @param array this array is not changed by the method!\r\n   * @return an array of integers with the positions in the sorted\r\n   * array.\r\n   */\r\n  public static /*@pure@*/ int[] sort(int[] array) {\r\n\r\n    int[] index = new int[array.length];\r\n    int[] newIndex = new int[array.length];\r\n    int[] helpIndex;\r\n    int numEqual;\r\n    \r\n    for (int i = 0; i \u003c index.length; i++) {\r\n      index[i] = i;\r\n    }\r\n    quickSort(array, index, 0, array.length - 1);\r\n\r\n    // Make sort stable\r\n    int i = 0;\r\n    while (i \u003c index.length) {\r\n      numEqual = 1;\r\n      for (int j = i + 1; ((j \u003c index.length)\r\n\t\t\t   \u0026\u0026 (array[index[i]] == array[index[j]]));\r\n\t   j++) {\r\n\tnumEqual++;\r\n      }\r\n      if (numEqual \u003e 1) {\r\n\thelpIndex = new int[numEqual];\r\n\tfor (int j = 0; j \u003c numEqual; j++) {\r\n\t  helpIndex[j] = i + j;\r\n\t}\r\n\tquickSort(index, helpIndex, 0, numEqual - 1);\r\n\tfor (int j = 0; j \u003c numEqual; j++) {\r\n\t  newIndex[i + j] = index[helpIndex[j]];\r\n\t}\r\n\ti += numEqual;\r\n      } else {\r\n\tnewIndex[i] = index[i];\r\n\ti++;\r\n      }\r\n    }\r\n    return newIndex;\r\n  }\r\n\r\n  /**\r\n   * Sorts a given array of doubles in ascending order and returns an\r\n   * array of integers with the positions of the elements of the\r\n   * original array in the sorted array. NOTE THESE CHANGES: the sort\r\n   * is no longer stable and it doesn't use safe floating-point\r\n   * comparisons anymore. Occurrences of Double.NaN are treated as \r\n   * Double.MAX_VALUE\r\n   *\r\n   * @param array this array is not changed by the method!\r\n   * @return an array of integers with the positions in the sorted\r\n   * array.  \r\n   */\r\n  public static /*@pure@*/ int[] sort(/*@non_null@*/ double[] array) {\r\n\r\n    int[] index = new int[array.length];\r\n    array = (double[])array.clone();\r\n    for (int i = 0; i \u003c index.length; i++) {\r\n      index[i] = i;\r\n      if (Double.isNaN(array[i])) {\r\n        array[i] = Double.MAX_VALUE;\r\n      }\r\n    }\r\n    quickSort(array, index, 0, array.length - 1);\r\n    return index;\r\n  }\r\n\r\n  /**\r\n   * Sorts a given array of doubles in ascending order and returns an \r\n   * array of integers with the positions of the elements of the original \r\n   * array in the sorted array. The sort is stable (Equal elements remain\r\n   * in their original order.) Occurrences of Double.NaN are treated as \r\n   * Double.MAX_VALUE\r\n   *\r\n   * @param array this array is not changed by the method!\r\n   * @return an array of integers with the positions in the sorted\r\n   * array.\r\n   */\r\n  public static /*@pure@*/ int[] stableSort(double[] array){\r\n\r\n    int[] index = new int[array.length];\r\n    int[] newIndex = new int[array.length];\r\n    int[] helpIndex;\r\n    int numEqual;\r\n    \r\n    array = (double[])array.clone();\r\n    for (int i = 0; i \u003c index.length; i++) {\r\n      index[i] = i;\r\n      if (Double.isNaN(array[i])) {\r\n        array[i] = Double.MAX_VALUE;\r\n      }\r\n    }\r\n    quickSort(array,index,0,array.length-1);\r\n\r\n    // Make sort stable\r\n\r\n    int i = 0;\r\n    while (i \u003c index.length) {\r\n      numEqual = 1;\r\n      for (int j = i+1; ((j \u003c index.length) \u0026\u0026 Utils.eq(array[index[i]],\r\n\t\t\t\t\t\t\tarray[index[j]])); j++)\r\n\tnumEqual++;\r\n      if (numEqual \u003e 1) {\r\n\thelpIndex = new int[numEqual];\r\n\tfor (int j = 0; j \u003c numEqual; j++)\r\n\t  helpIndex[j] = i+j;\r\n\tquickSort(index, helpIndex, 0, numEqual-1);\r\n\tfor (int j = 0; j \u003c numEqual; j++) \r\n\t  newIndex[i+j] = index[helpIndex[j]];\r\n\ti += numEqual;\r\n      } else {\r\n\tnewIndex[i] = index[i];\r\n\ti++;\r\n      }\r\n    }\r\n\r\n    return newIndex;\r\n  }\r\n\r\n  /**\r\n   * Computes the variance for an array of doubles.\r\n   *\r\n   * @param vector the array\r\n   * @return the variance\r\n   */\r\n  public static /*@pure@*/ double variance(double[] vector) {\r\n  \r\n    double sum = 0, sumSquared = 0;\r\n\r\n    if (vector.length \u003c= 1) {\r\n      return 0;\r\n    }\r\n    for (int i = 0; i \u003c vector.length; i++) {\r\n      sum += vector[i];\r\n      sumSquared += (vector[i] * vector[i]);\r\n    }\r\n    double result = (sumSquared - (sum * sum / (double) vector.length)) / \r\n      (double) (vector.length - 1);\r\n\r\n    // We don't like negative variance\r\n    if (result \u003c 0) {\r\n      return 0;\r\n    } else {\r\n      return result;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Computes the sum of the elements of an array of doubles.\r\n   *\r\n   * @param doubles the array of double\r\n   * @return the sum of the elements\r\n   */\r\n  public static /*@pure@*/ double sum(double[] doubles) {\r\n\r\n    double sum = 0;\r\n\r\n    for (int i = 0; i \u003c doubles.length; i++) {\r\n      sum += doubles[i];\r\n    }\r\n    return sum;\r\n  }\r\n\r\n  /**\r\n   * Computes the sum of the elements of an array of integers.\r\n   *\r\n   * @param ints the array of integers\r\n   * @return the sum of the elements\r\n   */\r\n  public static /*@pure@*/ int sum(int[] ints) {\r\n\r\n    int sum = 0;\r\n\r\n    for (int i = 0; i \u003c ints.length; i++) {\r\n      sum += ints[i];\r\n    }\r\n    return sum;\r\n  }\r\n\r\n  /**\r\n   * Returns c*log2(c) for a given integer value c.\r\n   *\r\n   * @param c an integer value\r\n   * @return c*log2(c) (but is careful to return 0 if c is 0)\r\n   */\r\n  public static /*@pure@*/ double xlogx(int c) {\r\n    \r\n    if (c == 0) {\r\n      return 0.0;\r\n    }\r\n    return c * Utils.log2((double) c);\r\n  }\r\n\r\n  /**\r\n   * Partitions the instances around a pivot. Used by quicksort and\r\n   * kthSmallestValue.\r\n   *\r\n   * @param array the array of doubles to be sorted\r\n   * @param index the index into the array of doubles\r\n   * @param l the first index of the subset \r\n   * @param r the last index of the subset \r\n   *\r\n   * @return the index of the middle element\r\n   */\r\n  private static int partition(double[] array, int[] index, int l, int r) {\r\n    \r\n    double pivot = array[index[(l + r) / 2]];\r\n    int help;\r\n\r\n    while (l \u003c r) {\r\n      while ((array[index[l]] \u003c pivot) \u0026\u0026 (l \u003c r)) {\r\n        l++;\r\n      }\r\n      while ((array[index[r]] \u003e pivot) \u0026\u0026 (l \u003c r)) {\r\n        r--;\r\n      }\r\n      if (l \u003c r) {\r\n        help = index[l];\r\n        index[l] = index[r];\r\n        index[r] = help;\r\n        l++;\r\n        r--;\r\n      }\r\n    }\r\n    if ((l == r) \u0026\u0026 (array[index[r]] \u003e pivot)) {\r\n      r--;\r\n    } \r\n\r\n    return r;\r\n  }\r\n\r\n  /**\r\n   * Partitions the instances around a pivot. Used by quicksort and\r\n   * kthSmallestValue.\r\n   *\r\n   * @param array the array of integers to be sorted\r\n   * @param index the index into the array of integers\r\n   * @param l the first index of the subset \r\n   * @param r the last index of the subset \r\n   *\r\n   * @return the index of the middle element\r\n   */\r\n  private static int partition(int[] array, int[] index, int l, int r) {\r\n    \r\n    double pivot = array[index[(l + r) / 2]];\r\n    int help;\r\n\r\n    while (l \u003c r) {\r\n      while ((array[index[l]] \u003c pivot) \u0026\u0026 (l \u003c r)) {\r\n        l++;\r\n      }\r\n      while ((array[index[r]] \u003e pivot) \u0026\u0026 (l \u003c r)) {\r\n        r--;\r\n      }\r\n      if (l \u003c r) {\r\n        help = index[l];\r\n        index[l] = index[r];\r\n        index[r] = help;\r\n        l++;\r\n        r--;\r\n      }\r\n    }\r\n    if ((l == r) \u0026\u0026 (array[index[r]] \u003e pivot)) {\r\n      r--;\r\n    } \r\n\r\n    return r;\r\n  }\r\n  \r\n  /**\r\n   * Implements quicksort according to Manber's \"Introduction to\r\n   * Algorithms\".\r\n   *\r\n   * @param array the array of doubles to be sorted\r\n   * @param index the index into the array of doubles\r\n   * @param left the first index of the subset to be sorted\r\n   * @param right the last index of the subset to be sorted\r\n   */\r\n  //@ requires 0 \u003c= first \u0026\u0026 first \u003c= right \u0026\u0026 right \u003c array.length;\r\n  //@ requires (\\forall int i; 0 \u003c= i \u0026\u0026 i \u003c index.length; 0 \u003c= index[i] \u0026\u0026 index[i] \u003c array.length);\r\n  //@ requires array != index;\r\n  //  assignable index;\r\n  private static void quickSort(/*@non_null@*/ double[] array, /*@non_null@*/ int[] index, \r\n                                int left, int right) {\r\n\r\n    if (left \u003c right) {\r\n      int middle = partition(array, index, left, right);\r\n      quickSort(array, index, left, middle);\r\n      quickSort(array, index, middle + 1, right);\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Implements quicksort according to Manber's \"Introduction to\r\n   * Algorithms\".\r\n   *\r\n   * @param array the array of integers to be sorted\r\n   * @param index the index into the array of integers\r\n   * @param left the first index of the subset to be sorted\r\n   * @param right the last index of the subset to be sorted\r\n   */\r\n  //@ requires 0 \u003c= first \u0026\u0026 first \u003c= right \u0026\u0026 right \u003c array.length;\r\n  //@ requires (\\forall int i; 0 \u003c= i \u0026\u0026 i \u003c index.length; 0 \u003c= index[i] \u0026\u0026 index[i] \u003c array.length);\r\n  //@ requires array != index;\r\n  //  assignable index;\r\n  private static void quickSort(/*@non_null@*/ int[] array, /*@non_null@*/  int[] index, \r\n                                int left, int right) {\r\n\r\n    if (left \u003c right) {\r\n      int middle = partition(array, index, left, right);\r\n      quickSort(array, index, left, middle);\r\n      quickSort(array, index, middle + 1, right);\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Implements computation of the kth-smallest element according\r\n   * to Manber's \"Introduction to Algorithms\".\r\n   *\r\n   * @param array the array of double\r\n   * @param index the index into the array of doubles\r\n   * @param left the first index of the subset \r\n   * @param right the last index of the subset \r\n   * @param k the value of k\r\n   *\r\n   * @return the index of the kth-smallest element\r\n   */\r\n  //@ requires 0 \u003c= first \u0026\u0026 first \u003c= right \u0026\u0026 right \u003c array.length;\r\n  private static int select(/*@non_null@*/ double[] array, /*@non_null@*/ int[] index, \r\n                            int left, int right, int k) {\r\n    \r\n    if (left == right) {\r\n      return left;\r\n    } else {\r\n      int middle = partition(array, index, left, right);\r\n      if ((middle - left + 1) \u003e= k) {\r\n        return select(array, index, left, middle, k);\r\n      } else {\r\n        return select(array, index, middle + 1, right, k - (middle - left + 1));\r\n      }\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Implements computation of the kth-smallest element according\r\n   * to Manber's \"Introduction to Algorithms\".\r\n   *\r\n   * @param array the array of integers\r\n   * @param index the index into the array of integers\r\n   * @param left the first index of the subset \r\n   * @param right the last index of the subset \r\n   * @param k the value of k\r\n   *\r\n   * @return the index of the kth-smallest element\r\n   */\r\n  //@ requires 0 \u003c= first \u0026\u0026 first \u003c= right \u0026\u0026 right \u003c array.length;\r\n  private static int select(/*@non_null@*/ int[] array, /*@non_null@*/ int[] index, \r\n                            int left, int right, int k) {\r\n    \r\n    if (left == right) {\r\n      return left;\r\n    } else {\r\n      int middle = partition(array, index, left, right);\r\n      if ((middle - left + 1) \u003e= k) {\r\n        return select(array, index, left, middle, k);\r\n      } else {\r\n        return select(array, index, middle + 1, right, k - (middle - left + 1));\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Main method for testing this class.\r\n   *\r\n   * @param ops some dummy options\r\n   */\r\n  public static void main(String[] ops) {\r\n\r\n    double[] doublesWithNaN = {4.5, 6.7, Double.NaN, 3.4, 4.8, 1.2, 3.4};\r\n    double[] doubles = {4.5, 6.7, 6.7, 3.4, 4.8, 1.2, 3.4, 6.7, 6.7, 3.4};\r\n    int[] ints = {12, 6, 2, 18, 16, 6, 7, 5, 18, 18, 17};\r\n\r\n    try {\r\n\r\n      // Option handling\r\n      System.out.println(\"First option split up:\");\r\n      if (ops.length \u003e 0) {\r\n\tString[] firstOptionSplitUp = Utils.splitOptions(ops[0]);\r\n\tfor (int i = 0; i \u003c firstOptionSplitUp.length; i ++) {\r\n\t  System.out.println(firstOptionSplitUp[i]);\r\n\t}\r\n      }\t\t\t\t\t       \r\n      System.out.println(\"Partitioned options: \");\r\n      String[] partitionedOptions = Utils.partitionOptions(ops);\r\n      for (int i  = 0; i \u003c partitionedOptions.length; i++) {\r\n\tSystem.out.println(partitionedOptions[i]);\r\n      }\r\n      System.out.println(\"Get position of flag -f: \" + Utils.getOptionPos('f', ops));\r\n      System.out.println(\"Get flag -f: \" + Utils.getFlag('f', ops));\r\n      System.out.println(\"Get position of option -o: \" + Utils.getOptionPos('o', ops));\r\n      System.out.println(\"Get option -o: \" + Utils.getOption('o', ops));\r\n      System.out.println(\"Checking for remaining options... \");\r\n      Utils.checkForRemainingOptions(ops);\r\n      \r\n      // Statistics\r\n      System.out.println(\"Original array with NaN (doubles): \");\r\n      for (int i = 0; i \u003c doublesWithNaN.length; i++) {\r\n\tSystem.out.print(doublesWithNaN[i] + \" \");\r\n      }\r\n      System.out.println();\r\n      System.out.println(\"Original array (doubles): \");\r\n      for (int i = 0; i \u003c doubles.length; i++) {\r\n\tSystem.out.print(doubles[i] + \" \");\r\n      }\r\n      System.out.println();\r\n      System.out.println(\"Original array (ints): \");\r\n      for (int i = 0; i \u003c ints.length; i++) {\r\n\tSystem.out.print(ints[i] + \" \");\r\n      }\r\n      System.out.println();\r\n      System.out.println(\"Correlation: \" + Utils.correlation(doubles, doubles, \r\n\t\t\t\t\t\t\t     doubles.length));\r\n      System.out.println(\"Mean: \" + Utils.mean(doubles));\r\n      System.out.println(\"Variance: \" + Utils.variance(doubles));\r\n      System.out.println(\"Sum (doubles): \" + Utils.sum(doubles));\r\n      System.out.println(\"Sum (ints): \" + Utils.sum(ints));\r\n      System.out.println(\"Max index (doubles): \" + Utils.maxIndex(doubles));\r\n      System.out.println(\"Max index (ints): \" + Utils.maxIndex(ints));\r\n      System.out.println(\"Min index (doubles): \" + Utils.minIndex(doubles));\r\n      System.out.println(\"Min index (ints): \" + Utils.minIndex(ints));\r\n      System.out.println(\"Median (doubles): \" + \r\n                         Utils.kthSmallestValue(doubles, doubles.length / 2));\r\n      System.out.println(\"Median (ints): \" + \r\n                         Utils.kthSmallestValue(ints, ints.length / 2));\r\n\r\n      // Sorting and normalizing\r\n      System.out.println(\"Sorted array with NaN (doubles): \");\r\n      int[] sorted = Utils.sort(doublesWithNaN);\r\n      for (int i = 0; i \u003c doublesWithNaN.length; i++) {\r\n\tSystem.out.print(doublesWithNaN[sorted[i]] + \" \");\r\n      }\r\n      System.out.println();\r\n      System.out.println(\"Sorted array (doubles): \");\r\n      sorted = Utils.sort(doubles);\r\n      for (int i = 0; i \u003c doubles.length; i++) {\r\n\tSystem.out.print(doubles[sorted[i]] + \" \");\r\n      }\r\n      System.out.println();\r\n      System.out.println(\"Sorted array (ints): \");\r\n      sorted = Utils.sort(ints);\r\n      for (int i = 0; i \u003c ints.length; i++) {\r\n\tSystem.out.print(ints[sorted[i]] + \" \");\r\n      }\r\n      System.out.println();\r\n      System.out.println(\"Indices from stable sort (doubles): \");\r\n      sorted = Utils.stableSort(doubles);\r\n      for (int i = 0; i \u003c doubles.length; i++) {\r\n\tSystem.out.print(sorted[i] + \" \");\r\n      }\r\n      System.out.println();\r\n      System.out.println(\"Indices from sort (ints): \");\r\n      sorted = Utils.sort(ints);\r\n      for (int i = 0; i \u003c ints.length; i++) {\r\n\tSystem.out.print(sorted[i] + \" \");\r\n      }\r\n      System.out.println();\r\n      System.out.println(\"Normalized array (doubles): \");\r\n      Utils.normalize(doubles);\r\n      for (int i = 0; i \u003c doubles.length; i++) {\r\n\tSystem.out.print(doubles[i] + \" \");\r\n      }\r\n      System.out.println();\r\n      System.out.println(\"Normalized again (doubles): \");\r\n      Utils.normalize(doubles, Utils.sum(doubles));\r\n      for (int i = 0; i \u003c doubles.length; i++) {\r\n\tSystem.out.print(doubles[i] + \" \");\r\n      }\r\n      System.out.println();\r\n      \r\n      // Pretty-printing\r\n      System.out.println(\"-4.58: \" + Utils.doubleToString(-4.57826535, 2));\r\n      System.out.println(\"-6.78: \" + Utils.doubleToString(-6.78214234, 6,2));\r\n      \r\n      // Comparisons\r\n      System.out.println(\"5.70001 == 5.7 ? \" + Utils.eq(5.70001, 5.7));\r\n      System.out.println(\"5.70001 \u003e 5.7 ? \" + Utils.gr(5.70001, 5.7));\r\n      System.out.println(\"5.70001 \u003e= 5.7 ? \" + Utils.grOrEq(5.70001, 5.7));\r\n      System.out.println(\"5.7 \u003c 5.70001 ? \" + Utils.sm(5.7, 5.70001));\r\n      System.out.println(\"5.7 \u003c= 5.70001 ? \" + Utils.smOrEq(5.7, 5.70001));\r\n      \r\n      // Math\r\n      System.out.println(\"Info (ints): \" + Utils.info(ints));\r\n      System.out.println(\"log2(4.6): \" + Utils.log2(4.6));\r\n      System.out.println(\"5 * log(5): \" + Utils.xlogx(5));\r\n      System.out.println(\"5.5 rounded: \" + Utils.round(5.5));\r\n      System.out.println(\"5.55555 rounded to 2 decimal places: \" + \r\n\t\t\t Utils.roundDouble(5.55555, 2));\r\n      \r\n      // Arrays\r\n      System.out.println(\"Array-Dimensions of 'new int[][]': \" + Utils.getArrayDimensions(new int[][]{}));\r\n      System.out.println(\"Array-Dimensions of 'new int[][]{{1,2,3},{4,5,6}}': \" + Utils.getArrayDimensions(new int[][]{{1,2,3},{4,5,6}}));\r\n      String[][][] s = new String[3][4][];\r\n      System.out.println(\"Array-Dimensions of 'new String[3][4][]': \" + Utils.getArrayDimensions(s));\r\n    } catch (Exception e) {\r\n      e.printStackTrace();\r\n    }\r\n  }\r\n}\r\n  \r\n\r\n",
        "name": "Utils.java",
        "path": "src/org/apache/mahout/keel/Algorithms/Statistical_Classifiers/Logistic/core/Utils.java",
        "url": "/github.com/triguero/MRPR/-/blob/src/org/apache/mahout/keel/Algorithms/Statistical_Classifiers/Logistic/core/Utils.java"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 1697,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires 0 \u003c= first \u0026\u0026 first \u003c= right \u0026\u0026 right \u003c array.length;\r"
        },
        {
          "limitHit": false,
          "lineNumber": 1698,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires (\\forall int i; 0 \u003c= i \u0026\u0026 i \u003c index.length; 0 \u003c= index[i] \u0026\u0026 index[i] \u003c array.length);\r"
        },
        {
          "limitHit": false,
          "lineNumber": 1699,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires array != index;\r"
        },
        {
          "limitHit": false,
          "lineNumber": 1720,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires 0 \u003c= first \u0026\u0026 first \u003c= right \u0026\u0026 right \u003c array.length;\r"
        },
        {
          "limitHit": false,
          "lineNumber": 1721,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires (\\forall int i; 0 \u003c= i \u0026\u0026 i \u003c index.length; 0 \u003c= index[i] \u0026\u0026 index[i] \u003c array.length);\r"
        },
        {
          "limitHit": false,
          "lineNumber": 1722,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires array != index;\r"
        },
        {
          "limitHit": false,
          "lineNumber": 1746,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires 0 \u003c= first \u0026\u0026 first \u003c= right \u0026\u0026 right \u003c array.length;\r"
        },
        {
          "limitHit": false,
          "lineNumber": 1774,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires 0 \u003c= first \u0026\u0026 first \u003c= right \u0026\u0026 right \u003c array.length;\r"
        }
      ],
      "repository": {
        "name": "github.com/triguero/MRPR",
        "url": "/github.com/triguero/MRPR"
      }
    },
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "fa027a4d3f254710aad868d79c75ce32aa285ee9"
        },
        "content": "/***********************************************************************\r\n\r\n\tThis file is part of KEEL-software, the Data Mining tool for regression, \r\n\tclassification, clustering, pattern mining and so on.\r\n\r\n\tCopyright (C) 2004-2010\r\n\t\r\n\tF. Herrera (herrera@decsai.ugr.es)\r\n    L. S�nchez (luciano@uniovi.es)\r\n    J. Alcal�-Fdez (jalcala@decsai.ugr.es)\r\n    S. Garc�a (sglopez@ujaen.es)\r\n    A. Fern�ndez (alberto.fernandez@ujaen.es)\r\n    J. Luengo (julianlm@decsai.ugr.es)\r\n\r\n\tThis program is free software: you can redistribute it and/or modify\r\n\tit under the terms of the GNU General Public License as published by\r\n\tthe Free Software Foundation, either version 3 of the License, or\r\n\t(at your option) any later version.\r\n\r\n\tThis program is distributed in the hope that it will be useful,\r\n\tbut WITHOUT ANY WARRANTY; without even the implied warranty of\r\n\tMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n\tGNU General Public License for more details.\r\n\r\n\tYou should have received a copy of the GNU General Public License\r\n\talong with this program.  If not, see http://www.gnu.org/licenses/\r\n  \r\n**********************************************************************/\r\n\r\n/*\r\n *    This program is free software; you can redistribute it and/or modify\r\n *    it under the terms of the GNU General Public License as published by\r\n *    the Free Software Foundation; either version 2 of the License, or\r\n *    (at your option) any later version.\r\n *\r\n *    This program is distributed in the hope that it will be useful,\r\n *    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n *    GNU General Public License for more details.\r\n *\r\n *    You should have received a copy of the GNU General Public License\r\n *    along with this program; if not, write to the Free Software\r\n *    Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.\r\n */\r\n\r\n/*\r\n *    FastVector.java\r\n *    Copyright (C) 1999 University of Waikato, Hamilton, New Zealand\r\n *\r\n */\r\n\r\npackage org.apache.mahout.keel.Algorithms.Statistical_Classifiers.Logistic.core;\r\n\r\nimport java.io.Serializable;\r\nimport java.util.Enumeration;\r\n\r\n/**\r\n * Implements a fast vector class without synchronized\r\n * methods. Replaces java.util.Vector. (Synchronized methods tend to\r\n * be slow.)\r\n *\r\n * @author Eibe Frank (eibe@cs.waikato.ac.nz)\r\n * @version $Revision: 1.1 $\r\n */\r\npublic class FastVector\r\n  implements Copyable, Serializable {\r\n\r\n  /** for serialization */\r\n  private static final long serialVersionUID = -2173635135622930169L;\r\n\r\n  /**\r\n   * Class for enumerating the vector's elements.\r\n   */\r\n  public class FastVectorEnumeration implements Enumeration {\r\n\r\n    /** The counter. */\r\n    private int m_Counter;\r\n    // These JML commands say how m_Counter implements Enumeration\r\n    //@ in moreElements;\r\n    //@ private represents moreElements = m_Counter \u003c m_Vector.size();\r\n    //@ private invariant 0 \u003c= m_Counter \u0026\u0026 m_Counter \u003c= m_Vector.size();\r\n\r\n    /** The vector. */\r\n    private /*@non_null@*/ FastVector m_Vector;\r\n\r\n    /** Special element. Skipped during enumeration. */\r\n    private int m_SpecialElement;\r\n    //@ private invariant -1 \u003c= m_SpecialElement;\r\n    //@ private invariant m_SpecialElement \u003c m_Vector.size();\r\n    //@ private invariant m_SpecialElement\u003e=0 ==\u003e m_Counter!=m_SpecialElement;\r\n\r\n    /**\r\n     * Constructs an enumeration.\r\n     *\r\n     * @param vector the vector which is to be enumerated\r\n     */\r\n    public FastVectorEnumeration(/*@non_null@*/FastVector vector) {\r\n\r\n      m_Counter = 0;\r\n      m_Vector = vector;\r\n      m_SpecialElement = -1;\r\n    }\r\n\r\n    /**\r\n     * Constructs an enumeration with a special element.\r\n     * The special element is skipped during the enumeration.\r\n     *\r\n     * @param vector the vector which is to be enumerated\r\n     * @param special the index of the special element\r\n     */\r\n    //@ requires 0 \u003c= special \u0026\u0026 special \u003c vector.size();\r\n    public FastVectorEnumeration(/*@non_null@*/FastVector vector, int special){\r\n\r\n      m_Vector = vector;\r\n      m_SpecialElement = special;\r\n      if (special == 0) {\r\n\tm_Counter = 1;\r\n      } else {\r\n\tm_Counter = 0;\r\n      }\r\n    }\r\n\r\n\r\n    /**\r\n     * Tests if there are any more elements to enumerate.\r\n     *\r\n     * @return true if there are some elements left\r\n     */\r\n    public final /*@pure@*/ boolean hasMoreElements() {\r\n\r\n      if (m_Counter \u003c m_Vector.size()) {\r\n\treturn true;\r\n      }\r\n      return false;\r\n    }\r\n\r\n    /**\r\n     * Returns the next element.\r\n     *\r\n     * @return the next element to be enumerated\r\n     */\r\n    //@ also requires hasMoreElements();\r\n    public final Object nextElement() {\r\n  \r\n      Object result = m_Vector.elementAt(m_Counter);\r\n\r\n      m_Counter++;\r\n      if (m_Counter == m_SpecialElement) {\r\n\tm_Counter++;\r\n      }\r\n      return result;\r\n    }\r\n  }\r\n\r\n  /** The array of objects. */\r\n  private /*@spec_public@*/ Object[] m_Objects;\r\n  //@ invariant m_Objects != null;\r\n  //@ invariant m_Objects.length \u003e= 0;\r\n\r\n  /** The current size; */\r\n  private /*@spec_public@*/ int m_Size = 0;\r\n  //@ invariant 0 \u003c= m_Size;\r\n  //@ invariant m_Size \u003c= m_Objects.length;\r\n\r\n  /** The capacity increment */\r\n  private /*@spec_public@*/ int m_CapacityIncrement = 1;\r\n  //@ invariant 1 \u003c= m_CapacityIncrement;\r\n  \r\n  /** The capacity multiplier. */\r\n  private /*@spec_public@*/ int m_CapacityMultiplier = 2;\r\n  //@ invariant 1 \u003c= m_CapacityMultiplier;\r\n\r\n  // Make sure the size will increase...\r\n  //@ invariant 3 \u003c= m_CapacityMultiplier + m_CapacityIncrement;\r\n\r\n  /**\r\n   * Constructs an empty vector with initial\r\n   * capacity zero.\r\n   */\r\n  public FastVector() {\r\n  \r\n    m_Objects = new Object[0];\r\n  }\r\n\r\n  /**\r\n   * Constructs a vector with the given capacity.\r\n   *\r\n   * @param capacity the vector's initial capacity\r\n   */\r\n  //@ requires capacity \u003e= 0;\r\n  public FastVector(int capacity) {\r\n\r\n    m_Objects = new Object[capacity];\r\n  }\r\n\r\n  /**\r\n   * Adds an element to this vector. Increases its\r\n   * capacity if its not large enough.\r\n   *\r\n   * @param element the element to add\r\n   */\r\n  public final void addElement(Object element) {\r\n\r\n    Object[] newObjects;\r\n\r\n    if (m_Size == m_Objects.length) {\r\n      newObjects = new Object[m_CapacityMultiplier *\r\n\t\t\t     (m_Objects.length +\r\n\t\t\t      m_CapacityIncrement)];\r\n      System.arraycopy(m_Objects, 0, newObjects, 0, m_Size);\r\n      m_Objects = newObjects;\r\n    }\r\n    m_Objects[m_Size] = element;\r\n    m_Size++;\r\n  }\r\n\r\n  /**\r\n   * Returns the capacity of the vector.\r\n   *\r\n   * @return the capacity of the vector\r\n   */\r\n  //@ ensures \\result == m_Objects.length;\r\n  public final /*@pure@*/ int capacity() {\r\n  \r\n    return m_Objects.length;\r\n  }\r\n\r\n  /**\r\n   * Produces a shallow copy of this vector.\r\n   *\r\n   * @return the new vector\r\n   */\r\n  public final Object copy() {\r\n\r\n    FastVector copy = new FastVector(m_Objects.length);\r\n\r\n    copy.m_Size = m_Size;\r\n    copy.m_CapacityIncrement = m_CapacityIncrement;\r\n    copy.m_CapacityMultiplier = m_CapacityMultiplier;\r\n    System.arraycopy(m_Objects, 0, copy.m_Objects, 0, m_Size);\r\n    return copy;\r\n  }\r\n\r\n  /**\r\n   * Clones the vector and shallow copies all its elements.\r\n   * The elements have to implement the Copyable interface.\r\n   * \r\n   * @return the new vector\r\n   */\r\n  public final Object copyElements() {\r\n\r\n    FastVector copy = new FastVector(m_Objects.length);\r\n\r\n    copy.m_Size = m_Size;\r\n    copy.m_CapacityIncrement = m_CapacityIncrement;\r\n    copy.m_CapacityMultiplier = m_CapacityMultiplier;\r\n    for (int i = 0; i \u003c m_Size; i++) {\r\n      copy.m_Objects[i] = ((Copyable)m_Objects[i]).copy();\r\n    }\r\n    return copy;\r\n  }\r\n\r\n  /**\r\n   * Returns the element at the given position.\r\n   *\r\n   * @param index the element's index\r\n   * @return the element with the given index\r\n   */\r\n  //@ requires 0 \u003c= index;\r\n  //@ requires index \u003c m_Objects.length;\r\n  public final /*@pure@*/ Object elementAt(int index) {\r\n\r\n    return m_Objects[index];\r\n  }\r\n\r\n  /**\r\n   * Returns an enumeration of this vector.\r\n   *\r\n   * @return an enumeration of this vector\r\n   */\r\n  public final /*@pure@*/ Enumeration elements() {\r\n  \r\n    return new FastVectorEnumeration(this);\r\n  }\r\n\r\n  /**\r\n   * Returns an enumeration of this vector, skipping the\r\n   * element with the given index.\r\n   *\r\n   * @param index the element to skip\r\n   * @return an enumeration of this vector\r\n   */\r\n  //@ requires 0 \u003c= index \u0026\u0026 index \u003c size();\r\n  public final /*@pure@*/ Enumeration elements(int index) {\r\n  \r\n    return new FastVectorEnumeration(this, index);\r\n  }\r\n\r\n    /**\r\n     * added by akibriya\r\n     */\r\n  public /*@pure@*/ boolean contains(Object o) {\r\n      if(o==null)\r\n\t  return false;\r\n\r\n      for(int i=0; i\u003cm_Objects.length; i++) \r\n\t  if(o.equals(m_Objects[i]))\r\n\t      return true;\r\n      \r\n      return false;\r\n  }\r\n\r\n\r\n  /**\r\n   * Returns the first element of the vector.\r\n   *\r\n   * @return the first element of the vector\r\n   */\r\n  //@ requires m_Size \u003e 0;\r\n  public final /*@pure@*/ Object firstElement() {\r\n\r\n    return m_Objects[0];\r\n  }\r\n\r\n  /**\r\n   * Searches for the first occurence of the given argument, \r\n   * testing for equality using the equals method. \r\n   *\r\n   * @param element the element to be found\r\n   * @return the index of the first occurrence of the argument \r\n   * in this vector; returns -1 if the object is not found\r\n   */\r\n  public final /*@pure@*/ int indexOf(/*@non_null@*/ Object element) {\r\n\r\n    for (int i = 0; i \u003c m_Size; i++) {\r\n      if (element.equals(m_Objects[i])) {\r\n\treturn i;\r\n      }\r\n    }\r\n    return -1;\r\n  }\r\n\r\n  /**\r\n   * Inserts an element at the given position.\r\n   *\r\n   * @param element the element to be inserted\r\n   * @param index the element's index\r\n   */\r\n  public final void insertElementAt(Object element, int index) {\r\n\r\n    Object[] newObjects;\r\n\r\n    if (m_Size \u003c m_Objects.length) {\r\n      System.arraycopy(m_Objects, index, m_Objects, index + 1, \r\n                       m_Size - index);\r\n      m_Objects[index] = element;\r\n    } else {\r\n      newObjects = new Object[m_CapacityMultiplier *\r\n\t\t\t     (m_Objects.length +\r\n\t\t\t      m_CapacityIncrement)];\r\n      System.arraycopy(m_Objects, 0, newObjects, 0, index);\r\n      newObjects[index] = element;\r\n      System.arraycopy(m_Objects, index, newObjects, index + 1,\r\n\t\t       m_Size - index);\r\n      m_Objects = newObjects;\r\n    }\r\n    m_Size++;\r\n  }\r\n\r\n  /**\r\n   * Returns the last element of the vector.\r\n   *\r\n   * @return the last element of the vector\r\n   */\r\n  //@ requires m_Size \u003e 0;\r\n  public final /*@pure@*/ Object lastElement() {\r\n\r\n    return m_Objects[m_Size - 1];\r\n  }\r\n\r\n  /**\r\n   * Deletes an element from this vector.\r\n   *\r\n   * @param index the index of the element to be deleted\r\n   */\r\n  //@ requires 0 \u003c= index \u0026\u0026 index \u003c m_Size;\r\n  public final void removeElementAt(int index) {\r\n\r\n    System.arraycopy(m_Objects, index + 1, m_Objects, index, \r\n                     m_Size - index - 1);\r\n    m_Size--;\r\n  }\r\n\r\n  /**\r\n   * Removes all components from this vector and sets its \r\n   * size to zero. \r\n   */\r\n  public final void removeAllElements() {\r\n\r\n    m_Objects = new Object[m_Objects.length];\r\n    m_Size = 0;\r\n  }\r\n\r\n  /**\r\n   * Appends all elements of the supplied vector to this vector.\r\n   *\r\n   * @param toAppend the FastVector containing elements to append.\r\n   */\r\n  public final void appendElements(FastVector toAppend) {\r\n\r\n    setCapacity(size() + toAppend.size());\r\n    System.arraycopy(toAppend.m_Objects, 0, m_Objects, size(), toAppend.size());\r\n    m_Size = m_Objects.length;\r\n  }\r\n\r\n  /** \r\n   * Returns all the elements of this vector as an array\r\n   *\r\n   * @return an array containing all the elements of this vector\r\n   */\r\n  public final Object [] toArray() {\r\n\r\n    Object [] newObjects = new Object[size()];\r\n    System.arraycopy(m_Objects, 0, newObjects, 0, size());\r\n    return newObjects;\r\n  }\r\n\r\n  /**\r\n   * Sets the vector's capacity to the given value.\r\n   *\r\n   * @param capacity the new capacity\r\n   */\r\n  public final void setCapacity(int capacity) {\r\n\r\n    Object[] newObjects = new Object[capacity];\r\n   \r\n    System.arraycopy(m_Objects, 0, newObjects, 0, Math.min(capacity, m_Size));\r\n    m_Objects = newObjects;\r\n    if (m_Objects.length \u003c m_Size)\r\n      m_Size = m_Objects.length;\r\n  }\r\n\r\n  /**\r\n   * Sets the element at the given index.\r\n   *\r\n   * @param element the element to be put into the vector\r\n   * @param index the index at which the element is to be placed\r\n   */\r\n  //@ requires 0 \u003c= index \u0026\u0026 index \u003c size();\r\n  public final void setElementAt(Object element, int index) {\r\n\r\n    m_Objects[index] = element;\r\n  }\r\n\r\n  /**\r\n   * Returns the vector's current size.\r\n   *\r\n   * @return the vector's current size\r\n   */\r\n  //@ ensures \\result == m_Size;\r\n  public final /*@pure@*/ int size() {\r\n\r\n    return m_Size;\r\n  }\r\n\r\n  /**\r\n   * Swaps two elements in the vector.\r\n   *\r\n   * @param first index of the first element\r\n   * @param second index of the second element\r\n   */\r\n  //@ requires 0 \u003c= first \u0026\u0026 first \u003c size();\r\n  //@ requires 0 \u003c= second \u0026\u0026 second \u003c size();\r\n  public final void swap(int first, int second) {\r\n\r\n    Object help = m_Objects[first];\r\n\r\n    m_Objects[first] = m_Objects[second];\r\n    m_Objects[second] = help;\r\n  }\r\n\r\n  /**\r\n   * Sets the vector's capacity to its size.\r\n   */\r\n  public final void trimToSize() {\r\n\r\n    Object[] newObjects = new Object[m_Size];\r\n    \r\n    System.arraycopy(m_Objects, 0, newObjects, 0, m_Size);\r\n    m_Objects = newObjects;\r\n  }\r\n}\r\n\r\n\r\n",
        "name": "FastVector.java",
        "path": "src/org/apache/mahout/keel/Algorithms/Statistical_Classifiers/Logistic/core/FastVector.java",
        "url": "/github.com/triguero/MRPR/-/blob/src/org/apache/mahout/keel/Algorithms/Statistical_Classifiers/Logistic/core/FastVector.java"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 110,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires 0 \u003c= special \u0026\u0026 special \u003c vector.size();\r"
        },
        {
          "limitHit": false,
          "lineNumber": 189,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires capacity \u003e= 0;\r"
        },
        {
          "limitHit": false,
          "lineNumber": 221,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures \\result == m_Objects.length;\r"
        },
        {
          "limitHit": false,
          "lineNumber": 268,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires 0 \u003c= index;\r"
        },
        {
          "limitHit": false,
          "lineNumber": 269,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires index \u003c m_Objects.length;\r"
        },
        {
          "limitHit": false,
          "lineNumber": 292,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires 0 \u003c= index \u0026\u0026 index \u003c size();\r"
        },
        {
          "limitHit": false,
          "lineNumber": 318,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires m_Size \u003e 0;\r"
        },
        {
          "limitHit": false,
          "lineNumber": 374,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires m_Size \u003e 0;\r"
        },
        {
          "limitHit": false,
          "lineNumber": 385,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires 0 \u003c= index \u0026\u0026 index \u003c m_Size;\r"
        },
        {
          "limitHit": false,
          "lineNumber": 448,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires 0 \u003c= index \u0026\u0026 index \u003c size();\r"
        },
        {
          "limitHit": false,
          "lineNumber": 459,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures \\result == m_Size;\r"
        },
        {
          "limitHit": false,
          "lineNumber": 471,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires 0 \u003c= first \u0026\u0026 first \u003c size();\r"
        },
        {
          "limitHit": false,
          "lineNumber": 472,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires 0 \u003c= second \u0026\u0026 second \u003c size();\r"
        }
      ],
      "repository": {
        "name": "github.com/triguero/MRPR",
        "url": "/github.com/triguero/MRPR"
      }
    },
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "fa027a4d3f254710aad868d79c75ce32aa285ee9"
        },
        "content": "/***********************************************************************\r\n\r\n\tThis file is part of KEEL-software, the Data Mining tool for regression, \r\n\tclassification, clustering, pattern mining and so on.\r\n\r\n\tCopyright (C) 2004-2010\r\n\t\r\n\tF. Herrera (herrera@decsai.ugr.es)\r\n    L. S�nchez (luciano@uniovi.es)\r\n    J. Alcal�-Fdez (jalcala@decsai.ugr.es)\r\n    S. Garc�a (sglopez@ujaen.es)\r\n    A. Fern�ndez (alberto.fernandez@ujaen.es)\r\n    J. Luengo (julianlm@decsai.ugr.es)\r\n\r\n\tThis program is free software: you can redistribute it and/or modify\r\n\tit under the terms of the GNU General Public License as published by\r\n\tthe Free Software Foundation, either version 3 of the License, or\r\n\t(at your option) any later version.\r\n\r\n\tThis program is distributed in the hope that it will be useful,\r\n\tbut WITHOUT ANY WARRANTY; without even the implied warranty of\r\n\tMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n\tGNU General Public License for more details.\r\n\r\n\tYou should have received a copy of the GNU General Public License\r\n\talong with this program.  If not, see http://www.gnu.org/licenses/\r\n  \r\n**********************************************************************/\r\n\r\n/*\r\n *    This program is free software; you can redistribute it and/or modify\r\n *    it under the terms of the GNU General Public License as published by\r\n *    the Free Software Foundation; either version 2 of the License, or\r\n *    (at your option) any later version.\r\n *\r\n *    This program is distributed in the hope that it will be useful,\r\n *    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n *    GNU General Public License for more details.\r\n *\r\n *    You should have received a copy of the GNU General Public License\r\n *    along with this program; if not, write to the Free Software\r\n *    Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.\r\n */\r\n\r\n/*\r\n *    OptionHandler.java\r\n *    Copyright (C) 1999 University of Waikato, Hamilton, New Zealand\r\n *\r\n */\r\n\r\npackage org.apache.mahout.keel.Algorithms.Statistical_Classifiers.Logistic.core;\r\n\r\nimport java.util.*;\r\n\r\n/** \r\n * Interface to something that understands options.\r\n *\r\n * @author Eibe Frank (eibe@cs.waikato.ac.nz)\r\n * @author Len Trigg (trigg@cs.waikato.ac.nz)\r\n * @version $Revision: 1.1 $\r\n */\r\npublic interface OptionHandler {\r\n\r\n  /**\r\n   * Returns an enumeration of all the available options..\r\n   *\r\n   * @return an enumeration of all available options.\r\n   */\r\n  Enumeration listOptions();\r\n\r\n  /**\r\n   * Sets the OptionHandler's options using the given list. All options\r\n   * will be set (or reset) during this call (i.e. incremental setting\r\n   * of options is not possible).\r\n   *\r\n   * @param options the list of options as an array of strings\r\n   * @exception Exception if an option is not supported\r\n   */\r\n  //@ requires options != null;\r\n  //@ requires \\nonnullelements(options);\r\n  void setOptions(String[] options) throws Exception;\r\n\r\n  /**\r\n   * Gets the current option settings for the OptionHandler.\r\n   *\r\n   * @return the list of current option settings as an array of strings\r\n   */\r\n  //@ ensures \\result != null;\r\n  //@ ensures \\nonnullelements(\\result);\r\n  /*@pure@*/ String[] getOptions();\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
        "name": "OptionHandler.java",
        "path": "src/org/apache/mahout/keel/Algorithms/Statistical_Classifiers/Logistic/core/OptionHandler.java",
        "url": "/github.com/triguero/MRPR/-/blob/src/org/apache/mahout/keel/Algorithms/Statistical_Classifiers/Logistic/core/OptionHandler.java"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 79,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires options != null;\r"
        },
        {
          "limitHit": false,
          "lineNumber": 80,
          "offsetAndLengths": [
            [
              2,
              13
            ]
          ],
          "preview": "  //@ requires \\nonnullelements(options);\r"
        },
        {
          "limitHit": false,
          "lineNumber": 88,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures \\result != null;\r"
        },
        {
          "limitHit": false,
          "lineNumber": 89,
          "offsetAndLengths": [
            [
              2,
              12
            ]
          ],
          "preview": "  //@ ensures \\nonnullelements(\\result);\r"
        }
      ],
      "repository": {
        "name": "github.com/triguero/MRPR",
        "url": "/github.com/triguero/MRPR"
      }
    },
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "fa027a4d3f254710aad868d79c75ce32aa285ee9"
        },
        "content": "/***********************************************************************\r\n\r\n\tThis file is part of KEEL-software, the Data Mining tool for regression, \r\n\tclassification, clustering, pattern mining and so on.\r\n\r\n\tCopyright (C) 2004-2010\r\n\t\r\n\tF. Herrera (herrera@decsai.ugr.es)\r\n    L. S�nchez (luciano@uniovi.es)\r\n    J. Alcal�-Fdez (jalcala@decsai.ugr.es)\r\n    S. Garc�a (sglopez@ujaen.es)\r\n    A. Fern�ndez (alberto.fernandez@ujaen.es)\r\n    J. Luengo (julianlm@decsai.ugr.es)\r\n\r\n\tThis program is free software: you can redistribute it and/or modify\r\n\tit under the terms of the GNU General Public License as published by\r\n\tthe Free Software Foundation, either version 3 of the License, or\r\n\t(at your option) any later version.\r\n\r\n\tThis program is distributed in the hope that it will be useful,\r\n\tbut WITHOUT ANY WARRANTY; without even the implied warranty of\r\n\tMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n\tGNU General Public License for more details.\r\n\r\n\tYou should have received a copy of the GNU General Public License\r\n\talong with this program.  If not, see http://www.gnu.org/licenses/\r\n  \r\n**********************************************************************/\r\n\r\n/*\r\n *    This program is free software; you can redistribute it and/or modify\r\n *    it under the terms of the GNU General Public License as published by\r\n *    the Free Software Foundation; either version 2 of the License, or\r\n *    (at your option) any later version.\r\n *\r\n *    This program is distributed in the hope that it will be useful,\r\n *    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n *    GNU General Public License for more details.\r\n *\r\n *    You should have received a copy of the GNU General Public License\r\n *    along with this program; if not, write to the Free Software\r\n *    Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.\r\n */\r\n\r\n/*\r\n *    Instance.java\r\n *    Copyright (C) 1999 University of Waikato, Hamilton, New Zealand\r\n *\r\n */\r\n\r\npackage org.apache.mahout.keel.Algorithms.SVM.SMO.core;\r\n\r\nimport java.io.Serializable;\r\nimport java.util.Enumeration;\r\n\r\nimport org.apache.mahout.keel.Dataset.Attribute;\r\nimport org.apache.mahout.keel.Dataset.Attributes;\r\n\r\n/**\r\n * Class for handling an instance. All values (numeric, date, nominal, string\r\n * or relational) are internally stored as floating-point numbers. If an\r\n * attribute is nominal (or a string or relational), the stored value is the\r\n * index of the corresponding nominal (or string or relational) value in the\r\n * attribute's definition. We have chosen this approach in favor of a more\r\n * elegant object-oriented approach because it is much faster. \u003cp\u003e\r\n *\r\n * Typical usage (code from the main() method of this class): \u003cp\u003e\r\n *\r\n * \u003ccode\u003e\r\n * ... \u003cbr\u003e\r\n *      \r\n * // Create empty instance with three attribute values \u003cbr\u003e\r\n * Instance inst = new Instance(3); \u003cbr\u003e\u003cbr\u003e\r\n *     \r\n * // Set instance's values for the attributes \"length\", \"weight\", and \"position\"\u003cbr\u003e\r\n * inst.setValue(length, 5.3); \u003cbr\u003e\r\n * inst.setValue(weight, 300); \u003cbr\u003e\r\n * inst.setValue(position, \"first\"); \u003cbr\u003e\u003cbr\u003e\r\n *   \r\n * // Set instance's dataset to be the dataset \"race\" \u003cbr\u003e\r\n * inst.setDataset(race); \u003cbr\u003e\u003cbr\u003e\r\n *   \r\n * // Print the instance \u003cbr\u003e\r\n * System.out.println(\"The instance: \" + inst); \u003cbr\u003e\r\n *\r\n * ... \u003cbr\u003e\r\n * \u003c/code\u003e\u003cp\u003e\r\n *\r\n * All methods that change an instance are safe, ie. a change of an\r\n * instance does not affect any other instances. All methods that\r\n * change an instance's attribute values clone the attribute value\r\n * vector before it is changed. If your application heavily modifies\r\n * instance values, it may be faster to create a new instance from scratch.\r\n *\r\n * @author Eibe Frank (eibe@cs.waikato.ac.nz)\r\n * @version $Revision: 1.1 $ \r\n */\r\npublic class Instance\r\nimplements Serializable {\r\n\r\n\t/** for serialization */\r\n\tstatic final long serialVersionUID = 1482635194499365122L;\r\n\r\n\t/** Constant representing a missing value. */\r\n\tprotected static final double MISSING_VALUE = Double.NaN;\r\n\r\n\t/** \r\n\t * The dataset the instance has access to.  Null if the instance\r\n\t * doesn't have access to any dataset.  Only if an instance has\r\n\t * access to a dataset, it knows about the actual attribute types.  \r\n\t */\r\n\tprotected /*@spec_public@*/ Instances m_Dataset;\r\n\r\n\t/** The instance's attribute values. */\r\n\tprotected /*@spec_public non_null@*/ double[] m_AttValues;\r\n\r\n\t/** The instance's weight. */\r\n\tprotected double m_Weight;\r\n\r\n\t/**\r\n\t * Constructor that copies the attribute values and the weight from\r\n\t * the given instance. Reference to the dataset is set to null.\r\n\t * (ie. the instance doesn't have access to information about the\r\n\t * attribute types)\r\n\t *\r\n\t * @param instance the instance from which the attribute\r\n\t * values and the weight are to be copied \r\n\t */\r\n\t//@ ensures m_Dataset == null;\r\n\tpublic Instance(/*@non_null@*/ Instance instance) {\r\n\r\n\t\tm_AttValues = instance.m_AttValues;\r\n\t\tm_Weight = instance.m_Weight;\r\n\t\tm_Dataset = null;\r\n\t}\r\n\r\n\t/**\r\n\t * Constructor that inititalizes instance variable with given\r\n\t * values. Reference to the dataset is set to null. (ie. the instance\r\n\t * doesn't have access to information about the attribute types)\r\n\t *\r\n\t * @param weight the instance's weight\r\n\t * @param attValues a vector of attribute values \r\n\t */\r\n\t//@ ensures m_Dataset == null;\r\n\tpublic Instance(double weight,  /*@non_null@*/ double[]attValues){\r\n\r\n\t\tm_AttValues = attValues;\r\n\t\tm_Weight = weight;\r\n\t\tm_Dataset = null;\r\n\t}\r\n\r\n\t/**\r\n\t * Constructor of an instance that sets weight to one, all values to\r\n\t * be missing, and the reference to the dataset to null. (ie. the instance\r\n\t * doesn't have access to information about the attribute types)\r\n\t *\r\n\t * @param numAttributes the size of the instance \r\n\t */\r\n\t//@ requires numAttributes \u003e 0;    // Or maybe == 0 is okay too?\r\n\t//@ ensures m_Dataset == null;\r\n\tpublic Instance(int numAttributes) {\r\n\r\n\t\tm_AttValues = new double[numAttributes];\r\n\t\tfor (int i = 0; i \u003c m_AttValues.length; i++) {\r\n\t\t\tm_AttValues[i] = MISSING_VALUE;\r\n\t\t}\r\n\t\tm_Weight = 1;\r\n\t\tm_Dataset = null;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the attribute with the given index.\r\n\t *\r\n\t * @param index the attribute's index\r\n\t * @return the attribute at the given position\r\n\t * @throws UnassignedDatasetException if instance doesn't have access to a\r\n\t * dataset\r\n\t */ \r\n\t//@ requires m_Dataset != null;\r\n\tpublic /*@pure@*/ Attribute attribute(int index) {\r\n\r\n\t\tif (m_Dataset == null) {\r\n\t\t\tthrow new UnassignedDatasetException(\"Instance doesn't have access to a dataset!\");\r\n\t\t}\r\n\t\treturn Attributes.getAttribute(index);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the attribute with the given index. Does the same\r\n\t * thing as attribute().\r\n\t *\r\n\t * @param indexOfIndex the index of the attribute's index \r\n\t * @return the attribute at the given position\r\n\t * @throws UnassignedDatasetException if instance doesn't have access to a\r\n\t * dataset\r\n\t */ \r\n\t//@ requires m_Dataset != null;\r\n\tpublic /*@pure@*/ Attribute attributeSparse(int indexOfIndex) {\r\n\r\n\t\tif (m_Dataset == null) {\r\n\t\t\tthrow new UnassignedDatasetException(\"Instance doesn't have access to a dataset!\");\r\n\t\t}\r\n\t\treturn m_Dataset.attribute(indexOfIndex);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns class attribute.\r\n\t *\r\n\t * @return the class attribute\r\n\t * @throws UnassignedDatasetException if the class is not set or the\r\n\t * instance doesn't have access to a dataset\r\n\t */\r\n\t//@ requires m_Dataset != null;\r\n\tpublic /*@pure@*/ Attribute classAttribute() {\r\n\r\n\t\tif (m_Dataset == null) {\r\n\t\t\tthrow new UnassignedDatasetException(\"Instance doesn't have access to a dataset!\");\r\n\t\t}\r\n\t\treturn m_Dataset.classAttribute();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the class attribute's index.\r\n\t *\r\n\t * @return the class index as an integer \r\n\t * @throws UnassignedDatasetException if instance doesn't have access to a dataset \r\n\t */\r\n\t//@ requires m_Dataset != null;\r\n\t//@ ensures  \\result == m_Dataset.classIndex();\r\n\tpublic /*@pure@*/ int classIndex() {\r\n\r\n\t\tif (m_Dataset == null) {\r\n\t\t\tthrow new UnassignedDatasetException(\"Instance doesn't have access to a dataset!\");\r\n\t\t}\r\n\t\treturn m_Dataset.classIndex();\r\n\t}\r\n\r\n\t/**\r\n\t * Tests if an instance's class is missing.\r\n\t *\r\n\t * @return true if the instance's class is missing\r\n\t * @throws UnassignedClassException if the class is not set or the instance doesn't\r\n\t * have access to a dataset\r\n\t */\r\n\t//@ requires classIndex() \u003e= 0;\r\n\tpublic /*@pure@*/ boolean classIsMissing() {\r\n\r\n\t\tif (classIndex() \u003c 0) {\r\n\t\t\tthrow new UnassignedClassException(\"Class is not set!\");\r\n\t\t}\r\n\t\treturn isMissing(classIndex());\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an instance's class value in internal format. (ie. as a\r\n\t * floating-point number)\r\n\t *\r\n\t * @return the corresponding value as a double (If the \r\n\t * corresponding attribute is nominal (or a string) then it returns the \r\n\t * value's index as a double).\r\n\t * @throws UnassignedClassException if the class is not set or the instance doesn't\r\n\t * have access to a dataset \r\n\t */\r\n\t//@ requires classIndex() \u003e= 0;\r\n\tpublic /*@pure@*/ double classValue() {\r\n\r\n\t\tif (classIndex() \u003c 0) {\r\n\t\t\tthrow new UnassignedClassException(\"Class is not set!\");\r\n\t\t}\r\n\t\treturn value(classIndex());\r\n\t}\r\n\r\n\t/**\r\n\t * Produces a shallow copy of this instance. The copy has\r\n\t * access to the same dataset. (if you want to make a copy\r\n\t * that doesn't have access to the dataset, use \r\n\t * \u003ccode\u003enew Instance(instance)\u003c/code\u003e\r\n\t *\r\n\t * @return the shallow copy\r\n\t */\r\n\t//@ also ensures \\result != null;\r\n\t//@ also ensures \\result instanceof Instance;\r\n\t//@ also ensures ((Instance)\\result).m_Dataset == m_Dataset;\r\n\tpublic /*@pure@*/ Object copy() {\r\n\r\n\t\tInstance result = new Instance(this);\r\n\t\tresult.m_Dataset = m_Dataset;\r\n\t\treturn result;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the dataset this instance has access to. (ie. obtains\r\n\t * information about attribute types from) Null if the instance\r\n\t * doesn't have access to a dataset.\r\n\t *\r\n\t * @return the dataset the instance has accesss to\r\n\t */\r\n\t//@ ensures \\result == m_Dataset;\r\n\tpublic /*@pure@*/ Instances dataset() {\r\n\r\n\t\treturn m_Dataset;\r\n\t}\r\n\r\n\t/**\r\n\t * Deletes an attribute at the given position (0 to \r\n\t * numAttributes() - 1). Only succeeds if the instance does not\r\n\t * have access to any dataset because otherwise inconsistencies\r\n\t * could be introduced.\r\n\t *\r\n\t * @param position the attribute's position\r\n\t * @throws RuntimeException if the instance has access to a\r\n\t * dataset \r\n\t */\r\n\t//@ requires m_Dataset != null;\r\n\tpublic void deleteAttributeAt(int position) {\r\n\r\n\t\tif (m_Dataset != null) {\r\n\t\t\tthrow new RuntimeException(\"Instance has access to a dataset!\");\r\n\t\t}\r\n\t\tforceDeleteAttributeAt(position);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an enumeration of all the attributes.\r\n\t *\r\n\t * @return enumeration of all the attributes\r\n\t * @throws UnassignedDatasetException if the instance doesn't\r\n\t * have access to a dataset \r\n\t */\r\n\t//@ requires m_Dataset != null;\r\n\tpublic /*@pure@*/ Enumeration enumerateAttributes() {\r\n\r\n\t\tif (m_Dataset == null) {\r\n\t\t\tthrow new UnassignedDatasetException(\"Instance doesn't have access to a dataset!\");\r\n\t\t}\r\n\t\treturn m_Dataset.enumerateAttributes();\r\n\t}\r\n\r\n\t/**\r\n\t * Tests if the headers of two instances are equivalent.\r\n\t *\r\n\t * @param inst another instance\r\n\t * @return true if the header of the given instance is \r\n\t * equivalent to this instance's header\r\n\t * @throws UnassignedDatasetException if instance doesn't have access to any\r\n\t * dataset\r\n\t */\r\n\t//@ requires m_Dataset != null;\r\n\tpublic /*@pure@*/ boolean equalHeaders(Instance inst) {\r\n\r\n\t\tif (m_Dataset == null) {\r\n\t\t\tthrow new UnassignedDatasetException(\"Instance doesn't have access to a dataset!\");\r\n\t\t}\r\n\t\treturn m_Dataset.equalHeaders(inst.m_Dataset);\r\n\t}\r\n\r\n\t/**\r\n\t * Tests whether an instance has a missing value. Skips the class attribute if set.\r\n\t * @return true if instance has a missing value.\r\n\t * @throws UnassignedDatasetException if instance doesn't have access to any\r\n\t * dataset\r\n\t */\r\n\t//@ requires m_Dataset != null;\r\n\tpublic /*@pure@*/ boolean hasMissingValue() {\r\n\r\n\t\tif (m_Dataset == null) {\r\n\t\t\tthrow new UnassignedDatasetException(\"Instance doesn't have access to a dataset!\");\r\n\t\t}\r\n\t\tfor (int i = 0; i \u003c numAttributes(); i++) {\r\n\t\t\tif (i != classIndex()) {\r\n\t\t\t\tif (isMissing(i)) {\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the index of the attribute stored at the given position.\r\n\t * Just returns the given value.\r\n\t *\r\n\t * @param position the position \r\n\t * @return the index of the attribute stored at the given position\r\n\t */\r\n\tpublic /*@pure@*/ int index(int position) {\r\n\r\n\t\treturn position;\r\n\t}\r\n\r\n\t/**\r\n\t * Inserts an attribute at the given position (0 to \r\n\t * numAttributes()). Only succeeds if the instance does not\r\n\t * have access to any dataset because otherwise inconsistencies\r\n\t * could be introduced.\r\n\t *\r\n\t * @param position the attribute's position\r\n\t * @throws RuntimeException if the instance has accesss to a\r\n\t * dataset\r\n\t * @throws IllegalArgumentException if the position is out of range\r\n\t */\r\n\t//@ requires m_Dataset == null;\r\n\t//@ requires 0 \u003c= position \u0026\u0026 position \u003c= numAttributes();\r\n\tpublic void insertAttributeAt(int position) {\r\n\r\n\t\tif (m_Dataset != null) {\r\n\t\t\tthrow new RuntimeException(\"Instance has accesss to a dataset!\");\r\n\t\t}\r\n\t\tif ((position \u003c 0) ||\r\n\t\t\t\t(position \u003e numAttributes())) {\r\n\t\t\tthrow new IllegalArgumentException(\"Can't insert attribute: index out \"+\r\n\t\t\t\"of range\");\r\n\t\t}\r\n\t\tforceInsertAttributeAt(position);\r\n\t}\r\n\r\n\t/**\r\n\t * Tests if a specific value is \"missing\".\r\n\t *\r\n\t * @param attIndex the attribute's index\r\n\t * @return true if the value is \"missing\"\r\n\t */\r\n\tpublic /*@pure@*/ boolean isMissing(int attIndex) {\r\n\r\n\t\tif (Double.isNaN(m_AttValues[attIndex])) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t * Tests if a specific value is \"missing\". Does\r\n\t * the same thing as isMissing() if applied to an Instance.\r\n\t *\r\n\t * @param indexOfIndex the index of the attribute's index \r\n\t * @return true if the value is \"missing\"\r\n\t */\r\n\tpublic /*@pure@*/ boolean isMissingSparse(int indexOfIndex) {\r\n\r\n\t\tif (Double.isNaN(m_AttValues[indexOfIndex])) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t * Tests if a specific value is \"missing\".\r\n\t * The given attribute has to belong to a dataset.\r\n\t *\r\n\t * @param att the attribute\r\n\t * @return true if the value is \"missing\"\r\n\t */\r\n\tpublic /*@pure@*/ boolean isMissing(Attribute att) {\r\n\t\tint index;\r\n\t\tindex = -1;\r\n\t\tfor(int i=0;i\u003cAttributes.getNumAttributes() \u0026\u0026 index ==-1;i++)\r\n\t\t\tif(att == Attributes.getAttribute(index))\r\n\t\t\t\tindex = i;\r\n\t\treturn isMissing(index);\r\n\t}\r\n\r\n\t/**\r\n\t * Tests if the given value codes \"missing\".\r\n\t *\r\n\t * @param val the value to be tested\r\n\t * @return true if val codes \"missing\"\r\n\t */\r\n\tpublic static /*@pure@*/ boolean isMissingValue(double val) {\r\n\r\n\t\treturn Double.isNaN(val);\r\n\t}\r\n\r\n\t/**\r\n\t * Merges this instance with the given instance and returns\r\n\t * the result. Dataset is set to null.\r\n\t *\r\n\t * @param inst the instance to be merged with this one\r\n\t * @return the merged instances\r\n\t */\r\n\tpublic Instance mergeInstance(Instance inst) {\r\n\r\n\t\tint m = 0;\r\n\t\tdouble [] newVals = new double[numAttributes() + inst.numAttributes()];\r\n\t\tfor (int j = 0; j \u003c numAttributes(); j++, m++) {\r\n\t\t\tnewVals[m] = value(j);\r\n\t\t}\r\n\t\tfor (int j = 0; j \u003c inst.numAttributes(); j++, m++) {\r\n\t\t\tnewVals[m] = inst.value(j);\r\n\t\t}\r\n\t\treturn new Instance(1.0, newVals);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the double that codes \"missing\".\r\n\t *\r\n\t * @return the double that codes \"missing\"\r\n\t */\r\n\tpublic /*@pure@*/ static double missingValue() {\r\n\r\n\t\treturn MISSING_VALUE;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the number of attributes.\r\n\t *\r\n\t * @return the number of attributes as an integer\r\n\t */\r\n\t//@ ensures \\result == m_AttValues.length;\r\n\tpublic /*@pure@*/ int numAttributes() {\r\n\r\n\t\treturn m_AttValues.length;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the number of class labels.\r\n\t *\r\n\t * @return the number of class labels as an integer if the \r\n\t * class attribute is nominal, 1 otherwise.\r\n\t * @throws UnassignedDatasetException if instance doesn't have access to any\r\n\t * dataset\r\n\t */\r\n\t//@ requires m_Dataset != null;\r\n\tpublic /*@pure@*/ int numClasses() {\r\n\r\n\t\tif (m_Dataset == null) {\r\n\t\t\tthrow new UnassignedDatasetException(\"Instance doesn't have access to a dataset!\");\r\n\t\t}\r\n\t\treturn m_Dataset.numClasses();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the number of values present. Always the same as numAttributes().\r\n\t *\r\n\t * @return the number of values\r\n\t */\r\n\t//@ ensures \\result == m_AttValues.length;\r\n\tpublic /*@pure@*/ int numValues() {\r\n\r\n\t\treturn m_AttValues.length;\r\n\t}\r\n\r\n\t/** \r\n\t * Replaces all missing values in the instance with the\r\n\t * values contained in the given array. A deep copy of\r\n\t * the vector of attribute values is performed before the\r\n\t * values are replaced.\r\n\t *\r\n\t * @param array containing the means and modes\r\n\t * @throws IllegalArgumentException if numbers of attributes are unequal\r\n\t */\r\n\tpublic void replaceMissingValues(double[] array) {\r\n\r\n\t\tif ((array == null) || \r\n\t\t\t\t(array.length != m_AttValues.length)) {\r\n\t\t\tthrow new IllegalArgumentException(\"Unequal number of attributes!\");\r\n\t\t}\r\n\t\tfreshAttributeVector();\r\n\t\tfor (int i = 0; i \u003c m_AttValues.length; i++) {\r\n\t\t\tif (isMissing(i)) {\r\n\t\t\t\tm_AttValues[i] = array[i];\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the class value of an instance to be \"missing\". A deep copy of\r\n\t * the vector of attribute values is performed before the\r\n\t * value is set to be missing.\r\n\t *\r\n\t * @throws UnassignedClassException if the class is not set\r\n\t * @throws UnassignedDatasetException if the instance doesn't\r\n\t * have access to a dataset\r\n\t */\r\n\t//@ requires classIndex() \u003e= 0;\r\n\tpublic void setClassMissing() {\r\n\r\n\t\tif (classIndex() \u003c 0) {\r\n\t\t\tthrow new UnassignedClassException(\"Class is not set!\");\r\n\t\t}\r\n\t\tsetMissing(classIndex());\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the class value of an instance to the given value (internal\r\n\t * floating-point format).  A deep copy of the vector of attribute\r\n\t * values is performed before the value is set.\r\n\t *\r\n\t * @param value the new attribute value (If the corresponding\r\n\t * attribute is nominal (or a string) then this is the new value's\r\n\t * index as a double).  \r\n\t * @throws UnassignedClassException if the class is not set\r\n\t * @throws UnaddignedDatasetException if the instance doesn't\r\n\t * have access to a dataset \r\n\t */\r\n\t//@ requires classIndex() \u003e= 0;\r\n\tpublic void setClassValue(double value) {\r\n\r\n\t\tif (classIndex() \u003c 0) {\r\n\t\t\tthrow new UnassignedClassException(\"Class is not set!\");\r\n\t\t}\r\n\t\tsetValue(classIndex(), value);\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the class value of an instance to the given value. A deep\r\n\t * copy of the vector of attribute values is performed before the\r\n\t * value is set.\r\n\t *\r\n\t * @param value the new class value (If the class\r\n\t * is a string attribute and the value can't be found,\r\n\t * the value is added to the attribute).\r\n\t * @throws UnassignedClassException if the class is not set\r\n\t * @throws UnassignedDatasetException if the dataset is not set\r\n\t * @throws IllegalArgumentException if the attribute is not\r\n\t * nominal or a string, or the value couldn't be found for a nominal\r\n\t * attribute \r\n\t */\r\n\t//@ requires classIndex() \u003e= 0;\r\n\tpublic final void setClassValue(String value) {\r\n\r\n\t\tif (classIndex() \u003c 0) {\r\n\t\t\tthrow new UnassignedClassException(\"Class is not set!\");\r\n\t\t}\r\n\t\tsetValue(classIndex(), value);\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the reference to the dataset. Does not check if the instance\r\n\t * is compatible with the dataset. Note: the dataset does not know\r\n\t * about this instance. If the structure of the dataset's header\r\n\t * gets changed, this instance will not be adjusted automatically.\r\n\t *\r\n\t * @param instances the reference to the dataset \r\n\t */\r\n\tpublic final void setDataset(Instances instances) {\r\n\r\n\t\tm_Dataset = instances;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets a specific value to be \"missing\". Performs a deep copy\r\n\t * of the vector of attribute values before the value is set to\r\n\t * be missing.\r\n\t *\r\n\t * @param attIndex the attribute's index\r\n\t */\r\n\tpublic final void setMissing(int attIndex) {\r\n\r\n\t\tsetValue(attIndex, MISSING_VALUE);\r\n\t}\r\n\r\n\t/**\r\n\t * Sets a specific value to be \"missing\". Performs a deep copy\r\n\t * of the vector of attribute values before the value is set to\r\n\t * be missing. The given attribute has to belong to a dataset.\r\n\t *\r\n\t * @param att the attribute\r\n\t */\r\n\tpublic final void setMissing(Attribute att) {\r\n\t\tint index;\r\n\t\tindex = -1;\r\n\t\tfor(int i=0;i\u003cAttributes.getNumAttributes() \u0026\u0026 index ==-1;i++)\r\n\t\t\tif(att == Attributes.getAttribute(index))\r\n\t\t\t\tindex = i;\r\n\t\tsetMissing(index);\r\n\t}\r\n\r\n\t/**\r\n\t * Sets a specific value in the instance to the given value \r\n\t * (internal floating-point format). Performs a deep copy\r\n\t * of the vector of attribute values before the value is set.\r\n\t *\r\n\t * @param attIndex the attribute's index \r\n\t * @param value the new attribute value (If the corresponding\r\n\t * attribute is nominal (or a string) then this is the new value's\r\n\t * index as a double).  \r\n\t */\r\n\tpublic void setValue(int attIndex, double value) {\r\n\r\n\t\tfreshAttributeVector();\r\n\t\tm_AttValues[attIndex] = value;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets a specific value in the instance to the given value \r\n\t * (internal floating-point format). Performs a deep copy\r\n\t * of the vector of attribute values before the value is set.\r\n\t * Does exactly the same thing as setValue().\r\n\t *\r\n\t * @param indexOfIndex the index of the attribute's index \r\n\t * @param value the new attribute value (If the corresponding\r\n\t * attribute is nominal (or a string) then this is the new value's\r\n\t * index as a double).  \r\n\t */\r\n\tpublic void setValueSparse(int indexOfIndex, double value) {\r\n\r\n\t\tfreshAttributeVector();\r\n\t\tm_AttValues[indexOfIndex] = value;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets a value of a nominal or string attribute to the given\r\n\t * value. Performs a deep copy of the vector of attribute values\r\n\t * before the value is set.\r\n\t *\r\n\t * @param attIndex the attribute's index\r\n\t * @param value the new attribute value (If the attribute\r\n\t * is a string attribute and the value can't be found,\r\n\t * the value is added to the attribute).\r\n\t * @throws UnassignedDatasetException if the dataset is not set\r\n\t * @throws IllegalArgumentException if the selected\r\n\t * attribute is not nominal or a string, or the supplied value couldn't \r\n\t * be found for a nominal attribute \r\n\t */\r\n\t//@ requires m_Dataset != null;\r\n\tpublic final void setValue(int attIndex, String value) {\r\n\t\tAttribute a = Attributes.getAttribute(attIndex);\r\n\t\tint valIndex;\r\n\r\n\t\tif (m_Dataset == null) {\r\n\t\t\tthrow new UnassignedDatasetException(\"Instance doesn't have access to a dataset!\");\r\n\t\t}\r\n\t\tif (!(a.getType()==Attribute.NOMINAL)) {\r\n\t\t\tthrow new IllegalArgumentException(\"Attribute neither nominal nor string!\");\r\n\t\t}\r\n//\t\tvalIndex = attribute(attIndex).indexOfValue(value);\r\n//\t\tif (valIndex == -1) {\r\n//\t\t\tif (a.getType()==Attribute.NOMINAL) {\r\n//\t\t\t\tthrow new IllegalArgumentException(\"Value not defined for given nominal attribute!\");\r\n//\t\t\t} else {\r\n//\t\t\t\tattribute(attIndex).forceAddValue(value);\r\n//\t\t\t\tvalIndex = attribute(attIndex).indexOfValue(value);\r\n//\t\t\t}\r\n//\t\t}\r\n\t\tvalIndex = -1;\r\n\t\tfor(int i=0;i\u003ca.getNumNominalValues();i++)\r\n\t\t\tif(a.getNominalValue(i).compareTo(value)==0)\r\n\t\t\t\tvalIndex = i;\r\n\t\tsetValue(attIndex, (double)valIndex); \r\n\t}\r\n\r\n\t/**\r\n\t * Sets a specific value in the instance to the given value\r\n\t * (internal floating-point format). Performs a deep copy of the\r\n\t * vector of attribute values before the value is set, so if you are\r\n\t * planning on calling setValue many times it may be faster to\r\n\t * create a new instance using toDoubleArray.  The given attribute\r\n\t * has to belong to a dataset.\r\n\t *\r\n\t * @param att the attribute \r\n\t * @param value the new attribute value (If the corresponding\r\n\t * attribute is nominal (or a string) then this is the new value's\r\n\t * index as a double).  \r\n\t */\r\n\tpublic final void setValue(Attribute att, double value) {\r\n\t\tint index;\r\n\t\tindex = -1;\r\n\t\tfor(int i=0;i\u003cAttributes.getNumAttributes() \u0026\u0026 index ==-1;i++)\r\n\t\t\tif(att == Attributes.getAttribute(index))\r\n\t\t\t\tindex = i;\r\n\t\tsetValue(index, value);\r\n\t}\r\n\r\n\t/**\r\n\t * Sets a value of an nominal or string attribute to the given\r\n\t * value. Performs a deep copy of the vector of attribute values\r\n\t * before the value is set, so if you are planning on calling setValue many\r\n\t * times it may be faster to create a new instance using toDoubleArray.\r\n\t * The given attribute has to belong to a dataset.\r\n\t *\r\n\t * @param att the attribute\r\n\t * @param value the new attribute value (If the attribute\r\n\t * is a string attribute and the value can't be found,\r\n\t * the value is added to the attribute).\r\n\t * @throws IllegalArgumentException if the the attribute is not\r\n\t * nominal or a string, or the value couldn't be found for a nominal\r\n\t * attribute \r\n\t */\r\n\tpublic final void setValue(Attribute att, String value) {\r\n\t\tint index,valIndex;\r\n\t\tindex = -1;\r\n\t\tfor(int i=0;i\u003cAttributes.getNumAttributes() \u0026\u0026 index ==-1;i++)\r\n\t\t\tif(att == Attributes.getAttribute(index))\r\n\t\t\t\tindex = i;\r\n\t\t\r\n\t\tvalIndex = -1;\r\n\t\tfor(int i=0;i\u003catt.getNumNominalValues();i++){\r\n\t\t\tif(att.getNominalValue(i).compareTo(value)==0)\r\n\t\t\t\tvalIndex = i;\r\n\t\t}\r\n\t\tsetValue(index, (double)valIndex);\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the weight of an instance.\r\n\t *\r\n\t * @param weight the weight\r\n\t */\r\n\tpublic final void setWeight(double weight) {\r\n\r\n\t\tm_Weight = weight;\r\n\t}\r\n\r\n\t/** \r\n\t * Returns the relational value of a relational attribute.\r\n\t *\r\n\t * @param attIndex the attribute's index\r\n\t * @return the corresponding relation as an Instances object\r\n\t * @throws IllegalArgumentException if the attribute is not a\r\n\t * relation-valued attribute\r\n\t * @throws UnassignedDatasetException if the instance doesn't belong\r\n\t * to a dataset.\r\n\t */\r\n\t//@ requires m_Dataset != null;\r\n//\tpublic final /*@pure@*/ Instances relationalValue(int attIndex) {\r\n//\r\n//\t\tif (m_Dataset == null) {\r\n//\t\t\tthrow new UnassignedDatasetException(\"Instance doesn't have access to a dataset!\");\r\n//\t\t} \r\n//\t\treturn relationalValue(m_Dataset.attribute(attIndex));\r\n//\t}\r\n\r\n\r\n\t/** \r\n\t * Returns the relational value of a relational attribute.\r\n\t *\r\n\t * @param att the attribute\r\n\t * @return the corresponding relation as an Instances object\r\n\t * @throws IllegalArgumentException if the attribute is not a\r\n\t * relation-valued attribute\r\n\t * @throws UnassignedDatasetException if the instance doesn't belong\r\n\t * to a dataset.\r\n\t */\r\n//\tpublic final /*@pure@*/ Instances relationalValue(Attribute att) {\r\n//\r\n//\t\tint attIndex = att.index();\r\n//\t\tif (att.isRelationValued()) {\r\n//\t\t\treturn att.relation((int) value(attIndex));\r\n//\t\t} else {\r\n//\t\t\tthrow new IllegalArgumentException(\"Attribute isn't relation-valued!\");\r\n//\t\t}\r\n//\t}\r\n\r\n\t/** \r\n\t * Returns the value of a nominal, string, date, or relational attribute\r\n\t * for the instance as a string.\r\n\t *\r\n\t * @param attIndex the attribute's index\r\n\t * @return the value as a string\r\n\t * @throws IllegalArgumentException if the attribute is not a nominal,\r\n\t * string, date, or relation-valued attribute.\r\n\t * @throws UnassignedDatasetException if the instance doesn't belong\r\n\t * to a dataset.\r\n\t */\r\n\t//@ requires m_Dataset != null;\r\n\tpublic final /*@pure@*/ String stringValue(int attIndex) {\r\n\r\n\t\tif (m_Dataset == null) {\r\n\t\t\tthrow new UnassignedDatasetException(\"Instance doesn't have access to a dataset!\");\r\n\t\t} \r\n\t\treturn stringValue(m_Dataset.attribute(attIndex));\r\n\t}\r\n\r\n\r\n\t/** \r\n\t * Returns the value of a nominal, string, date, or relational attribute\r\n\t * for the instance as a string.\r\n\t *\r\n\t * @param att the attribute\r\n\t * @return the value as a string\r\n\t * @throws IllegalArgumentException if the attribute is not a nominal,\r\n\t * string, date, or relation-valued attribute.\r\n\t * @throws UnassignedDatasetException if the instance doesn't belong\r\n\t * to a dataset.\r\n\t */\r\n\tpublic final /*@pure@*/ String stringValue(Attribute att) {\r\n\t\tint index;\r\n\t\tAttribute a;\r\n\t\tindex = -1;\r\n\t\tif(m_Dataset!=null){\r\n\t\t\tfor(int i=0;i\u003cm_Dataset.numAttributes() \u0026\u0026 index ==-1;i++){\r\n\t\t\t\ta = m_Dataset.attribute(i);\r\n\t\t\t\tif(att == a)\r\n\t\t\t\t\tindex = i;\r\n\t\t\t}\r\n\t\t}else{\r\n\t\t\tfor(int i=0;i\u003cAttributes.getNumAttributes() \u0026\u0026 index ==-1;i++)\r\n\t\t\t\tif(att == Attributes.getAttribute(index))\r\n\t\t\t\t\tindex = i;\r\n\t\t}\r\n\t\tint attIndex = index;\r\n\t\tswitch (att.getType()) {\r\n\t\tcase Attribute.NOMINAL:\r\n\t\t\treturn att.getNominalValue((int) value(attIndex));\r\n\t\tdefault:\r\n\t\t\tthrow new IllegalArgumentException(\"Attribute isn't nominal, string or date!\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the values of each attribute as an array of doubles.\r\n\t *\r\n\t * @return an array containing all the instance attribute values\r\n\t */\r\n\tpublic double[] toDoubleArray() {\r\n\r\n\t\tdouble[] newValues = new double[m_AttValues.length];\r\n\t\tSystem.arraycopy(m_AttValues, 0, newValues, 0, \r\n\t\t\t\tm_AttValues.length);\r\n\t\treturn newValues;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the description of one instance. If the instance\r\n\t * doesn't have access to a dataset, it returns the internal\r\n\t * floating-point values. Quotes string\r\n\t * values that contain whitespace characters.\r\n\t *\r\n\t * @return the instance's description as a string\r\n\t */\r\n\tpublic String toString() {\r\n\r\n\t\tStringBuffer text = new StringBuffer();\r\n\r\n\t\tfor (int i = 0; i \u003c m_AttValues.length; i++) {\r\n\t\t\tif (i \u003e 0) text.append(\",\");\r\n\t\t\ttext.append(toString(i));\r\n\t\t}\r\n\r\n\t\treturn text.toString();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the description of one value of the instance as a \r\n\t * string. If the instance doesn't have access to a dataset, it \r\n\t * returns the internal floating-point value. Quotes string\r\n\t * values that contain whitespace characters, or if they\r\n\t * are a question mark.\r\n\t *\r\n\t * @param attIndex the attribute's index\r\n\t * @return the value's description as a string\r\n\t */\r\n\tpublic final /*@pure@*/ String toString(int attIndex) {\r\n\r\n\t\tStringBuffer text = new StringBuffer();\r\n\r\n\t\tif (isMissing(attIndex)) {\r\n\t\t\ttext.append(\"?\");\r\n\t\t} else {\r\n\t\t\tif (m_Dataset == null) {\r\n\t\t\t\ttext.append(Utils.doubleToString(m_AttValues[attIndex],6));\r\n\t\t\t} else {\r\n\t\t\t\tswitch (m_Dataset.attribute(attIndex).getType()) {\r\n\t\t\t\tcase Attribute.NOMINAL:\r\n\t\t\t\t\ttext.append(Utils.quote(stringValue(attIndex)));\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase Attribute.INTEGER:\r\n\t\t\t\tcase Attribute.REAL:\r\n\t\t\t\t\ttext.append(Utils.doubleToString(value(attIndex),6));\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tthrow new IllegalStateException(\"Unknown attribute type\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn text.toString();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the description of one value of the instance as a \r\n\t * string. If the instance doesn't have access to a dataset it \r\n\t * returns the internal floating-point value. Quotes string\r\n\t * values that contain whitespace characters, or if they\r\n\t * are a question mark.\r\n\t * The given attribute has to belong to a dataset.\r\n\t *\r\n\t * @param att the attribute\r\n\t * @return the value's description as a string\r\n\t */\r\n//\tpublic final String toString(Attribute att) {\r\n//\r\n//\t\treturn toString(att.index());\r\n//\t}\r\n\r\n\t/**\r\n\t * Returns an instance's attribute value in internal format.\r\n\t *\r\n\t * @param attIndex the attribute's index\r\n\t * @return the specified value as a double (If the corresponding\r\n\t * attribute is nominal (or a string) then it returns the value's index as a \r\n\t * double).\r\n\t */\r\n\tpublic /*@pure@*/ double value(int attIndex) {\r\n\r\n\t\treturn m_AttValues[attIndex];\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an instance's attribute value in internal format.\r\n\t * Does exactly the same thing as value() if applied to an Instance.\r\n\t *\r\n\t * @param indexOfIndex the index of the attribute's index\r\n\t * @return the specified value as a double (If the corresponding\r\n\t * attribute is nominal (or a string) then it returns the value's index as a \r\n\t * double).\r\n\t */\r\n\tpublic /*@pure@*/ double valueSparse(int indexOfIndex) {\r\n\r\n\t\treturn m_AttValues[indexOfIndex];\r\n\t}  \r\n\r\n\t/**\r\n\t * Returns an instance's attribute value in internal format.\r\n\t * The given attribute has to belong to a dataset.\r\n\t *\r\n\t * @param att the attribute\r\n\t * @return the specified value as a double (If the corresponding\r\n\t * attribute is nominal (or a string) then it returns the value's index as a\r\n\t * double).\r\n\t */\r\n\tpublic /*@pure@*/ double value(Attribute att) {\r\n\t\tint index;\r\n\t\tindex = -1;\r\n\t\tfor(int i=0;i\u003cAttributes.getNumAttributes() \u0026\u0026 index ==-1;i++)\r\n\t\t\tif(att == Attributes.getAttribute(index))\r\n\t\t\t\tindex = i;\r\n\t\treturn value(index);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the instance's weight.\r\n\t *\r\n\t * @return the instance's weight as a double\r\n\t */\r\n\tpublic final /*@pure@*/ double weight() {\r\n\r\n\t\treturn m_Weight;\r\n\t}\r\n\r\n\t/**\r\n\t * Deletes an attribute at the given position (0 to \r\n\t * numAttributes() - 1).\r\n\t *\r\n\t * @param position the attribute's position\r\n\t */\r\n\tvoid forceDeleteAttributeAt(int position) {\r\n\r\n\t\tdouble[] newValues = new double[m_AttValues.length - 1];\r\n\r\n\t\tSystem.arraycopy(m_AttValues, 0, newValues, 0, position);\r\n\t\tif (position \u003c m_AttValues.length - 1) {\r\n\t\t\tSystem.arraycopy(m_AttValues, position + 1, \r\n\t\t\t\t\tnewValues, position, \r\n\t\t\t\t\tm_AttValues.length - (position + 1));\r\n\t\t}\r\n\t\tm_AttValues = newValues;\r\n\t}\r\n\r\n\t/**\r\n\t * Inserts an attribute at the given position\r\n\t * (0 to numAttributes()) and sets its value to be missing. \r\n\t *\r\n\t * @param position the attribute's position\r\n\t */\r\n\tvoid forceInsertAttributeAt(int position)  {\r\n\r\n\t\tdouble[] newValues = new double[m_AttValues.length + 1];\r\n\r\n\t\tSystem.arraycopy(m_AttValues, 0, newValues, 0, position);\r\n\t\tnewValues[position] = MISSING_VALUE;\r\n\t\tSystem.arraycopy(m_AttValues, position, newValues, \r\n\t\t\t\tposition + 1, m_AttValues.length - position);\r\n\t\tm_AttValues = newValues;\r\n\t}\r\n\r\n\t/**\r\n\t * Private constructor for subclasses. Does nothing.\r\n\t */\r\n\tprotected Instance() {\r\n\t}\r\n\r\n\t/**\r\n\t * Clones the attribute vector of the instance and\r\n\t * overwrites it with the clone.\r\n\t */\r\n\tprivate void freshAttributeVector() {\r\n\r\n\t\tm_AttValues = toDoubleArray();\r\n\t}\r\n\r\n\t/**\r\n\t * Main method for testing this class.\r\n\t * \r\n\t * @param options the commandline options - ignored\r\n\t */\r\n\t//@ requires options != null;\r\n//\tpublic static void main(String[] options) {\r\n//\r\n//\t\ttry {\r\n//\r\n//\t\t\t// Create numeric attributes \"length\" and \"weight\"\r\n//\t\t\tAttribute length = new Attribute(\"length\");\r\n//\t\t\tAttribute weight = new Attribute(\"weight\");\r\n//\r\n//\t\t\t// Create vector to hold nominal values \"first\", \"second\", \"third\" \r\n//\t\t\tFastVector my_nominal_values = new FastVector(3); \r\n//\t\t\tmy_nominal_values.addElement(\"first\"); \r\n//\t\t\tmy_nominal_values.addElement(\"second\"); \r\n//\t\t\tmy_nominal_values.addElement(\"third\"); \r\n//\r\n//\t\t\t// Create nominal attribute \"position\" \r\n//\t\t\tAttribute position = new Attribute(\"position\", my_nominal_values);\r\n//\r\n//\t\t\t// Create vector of the above attributes \r\n//\t\t\tFastVector attributes = new FastVector(3);\r\n//\t\t\tattributes.addElement(length);\r\n//\t\t\tattributes.addElement(weight);\r\n//\t\t\tattributes.addElement(position);\r\n//\r\n//\t\t\t// Create the empty dataset \"race\" with above attributes\r\n//\t\t\tInstances race = new Instances(\"race\", attributes, 0);\r\n//\r\n//\t\t\t// Make position the class attribute\r\n//\t\t\trace.setClassIndex(position.index());\r\n//\r\n//\t\t\t// Create empty instance with three attribute values\r\n//\t\t\tInstance inst = new Instance(3);\r\n//\r\n//\t\t\t// Set instance's values for the attributes \"length\", \"weight\", and \"position\"\r\n//\t\t\tinst.setValue(length, 5.3);\r\n//\t\t\tinst.setValue(weight, 300);\r\n//\t\t\tinst.setValue(position, \"first\");\r\n//\r\n//\t\t\t// Set instance's dataset to be the dataset \"race\"\r\n//\t\t\tinst.setDataset(race);\r\n//\r\n//\t\t\t// Print the instance\r\n//\t\t\tSystem.out.println(\"The instance: \" + inst);\r\n//\r\n//\t\t\t// Print the first attribute\r\n//\t\t\tSystem.out.println(\"First attribute: \" + inst.attribute(0));\r\n//\r\n//\t\t\t// Print the class attribute\r\n//\t\t\tSystem.out.println(\"Class attribute: \" + inst.classAttribute());\r\n//\r\n//\t\t\t// Print the class index\r\n//\t\t\tSystem.out.println(\"Class index: \" + inst.classIndex());\r\n//\r\n//\t\t\t// Say if class is missing\r\n//\t\t\tSystem.out.println(\"Class is missing: \" + inst.classIsMissing());\r\n//\r\n//\t\t\t// Print the instance's class value in internal format\r\n//\t\t\tSystem.out.println(\"Class value (internal format): \" + inst.classValue());\r\n//\r\n//\t\t\t// Print a shallow copy of this instance\r\n//\t\t\tInstance copy = (Instance) inst.copy();\r\n//\t\t\tSystem.out.println(\"Shallow copy: \" + copy);\r\n//\r\n//\t\t\t// Set dataset for shallow copy\r\n//\t\t\tcopy.setDataset(inst.dataset());\r\n//\t\t\tSystem.out.println(\"Shallow copy with dataset set: \" + copy);\r\n//\r\n//\t\t\t// Unset dataset for copy, delete first attribute, and insert it again\r\n//\t\t\tcopy.setDataset(null);\r\n//\t\t\tcopy.deleteAttributeAt(0);\r\n//\t\t\tcopy.insertAttributeAt(0);\r\n//\t\t\tcopy.setDataset(inst.dataset());\r\n//\t\t\tSystem.out.println(\"Copy with first attribute deleted and inserted: \" + copy); \r\n//\r\n//\t\t\t// Enumerate attributes (leaving out the class attribute)\r\n//\t\t\tSystem.out.println(\"Enumerating attributes (leaving out class):\");\r\n//\t\t\tEnumeration enu = inst.enumerateAttributes();\r\n//\t\t\twhile (enu.hasMoreElements()) {\r\n//\t\t\t\tAttribute att = (Attribute) enu.nextElement();\r\n//\t\t\t\tSystem.out.println(att);\r\n//\t\t\t}\r\n//\r\n//\t\t\t// Headers are equivalent?\r\n//\t\t\tSystem.out.println(\"Header of original and copy equivalent: \" +\r\n//\t\t\t\t\tinst.equalHeaders(copy));\r\n//\r\n//\t\t\t// Test for missing values\r\n//\t\t\tSystem.out.println(\"Length of copy missing: \" + copy.isMissing(length));\r\n//\t\t\tSystem.out.println(\"Weight of copy missing: \" + copy.isMissing(weight.index()));\r\n//\t\t\tSystem.out.println(\"Length of copy missing: \" + \r\n//\t\t\t\t\tInstance.isMissingValue(copy.value(length)));\r\n//\t\t\tSystem.out.println(\"Missing value coded as: \" + Instance.missingValue());\r\n//\r\n//\t\t\t// Prints number of attributes and classes\r\n//\t\t\tSystem.out.println(\"Number of attributes: \" + copy.numAttributes());\r\n//\t\t\tSystem.out.println(\"Number of classes: \" + copy.numClasses());\r\n//\r\n//\t\t\t// Replace missing values\r\n//\t\t\tdouble[] meansAndModes = {2, 3, 0};\r\n//\t\t\tcopy.replaceMissingValues(meansAndModes);\r\n//\t\t\tSystem.out.println(\"Copy with missing value replaced: \" + copy);\r\n//\r\n//\t\t\t// Setting and getting values and weights\r\n//\t\t\tcopy.setClassMissing();\r\n//\t\t\tSystem.out.println(\"Copy with missing class: \" + copy);\r\n//\t\t\tcopy.setClassValue(0);\r\n//\t\t\tSystem.out.println(\"Copy with class value set to first value: \" + copy);\r\n//\t\t\tcopy.setClassValue(\"third\");\r\n//\t\t\tSystem.out.println(\"Copy with class value set to \\\"third\\\": \" + copy);\r\n//\t\t\tcopy.setMissing(1);\r\n//\t\t\tSystem.out.println(\"Copy with second attribute set to be missing: \" + copy);\r\n//\t\t\tcopy.setMissing(length);\r\n//\t\t\tSystem.out.println(\"Copy with length set to be missing: \" + copy);\r\n//\t\t\tcopy.setValue(0, 0);\r\n//\t\t\tSystem.out.println(\"Copy with first attribute set to 0: \" + copy);\r\n//\t\t\tcopy.setValue(weight, 1);\r\n//\t\t\tSystem.out.println(\"Copy with weight attribute set to 1: \" + copy);\r\n//\t\t\tcopy.setValue(position, \"second\");\r\n//\t\t\tSystem.out.println(\"Copy with position set to \\\"second\\\": \" + copy);\r\n//\t\t\tcopy.setValue(2, \"first\");\r\n//\t\t\tSystem.out.println(\"Copy with last attribute set to \\\"first\\\": \" + copy);\r\n//\t\t\tSystem.out.println(\"Current weight of instance copy: \" + copy.weight());\r\n//\t\t\tcopy.setWeight(2);\r\n//\t\t\tSystem.out.println(\"Current weight of instance copy (set to 2): \" + copy.weight());\r\n//\t\t\tSystem.out.println(\"Last value of copy: \" + copy.toString(2));\r\n//\t\t\tSystem.out.println(\"Value of position for copy: \" + copy.toString(position));\r\n//\t\t\tSystem.out.println(\"Last value of copy (internal format): \" + copy.value(2));\r\n//\t\t\tSystem.out.println(\"Value of position for copy (internal format): \" + \r\n//\t\t\t\t\tcopy.value(position));\r\n//\t\t} catch (Exception e) {\r\n//\t\t\te.printStackTrace();\r\n//\t\t}\r\n//\t}\r\n}\r\n\r\n\t\r\n",
        "name": "Instance.java",
        "path": "src/org/apache/mahout/keel/Algorithms/SVM/SMO/core/Instance.java",
        "url": "/github.com/triguero/MRPR/-/blob/src/org/apache/mahout/keel/Algorithms/SVM/SMO/core/Instance.java"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 129,
          "offsetAndLengths": [
            [
              1,
              12
            ]
          ],
          "preview": "\t//@ ensures m_Dataset == null;\r"
        },
        {
          "limitHit": false,
          "lineNumber": 145,
          "offsetAndLengths": [
            [
              1,
              12
            ]
          ],
          "preview": "\t//@ ensures m_Dataset == null;\r"
        },
        {
          "limitHit": false,
          "lineNumber": 160,
          "offsetAndLengths": [
            [
              1,
              13
            ]
          ],
          "preview": "\t//@ requires numAttributes \u003e 0;    // Or maybe == 0 is okay too?\r"
        },
        {
          "limitHit": false,
          "lineNumber": 161,
          "offsetAndLengths": [
            [
              1,
              12
            ]
          ],
          "preview": "\t//@ ensures m_Dataset == null;\r"
        },
        {
          "limitHit": false,
          "lineNumber": 180,
          "offsetAndLengths": [
            [
              1,
              13
            ]
          ],
          "preview": "\t//@ requires m_Dataset != null;\r"
        },
        {
          "limitHit": false,
          "lineNumber": 198,
          "offsetAndLengths": [
            [
              1,
              13
            ]
          ],
          "preview": "\t//@ requires m_Dataset != null;\r"
        },
        {
          "limitHit": false,
          "lineNumber": 214,
          "offsetAndLengths": [
            [
              1,
              13
            ]
          ],
          "preview": "\t//@ requires m_Dataset != null;\r"
        },
        {
          "limitHit": false,
          "lineNumber": 229,
          "offsetAndLengths": [
            [
              1,
              13
            ]
          ],
          "preview": "\t//@ requires m_Dataset != null;\r"
        },
        {
          "limitHit": false,
          "lineNumber": 246,
          "offsetAndLengths": [
            [
              1,
              13
            ]
          ],
          "preview": "\t//@ requires classIndex() \u003e= 0;\r"
        },
        {
          "limitHit": false,
          "lineNumber": 265,
          "offsetAndLengths": [
            [
              1,
              13
            ]
          ],
          "preview": "\t//@ requires classIndex() \u003e= 0;\r"
        },
        {
          "limitHit": false,
          "lineNumber": 299,
          "offsetAndLengths": [
            [
              1,
              12
            ]
          ],
          "preview": "\t//@ ensures \\result == m_Dataset;\r"
        },
        {
          "limitHit": false,
          "lineNumber": 315,
          "offsetAndLengths": [
            [
              1,
              13
            ]
          ],
          "preview": "\t//@ requires m_Dataset != null;\r"
        },
        {
          "limitHit": false,
          "lineNumber": 331,
          "offsetAndLengths": [
            [
              1,
              13
            ]
          ],
          "preview": "\t//@ requires m_Dataset != null;\r"
        },
        {
          "limitHit": false,
          "lineNumber": 349,
          "offsetAndLengths": [
            [
              1,
              13
            ]
          ],
          "preview": "\t//@ requires m_Dataset != null;\r"
        },
        {
          "limitHit": false,
          "lineNumber": 364,
          "offsetAndLengths": [
            [
              1,
              13
            ]
          ],
          "preview": "\t//@ requires m_Dataset != null;\r"
        },
        {
          "limitHit": false,
          "lineNumber": 403,
          "offsetAndLengths": [
            [
              1,
              13
            ]
          ],
          "preview": "\t//@ requires m_Dataset == null;\r"
        },
        {
          "limitHit": false,
          "lineNumber": 404,
          "offsetAndLengths": [
            [
              1,
              13
            ]
          ],
          "preview": "\t//@ requires 0 \u003c= position \u0026\u0026 position \u003c= numAttributes();\r"
        },
        {
          "limitHit": false,
          "lineNumber": 509,
          "offsetAndLengths": [
            [
              1,
              12
            ]
          ],
          "preview": "\t//@ ensures \\result == m_AttValues.length;\r"
        },
        {
          "limitHit": false,
          "lineNumber": 523,
          "offsetAndLengths": [
            [
              1,
              13
            ]
          ],
          "preview": "\t//@ requires m_Dataset != null;\r"
        },
        {
          "limitHit": false,
          "lineNumber": 537,
          "offsetAndLengths": [
            [
              1,
              12
            ]
          ],
          "preview": "\t//@ ensures \\result == m_AttValues.length;\r"
        },
        {
          "limitHit": false,
          "lineNumber": 575,
          "offsetAndLengths": [
            [
              1,
              13
            ]
          ],
          "preview": "\t//@ requires classIndex() \u003e= 0;\r"
        },
        {
          "limitHit": false,
          "lineNumber": 596,
          "offsetAndLengths": [
            [
              1,
              13
            ]
          ],
          "preview": "\t//@ requires classIndex() \u003e= 0;\r"
        },
        {
          "limitHit": false,
          "lineNumber": 619,
          "offsetAndLengths": [
            [
              1,
              13
            ]
          ],
          "preview": "\t//@ requires classIndex() \u003e= 0;\r"
        },
        {
          "limitHit": false,
          "lineNumber": 716,
          "offsetAndLengths": [
            [
              1,
              13
            ]
          ],
          "preview": "\t//@ requires m_Dataset != null;\r"
        },
        {
          "limitHit": false,
          "lineNumber": 815,
          "offsetAndLengths": [
            [
              1,
              13
            ]
          ],
          "preview": "\t//@ requires m_Dataset != null;\r"
        },
        {
          "limitHit": false,
          "lineNumber": 856,
          "offsetAndLengths": [
            [
              1,
              13
            ]
          ],
          "preview": "\t//@ requires m_Dataset != null;\r"
        },
        {
          "limitHit": false,
          "lineNumber": 1097,
          "offsetAndLengths": [
            [
              1,
              13
            ]
          ],
          "preview": "\t//@ requires options != null;\r"
        },
        {
          "limitHit": false,
          "lineNumber": 230,
          "offsetAndLengths": [
            [
              1,
              12
            ]
          ],
          "preview": "\t//@ ensures  \\result == m_Dataset.classIndex();\r"
        }
      ],
      "repository": {
        "name": "github.com/triguero/MRPR",
        "url": "/github.com/triguero/MRPR"
      }
    },
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "fa027a4d3f254710aad868d79c75ce32aa285ee9"
        },
        "content": "/***********************************************************************\r\n\r\n\tThis file is part of KEEL-software, the Data Mining tool for regression, \r\n\tclassification, clustering, pattern mining and so on.\r\n\r\n\tCopyright (C) 2004-2010\r\n\t\r\n\tF. Herrera (herrera@decsai.ugr.es)\r\n    L. S�nchez (luciano@uniovi.es)\r\n    J. Alcal�-Fdez (jalcala@decsai.ugr.es)\r\n    S. Garc�a (sglopez@ujaen.es)\r\n    A. Fern�ndez (alberto.fernandez@ujaen.es)\r\n    J. Luengo (julianlm@decsai.ugr.es)\r\n\r\n\tThis program is free software: you can redistribute it and/or modify\r\n\tit under the terms of the GNU General Public License as published by\r\n\tthe Free Software Foundation, either version 3 of the License, or\r\n\t(at your option) any later version.\r\n\r\n\tThis program is distributed in the hope that it will be useful,\r\n\tbut WITHOUT ANY WARRANTY; without even the implied warranty of\r\n\tMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n\tGNU General Public License for more details.\r\n\r\n\tYou should have received a copy of the GNU General Public License\r\n\talong with this program.  If not, see http://www.gnu.org/licenses/\r\n  \r\n**********************************************************************/\r\n\r\n/*\r\n *    This program is free software; you can redistribute it and/or modify\r\n *    it under the terms of the GNU General Public License as published by\r\n *    the Free Software Foundation; either version 2 of the License, or\r\n *    (at your option) any later version.\r\n *\r\n *    This program is distributed in the hope that it will be useful,\r\n *    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n *    GNU General Public License for more details.\r\n *\r\n *    You should have received a copy of the GNU General Public License\r\n *    along with this program; if not, write to the Free Software\r\n *    Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.\r\n */\r\n\r\n/*\r\n *    Instances.java\r\n *    Copyright (C) 1999 University of Waikato, Hamilton, New Zealand\r\n *\r\n */\r\n\r\npackage org.apache.mahout.keel.Algorithms.SVM.SMO.core;\r\n\r\nimport org.apache.mahout.keel.Dataset.*;\r\n\r\nimport org.core.Randomize;\r\n\r\nimport java.io.FileReader;\r\nimport java.io.IOException;\r\nimport java.io.Reader;\r\nimport java.io.Serializable;\r\nimport java.util.Enumeration;\r\nimport java.util.Random;\r\nimport java.util.Vector;\r\n\r\n/**\r\n * Class for handling an ordered set of weighted instances. \u003cp\u003e\r\n *\r\n * Typical usage: \u003cp\u003e\r\n * \u003cpre\u003e\r\n * import org.apache.mahout.keel.Algorithms.SVM.SMO.core.converters.ConverterUtils.DataSource;\r\n * ...\r\n * \r\n * // Read all the instances in the file (ARFF, CSV, XRFF, ...)\r\n * DataSource source = new DataSource(filename);\r\n * Instances instances = source.getDataSet();\r\n *\r\n * // Make the last attribute be the class\r\n * instances.setClassIndex(instances.numAttributes() - 1);\r\n * \r\n * // Print header and instances.\r\n * System.out.println(\"\\nDataset:\\n\");\r\n * System.out.println(instances);\r\n * \r\n * ...\r\n * \u003c/pre\u003e\u003cp\u003e\r\n *\r\n * All methods that change a set of instances are safe, ie. a change\r\n * of a set of instances does not affect any other sets of\r\n * instances. All methods that change a datasets's attribute\r\n * information clone the dataset before it is changed.\r\n *\r\n * @author Eibe Frank (eibe@cs.waikato.ac.nz)\r\n * @author Len Trigg (trigg@cs.waikato.ac.nz)\r\n * @author FracPete (fracpete at waikato dot ac dot nz)\r\n * @version $Revision: 1.1 $ \r\n */\r\n//Modified to work with KEEL attributes, instead of Weka ones (Julian)\r\npublic class Instances \r\nimplements Serializable {\r\n\r\n\t/** for serialization */\r\n\tstatic final long serialVersionUID = -19412345060742748L;\r\n\r\n\t/** The filename extension that should be used for arff files */\r\n\tpublic final static String FILE_EXTENSION = \".arff\";\r\n\r\n\t/** The filename extension that should be used for bin. serialized instances files */\r\n\tpublic final static String SERIALIZED_OBJ_FILE_EXTENSION = \".bsi\";\r\n\r\n\t/** The keyword used to denote the start of an arff header */\r\n\tpublic final static String ARFF_RELATION = \"@relation\";\r\n\r\n\t/** The keyword used to denote the start of the arff data section */\r\n\tpublic final static String ARFF_DATA = \"@data\";\r\n\r\n\t/** The dataset's name. */\r\n\tprotected /*@spec_public non_null@*/ String m_RelationName;         \r\n\r\n\t/** The attribute information. */\r\n\tprotected /*@spec_public non_null@*/ FastVector m_Attributes;\r\n\t/*  public invariant (\\forall int i; 0 \u003c= i \u0026\u0026 i \u003c m_Attributes.size(); \r\n                    m_Attributes.elementAt(i) != null);\r\n\t */\r\n\r\n\t/** The instances. */\r\n\tprotected /*@spec_public non_null@*/ FastVector m_Instances;\r\n\r\n\t/** The class attribute's index */\r\n\tprotected int m_ClassIndex;\r\n\t//@ protected invariant classIndex() == m_ClassIndex;\r\n\r\n\t/** The lines read so far in case of incremental loading. Since the \r\n\t * StreamTokenizer will be re-initialized with every instance that is read,\r\n\t * we have to keep track of the number of lines read so far. \r\n\t * @see #readInstance(Reader) */\r\n\tprotected int m_Lines = 0;\r\n\r\n\t/**\r\n\t * Reads an ARFF file from a reader, and assigns a weight of\r\n\t * one to each instance. Lets the index of the class \r\n\t * attribute be undefined (negative).\r\n\t *\r\n\t * @param reader the reader\r\n\t * @throws IOException if the ARFF file is not read \r\n\t * successfully\r\n\t */\r\n//\tpublic Instances(/*@non_null@*/Reader reader) throws IOException {\r\n//\tArffReader arff = new ArffReader(reader);\r\n//\tInstances dataset = arff.getData();\r\n//\tinitialize(dataset, dataset.numInstances());\r\n//\tdataset.copyInstances(0, this, dataset.numInstances());\r\n//\tcompactify();\r\n//\t}\r\n\r\n\t/**\r\n\t * Reads the header of an ARFF file from a reader and \r\n\t * reserves space for the given number of instances. Lets\r\n\t * the class index be undefined (negative).\r\n\t *\r\n\t * @param reader the reader\r\n\t * @param capacity the capacity\r\n\t * @throws IllegalArgumentException if the header is not read successfully\r\n\t * or the capacity is negative.\r\n\t * @throws IOException if there is a problem with the reader.\r\n\t * @deprecated instead of using this method in conjunction with the\r\n\t * \u003ccode\u003ereadInstance(Reader)\u003c/code\u003e method, one should use the \r\n\t * \u003ccode\u003eArffLoader\u003c/code\u003e or \u003ccode\u003eDataSource\u003c/code\u003e class instead.\r\n\t * @see weka.core.converters.ArffLoader\r\n\t * @see weka.core.converters.ConverterUtils.DataSource\r\n\t */\r\n\t//@ requires capacity \u003e= 0;\r\n\t//@ ensures classIndex() == -1;\r\n//\t@Deprecated public Instances(/*@non_null@*/Reader reader, int capacity)\r\n//\tthrows IOException {\r\n\r\n//\tArffReader arff = new ArffReader(reader, 0);\r\n//\tInstances header = arff.getStructure();\r\n//\tinitialize(header, capacity);\r\n//\tm_Lines = arff.getLineNo();\r\n//\t}\r\n\r\n\t/**\r\n\t * Constructor copying all instances and references to\r\n\t * the header information from the given set of instances.\r\n\t *\r\n\t * @param dataset the set to be copied\r\n\t */\r\n\tpublic Instances(/*@non_null@*/Instances dataset) {\r\n\r\n\t\tthis(dataset, dataset.numInstances());\r\n\r\n\t\tdataset.copyInstances(0, this, dataset.numInstances());\r\n\t}\r\n\r\n\t/**\r\n\t * Constructor creating an empty set of instances. Copies references\r\n\t * to the header information from the given set of instances. Sets\r\n\t * the capacity of the set of instances to 0 if its negative.\r\n\t *\r\n\t * @param dataset the instances from which the header \r\n\t * information is to be taken\r\n\t * @param capacity the capacity of the new dataset \r\n\t */\r\n\tpublic Instances(/*@non_null@*/Instances dataset, int capacity) {\r\n\t\tinitialize(dataset, capacity);\r\n\t}\r\n\r\n\t/**\r\n\t * initializes with the header information of the given dataset and sets\r\n\t * the capacity of the set of instances.\r\n\t * \r\n\t * @param dataset the dataset to use as template\r\n\t * @param capacity the number of rows to reserve\r\n\t */\r\n\tprotected void initialize(Instances dataset, int capacity) {\r\n\t\tif (capacity \u003c 0)\r\n\t\t\tcapacity = 0;\r\n\r\n\t\t// Strings only have to be \"shallow\" copied because\r\n\t\t// they can't be modified.\r\n\t\tm_ClassIndex   = dataset.m_ClassIndex;\r\n\t\tm_RelationName = dataset.m_RelationName;\r\n\t\tm_Attributes   = dataset.m_Attributes;\r\n\t\tm_Instances    = new FastVector(capacity);\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a new set of instances by copying a \r\n\t * subset of another set.\r\n\t *\r\n\t * @param source the set of instances from which a subset \r\n\t * is to be created\r\n\t * @param first the index of the first instance to be copied\r\n\t * @param toCopy the number of instances to be copied\r\n\t * @throws IllegalArgumentException if first and toCopy are out of range\r\n\t */\r\n\t//@ requires 0 \u003c= first;\r\n\t//@ requires 0 \u003c= toCopy;\r\n\t//@ requires first + toCopy \u003c= source.numInstances();\r\n\tpublic Instances(/*@non_null@*/Instances source, int first, int toCopy) {\r\n\r\n\t\tthis(source, toCopy);\r\n\r\n\t\tif ((first \u003c 0) || ((first + toCopy) \u003e source.numInstances())) {\r\n\t\t\tthrow new IllegalArgumentException(\"Parameters first and/or toCopy out \"+\r\n\t\t\t\"of range\");\r\n\t\t}\r\n\t\tsource.copyInstances(first, this, toCopy);\r\n\t}\r\n\r\n\t/**\r\n\t * Creates an empty set of instances. Uses the given\r\n\t * attribute information. Sets the capacity of the set of \r\n\t * instances to 0 if its negative. Given attribute information\r\n\t * must not be changed after this constructor has been used.\r\n\t *\r\n\t * @param name the name of the relation\r\n\t * @param attInfo the attribute information\r\n\t * @param capacity the capacity of the set\r\n\t */\r\n\tpublic Instances(/*@non_null@*/String name, \r\n\t\t\t/*@non_null@*/FastVector attInfo, int capacity) {\r\n\r\n\t\tm_RelationName = name;\r\n\t\tm_ClassIndex = -1;\r\n\t\tm_Attributes = attInfo;\r\n//\t\tfor (int i = 0; i \u003c numAttributes(); i++) {\r\n//\t\tattribute(i).setIndex(i);\r\n//\t\t}\r\n\t\tm_Instances = new FastVector(capacity);\r\n\t}\r\n\r\n\t/**\r\n\t * Create a copy of the structure, but \"cleanse\" string types (i.e.\r\n\t * doesn't contain references to the strings seen in the past).\r\n\t * Also cleanses all relational attributes.\r\n\t *\r\n\t * @return a copy of the instance structure.\r\n\t */\r\n//\tpublic Instances stringFreeStructure() {\r\n\r\n//\tFastVector atts = (FastVector)m_Attributes.copy();\r\n//\tfor (int i = 0 ; i \u003c atts.size(); i++) {\r\n//\tAttribute att = (Attribute)atts.elementAt(i);\r\n//\tif (att.type() == Attribute.STRING) {\r\n//\tatts.setElementAt(new Attribute(att.name(), (FastVector)null), i);\r\n//\t} else if (att.type() == Attribute.RELATIONAL) {\r\n//\tatts.setElementAt(new Attribute(att.name(), new Instances(att.relation(), 0)), i);\r\n//\t}\r\n//\t}\r\n//\tInstances result = new Instances(relationName(), atts, 0);\r\n//\tresult.m_ClassIndex = m_ClassIndex;\r\n//\treturn result;\r\n//\t}\r\n\r\n\t/**\r\n\t * Adds one instance to the end of the set. \r\n\t * Shallow copies instance before it is added. Increases the\r\n\t * size of the dataset if it is not large enough. Does not\r\n\t * check if the instance is compatible with the dataset.\r\n\t * Note: String or relational values are not transferred.\r\n\t *\r\n\t * @param instance the instance to be added\r\n\t */\r\n\tpublic void add(/*@non_null@*/ Instance instance) {\r\n\r\n\t\tInstance newInstance = (Instance)instance.copy();\r\n\r\n\t\tnewInstance.setDataset(this);\r\n\t\tm_Instances.addElement(newInstance);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an attribute.\r\n\t *\r\n\t * @param index the attribute's index (index starts with 0)\r\n\t * @return the attribute at the given position\r\n\t */\r\n\t//@ requires 0 \u003c= index;\r\n\t//@ requires index \u003c m_Attributes.size();\r\n\t//@ ensures \\result != null;\r\n\tpublic /*@pure@*/ Attribute attribute(int index) {\r\n\r\n\t\treturn (Attribute) m_Attributes.elementAt(index);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an attribute given its name. If there is more than\r\n\t * one attribute with the same name, it returns the first one.\r\n\t * Returns null if the attribute can't be found.\r\n\t *\r\n\t * @param name the attribute's name\r\n\t * @return the attribute with the given name, null if the\r\n\t * attribute can't be found\r\n\t */ \r\n\tpublic /*@pure@*/ Attribute attribute(String name) {\r\n\r\n\t\tfor (int i = 0; i \u003c numAttributes(); i++) {\r\n\t\t\tif (attribute(i).getName().equals(name)) {\r\n\t\t\t\treturn attribute(i);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\t/**\r\n\t * Checks for attributes of the given type in the dataset\r\n\t *\r\n\t * @param attType  the attribute type to look for\r\n\t * @return         true if attributes of the given type are present\r\n\t */\r\n\tpublic boolean checkForAttributeType(int attType) {\r\n\r\n\t\tint i = 0;\r\n\r\n\t\twhile (i \u003c m_Attributes.size()) {\r\n\t\t\tif (attribute(i++).getType() == attType) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t * Checks for string attributes in the dataset\r\n\t *\r\n\t * @return true if string attributes are present, false otherwise\r\n\t */\r\n\tpublic /*@pure@*/ boolean checkForStringAttributes() {\r\n\t\treturn checkForAttributeType(Attribute.NOMINAL);\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if the given instance is compatible\r\n\t * with this dataset. Only looks at the size of\r\n\t * the instance and the ranges of the values for \r\n\t * nominal and string attributes.\r\n\t *\r\n\t * @param instance the instance to check\r\n\t * @return true if the instance is compatible with the dataset \r\n\t */\r\n\tpublic /*@pure@*/ boolean checkInstance(Instance instance) {\r\n\r\n\t\tif (instance.numAttributes() != numAttributes()) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tfor (int i = 0; i \u003c numAttributes(); i++) {\r\n\t\t\tif (instance.isMissing(i)) {\r\n\t\t\t\tcontinue;\r\n\t\t\t} else if (attribute(i).getType()==Attribute.NOMINAL) {\r\n\t\t\t\tif (!(Utils.eq(instance.value(i),\r\n\t\t\t\t\t\t(double)(int)instance.value(i)))) {\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t} else if (Utils.sm(instance.value(i), 0) ||\r\n\t\t\t\t\t\tUtils.gr(instance.value(i),\r\n\t\t\t\t\t\t\t\tattribute(i).getNumNominalValues())) {\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the class attribute.\r\n\t *\r\n\t * @return the class attribute\r\n\t * @throws UnassignedClassException if the class is not set\r\n\t */\r\n\t//@ requires classIndex() \u003e= 0;\r\n\tpublic /*@pure@*/ Attribute classAttribute() {\r\n\r\n\t\tif (m_ClassIndex \u003c 0) {\r\n\t\t\tthrow new UnassignedClassException(\"Class index is negative (not set)!\");\r\n\t\t}\r\n\t\treturn attribute(m_ClassIndex);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the class attribute's index. Returns negative number\r\n\t * if it's undefined.\r\n\t *\r\n\t * @return the class index as an integer\r\n\t */\r\n\t// ensures \\result == m_ClassIndex;\r\n\tpublic /*@pure@*/ int classIndex() {\r\n\r\n\t\treturn m_ClassIndex;\r\n\t}\r\n\r\n\t/**\r\n\t * Compactifies the set of instances. Decreases the capacity of\r\n\t * the set so that it matches the number of instances in the set.\r\n\t */\r\n\tpublic void compactify() {\r\n\r\n\t\tm_Instances.trimToSize();\r\n\t}\r\n\r\n\t/**\r\n\t * Removes all instances from the set.\r\n\t */\r\n\tpublic void delete() {\r\n\r\n\t\tm_Instances = new FastVector();\r\n\t}\r\n\r\n\t/**\r\n\t * Removes an instance at the given position from the set.\r\n\t *\r\n\t * @param index the instance's position (index starts with 0)\r\n\t */\r\n\t//@ requires 0 \u003c= index \u0026\u0026 index \u003c numInstances();\r\n\tpublic void delete(int index) {\r\n\r\n\t\tm_Instances.removeElementAt(index);\r\n\t}\r\n\r\n\t/**\r\n\t * Deletes an attribute at the given position \r\n\t * (0 to numAttributes() - 1). A deep copy of the attribute\r\n\t * information is performed before the attribute is deleted.\r\n\t *\r\n\t * @param position the attribute's position (position starts with 0)\r\n\t * @throws IllegalArgumentException if the given index is out of range \r\n\t *            or the class attribute is being deleted\r\n\t */\r\n\t//@ requires 0 \u003c= position \u0026\u0026 position \u003c numAttributes();\r\n\t//@ requires position != classIndex();\r\n\tpublic void deleteAttributeAt(int position) {\r\n\r\n\t\tif ((position \u003c 0) || (position \u003e= m_Attributes.size())) {\r\n\t\t\tthrow new IllegalArgumentException(\"Index out of range\");\r\n\t\t}\r\n\t\tif (position == m_ClassIndex) {\r\n\t\t\tthrow new IllegalArgumentException(\"Can't delete class attribute\");\r\n\t\t}\r\n\t\tfreshAttributeInfo();\r\n\t\tif (m_ClassIndex \u003e position) {\r\n\t\t\tm_ClassIndex--;\r\n\t\t}\r\n\t\tm_Attributes.removeElementAt(position);\r\n\t\tfor (int i = position; i \u003c m_Attributes.size(); i++) {\r\n\t\t\tAttribute current = (Attribute)m_Attributes.elementAt(i);\r\n//\t\t\tcurrent.setIndex(current.index() - 1);\r\n\t\t}\r\n\t\tfor (int i = 0; i \u003c numInstances(); i++) {\r\n\t\t\tinstance(i).forceDeleteAttributeAt(position); \r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Deletes all attributes of the given type in the dataset. A deep copy of \r\n\t * the attribute information is performed before an attribute is deleted.\r\n\t *\r\n\t * @param attType the attribute type to delete\r\n\t * @throws IllegalArgumentException if attribute couldn't be \r\n\t * successfully deleted (probably because it is the class attribute).\r\n\t */\r\n\tpublic void deleteAttributeType(int attType) {\r\n\t\tint i = 0;\r\n\t\twhile (i \u003c m_Attributes.size()) {\r\n\t\t\tif (attribute(i).getType() == attType) {\r\n\t\t\t\tdeleteAttributeAt(i);\r\n\t\t\t} else {\r\n\t\t\t\ti++;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Deletes all string attributes in the dataset. A deep copy of the attribute\r\n\t * information is performed before an attribute is deleted.\r\n\t *\r\n\t * @throws IllegalArgumentException if string attribute couldn't be \r\n\t * successfully deleted (probably because it is the class attribute).\r\n\t * @see #deleteAttributeType(int)\r\n\t */\r\n\tpublic void deleteStringAttributes() {\r\n\t\tdeleteAttributeType(Attribute.NOMINAL);\r\n\t}\r\n\r\n\t/**\r\n\t * Removes all instances with missing values for a particular\r\n\t * attribute from the dataset.\r\n\t *\r\n\t * @param attIndex the attribute's index (index starts with 0)\r\n\t */\r\n\t//@ requires 0 \u003c= attIndex \u0026\u0026 attIndex \u003c numAttributes();\r\n\tpublic void deleteWithMissing(int attIndex) {\r\n\r\n\t\tFastVector newInstances = new FastVector(numInstances());\r\n\r\n\t\tfor (int i = 0; i \u003c numInstances(); i++) {\r\n\t\t\tif (!instance(i).isMissing(attIndex)) {\r\n\t\t\t\tnewInstances.addElement(instance(i));\r\n\t\t\t}\r\n\t\t}\r\n\t\tm_Instances = newInstances;\r\n\t}\r\n\r\n\t/**\r\n\t * Removes all instances with missing values for a particular\r\n\t * attribute from the dataset.\r\n\t *\r\n\t * @param att the attribute\r\n\t */\r\n\tpublic void deleteWithMissing(/*@non_null@*/ Attribute att) {\r\n\t\t\r\n\t\tdeleteWithMissing(indexOf(att));\r\n\t}\r\n\r\n\t/**\r\n\t * Removes all instances with a missing class value\r\n\t * from the dataset.\r\n\t *\r\n\t * @throws UnassignedClassException if class is not set\r\n\t */\r\n\tpublic void deleteWithMissingClass() {\r\n\r\n\t\tif (m_ClassIndex \u003c 0) {\r\n\t\t\tthrow new UnassignedClassException(\"Class index is negative (not set)!\");\r\n\t\t}\r\n\t\tdeleteWithMissing(m_ClassIndex);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an enumeration of all the attributes.\r\n\t *\r\n\t * @return enumeration of all the attributes.\r\n\t */\r\n\tpublic /*@non_null pure@*/ Enumeration enumerateAttributes() {\r\n\r\n\t\treturn m_Attributes.elements(m_ClassIndex);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an enumeration of all instances in the dataset.\r\n\t *\r\n\t * @return enumeration of all instances in the dataset\r\n\t */\r\n\tpublic /*@non_null pure@*/ Enumeration enumerateInstances() {\r\n\r\n\t\treturn m_Instances.elements();\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if two headers are equivalent.\r\n\t *\r\n\t * @param dataset another dataset\r\n\t * @return true if the header of the given dataset is equivalent \r\n\t * to this header\r\n\t */\r\n\tpublic /*@pure@*/ boolean equalHeaders(Instances dataset){\r\n\r\n\t\t// Check class and all attributes\r\n\t\tif (m_ClassIndex != dataset.m_ClassIndex) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif (m_Attributes.size() != dataset.m_Attributes.size()) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tfor (int i = 0; i \u003c m_Attributes.size(); i++) {\r\n\t\t\tif (!(attribute(i).equals(dataset.attribute(i)))) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the first instance in the set.\r\n\t *\r\n\t * @return the first instance in the set\r\n\t */\r\n\t//@ requires numInstances() \u003e 0;\r\n\tpublic /*@non_null pure@*/ Instance firstInstance() {\r\n\r\n\t\treturn (Instance)m_Instances.firstElement();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a random number generator. The initial seed of the random\r\n\t * number generator depends on the given seed and the hash code of\r\n\t * a string representation of a instances chosen based on the given\r\n\t * seed. \r\n\t *\r\n\t * @param seed the given seed\r\n\t * @return the random number generator\r\n\t */\r\n\tpublic Random getRandomNumberGenerator(long seed) {\r\n\r\n\t\tRandom r = new Random(seed);\r\n\t\tr.setSeed(instance(r.nextInt(numInstances())).toString().hashCode() + seed);\r\n\t\treturn r;\r\n\t}\r\n\r\n\t/**\r\n\t * Inserts an attribute at the given position (0 to \r\n\t * numAttributes()) and sets all values to be missing.\r\n\t * Shallow copies the attribute before it is inserted, and performs\r\n\t * a deep copy of the existing attribute information.\r\n\t *\r\n\t * @param att the attribute to be inserted\r\n\t * @param position the attribute's position (position starts with 0)\r\n\t * @throws IllegalArgumentException if the given index is out of range\r\n\t */\r\n\t//@ requires 0 \u003c= position;\r\n\t//@ requires position \u003c= numAttributes();\r\n\tpublic void insertAttributeAt(/*@non_null@*/ Attribute att, int position) {\r\n\r\n\t\tif ((position \u003c 0) ||\r\n\t\t\t\t(position \u003e m_Attributes.size())) {\r\n\t\t\tthrow new IllegalArgumentException(\"Index out of range\");\r\n\t\t}\r\n\t\tfreshAttributeInfo();\r\n//\t\tatt.setIndex(position);\r\n\t\tm_Attributes.insertElementAt(att, position);\r\n\t\tfor (int i = position + 1; i \u003c m_Attributes.size(); i++) {\r\n\t\t\tAttribute current = (Attribute)m_Attributes.elementAt(i);\r\n//\t\t\tcurrent.setIndex(indexOf(current) + 1);\r\n\t\t}\r\n\t\tfor (int i = 0; i \u003c numInstances(); i++) {\r\n\t\t\tinstance(i).forceInsertAttributeAt(position);\r\n\t\t}\r\n\t\tif (m_ClassIndex \u003e= position) {\r\n\t\t\tm_ClassIndex++;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the instance at the given position.\r\n\t *\r\n\t * @param index the instance's index (index starts with 0)\r\n\t * @return the instance at the given position\r\n\t */\r\n\t//@ requires 0 \u003c= index;\r\n\t//@ requires index \u003c numInstances();\r\n\tpublic /*@non_null pure@*/ Instance instance(int index) {\r\n\r\n\t\treturn (Instance)m_Instances.elementAt(index);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the kth-smallest attribute value of a numeric attribute.\r\n\t * Note that calling this method will change the order of the data!\r\n\t *\r\n\t * @param att the Attribute object\r\n\t * @param k the value of k\r\n\t * @return the kth-smallest value\r\n\t */\r\n\tpublic double kthSmallestValue(Attribute att, int k) {\r\n\r\n\t\treturn kthSmallestValue(indexOf(att), k);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the kth-smallest attribute value of a numeric attribute.\r\n\t * Note that calling this method will change the order of the data!\r\n\t * The number of non-missing values in the data must be as least\r\n\t * as last as k for this to work.\r\n\t *\r\n\t * @param attIndex the attribute's index\r\n\t * @param k the value of k\r\n\t * @return the kth-smallest value\r\n\t */\r\n\tpublic double kthSmallestValue(int attIndex, int k) {\r\n\r\n\t\tif (attribute(attIndex).getType()==Attribute.NOMINAL) {\r\n\t\t\tthrow new IllegalArgumentException(\"Instances: attribute must be numeric to compute kth-smallest value.\");\r\n\t\t}\r\n\r\n\t\tint i,j;\r\n\r\n\t\t// move all instances with missing values to end\r\n\t\tj = numInstances() - 1;\r\n\t\ti = 0;\r\n\t\twhile (i \u003c= j) {\r\n\t\t\tif (instance(j).isMissing(attIndex)) {\r\n\t\t\t\tj--;\r\n\t\t\t} else {\r\n\t\t\t\tif (instance(i).isMissing(attIndex)) {\r\n\t\t\t\t\tswap(i,j);\r\n\t\t\t\t\tj--;\r\n\t\t\t\t}\r\n\t\t\t\ti++;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif ((k \u003c 0) || (k \u003e j)) {\r\n\t\t\tthrow new IllegalArgumentException(\"Instances: value for k for computing kth-smallest value too large.\");\r\n\t\t}\r\n\r\n\t\treturn instance(select(attIndex, 0, j, k)).value(attIndex);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the last instance in the set.\r\n\t *\r\n\t * @return the last instance in the set\r\n\t */\r\n\t//@ requires numInstances() \u003e 0;\r\n\tpublic /*@non_null pure@*/ Instance lastInstance() {\r\n\r\n\t\treturn (Instance)m_Instances.lastElement();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the mean (mode) for a numeric (nominal) attribute as\r\n\t * a floating-point value. Returns 0 if the attribute is neither nominal nor \r\n\t * numeric. If all values are missing it returns zero.\r\n\t *\r\n\t * @param attIndex the attribute's index (index starts with 0)\r\n\t * @return the mean or the mode\r\n\t */\r\n\tpublic /*@pure@*/ double meanOrMode(int attIndex) {\r\n\r\n\t\tdouble result, found;\r\n\t\tint [] counts;\r\n\r\n\t\tif (!(attribute(attIndex).getType()==Attribute.NOMINAL)) {\r\n\t\t\tresult = found = 0;\r\n\t\t\tfor (int j = 0; j \u003c numInstances(); j++) {\r\n\t\t\t\tif (!instance(j).isMissing(attIndex)) {\r\n\t\t\t\t\tfound += instance(j).weight();\r\n\t\t\t\t\tresult += instance(j).weight()*instance(j).value(attIndex);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (found \u003c= 0) {\r\n\t\t\t\treturn 0;\r\n\t\t\t} else {\r\n\t\t\t\treturn result / found;\r\n\t\t\t}\r\n\t\t} else if (attribute(attIndex).getType()==Attribute.NOMINAL) {\r\n\t\t\tcounts = new int[attribute(attIndex).getNumNominalValues()];\r\n\t\t\tfor (int j = 0; j \u003c numInstances(); j++) {\r\n\t\t\t\tif (!instance(j).isMissing(attIndex)) {\r\n\t\t\t\t\tcounts[(int) instance(j).value(attIndex)] += instance(j).weight();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn (double)Utils.maxIndex(counts);\r\n\t\t} else {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the mean (mode) for a numeric (nominal) attribute as a\r\n\t * floating-point value.  Returns 0 if the attribute is neither\r\n\t * nominal nor numeric.  If all values are missing it returns zero.\r\n\t *\r\n\t * @param att the attribute\r\n\t * @return the mean or the mode \r\n\t */\r\n\tpublic /*@pure@*/ double meanOrMode(Attribute att) {\r\n\r\n\t\treturn meanOrMode(indexOf(att));\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the number of attributes.\r\n\t *\r\n\t * @return the number of attributes as an integer\r\n\t */\r\n\t//@ ensures \\result == m_Attributes.size();\r\n\tpublic /*@pure@*/ int numAttributes() {\r\n\r\n\t\treturn m_Attributes.size();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the number of class labels.\r\n\t *\r\n\t * @return the number of class labels as an integer if the class \r\n\t * attribute is nominal, 1 otherwise.\r\n\t * @throws UnassignedClassException if the class is not set\r\n\t */\r\n\t//@ requires classIndex() \u003e= 0;\r\n\tpublic /*@pure@*/ int numClasses() {\r\n\r\n\t\tif (m_ClassIndex \u003c 0) {\r\n\t\t\tthrow new UnassignedClassException(\"Class index is negative (not set)!\");\r\n\t\t}\r\n\t\tif (!(classAttribute().getType()==Attribute.NOMINAL)) {\r\n\t\t\treturn 1;\r\n\t\t} else {\r\n\t\t\treturn classAttribute().getNumNominalValues();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the number of distinct values of a given attribute.\r\n\t * Returns the number of instances if the attribute is a\r\n\t * string attribute. The value 'missing' is not counted.\r\n\t *\r\n\t * @param attIndex the attribute (index starts with 0)\r\n\t * @return the number of distinct values of a given attribute\r\n\t */\r\n\t//@ requires 0 \u003c= attIndex;\r\n\t//@ requires attIndex \u003c numAttributes();\r\n\tpublic /*@pure@*/ int numDistinctValues(int attIndex) {\r\n\r\n\t\tif (!(attribute(attIndex).getType()==Attribute.NOMINAL)) {\r\n\t\t\tdouble [] attVals = attributeToDoubleArray(attIndex);\r\n\t\t\tint [] sorted = Utils.sort(attVals);\r\n\t\t\tdouble prev = 0;\r\n\t\t\tint counter = 0;\r\n\t\t\tfor (int i = 0; i \u003c sorted.length; i++) {\r\n\t\t\t\tInstance current = instance(sorted[i]);\r\n\t\t\t\tif (current.isMissing(attIndex)) {\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tif ((i == 0) || \r\n\t\t\t\t\t\t(current.value(attIndex) \u003e prev)) {\r\n\t\t\t\t\tprev = current.value(attIndex);\r\n\t\t\t\t\tcounter++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn counter;\r\n\t\t} else {\r\n\t\t\treturn attribute(attIndex).getNumNominalValues();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the number of distinct values of a given attribute.\r\n\t * Returns the number of instances if the attribute is a\r\n\t * string attribute. The value 'missing' is not counted.\r\n\t *\r\n\t * @param att the attribute\r\n\t * @return the number of distinct values of a given attribute\r\n\t */\r\n\tpublic /*@pure@*/ int numDistinctValues(/*@non_null@*/Attribute att) {\r\n\r\n\t\treturn numDistinctValues(indexOf(att));\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the number of instances in the dataset.\r\n\t *\r\n\t * @return the number of instances in the dataset as an integer\r\n\t */\r\n\t//@ ensures \\result == m_Instances.size();\r\n\tpublic /*@pure@*/ int numInstances() {\r\n\r\n\t\treturn m_Instances.size();\r\n\t}\r\n\r\n\t/**\r\n\t * Shuffles the instances in the set so that they are ordered \r\n\t * randomly.\r\n\t *\r\n\t * @param random a random number generator\r\n\t */\r\n\tpublic void randomize(Random random) {\r\n\r\n\t\tfor (int j = numInstances() - 1; j \u003e 0; j--)\r\n\t\t\tswap(j, random.nextInt(j+1));\r\n\t}\r\n\t\r\n\t/**\r\n\t * Shuffles the instances in the set so that they are ordered \r\n\t * randomly.\r\n\t * It uses the Randomize method of KEEL\r\n\t */\r\n\tpublic void randomize() {\r\n\r\n\t\tfor (int j = numInstances() - 1; j \u003e 0; j--)\r\n\t\t\tswap(j, Randomize.Randint(0, j+1));\r\n\t}\r\n\r\n\t/**\r\n\t * Reads a single instance from the reader and appends it\r\n\t * to the dataset.  Automatically expands the dataset if it\r\n\t * is not large enough to hold the instance. This method does\r\n\t * not check for carriage return at the end of the line.\r\n\t *\r\n\t * @param reader the reader \r\n\t * @return false if end of file has been reached\r\n\t * @throws IOException if the information is not read \r\n\t * successfully\r\n\t * @deprecated instead of using this method in conjunction with the\r\n\t * \u003ccode\u003ereadInstance(Reader)\u003c/code\u003e method, one should use the \r\n\t * \u003ccode\u003eArffLoader\u003c/code\u003e or \u003ccode\u003eDataSource\u003c/code\u003e class instead.\r\n\t * @see weka.core.converters.ArffLoader\r\n\t * @see weka.core.converters.ConverterUtils.DataSource\r\n\t */ \r\n//\t@Deprecated public boolean readInstance(Reader reader) throws IOException {\r\n//\r\n//\t\tArffReader arff = new ArffReader(reader, this, m_Lines, 1);\r\n//\t\tInstance inst = arff.readInstance(arff.getData(), false);\r\n//\t\tm_Lines = arff.getLineNo();\r\n//\t\tif (inst != null) {\r\n//\t\t\tadd(inst);\r\n//\t\t\treturn true;\r\n//\t\t}\r\n//\t\telse {\r\n//\t\t\treturn false;\r\n//\t\t}\r\n//\t}    \r\n\r\n\t/**\r\n\t * Returns the relation's name.\r\n\t *\r\n\t * @return the relation's name as a string\r\n\t */\r\n\t//@ ensures \\result == m_RelationName;\r\n\tpublic /*@pure@*/ String relationName() {\r\n\r\n\t\treturn m_RelationName;\r\n\t}\r\n\r\n\t/**\r\n\t * Renames an attribute. This change only affects this\r\n\t * dataset.\r\n\t *\r\n\t * @param att the attribute's index (index starts with 0)\r\n\t * @param name the new name\r\n\t */\r\n//\tpublic void renameAttribute(int att, String name) {\r\n//\r\n//\t\tAttribute newAtt = attribute(att).copy(name);\r\n//\t\tFastVector newVec = new FastVector(numAttributes());\r\n//\r\n//\t\tfor (int i = 0; i \u003c numAttributes(); i++) {\r\n//\t\t\tif (i == att) {\r\n//\t\t\t\tnewVec.addElement(newAtt);\r\n//\t\t\t} else {\r\n//\t\t\t\tnewVec.addElement(attribute(i));\r\n//\t\t\t}\r\n//\t\t}\r\n//\t\tm_Attributes = newVec;\r\n//\t}\r\n\r\n\t/**\r\n\t * Renames an attribute. This change only affects this\r\n\t * dataset.\r\n\t *\r\n\t * @param att the attribute\r\n\t * @param name the new name\r\n\t */\r\n//\tpublic void renameAttribute(Attribute att, String name) {\r\n//\r\n//\t\trenameAttribute(indexOf(att), name);\r\n//\t}\r\n\r\n\t/**\r\n\t * Renames the value of a nominal (or string) attribute value. This\r\n\t * change only affects this dataset.\r\n\t *\r\n\t * @param att the attribute's index (index starts with 0)\r\n\t * @param val the value's index (index starts with 0)\r\n\t * @param name the new name \r\n\t */\r\n//\tpublic void renameAttributeValue(int att, int val, String name) {\r\n//\r\n//\t\tAttribute newAtt = (Attribute)attribute(att).copy();\r\n//\t\tFastVector newVec = new FastVector(numAttributes());\r\n//\r\n////\t\tnewAtt.setValue(val, name);\r\n//\t\tfor (int i = 0; i \u003c numAttributes(); i++) {\r\n//\t\t\tif (i == att) {\r\n//\t\t\t\tnewVec.addElement(newAtt);\r\n//\t\t\t} else {\r\n//\t\t\t\tnewVec.addElement(attribute(i));\r\n//\t\t\t}\r\n//\t\t}\r\n//\t\tm_Attributes = newVec;\r\n//\t}\r\n\r\n\t/**\r\n\t * Renames the value of a nominal (or string) attribute value. This\r\n\t * change only affects this dataset.\r\n\t *\r\n\t * @param att the attribute\r\n\t * @param val the value\r\n\t * @param name the new name\r\n\t */\r\n//\tpublic void renameAttributeValue(Attribute att, String val, \r\n//\t\t\tString name) {\r\n//\r\n//\t\tint v = indexOfValue(att,val);\r\n////\t\tint v = att.indexOfValue(val);\r\n//\t\tif (v == -1) throw new IllegalArgumentException(val + \" not found\");\r\n//\t\trenameAttributeValue(indexOf(att), v, name);\r\n//\t}\r\n\r\n\t/**\r\n\t * Creates a new dataset of the same size using random sampling\r\n\t * with replacement.\r\n\t *\r\n\t * @param random a random number generator\r\n\t * @return the new dataset\r\n\t */\r\n\tpublic Instances resample(Random random) {\r\n\r\n\t\tInstances newData = new Instances(this, numInstances());\r\n\t\twhile (newData.numInstances() \u003c numInstances()) {\r\n\t\t\tnewData.add(instance(random.nextInt(numInstances())));\r\n\t\t}\r\n\t\treturn newData;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a new dataset of the same size using random sampling\r\n\t * with replacement according to the current instance weights. The\r\n\t * weights of the instances in the new dataset are set to one.\r\n\t *\r\n\t * @param random a random number generator\r\n\t * @return the new dataset\r\n\t */\r\n\tpublic Instances resampleWithWeights(Random random) {\r\n\r\n\t\tdouble [] weights = new double[numInstances()];\r\n\t\tfor (int i = 0; i \u003c weights.length; i++) {\r\n\t\t\tweights[i] = instance(i).weight();\r\n\t\t}\r\n\t\treturn resampleWithWeights(random, weights);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Creates a new dataset of the same size using random sampling\r\n\t * with replacement according to the given weight vector. The\r\n\t * weights of the instances in the new dataset are set to one.\r\n\t * The length of the weight vector has to be the same as the\r\n\t * number of instances in the dataset, and all weights have to\r\n\t * be positive.\r\n\t *\r\n\t * @param random a random number generator\r\n\t * @param weights the weight vector\r\n\t * @return the new dataset\r\n\t * @throws IllegalArgumentException if the weights array is of the wrong\r\n\t * length or contains negative weights.\r\n\t */\r\n\tpublic Instances resampleWithWeights(Random random, \r\n\t\t\tdouble[] weights) {\r\n\r\n\t\tif (weights.length != numInstances()) {\r\n\t\t\tthrow new IllegalArgumentException(\"weights.length != numInstances.\");\r\n\t\t}\r\n\t\tInstances newData = new Instances(this, numInstances());\r\n\t\tif (numInstances() == 0) {\r\n\t\t\treturn newData;\r\n\t\t}\r\n\t\tdouble[] probabilities = new double[numInstances()];\r\n\t\tdouble sumProbs = 0, sumOfWeights = Utils.sum(weights);\r\n\t\tfor (int i = 0; i \u003c numInstances(); i++) {\r\n\t\t\tsumProbs += random.nextDouble();\r\n\t\t\tprobabilities[i] = sumProbs;\r\n\t\t}\r\n\t\tUtils.normalize(probabilities, sumProbs / sumOfWeights);\r\n\r\n\t\t// Make sure that rounding errors don't mess things up\r\n\t\tprobabilities[numInstances() - 1] = sumOfWeights;\r\n\t\tint k = 0; int l = 0;\r\n\t\tsumProbs = 0;\r\n\t\twhile ((k \u003c numInstances() \u0026\u0026 (l \u003c numInstances()))) {\r\n\t\t\tif (weights[l] \u003c 0) {\r\n\t\t\t\tthrow new IllegalArgumentException(\"Weights have to be positive.\");\r\n\t\t\t}\r\n\t\t\tsumProbs += weights[l];\r\n\t\t\twhile ((k \u003c numInstances()) \u0026\u0026\r\n\t\t\t\t\t(probabilities[k] \u003c= sumProbs)) { \r\n\t\t\t\tnewData.add(instance(l));\r\n\t\t\t\tnewData.instance(k).setWeight(1);\r\n\t\t\t\tk++;\r\n\t\t\t}\r\n\t\t\tl++;\r\n\t\t}\r\n\t\treturn newData;\r\n\t}\r\n\r\n\t/** \r\n\t * Sets the class attribute.\r\n\t *\r\n\t * @param att attribute to be the class\r\n\t */\r\n\tpublic void setClass(Attribute att) {\r\n\r\n\t\tm_ClassIndex = indexOf(att);\r\n\t}\r\n\r\n\t/** \r\n\t * Sets the class index of the set.\r\n\t * If the class index is negative there is assumed to be no class.\r\n\t * (ie. it is undefined)\r\n\t *\r\n\t * @param classIndex the new class index (index starts with 0)\r\n\t * @throws IllegalArgumentException if the class index is too big or \u003c 0\r\n\t */\r\n\tpublic void setClassIndex(int classIndex) {\r\n\r\n\t\tif (classIndex \u003e= numAttributes()) {\r\n\t\t\tthrow new IllegalArgumentException(\"Invalid class index: \" + classIndex);\r\n\t\t}\r\n\t\tm_ClassIndex = classIndex;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the relation's name.\r\n\t *\r\n\t * @param newName the new relation name.\r\n\t */\r\n\tpublic void setRelationName(/*@non_null@*/String newName) {\r\n\r\n\t\tm_RelationName = newName;\r\n\t}\r\n\r\n\t/**\r\n\t * Sorts the instances based on an attribute. For numeric attributes, \r\n\t * instances are sorted in ascending order. For nominal attributes, \r\n\t * instances are sorted based on the attribute label ordering \r\n\t * specified in the header. Instances with missing values for the \r\n\t * attribute are placed at the end of the dataset.\r\n\t *\r\n\t * @param attIndex the attribute's index (index starts with 0)\r\n\t */\r\n\tpublic void sort(int attIndex) {\r\n\r\n\t\tint i,j;\r\n\r\n\t\t// move all instances with missing values to end\r\n\t\tj = numInstances() - 1;\r\n\t\ti = 0;\r\n\t\twhile (i \u003c= j) {\r\n\t\t\tif (instance(j).isMissing(attIndex)) {\r\n\t\t\t\tj--;\r\n\t\t\t} else {\r\n\t\t\t\tif (instance(i).isMissing(attIndex)) {\r\n\t\t\t\t\tswap(i,j);\r\n\t\t\t\t\tj--;\r\n\t\t\t\t}\r\n\t\t\t\ti++;\r\n\t\t\t}\r\n\t\t}\r\n\t\tquickSort(attIndex, 0, j);\r\n\t}\r\n\r\n\t/**\r\n\t * Sorts the instances based on an attribute. For numeric attributes, \r\n\t * instances are sorted into ascending order. For nominal attributes, \r\n\t * instances are sorted based on the attribute label ordering \r\n\t * specified in the header. Instances with missing values for the \r\n\t * attribute are placed at the end of the dataset.\r\n\t *\r\n\t * @param att the attribute\r\n\t */\r\n\tpublic void sort(Attribute att) {\r\n\r\n\t\tsort(indexOf(att));\r\n\t}\r\n\r\n\t/**\r\n\t * Stratifies a set of instances according to its class values \r\n\t * if the class attribute is nominal (so that afterwards a \r\n\t * stratified cross-validation can be performed).\r\n\t *\r\n\t * @param numFolds the number of folds in the cross-validation\r\n\t * @throws UnassignedClassException if the class is not set\r\n\t */\r\n\tpublic void stratify(int numFolds) {\r\n\r\n\t\tif (numFolds \u003c= 0) {\r\n\t\t\tthrow new IllegalArgumentException(\"Number of folds must be greater than 1\");\r\n\t\t}\r\n\t\tif (m_ClassIndex \u003c 0) {\r\n\t\t\tthrow new UnassignedClassException(\"Class index is negative (not set)!\");\r\n\t\t}\r\n\t\tif (classAttribute().getType()==Attribute.NOMINAL) {\r\n\r\n\t\t\t// sort by class\r\n\t\t\tint index = 1;\r\n\t\t\twhile (index \u003c numInstances()) {\r\n\t\t\t\tInstance instance1 = instance(index - 1);\r\n\t\t\t\tfor (int j = index; j \u003c numInstances(); j++) {\r\n\t\t\t\t\tInstance instance2 = instance(j);\r\n\t\t\t\t\tif ((instance1.classValue() == instance2.classValue()) ||\r\n\t\t\t\t\t\t\t(instance1.classIsMissing() \u0026\u0026 \r\n\t\t\t\t\t\t\t\t\tinstance2.classIsMissing())) {\r\n\t\t\t\t\t\tswap(index,j);\r\n\t\t\t\t\t\tindex++;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tindex++;\r\n\t\t\t}\r\n\t\t\tstratStep(numFolds);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Computes the sum of all the instances' weights.\r\n\t *\r\n\t * @return the sum of all the instances' weights as a double\r\n\t */\r\n\tpublic /*@pure@*/ double sumOfWeights() {\r\n\r\n\t\tdouble sum = 0;\r\n\r\n\t\tfor (int i = 0; i \u003c numInstances(); i++) {\r\n\t\t\tsum += instance(i).weight();\r\n\t\t}\r\n\t\treturn sum;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates the test set for one fold of a cross-validation on \r\n\t * the dataset.\r\n\t *\r\n\t * @param numFolds the number of folds in the cross-validation. Must\r\n\t * be greater than 1.\r\n\t * @param numFold 0 for the first fold, 1 for the second, ...\r\n\t * @return the test set as a set of weighted instances\r\n\t * @throws IllegalArgumentException if the number of folds is less than 2\r\n\t * or greater than the number of instances.\r\n\t */\r\n\t//@ requires 2 \u003c= numFolds \u0026\u0026 numFolds \u003c numInstances();\r\n\t//@ requires 0 \u003c= numFold \u0026\u0026 numFold \u003c numFolds;\r\n\tpublic Instances testCV(int numFolds, int numFold) {\r\n\r\n\t\tint numInstForFold, first, offset;\r\n\t\tInstances test;\r\n\r\n\t\tif (numFolds \u003c 2) {\r\n\t\t\tthrow new IllegalArgumentException(\"Number of folds must be at least 2!\");\r\n\t\t}\r\n\t\tif (numFolds \u003e numInstances()) {\r\n\t\t\tthrow new IllegalArgumentException(\"Can't have more folds than instances!\");\r\n\t\t}\r\n\t\tnumInstForFold = numInstances() / numFolds;\r\n\t\tif (numFold \u003c numInstances() % numFolds){\r\n\t\t\tnumInstForFold++;\r\n\t\t\toffset = numFold;\r\n\t\t}else\r\n\t\t\toffset = numInstances() % numFolds;\r\n\t\ttest = new Instances(this, numInstForFold);\r\n\t\tfirst = numFold * (numInstances() / numFolds) + offset;\r\n\t\tcopyInstances(first, test, numInstForFold);\r\n\t\treturn test;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the dataset as a string in ARFF format. Strings\r\n\t * are quoted if they contain whitespace characters, or if they\r\n\t * are a question mark.\r\n\t *\r\n\t * @return the dataset in ARFF format as a string\r\n\t */\r\n\tpublic String toString() {\r\n\r\n\t\tStringBuffer text = new StringBuffer();\r\n\r\n\t\ttext.append(ARFF_RELATION).append(\" \").\r\n\t\tappend(Utils.quote(m_RelationName)).append(\"\\n\\n\");\r\n\t\tfor (int i = 0; i \u003c numAttributes(); i++) {\r\n\t\t\ttext.append(attribute(i)).append(\"\\n\");\r\n\t\t}\r\n\t\ttext.append(\"\\n\").append(ARFF_DATA).append(\"\\n\");\r\n\r\n\t\ttext.append(stringWithoutHeader());\r\n\t\treturn text.toString();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the instances in the dataset as a string in ARFF format. Strings\r\n\t * are quoted if they contain whitespace characters, or if they\r\n\t * are a question mark.\r\n\t *\r\n\t * @return the dataset in ARFF format as a string\r\n\t */\r\n\tprotected String stringWithoutHeader() {\r\n\r\n\t\tStringBuffer text = new StringBuffer();\r\n\r\n\t\tfor (int i = 0; i \u003c numInstances(); i++) {\r\n\t\t\ttext.append(instance(i));\r\n\t\t\tif (i \u003c numInstances() - 1) {\r\n\t\t\t\ttext.append('\\n');\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn text.toString();\r\n\t}\r\n\r\n\t/**\r\n\t * Creates the training set for one fold of a cross-validation \r\n\t * on the dataset. \r\n\t *\r\n\t * @param numFolds the number of folds in the cross-validation. Must\r\n\t * be greater than 1.\r\n\t * @param numFold 0 for the first fold, 1 for the second, ...\r\n\t * @return the training set \r\n\t * @throws IllegalArgumentException if the number of folds is less than 2\r\n\t * or greater than the number of instances.\r\n\t */\r\n\t//@ requires 2 \u003c= numFolds \u0026\u0026 numFolds \u003c numInstances();\r\n\t//@ requires 0 \u003c= numFold \u0026\u0026 numFold \u003c numFolds;\r\n\tpublic Instances trainCV(int numFolds, int numFold) {\r\n\r\n\t\tint numInstForFold, first, offset;\r\n\t\tInstances train;\r\n\r\n\t\tif (numFolds \u003c 2) {\r\n\t\t\tthrow new IllegalArgumentException(\"Number of folds must be at least 2!\");\r\n\t\t}\r\n\t\tif (numFolds \u003e numInstances()) {\r\n\t\t\tthrow new IllegalArgumentException(\"Can't have more folds than instances!\");\r\n\t\t}\r\n\t\tnumInstForFold = numInstances() / numFolds;\r\n\t\tif (numFold \u003c numInstances() % numFolds) {\r\n\t\t\tnumInstForFold++;\r\n\t\t\toffset = numFold;\r\n\t\t}else\r\n\t\t\toffset = numInstances() % numFolds;\r\n\t\ttrain = new Instances(this, numInstances() - numInstForFold);\r\n\t\tfirst = numFold * (numInstances() / numFolds) + offset;\r\n\t\tcopyInstances(0, train, first);\r\n\t\tcopyInstances(first + numInstForFold, train,\r\n\t\t\t\tnumInstances() - first - numInstForFold);\r\n\r\n\t\treturn train;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates the training set for one fold of a cross-validation \r\n\t * on the dataset. The data is subsequently randomized based\r\n\t * on the given random number generator.\r\n\t *\r\n\t * @param numFolds the number of folds in the cross-validation. Must\r\n\t * be greater than 1.\r\n\t * @param numFold 0 for the first fold, 1 for the second, ...\r\n\t * @param random the random number generator\r\n\t * @return the training set \r\n\t * @throws IllegalArgumentException if the number of folds is less than 2\r\n\t * or greater than the number of instances.\r\n\t */\r\n\t//@ requires 2 \u003c= numFolds \u0026\u0026 numFolds \u003c numInstances();\r\n\t//@ requires 0 \u003c= numFold \u0026\u0026 numFold \u003c numFolds;\r\n\tpublic Instances trainCV(int numFolds, int numFold, Random random) {\r\n\r\n\t\tInstances train = trainCV(numFolds, numFold);\r\n\t\ttrain.randomize(random);\r\n\t\treturn train;\r\n\t}\r\n\r\n\t/**\r\n\t * Computes the variance for a numeric attribute.\r\n\t *\r\n\t * @param attIndex the numeric attribute (index starts with 0)\r\n\t * @return the variance if the attribute is numeric\r\n\t * @throws IllegalArgumentException if the attribute is not numeric\r\n\t */\r\n\tpublic /*@pure@*/ double variance(int attIndex) {\r\n\r\n\t\tdouble sum = 0, sumSquared = 0, sumOfWeights = 0;\r\n\r\n\t\tif (attribute(attIndex).getType()==Attribute.NOMINAL) {\r\n\t\t\tthrow new IllegalArgumentException(\"Can't compute variance because attribute is \" +\r\n\t\t\t\"not numeric!\");\r\n\t\t}\r\n\t\tfor (int i = 0; i \u003c numInstances(); i++) {\r\n\t\t\tif (!instance(i).isMissing(attIndex)) {\r\n\t\t\t\tsum += instance(i).weight() * \r\n\t\t\t\tinstance(i).value(attIndex);\r\n\t\t\t\tsumSquared += instance(i).weight() * \r\n\t\t\t\tinstance(i).value(attIndex) *\r\n\t\t\t\tinstance(i).value(attIndex);\r\n\t\t\t\tsumOfWeights += instance(i).weight();\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (sumOfWeights \u003c= 1) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\tdouble result = (sumSquared - (sum * sum / sumOfWeights)) / \r\n\t\t(sumOfWeights - 1);\r\n\r\n\t\t// We don't like negative variance\r\n\t\tif (result \u003c 0) {\r\n\t\t\treturn 0;\r\n\t\t} else {\r\n\t\t\treturn result;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Computes the variance for a numeric attribute.\r\n\t *\r\n\t * @param att the numeric attribute\r\n\t * @return the variance if the attribute is numeric\r\n\t * @throws IllegalArgumentException if the attribute is not numeric\r\n\t */\r\n\tpublic /*@pure@*/ double variance(Attribute att) {\r\n\r\n\t\treturn variance(indexOf(att));\r\n\t}\r\n\r\n\t/**\r\n\t * Calculates summary statistics on the values that appear in this\r\n\t * set of instances for a specified attribute.\r\n\t *\r\n\t * @param index the index of the attribute to summarize (index starts with 0)\r\n\t * @return an AttributeStats object with it's fields calculated.\r\n\t */\r\n\t//@ requires 0 \u003c= index \u0026\u0026 index \u003c numAttributes();\r\n//\tpublic AttributeStats attributeStats(int index) {\r\n//\r\n//\t\tAttributeStats result = new AttributeStats();\r\n//\t\tif (attribute(index).isNominal()) {\r\n//\t\t\tresult.nominalCounts = new int [attribute(index).numValues()];\r\n//\t\t}\r\n//\t\tif (attribute(index).isNumeric()) {\r\n//\t\t\tresult.numericStats = new weka.experiment.Stats();\r\n//\t\t}\r\n//\t\tresult.totalCount = numInstances();\r\n//\r\n//\t\tdouble [] attVals = attributeToDoubleArray(index);\r\n//\t\tint [] sorted = Utils.sort(attVals);\r\n//\t\tint currentCount = 0;\r\n//\t\tdouble prev = Instance.missingValue();\r\n//\t\tfor (int j = 0; j \u003c numInstances(); j++) {\r\n//\t\t\tInstance current = instance(sorted[j]);\r\n//\t\t\tif (current.isMissing(index)) {\r\n//\t\t\t\tresult.missingCount = numInstances() - j;\r\n//\t\t\t\tbreak;\r\n//\t\t\t}\r\n//\t\t\tif (current.value(index) == prev) {\r\n//\t\t\t\tcurrentCount++;\r\n//\t\t\t} else {\r\n//\t\t\t\tresult.addDistinct(prev, currentCount);\r\n//\t\t\t\tcurrentCount = 1;\r\n//\t\t\t\tprev = current.value(index);\r\n//\t\t\t}\r\n//\t\t}\r\n//\t\tresult.addDistinct(prev, currentCount);\r\n//\t\tresult.distinctCount--; // So we don't count \"missing\" as a value \r\n//\t\treturn result;\r\n//\t}\r\n\r\n\t/**\r\n\t * Gets the value of all instances in this dataset for a particular\r\n\t * attribute. Useful in conjunction with Utils.sort to allow iterating\r\n\t * through the dataset in sorted order for some attribute.\r\n\t *\r\n\t * @param index the index of the attribute.\r\n\t * @return an array containing the value of the desired attribute for\r\n\t * each instance in the dataset. \r\n\t */\r\n\t//@ requires 0 \u003c= index \u0026\u0026 index \u003c numAttributes();\r\n\tpublic /*@pure@*/ double [] attributeToDoubleArray(int index) {\r\n\r\n\t\tdouble [] result = new double[numInstances()];\r\n\t\tfor (int i = 0; i \u003c result.length; i++) {\r\n\t\t\tresult[i] = instance(i).value(index);\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n\r\n\t/**\r\n\t * Generates a string summarizing the set of instances. Gives a breakdown\r\n\t * for each attribute indicating the number of missing/discrete/unique\r\n\t * values and other information.\r\n\t *\r\n\t * @return a string summarizing the dataset\r\n\t */\r\n//\tpublic String toSummaryString() {\r\n//\r\n//\t\tStringBuffer result = new StringBuffer();\r\n//\t\tresult.append(\"Relation Name:  \").append(relationName()).append('\\n');\r\n//\t\tresult.append(\"Num Instances:  \").append(numInstances()).append('\\n');\r\n//\t\tresult.append(\"Num Attributes: \").append(numAttributes()).append('\\n');\r\n//\t\tresult.append('\\n');\r\n//\r\n//\t\tresult.append(Utils.padLeft(\"\", 5)).append(Utils.padRight(\"Name\", 25));\r\n//\t\tresult.append(Utils.padLeft(\"Type\", 5)).append(Utils.padLeft(\"Nom\", 5));\r\n//\t\tresult.append(Utils.padLeft(\"Int\", 5)).append(Utils.padLeft(\"Real\", 5));\r\n//\t\tresult.append(Utils.padLeft(\"Missing\", 12));\r\n//\t\tresult.append(Utils.padLeft(\"Unique\", 12));\r\n//\t\tresult.append(Utils.padLeft(\"Dist\", 6)).append('\\n');\r\n//\t\tfor (int i = 0; i \u003c numAttributes(); i++) {\r\n//\t\t\tAttribute a = attribute(i);\r\n//\t\t\tAttributeStats as = attributeStats(i);\r\n//\t\t\tresult.append(Utils.padLeft(\"\" + (i + 1), 4)).append(' ');\r\n//\t\t\tresult.append(Utils.padRight(a.name(), 25)).append(' ');\r\n//\t\t\tlong percent;\r\n//\t\t\tswitch (a.type()) {\r\n//\t\t\tcase Attribute.NOMINAL:\r\n//\t\t\t\tresult.append(Utils.padLeft(\"Nom\", 4)).append(' ');\r\n//\t\t\t\tpercent = Math.round(100.0 * as.intCount / as.totalCount);\r\n//\t\t\t\tresult.append(Utils.padLeft(\"\" + percent, 3)).append(\"% \");\r\n//\t\t\t\tresult.append(Utils.padLeft(\"\" + 0, 3)).append(\"% \");\r\n//\t\t\t\tpercent = Math.round(100.0 * as.realCount / as.totalCount);\r\n//\t\t\t\tresult.append(Utils.padLeft(\"\" + percent, 3)).append(\"% \");\r\n//\t\t\t\tbreak;\r\n//\t\t\tcase Attribute.NUMERIC:\r\n//\t\t\t\tresult.append(Utils.padLeft(\"Num\", 4)).append(' ');\r\n//\t\t\t\tresult.append(Utils.padLeft(\"\" + 0, 3)).append(\"% \");\r\n//\t\t\t\tpercent = Math.round(100.0 * as.intCount / as.totalCount);\r\n//\t\t\t\tresult.append(Utils.padLeft(\"\" + percent, 3)).append(\"% \");\r\n//\t\t\t\tpercent = Math.round(100.0 * as.realCount / as.totalCount);\r\n//\t\t\t\tresult.append(Utils.padLeft(\"\" + percent, 3)).append(\"% \");\r\n//\t\t\t\tbreak;\r\n//\t\t\tcase Attribute.DATE:\r\n//\t\t\t\tresult.append(Utils.padLeft(\"Dat\", 4)).append(' ');\r\n//\t\t\t\tresult.append(Utils.padLeft(\"\" + 0, 3)).append(\"% \");\r\n//\t\t\t\tpercent = Math.round(100.0 * as.intCount / as.totalCount);\r\n//\t\t\t\tresult.append(Utils.padLeft(\"\" + percent, 3)).append(\"% \");\r\n//\t\t\t\tpercent = Math.round(100.0 * as.realCount / as.totalCount);\r\n//\t\t\t\tresult.append(Utils.padLeft(\"\" + percent, 3)).append(\"% \");\r\n//\t\t\t\tbreak;\r\n//\t\t\tcase Attribute.STRING:\r\n//\t\t\t\tresult.append(Utils.padLeft(\"Str\", 4)).append(' ');\r\n//\t\t\t\tpercent = Math.round(100.0 * as.intCount / as.totalCount);\r\n//\t\t\t\tresult.append(Utils.padLeft(\"\" + percent, 3)).append(\"% \");\r\n//\t\t\t\tresult.append(Utils.padLeft(\"\" + 0, 3)).append(\"% \");\r\n//\t\t\t\tpercent = Math.round(100.0 * as.realCount / as.totalCount);\r\n//\t\t\t\tresult.append(Utils.padLeft(\"\" + percent, 3)).append(\"% \");\r\n//\t\t\t\tbreak;\r\n//\t\t\tcase Attribute.RELATIONAL:\r\n//\t\t\t\tresult.append(Utils.padLeft(\"Rel\", 4)).append(' ');\r\n//\t\t\t\tpercent = Math.round(100.0 * as.intCount / as.totalCount);\r\n//\t\t\t\tresult.append(Utils.padLeft(\"\" + percent, 3)).append(\"% \");\r\n//\t\t\t\tresult.append(Utils.padLeft(\"\" + 0, 3)).append(\"% \");\r\n//\t\t\t\tpercent = Math.round(100.0 * as.realCount / as.totalCount);\r\n//\t\t\t\tresult.append(Utils.padLeft(\"\" + percent, 3)).append(\"% \");\r\n//\t\t\t\tbreak;\r\n//\t\t\tdefault:\r\n//\t\t\t\tresult.append(Utils.padLeft(\"???\", 4)).append(' ');\r\n//\t\t\tresult.append(Utils.padLeft(\"\" + 0, 3)).append(\"% \");\r\n//\t\t\tpercent = Math.round(100.0 * as.intCount / as.totalCount);\r\n//\t\t\tresult.append(Utils.padLeft(\"\" + percent, 3)).append(\"% \");\r\n//\t\t\tpercent = Math.round(100.0 * as.realCount / as.totalCount);\r\n//\t\t\tresult.append(Utils.padLeft(\"\" + percent, 3)).append(\"% \");\r\n//\t\t\tbreak;\r\n//\t\t\t}\r\n//\t\t\tresult.append(Utils.padLeft(\"\" + as.missingCount, 5)).append(\" /\");\r\n//\t\t\tpercent = Math.round(100.0 * as.missingCount / as.totalCount);\r\n//\t\t\tresult.append(Utils.padLeft(\"\" + percent, 3)).append(\"% \");\r\n//\t\t\tresult.append(Utils.padLeft(\"\" + as.uniqueCount, 5)).append(\" /\");\r\n//\t\t\tpercent = Math.round(100.0 * as.uniqueCount / as.totalCount);\r\n//\t\t\tresult.append(Utils.padLeft(\"\" + percent, 3)).append(\"% \");\r\n//\t\t\tresult.append(Utils.padLeft(\"\" + as.distinctCount, 5)).append(' ');\r\n//\t\t\tresult.append('\\n');\r\n//\t\t}\r\n//\t\treturn result.toString();\r\n//\t}\r\n\r\n\t/**\r\n\t * Copies instances from one set to the end of another \r\n\t * one.\r\n\t *\r\n\t * @param from the position of the first instance to be copied\r\n\t * @param dest the destination for the instances\r\n\t * @param num the number of instances to be copied\r\n\t */\r\n\t//@ requires 0 \u003c= from \u0026\u0026 from \u003c= numInstances() - num;\r\n\t//@ requires 0 \u003c= num;\r\n\tprotected void copyInstances(int from, /*@non_null@*/ Instances dest, int num) {\r\n\r\n\t\tfor (int i = 0; i \u003c num; i++) {\r\n\t\t\tdest.add(instance(from + i));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Replaces the attribute information by a clone of\r\n\t * itself.\r\n\t */\r\n\tprotected void freshAttributeInfo() {\r\n\r\n\t\tm_Attributes = (FastVector) m_Attributes.copyElements();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns string including all instances, their weights and\r\n\t * their indices in the original dataset.\r\n\t *\r\n\t * @return description of instance and its weight as a string\r\n\t */\r\n\tprotected /*@pure@*/ String instancesAndWeights(){\r\n\r\n\t\tStringBuffer text = new StringBuffer();\r\n\r\n\t\tfor (int i = 0; i \u003c numInstances(); i++) {\r\n\t\t\ttext.append(instance(i) + \" \" + instance(i).weight());\r\n\t\t\tif (i \u003c numInstances() - 1) {\r\n\t\t\t\ttext.append(\"\\n\");\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn text.toString();\r\n\t}\r\n\r\n\t/**\r\n\t * Partitions the instances around a pivot. Used by quicksort and\r\n\t * kthSmallestValue.\r\n\t *\r\n\t * @param attIndex the attribute's index (index starts with 0)\r\n\t * @param l the first index of the subset (index starts with 0)\r\n\t * @param r the last index of the subset (index starts with 0)\r\n\t *\r\n\t * @return the index of the middle element\r\n\t */\r\n\t//@ requires 0 \u003c= attIndex \u0026\u0026 attIndex \u003c numAttributes();\r\n\t//@ requires 0 \u003c= left \u0026\u0026 left \u003c= right \u0026\u0026 right \u003c numInstances();\r\n\tprotected int partition(int attIndex, int l, int r) {\r\n\r\n\t\tdouble pivot = instance((l + r) / 2).value(attIndex);\r\n\r\n\t\twhile (l \u003c r) {\r\n\t\t\twhile ((instance(l).value(attIndex) \u003c pivot) \u0026\u0026 (l \u003c r)) {\r\n\t\t\t\tl++;\r\n\t\t\t}\r\n\t\t\twhile ((instance(r).value(attIndex) \u003e pivot) \u0026\u0026 (l \u003c r)) {\r\n\t\t\t\tr--;\r\n\t\t\t}\r\n\t\t\tif (l \u003c r) {\r\n\t\t\t\tswap(l, r);\r\n\t\t\t\tl++;\r\n\t\t\t\tr--;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif ((l == r) \u0026\u0026 (instance(r).value(attIndex) \u003e pivot)) {\r\n\t\t\tr--;\r\n\t\t} \r\n\r\n\t\treturn r;\r\n\t}\r\n\r\n\t/**\r\n\t * Implements quicksort according to Manber's \"Introduction to\r\n\t * Algorithms\".\r\n\t *\r\n\t * @param attIndex the attribute's index (index starts with 0)\r\n\t * @param left the first index of the subset to be sorted (index starts with 0)\r\n\t * @param right the last index of the subset to be sorted (index starts with 0)\r\n\t */\r\n\t//@ requires 0 \u003c= attIndex \u0026\u0026 attIndex \u003c numAttributes();\r\n\t//@ requires 0 \u003c= first \u0026\u0026 first \u003c= right \u0026\u0026 right \u003c numInstances();\r\n\tprotected void quickSort(int attIndex, int left, int right) {\r\n\r\n\t\tif (left \u003c right) {\r\n\t\t\tint middle = partition(attIndex, left, right);\r\n\t\t\tquickSort(attIndex, left, middle);\r\n\t\t\tquickSort(attIndex, middle + 1, right);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Implements computation of the kth-smallest element according\r\n\t * to Manber's \"Introduction to Algorithms\".\r\n\t *\r\n\t * @param attIndex the attribute's index (index starts with 0)\r\n\t * @param left the first index of the subset (index starts with 0)\r\n\t * @param right the last index of the subset (index starts with 0)\r\n\t * @param k the value of k\r\n\t *\r\n\t * @return the index of the kth-smallest element\r\n\t */\r\n\t//@ requires 0 \u003c= attIndex \u0026\u0026 attIndex \u003c numAttributes();\r\n\t//@ requires 0 \u003c= first \u0026\u0026 first \u003c= right \u0026\u0026 right \u003c numInstances();\r\n\tprotected int select(int attIndex, int left, int right, int k) {\r\n\r\n\t\tif (left == right) {\r\n\t\t\treturn left;\r\n\t\t} else {\r\n\t\t\tint middle = partition(attIndex, left, right);\r\n\t\t\tif ((middle - left + 1) \u003e= k) {\r\n\t\t\t\treturn select(attIndex, left, middle, k);\r\n\t\t\t} else {\r\n\t\t\t\treturn select(attIndex, middle + 1, right, k - (middle - left + 1));\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Help function needed for stratification of set.\r\n\t *\r\n\t * @param numFolds the number of folds for the stratification\r\n\t */\r\n\tprotected void stratStep (int numFolds){\r\n\r\n\t\tFastVector newVec = new FastVector(m_Instances.capacity());\r\n\t\tint start = 0, j;\r\n\r\n\t\t// create stratified batch\r\n\t\twhile (newVec.size() \u003c numInstances()) {\r\n\t\t\tj = start;\r\n\t\t\twhile (j \u003c numInstances()) {\r\n\t\t\t\tnewVec.addElement(instance(j));\r\n\t\t\t\tj = j + numFolds;\r\n\t\t\t}\r\n\t\t\tstart++;\r\n\t\t}\r\n\t\tm_Instances = newVec;\r\n\t}\r\n\r\n\t/**\r\n\t * Swaps two instances in the set.\r\n\t *\r\n\t * @param i the first instance's index (index starts with 0)\r\n\t * @param j the second instance's index (index starts with 0)\r\n\t */\r\n\t//@ requires 0 \u003c= i \u0026\u0026 i \u003c numInstances();\r\n\t//@ requires 0 \u003c= j \u0026\u0026 j \u003c numInstances();\r\n\tpublic void swap(int i, int j){\r\n\r\n\t\tm_Instances.swap(i, j);\r\n\t}\r\n\r\n\t/**\r\n\t * Merges two sets of Instances together. The resulting set will have\r\n\t * all the attributes of the first set plus all the attributes of the \r\n\t * second set. The number of instances in both sets must be the same.\r\n\t *\r\n\t * @param first the first set of Instances\r\n\t * @param second the second set of Instances\r\n\t * @return the merged set of Instances\r\n\t * @throws IllegalArgumentException if the datasets are not the same size\r\n\t */\r\n\tpublic static Instances mergeInstances(Instances first, Instances second) {\r\n\r\n\t\tif (first.numInstances() != second.numInstances()) {\r\n\t\t\tthrow new IllegalArgumentException(\"Instance sets must be of the same size\");\r\n\t\t}\r\n\r\n\t\t// Create the vector of merged attributes\r\n\t\tFastVector newAttributes = new FastVector();\r\n\t\tfor (int i = 0; i \u003c first.numAttributes(); i++) {\r\n\t\t\tnewAttributes.addElement(first.attribute(i));\r\n\t\t}\r\n\t\tfor (int i = 0; i \u003c second.numAttributes(); i++) {\r\n\t\t\tnewAttributes.addElement(second.attribute(i));\r\n\t\t}\r\n\r\n\t\t// Create the set of Instances\r\n\t\tInstances merged = new Instances(first.relationName() + '_'\r\n\t\t\t\t+ second.relationName(), \r\n\t\t\t\tnewAttributes, \r\n\t\t\t\tfirst.numInstances());\r\n\t\t// Merge each instance\r\n\t\tfor (int i = 0; i \u003c first.numInstances(); i++) {\r\n\t\t\tmerged.add(first.instance(i).mergeInstance(second.instance(i)));\r\n\t\t}\r\n\t\treturn merged;\r\n\t}\r\n\r\n\t/**\r\n\t * Method for testing this class.\r\n\t *\r\n\t * @param argv should contain one element: the name of an ARFF file\r\n\t */\r\n\t//@ requires argv != null;\r\n\t//@ requires argv.length == 1;\r\n\t//@ requires argv[0] != null;\r\n//\tpublic static void test(String [] argv) {\r\n//\r\n//\t\tInstances instances, secondInstances, train, test, empty;\r\n//\t\tRandom random = new Random(2);\r\n//\t\tReader reader;\r\n//\t\tint start, num;\r\n//\t\tFastVector testAtts, testVals;\r\n//\t\tint i,j;\r\n//\r\n//\t\ttry{\r\n//\t\t\tif (argv.length \u003e 1) {\r\n//\t\t\t\tthrow (new Exception(\"Usage: Instances [\u003cfilename\u003e]\"));\r\n//\t\t\t}\r\n//\r\n//\t\t\t// Creating set of instances from scratch\r\n//\t\t\ttestVals = new FastVector(2);\r\n//\t\t\ttestVals.addElement(\"first_value\");\r\n//\t\t\ttestVals.addElement(\"second_value\");\r\n//\t\t\ttestAtts = new FastVector(2);\r\n//\t\t\ttestAtts.addElement(new Attribute(\"nominal_attribute\", testVals));\r\n//\t\t\ttestAtts.addElement(new Attribute(\"numeric_attribute\"));\r\n//\t\t\tinstances = new Instances(\"test_set\", testAtts, 10);\r\n//\t\t\tinstances.add(new Instance(instances.numAttributes()));\r\n//\t\t\tinstances.add(new Instance(instances.numAttributes()));\r\n//\t\t\tinstances.add(new Instance(instances.numAttributes()));\r\n//\t\t\tinstances.setClassIndex(0);\r\n//\t\t\tSystem.out.println(\"\\nSet of instances created from scratch:\\n\");\r\n//\t\t\tSystem.out.println(instances);\r\n//\r\n//\t\t\tif (argv.length == 1) {\r\n//\t\t\t\tString filename = argv[0];\r\n//\t\t\t\treader = new FileReader(filename);\r\n//\r\n//\t\t\t\t// Read first five instances and print them\r\n//\t\t\t\tSystem.out.println(\"\\nFirst five instances from file:\\n\");\r\n//\t\t\t\tinstances = new Instances(reader, 1);\r\n//\t\t\t\tinstances.setClassIndex(instances.numAttributes() - 1);\r\n//\t\t\t\ti = 0;\r\n//\t\t\t\twhile ((i \u003c 5) \u0026\u0026 (instances.readInstance(reader))) {\r\n//\t\t\t\t\ti++;\r\n//\t\t\t\t}\r\n//\t\t\t\tSystem.out.println(instances);\r\n//\r\n//\t\t\t\t// Read all the instances in the file\r\n//\t\t\t\treader = new FileReader(filename);\r\n//\t\t\t\tinstances = new Instances(reader);\r\n//\r\n//\t\t\t\t// Make the last attribute be the class \r\n//\t\t\t\tinstances.setClassIndex(instances.numAttributes() - 1);\r\n//\r\n//\t\t\t\t// Print header and instances.\r\n//\t\t\t\tSystem.out.println(\"\\nDataset:\\n\");\r\n//\t\t\t\tSystem.out.println(instances);\r\n//\t\t\t\tSystem.out.println(\"\\nClass index: \"+instances.classIndex());\r\n//\t\t\t}\r\n//\r\n//\t\t\t// Test basic methods based on class index.\r\n//\t\t\tSystem.out.println(\"\\nClass name: \"+instances.classAttribute().name());\r\n//\t\t\tSystem.out.println(\"\\nClass index: \"+instances.classIndex());\r\n//\t\t\tSystem.out.println(\"\\nClass is nominal: \" +\r\n//\t\t\t\t\tinstances.classAttribute().isNominal());\r\n//\t\t\tSystem.out.println(\"\\nClass is numeric: \" +\r\n//\t\t\t\t\tinstances.classAttribute().isNumeric());\r\n//\t\t\tSystem.out.println(\"\\nClasses:\\n\");\r\n//\t\t\tfor (i = 0; i \u003c instances.numClasses(); i++) {\r\n//\t\t\t\tSystem.out.println(instances.classAttribute().value(i));\r\n//\t\t\t}\r\n//\t\t\tSystem.out.println(\"\\nClass values and labels of instances:\\n\");\r\n//\t\t\tfor (i = 0; i \u003c instances.numInstances(); i++) {\r\n//\t\t\t\tInstance inst = instances.instance(i);\r\n//\t\t\t\tSystem.out.print(inst.classValue() + \"\\t\");\r\n//\t\t\t\tSystem.out.print(inst.toString(inst.classIndex()));\r\n//\t\t\t\tif (instances.instance(i).classIsMissing()) {\r\n//\t\t\t\t\tSystem.out.println(\"\\tis missing\");\r\n//\t\t\t\t} else {\r\n//\t\t\t\t\tSystem.out.println();\r\n//\t\t\t\t}\r\n//\t\t\t}\r\n//\r\n//\t\t\t// Create random weights.\r\n//\t\t\tSystem.out.println(\"\\nCreating random weights for instances.\");\r\n//\t\t\tfor (i = 0; i \u003c instances.numInstances(); i++) {\r\n//\t\t\t\tinstances.instance(i).setWeight(random.nextDouble()); \r\n//\t\t\t}\r\n//\r\n//\t\t\t// Print all instances and their weights (and the sum of weights).\r\n//\t\t\tSystem.out.println(\"\\nInstances and their weights:\\n\");\r\n//\t\t\tSystem.out.println(instances.instancesAndWeights());\r\n//\t\t\tSystem.out.print(\"\\nSum of weights: \");\r\n//\t\t\tSystem.out.println(instances.sumOfWeights());\r\n//\r\n//\t\t\t// Insert an attribute\r\n//\t\t\tsecondInstances = new Instances(instances);\r\n//\t\t\tAttribute testAtt = new Attribute(\"Inserted\");\r\n//\t\t\tsecondInstances.insertAttributeAt(testAtt, 0);\r\n//\t\t\tSystem.out.println(\"\\nSet with inserted attribute:\\n\");\r\n//\t\t\tSystem.out.println(secondInstances);\r\n//\t\t\tSystem.out.println(\"\\nClass name: \"\r\n//\t\t\t\t\t+ secondInstances.classAttribute().name());\r\n//\r\n//\t\t\t// Delete the attribute\r\n//\t\t\tsecondInstances.deleteAttributeAt(0);\r\n//\t\t\tSystem.out.println(\"\\nSet with attribute deleted:\\n\");\r\n//\t\t\tSystem.out.println(secondInstances);\r\n//\t\t\tSystem.out.println(\"\\nClass name: \"\r\n//\t\t\t\t\t+ secondInstances.classAttribute().name());\r\n//\r\n//\t\t\t// Test if headers are equal\r\n//\t\t\tSystem.out.println(\"\\nHeaders equal: \"+\r\n//\t\t\t\t\tinstances.equalHeaders(secondInstances) + \"\\n\");\r\n//\r\n//\t\t\t// Print data in internal format.\r\n//\t\t\tSystem.out.println(\"\\nData (internal values):\\n\");\r\n//\t\t\tfor (i = 0; i \u003c instances.numInstances(); i++) {\r\n//\t\t\t\tfor (j = 0; j \u003c instances.numAttributes(); j++) {\r\n//\t\t\t\t\tif (instances.instance(i).isMissing(j)) {\r\n//\t\t\t\t\t\tSystem.out.print(\"? \");\r\n//\t\t\t\t\t} else {\r\n//\t\t\t\t\t\tSystem.out.print(instances.instance(i).value(j) + \" \");\r\n//\t\t\t\t\t}\r\n//\t\t\t\t}\r\n//\t\t\t\tSystem.out.println();\r\n//\t\t\t}\r\n//\r\n//\t\t\t// Just print header\r\n//\t\t\tSystem.out.println(\"\\nEmpty dataset:\\n\");\r\n//\t\t\tempty = new Instances(instances, 0);\r\n//\t\t\tSystem.out.println(empty);\r\n//\t\t\tSystem.out.println(\"\\nClass name: \"+empty.classAttribute().name());\r\n//\r\n//\t\t\t// Create copy and rename an attribute and a value (if possible)\r\n//\t\t\tif (empty.classAttribute().isNominal()) {\r\n//\t\t\t\tInstances copy = new Instances(empty, 0);\r\n//\t\t\t\tcopy.renameAttribute(copy.classAttribute(), \"new_name\");\r\n//\t\t\t\tcopy.renameAttributeValue(copy.classAttribute(), \r\n//\t\t\t\t\t\tcopy.classAttribute().value(0), \r\n//\t\t\t\t\"new_val_name\");\r\n//\t\t\t\tSystem.out.println(\"\\nDataset with names changed:\\n\" + copy);\r\n//\t\t\t\tSystem.out.println(\"\\nOriginal dataset:\\n\" + empty);\r\n//\t\t\t}\r\n//\r\n//\t\t\t// Create and prints subset of instances.\r\n//\t\t\tstart = instances.numInstances() / 4;\r\n//\t\t\tnum = instances.numInstances() / 2;\r\n//\t\t\tSystem.out.print(\"\\nSubset of dataset: \");\r\n//\t\t\tSystem.out.println(num + \" instances from \" + (start + 1) \r\n//\t\t\t\t\t+ \". instance\");\r\n//\t\t\tsecondInstances = new Instances(instances, start, num);\r\n//\t\t\tSystem.out.println(\"\\nClass name: \"\r\n//\t\t\t\t\t+ secondInstances.classAttribute().name());\r\n//\r\n//\t\t\t// Print all instances and their weights (and the sum of weights).\r\n//\t\t\tSystem.out.println(\"\\nInstances and their weights:\\n\");\r\n//\t\t\tSystem.out.println(secondInstances.instancesAndWeights());\r\n//\t\t\tSystem.out.print(\"\\nSum of weights: \");\r\n//\t\t\tSystem.out.println(secondInstances.sumOfWeights());\r\n//\r\n//\t\t\t// Create and print training and test sets for 3-fold\r\n//\t\t\t// cross-validation.\r\n//\t\t\tSystem.out.println(\"\\nTrain and test folds for 3-fold CV:\");\r\n//\t\t\tif (instances.classAttribute().isNominal()) {\r\n//\t\t\t\tinstances.stratify(3);\r\n//\t\t\t}\r\n//\t\t\tfor (j = 0; j \u003c 3; j++) {\r\n//\t\t\t\ttrain = instances.trainCV(3,j, new Random(1));\r\n//\t\t\t\ttest = instances.testCV(3,j);\r\n//\r\n//\t\t\t\t// Print all instances and their weights (and the sum of weights).\r\n//\t\t\t\tSystem.out.println(\"\\nTrain: \");\r\n//\t\t\t\tSystem.out.println(\"\\nInstances and their weights:\\n\");\r\n//\t\t\t\tSystem.out.println(train.instancesAndWeights());\r\n//\t\t\t\tSystem.out.print(\"\\nSum of weights: \");\r\n//\t\t\t\tSystem.out.println(train.sumOfWeights());\r\n//\t\t\t\tSystem.out.println(\"\\nClass name: \"+train.classAttribute().name());\r\n//\t\t\t\tSystem.out.println(\"\\nTest: \");\r\n//\t\t\t\tSystem.out.println(\"\\nInstances and their weights:\\n\");\r\n//\t\t\t\tSystem.out.println(test.instancesAndWeights());\r\n//\t\t\t\tSystem.out.print(\"\\nSum of weights: \");\r\n//\t\t\t\tSystem.out.println(test.sumOfWeights());\r\n//\t\t\t\tSystem.out.println(\"\\nClass name: \"+test.classAttribute().name());\r\n//\t\t\t}\r\n//\r\n//\t\t\t// Randomize instances and print them.\r\n//\t\t\tSystem.out.println(\"\\nRandomized dataset:\");\r\n//\t\t\tinstances.randomize(random);\r\n//\r\n//\t\t\t// Print all instances and their weights (and the sum of weights).\r\n//\t\t\tSystem.out.println(\"\\nInstances and their weights:\\n\");\r\n//\t\t\tSystem.out.println(instances.instancesAndWeights());\r\n//\t\t\tSystem.out.print(\"\\nSum of weights: \");\r\n//\t\t\tSystem.out.println(instances.sumOfWeights());\r\n//\r\n//\t\t\t// Sort instances according to first attribute and\r\n//\t\t\t// print them.\r\n//\t\t\tSystem.out.print(\"\\nInstances sorted according to first attribute:\\n \");\r\n//\t\t\tinstances.sort(0);\r\n//\r\n//\t\t\t// Print all instances and their weights (and the sum of weights).\r\n//\t\t\tSystem.out.println(\"\\nInstances and their weights:\\n\");\r\n//\t\t\tSystem.out.println(instances.instancesAndWeights());\r\n//\t\t\tSystem.out.print(\"\\nSum of weights: \");\r\n//\t\t\tSystem.out.println(instances.sumOfWeights());\r\n//\t\t} catch (Exception e) {\r\n//\t\t\te.printStackTrace(); \r\n//\t\t}\r\n//\t}\r\n\r\n\t/**\r\n\t * Main method for this class. The following calls are possible:\r\n\t * \u003cul\u003e\r\n\t *   \u003cli\u003e\r\n\t *     \u003ccode\u003eweka.core.Instances\u003c/code\u003e help\u003cbr/\u003e\r\n\t *     prints a short list of possible commands.\r\n\t *   \u003c/li\u003e\r\n\t *   \u003cli\u003e\r\n\t *     \u003ccode\u003eweka.core.Instances\u003c/code\u003e \u0026lt;filename\u0026gt;\u003cbr/\u003e\r\n\t *     prints a summary of a set of instances.\r\n\t *   \u003c/li\u003e\r\n\t *   \u003cli\u003e\r\n\t *     \u003ccode\u003eweka.core.Instances\u003c/code\u003e merge \u0026lt;filename1\u0026gt; \u0026lt;filename2\u0026gt;\u003cbr/\u003e\r\n\t *     merges the two datasets (must have same number of instances) and\r\n\t *     outputs the results on stdout.\r\n\t *   \u003c/li\u003e\r\n\t *   \u003cli\u003e\r\n\t *     \u003ccode\u003eweka.core.Instances\u003c/code\u003e append \u0026lt;filename1\u0026gt; \u0026lt;filename2\u0026gt;\u003cbr/\u003e\r\n\t *     appends the second dataset to the first one (must have same headers) and\r\n\t *     outputs the results on stdout.\r\n\t *   \u003c/li\u003e\r\n\t *   \u003cli\u003e\r\n\t *     \u003ccode\u003eweka.core.Instances\u003c/code\u003e randomize \u0026lt;seed\u0026gt; \u0026lt;filename\u0026gt;\u003cbr/\u003e\r\n\t *     randomizes the dataset with the given seed and outputs the result on stdout.\r\n\t *   \u003c/li\u003e\r\n\t * \u003c/ul\u003e\r\n\t *\r\n\t * @param args \tthe commandline parameters\r\n\t */\r\n//\tpublic static void main(String[] args) {\r\n//\r\n//\t\ttry {\r\n//\t\t\tInstances i;\r\n//\t\t\t// read from stdin and print statistics\r\n//\t\t\tif (args.length == 0) {\r\n//\t\t\t\tDataSource source = new DataSource(System.in);\r\n//\t\t\t\ti = source.getDataSet();\r\n//\t\t\t\tSystem.out.println(i.toSummaryString());\r\n//\t\t\t}\r\n//\t\t\t// read file and print statistics\r\n//\t\t\telse if ((args.length == 1) \u0026\u0026 (!args[0].equals(\"-h\")) \u0026\u0026 (!args[0].equals(\"help\"))) {\r\n//\t\t\t\tDataSource source = new DataSource(args[0]);\r\n//\t\t\t\ti = source.getDataSet();\r\n//\t\t\t\tSystem.out.println(i.toSummaryString());\r\n//\t\t\t}\r\n//\t\t\t// read two files, merge them and print result to stdout\r\n//\t\t\telse if ((args.length == 3) \u0026\u0026 (args[0].toLowerCase().equals(\"merge\"))) {\r\n//\t\t\t\tDataSource source1 = new DataSource(args[1]);\r\n//\t\t\t\tDataSource source2 = new DataSource(args[2]);\r\n//\t\t\t\ti = Instances.mergeInstances(source1.getDataSet(), source2.getDataSet());\r\n//\t\t\t\tSystem.out.println(i);\r\n//\t\t\t}\r\n//\t\t\t// read two files, append them and print result to stdout\r\n//\t\t\telse if ((args.length == 3) \u0026\u0026 (args[0].toLowerCase().equals(\"append\"))) {\r\n//\t\t\t\tDataSource source1 = new DataSource(args[1]);\r\n//\t\t\t\tDataSource source2 = new DataSource(args[2]);\r\n//\t\t\t\tif (!source1.getStructure().equalHeaders(source2.getStructure()))\r\n//\t\t\t\t\tthrow new Exception(\"The two datasets have different headers!\");\r\n//\t\t\t\tInstances structure = source1.getStructure();\r\n//\t\t\t\tSystem.out.println(source1.getStructure());\r\n//\t\t\t\twhile (source1.hasMoreElements(structure))\r\n//\t\t\t\t\tSystem.out.println(source1.nextElement(structure));\r\n//\t\t\t\tstructure = source2.getStructure();\r\n//\t\t\t\twhile (source2.hasMoreElements(structure))\r\n//\t\t\t\t\tSystem.out.println(source2.nextElement(structure));\r\n//\t\t\t}\r\n//\t\t\t// read file and seed value, randomize data and print result to stdout\r\n//\t\t\telse if ((args.length == 3) \u0026\u0026 (args[0].toLowerCase().equals(\"randomize\"))) {\r\n//\t\t\t\tDataSource source = new DataSource(args[2]);\r\n//\t\t\t\ti = source.getDataSet();\r\n//\t\t\t\ti.randomize(new Random(Integer.parseInt(args[1])));\r\n//\t\t\t\tSystem.out.println(i);\r\n//\t\t\t}\r\n//\t\t\t// wrong parameters\r\n//\t\t\telse {\r\n//\t\t\t\tSystem.err.println(\r\n//\t\t\t\t\t\t\"\\nUsage:\\n\"\r\n//\t\t\t\t\t\t+ \"\\tweka.core.Instances help\\n\"\r\n//\t\t\t\t\t\t+ \"\\tweka.core.Instances \u003cfilename\u003e\\n\"\r\n//\t\t\t\t\t\t+ \"\\tweka.core.Instances merge \u003cfilename1\u003e \u003cfilename2\u003e\\n\"\r\n//\t\t\t\t\t\t+ \"\\tweka.core.Instances append \u003cfilename1\u003e \u003cfilename2\u003e\\n\"\r\n//\t\t\t\t\t\t+ \"\\tweka.core.Instances randomize \u003cseed\u003e \u003cfilename\u003e\\n\"\r\n//\t\t\t\t);\r\n//\t\t\t\tSystem.exit(1);\r\n//\t\t\t}\r\n//\t\t}\r\n//\t\tcatch (Exception ex) {\r\n//\t\t\tex.printStackTrace();\r\n//\t\t\tSystem.err.println(ex.getMessage());\r\n//\t\t}\r\n//\t}\r\n\t\r\n\tprotected int indexOf(Attribute att){\r\n\t\tint index = -1;\r\n\t\tfor(int i=0;i\u003cAttributes.getNumAttributes() \u0026\u0026 index==-1;i++){\r\n\t\t\tif(Attributes.getAttribute(i)==att)\r\n\t\t\t\tindex = i;\r\n\t\t}\r\n\t\treturn index;\r\n\t}\r\n\t\r\n\tprotected int indexOfValue(Attribute att,String value){\r\n\t\tVector vals = att.getNominalValuesList();\r\n\t\tString s;\r\n\t\tint index = -1;\r\n\t\tfor(int i=0;i\u003cvals.size() \u0026\u0026 index == -1;i++){\r\n\t\t\ts = (String)vals.get(i);\r\n\t\t\tif(value.compareTo(s)==0)\r\n\t\t\t\tindex = i;\r\n\t\t}\r\n\t\t\r\n\t\treturn index;\r\n\t}\r\n}\r\n\r\n",
        "name": "Instances.java",
        "path": "src/org/apache/mahout/keel/Algorithms/SVM/SMO/core/Instances.java",
        "url": "/github.com/triguero/MRPR/-/blob/src/org/apache/mahout/keel/Algorithms/SVM/SMO/core/Instances.java"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 171,
          "offsetAndLengths": [
            [
              1,
              13
            ]
          ],
          "preview": "\t//@ requires capacity \u003e= 0;\r"
        },
        {
          "limitHit": false,
          "lineNumber": 172,
          "offsetAndLengths": [
            [
              1,
              12
            ]
          ],
          "preview": "\t//@ ensures classIndex() == -1;\r"
        },
        {
          "limitHit": false,
          "lineNumber": 237,
          "offsetAndLengths": [
            [
              1,
              13
            ]
          ],
          "preview": "\t//@ requires 0 \u003c= first;\r"
        },
        {
          "limitHit": false,
          "lineNumber": 238,
          "offsetAndLengths": [
            [
              1,
              13
            ]
          ],
          "preview": "\t//@ requires 0 \u003c= toCopy;\r"
        },
        {
          "limitHit": false,
          "lineNumber": 239,
          "offsetAndLengths": [
            [
              1,
              13
            ]
          ],
          "preview": "\t//@ requires first + toCopy \u003c= source.numInstances();\r"
        },
        {
          "limitHit": false,
          "lineNumber": 319,
          "offsetAndLengths": [
            [
              1,
              13
            ]
          ],
          "preview": "\t//@ requires 0 \u003c= index;\r"
        },
        {
          "limitHit": false,
          "lineNumber": 320,
          "offsetAndLengths": [
            [
              1,
              13
            ]
          ],
          "preview": "\t//@ requires index \u003c m_Attributes.size();\r"
        },
        {
          "limitHit": false,
          "lineNumber": 321,
          "offsetAndLengths": [
            [
              1,
              12
            ]
          ],
          "preview": "\t//@ ensures \\result != null;\r"
        },
        {
          "limitHit": false,
          "lineNumber": 410,
          "offsetAndLengths": [
            [
              1,
              13
            ]
          ],
          "preview": "\t//@ requires classIndex() \u003e= 0;\r"
        },
        {
          "limitHit": false,
          "lineNumber": 453,
          "offsetAndLengths": [
            [
              1,
              13
            ]
          ],
          "preview": "\t//@ requires 0 \u003c= index \u0026\u0026 index \u003c numInstances();\r"
        },
        {
          "limitHit": false,
          "lineNumber": 468,
          "offsetAndLengths": [
            [
              1,
              13
            ]
          ],
          "preview": "\t//@ requires 0 \u003c= position \u0026\u0026 position \u003c numAttributes();\r"
        },
        {
          "limitHit": false,
          "lineNumber": 469,
          "offsetAndLengths": [
            [
              1,
              13
            ]
          ],
          "preview": "\t//@ requires position != classIndex();\r"
        },
        {
          "limitHit": false,
          "lineNumber": 529,
          "offsetAndLengths": [
            [
              1,
              13
            ]
          ],
          "preview": "\t//@ requires 0 \u003c= attIndex \u0026\u0026 attIndex \u003c numAttributes();\r"
        },
        {
          "limitHit": false,
          "lineNumber": 616,
          "offsetAndLengths": [
            [
              1,
              13
            ]
          ],
          "preview": "\t//@ requires numInstances() \u003e 0;\r"
        },
        {
          "limitHit": false,
          "lineNumber": 648,
          "offsetAndLengths": [
            [
              1,
              13
            ]
          ],
          "preview": "\t//@ requires 0 \u003c= position;\r"
        },
        {
          "limitHit": false,
          "lineNumber": 649,
          "offsetAndLengths": [
            [
              1,
              13
            ]
          ],
          "preview": "\t//@ requires position \u003c= numAttributes();\r"
        },
        {
          "limitHit": false,
          "lineNumber": 677,
          "offsetAndLengths": [
            [
              1,
              13
            ]
          ],
          "preview": "\t//@ requires 0 \u003c= index;\r"
        },
        {
          "limitHit": false,
          "lineNumber": 678,
          "offsetAndLengths": [
            [
              1,
              13
            ]
          ],
          "preview": "\t//@ requires index \u003c numInstances();\r"
        },
        {
          "limitHit": false,
          "lineNumber": 742,
          "offsetAndLengths": [
            [
              1,
              13
            ]
          ],
          "preview": "\t//@ requires numInstances() \u003e 0;\r"
        },
        {
          "limitHit": false,
          "lineNumber": 805,
          "offsetAndLengths": [
            [
              1,
              12
            ]
          ],
          "preview": "\t//@ ensures \\result == m_Attributes.size();\r"
        },
        {
          "limitHit": false,
          "lineNumber": 818,
          "offsetAndLengths": [
            [
              1,
              13
            ]
          ],
          "preview": "\t//@ requires classIndex() \u003e= 0;\r"
        },
        {
          "limitHit": false,
          "lineNumber": 839,
          "offsetAndLengths": [
            [
              1,
              13
            ]
          ],
          "preview": "\t//@ requires 0 \u003c= attIndex;\r"
        },
        {
          "limitHit": false,
          "lineNumber": 840,
          "offsetAndLengths": [
            [
              1,
              13
            ]
          ],
          "preview": "\t//@ requires attIndex \u003c numAttributes();\r"
        },
        {
          "limitHit": false,
          "lineNumber": 883,
          "offsetAndLengths": [
            [
              1,
              12
            ]
          ],
          "preview": "\t//@ ensures \\result == m_Instances.size();\r"
        },
        {
          "limitHit": false,
          "lineNumber": 947,
          "offsetAndLengths": [
            [
              1,
              12
            ]
          ],
          "preview": "\t//@ ensures \\result == m_RelationName;\r"
        },
        {
          "limitHit": false,
          "lineNumber": 1257,
          "offsetAndLengths": [
            [
              1,
              13
            ]
          ],
          "preview": "\t//@ requires 2 \u003c= numFolds \u0026\u0026 numFolds \u003c numInstances();\r"
        },
        {
          "limitHit": false,
          "lineNumber": 1258,
          "offsetAndLengths": [
            [
              1,
              13
            ]
          ],
          "preview": "\t//@ requires 0 \u003c= numFold \u0026\u0026 numFold \u003c numFolds;\r"
        },
        {
          "limitHit": false,
          "lineNumber": 1335,
          "offsetAndLengths": [
            [
              1,
              13
            ]
          ],
          "preview": "\t//@ requires 2 \u003c= numFolds \u0026\u0026 numFolds \u003c numInstances();\r"
        },
        {
          "limitHit": false,
          "lineNumber": 1336,
          "offsetAndLengths": [
            [
              1,
              13
            ]
          ],
          "preview": "\t//@ requires 0 \u003c= numFold \u0026\u0026 numFold \u003c numFolds;\r"
        },
        {
          "limitHit": false,
          "lineNumber": 1376,
          "offsetAndLengths": [
            [
              1,
              13
            ]
          ],
          "preview": "\t//@ requires 2 \u003c= numFolds \u0026\u0026 numFolds \u003c numInstances();\r"
        },
        {
          "limitHit": false,
          "lineNumber": 1377,
          "offsetAndLengths": [
            [
              1,
              13
            ]
          ],
          "preview": "\t//@ requires 0 \u003c= numFold \u0026\u0026 numFold \u003c numFolds;\r"
        },
        {
          "limitHit": false,
          "lineNumber": 1443,
          "offsetAndLengths": [
            [
              1,
              13
            ]
          ],
          "preview": "\t//@ requires 0 \u003c= index \u0026\u0026 index \u003c numAttributes();\r"
        },
        {
          "limitHit": false,
          "lineNumber": 1487,
          "offsetAndLengths": [
            [
              1,
              13
            ]
          ],
          "preview": "\t//@ requires 0 \u003c= index \u0026\u0026 index \u003c numAttributes();\r"
        },
        {
          "limitHit": false,
          "lineNumber": 1594,
          "offsetAndLengths": [
            [
              1,
              13
            ]
          ],
          "preview": "\t//@ requires 0 \u003c= from \u0026\u0026 from \u003c= numInstances() - num;\r"
        },
        {
          "limitHit": false,
          "lineNumber": 1595,
          "offsetAndLengths": [
            [
              1,
              13
            ]
          ],
          "preview": "\t//@ requires 0 \u003c= num;\r"
        },
        {
          "limitHit": false,
          "lineNumber": 1641,
          "offsetAndLengths": [
            [
              1,
              13
            ]
          ],
          "preview": "\t//@ requires 0 \u003c= attIndex \u0026\u0026 attIndex \u003c numAttributes();\r"
        },
        {
          "limitHit": false,
          "lineNumber": 1642,
          "offsetAndLengths": [
            [
              1,
              13
            ]
          ],
          "preview": "\t//@ requires 0 \u003c= left \u0026\u0026 left \u003c= right \u0026\u0026 right \u003c numInstances();\r"
        },
        {
          "limitHit": false,
          "lineNumber": 1675,
          "offsetAndLengths": [
            [
              1,
              13
            ]
          ],
          "preview": "\t//@ requires 0 \u003c= attIndex \u0026\u0026 attIndex \u003c numAttributes();\r"
        },
        {
          "limitHit": false,
          "lineNumber": 1676,
          "offsetAndLengths": [
            [
              1,
              13
            ]
          ],
          "preview": "\t//@ requires 0 \u003c= first \u0026\u0026 first \u003c= right \u0026\u0026 right \u003c numInstances();\r"
        },
        {
          "limitHit": false,
          "lineNumber": 1697,
          "offsetAndLengths": [
            [
              1,
              13
            ]
          ],
          "preview": "\t//@ requires 0 \u003c= attIndex \u0026\u0026 attIndex \u003c numAttributes();\r"
        },
        {
          "limitHit": false,
          "lineNumber": 1698,
          "offsetAndLengths": [
            [
              1,
              13
            ]
          ],
          "preview": "\t//@ requires 0 \u003c= first \u0026\u0026 first \u003c= right \u0026\u0026 right \u003c numInstances();\r"
        },
        {
          "limitHit": false,
          "lineNumber": 1741,
          "offsetAndLengths": [
            [
              1,
              13
            ]
          ],
          "preview": "\t//@ requires 0 \u003c= i \u0026\u0026 i \u003c numInstances();\r"
        },
        {
          "limitHit": false,
          "lineNumber": 1742,
          "offsetAndLengths": [
            [
              1,
              13
            ]
          ],
          "preview": "\t//@ requires 0 \u003c= j \u0026\u0026 j \u003c numInstances();\r"
        },
        {
          "limitHit": false,
          "lineNumber": 1790,
          "offsetAndLengths": [
            [
              1,
              13
            ]
          ],
          "preview": "\t//@ requires argv != null;\r"
        },
        {
          "limitHit": false,
          "lineNumber": 1791,
          "offsetAndLengths": [
            [
              1,
              13
            ]
          ],
          "preview": "\t//@ requires argv.length == 1;\r"
        },
        {
          "limitHit": false,
          "lineNumber": 1792,
          "offsetAndLengths": [
            [
              1,
              13
            ]
          ],
          "preview": "\t//@ requires argv[0] != null;\r"
        }
      ],
      "repository": {
        "name": "github.com/triguero/MRPR",
        "url": "/github.com/triguero/MRPR"
      }
    }
  ],
  "LimitHit": false,
  "Cloning": [],
  "Missing": [],
  "Timedout": [],
  "ResultCount": 156,
  "ElapsedMilliseconds": 2994,
  "Alert": {
    "Title": "",
    "Description": "",
    "ProposedQueries": null
  }
}
