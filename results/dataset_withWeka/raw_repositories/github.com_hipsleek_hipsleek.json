{
  "SourcegraphEndpoint": "https://sourcegraph.com",
  "Query": "(//@ requires )|(//@ ensures ) repo:github.com/hipsleek/hipsleek lang:java count:all case:yes type:file patterntype:regexp",
  "Site": {
    "BuildVersion": "238702_2023-08-16_5.1-acf4bcc841e5"
  },
  "Results": [
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "b8e044655ec3d3e80172fe3f0a9fa519bf171099"
        },
        "content": "// This file was generated by jmlunit on Sun Nov 04 15:55:04 EST 2007.\r\n\r\npackage org.jmlspecs.samples.list.list2;\r\n\r\nimport org.jmlspecs.samples.list.node.TwoWayNode;\r\n\r\n/** Automatically-generated test driver for JML and JUnit based\r\n * testing of TwoWayList. The superclass of this class should be edited\r\n * to supply test data. However it's best not to edit this class\r\n * directly; instead use the command\r\n * \u003cpre\u003e\r\n *  jmlunit TwoWayList.java\r\n * \u003c/pre\u003e\r\n * to regenerate this class whenever TwoWayList.java changes.\r\n */\r\npublic class TwoWayList_JML_Test\r\n     extends TwoWayList_JML_TestData\r\n{\r\n    /** Initialize this class. */\r\n    public TwoWayList_JML_Test(java.lang.String name) {\r\n        super(name);\r\n    }\r\n\r\n    /** Run the tests. */\r\n    public static void main(java.lang.String[] args) {\r\n        org.jmlspecs.jmlunit.JMLTestRunner.run(suite());\r\n        // You can also use a JUnit test runner such as:\r\n        // junit.textui.TestRunner.run(suite());\r\n    }\r\n\r\n    /** Test to see if the code for class TwoWayList\r\n     * has been compiled with runtime assertion checking (i.e., by jmlc).\r\n     * Code that is not compiled with jmlc would not make an effective test,\r\n     * since no assertion checking would be done. */\r\n    public void test$IsRACCompiled() {\r\n        junit.framework.Assert.assertTrue(\"code for class TwoWayList\"\r\n                + \" was not compiled with jmlc\"\r\n                + \" so no assertions will be checked!\",\r\n            org.jmlspecs.jmlrac.runtime.JMLChecker.isRACCompiled(TwoWayList.class)\r\n            );\r\n    }\r\n\r\n    /** Return the test suite for this test class.  This will have\r\n    * added to it at least test$IsRACCompiled(), and any test methods\r\n    * written explicitly by the user in the superclass.  It will also\r\n    * have added test suites for each testing each method and\r\n    * constructor.\r\n    */\r\n    //@ ensures \\result != null;\r\n    public static junit.framework.Test suite() {\r\n        TwoWayList_JML_Test testobj\r\n            = new TwoWayList_JML_Test(\"TwoWayList_JML_Test\");\r\n        junit.framework.TestSuite testsuite = testobj.overallTestSuite();\r\n        // Add instances of Test found by the reflection mechanism.\r\n        testsuite.addTestSuite(TwoWayList_JML_Test.class);\r\n        testobj.addTestSuiteForEachMethod(testsuite);\r\n        return testsuite;\r\n    }\r\n\r\n    /** A JUnit test object that can run a single test method.  This\r\n     * is defined as a nested class solely for convenience; it can't\r\n     * be defined once and for all because it must subclass its\r\n     * enclosing class.\r\n     */\r\n    protected static abstract class OneTest extends TwoWayList_JML_Test {\r\n\r\n        /** Initialize this test object. */\r\n        public OneTest(String name) {\r\n            super(name);\r\n        }\r\n\r\n        /** The result object that holds information about testing. */\r\n        protected junit.framework.TestResult result;\r\n\r\n        //@ also\r\n        //@ requires result != null;\r\n        public void run(junit.framework.TestResult result) {\r\n            this.result = result;\r\n            super.run(result);\r\n        }\r\n\r\n        /* Run a single test and decide whether the test was\r\n         * successful, meaningless, or a failure.  This is the\r\n         * Template Method pattern abstraction of the inner loop in a\r\n         * JML/JUnit test. */\r\n        public void runTest() throws java.lang.Throwable {\r\n            try {\r\n                // The call being tested!\r\n                doCall();\r\n            }\r\n            catch (org.jmlspecs.jmlrac.runtime.JMLEntryPreconditionError e) {\r\n                // meaningless test input\r\n                addMeaningless();\r\n            } catch (org.jmlspecs.jmlrac.runtime.JMLAssertionError e) {\r\n                // test failure\r\n                int l = org.jmlspecs.jmlrac.runtime.JMLChecker.getLevel();\r\n                org.jmlspecs.jmlrac.runtime.JMLChecker.setLevel\r\n                    (org.jmlspecs.jmlrac.runtime.JMLOption.NONE);\r\n                try {\r\n                    java.lang.String failmsg = this.failMessage(e);\r\n                    junit.framework.AssertionFailedError err\r\n                        = new junit.framework.AssertionFailedError(failmsg);\r\n                    err.setStackTrace(new java.lang.StackTraceElement[]{});\r\n                    err.initCause(e);\r\n                    result.addFailure(this, err);\r\n                } finally {\r\n                    org.jmlspecs.jmlrac.runtime.JMLChecker.setLevel(l);\r\n                }\r\n            } catch (java.lang.Throwable e) {\r\n                // test success\r\n            }\r\n        }\r\n\r\n        /** Call the method to be tested with the appropriate arguments. */\r\n        protected abstract void doCall() throws java.lang.Throwable;\r\n\r\n        /** Format the error message for a test failure, based on the\r\n         * method's arguments. */\r\n        protected abstract java.lang.String failMessage\r\n            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e);\r\n\r\n        /** Inform listeners that a meaningless test was run. */\r\n        private void addMeaningless() {\r\n            if (result instanceof org.jmlspecs.jmlunit.JMLTestResult) {\r\n                ((org.jmlspecs.jmlunit.JMLTestResult)result)\r\n                    .addMeaningless(this);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** Create the tests that are to be run for testing the class\r\n     * TwoWayList.  The framework will then run them.\r\n     * @param overallTestSuite$ The suite accumulating all of the tests\r\n     * for this driver class.\r\n     */\r\n    //@ requires overallTestSuite$ != null;\r\n    public void addTestSuiteForEachMethod\r\n        (junit.framework.TestSuite overallTestSuite$)\r\n    {\r\n        try {\r\n            this.addTestSuiteFor$TestTwoWayList(overallTestSuite$);\r\n        } catch (java.lang.Throwable ex) {\r\n            overallTestSuite$.addTest\r\n                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));\r\n        }\r\n        try {\r\n            this.addTestSuiteFor$TestDecrementCursor(overallTestSuite$);\r\n        } catch (java.lang.Throwable ex) {\r\n            overallTestSuite$.addTest\r\n                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));\r\n        }\r\n        try {\r\n            this.addTestSuiteFor$TestLastEntry(overallTestSuite$);\r\n        } catch (java.lang.Throwable ex) {\r\n            overallTestSuite$.addTest\r\n                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));\r\n        }\r\n        try {\r\n            this.addTestSuiteFor$TestRemoveEntry(overallTestSuite$);\r\n        } catch (java.lang.Throwable ex) {\r\n            overallTestSuite$.addTest\r\n                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));\r\n        }\r\n        try {\r\n            this.addTestSuiteFor$TestInsertAfterCursor(overallTestSuite$);\r\n        } catch (java.lang.Throwable ex) {\r\n            overallTestSuite$.addTest\r\n                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));\r\n        }\r\n        try {\r\n            this.addTestSuiteFor$TestInsertBeforeCursor(overallTestSuite$);\r\n        } catch (java.lang.Throwable ex) {\r\n            overallTestSuite$.addTest\r\n                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));\r\n        }\r\n        try {\r\n            this.addTestSuiteFor$TestClone(overallTestSuite$);\r\n        } catch (java.lang.Throwable ex) {\r\n            overallTestSuite$.addTest\r\n                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));\r\n        }\r\n        try {\r\n            this.addTestSuiteFor$TestCreateIterator(overallTestSuite$);\r\n        } catch (java.lang.Throwable ex) {\r\n            overallTestSuite$.addTest\r\n                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));\r\n        }\r\n        try {\r\n            this.addTestSuiteFor$TestLength(overallTestSuite$);\r\n        } catch (java.lang.Throwable ex) {\r\n            overallTestSuite$.addTest\r\n                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));\r\n        }\r\n        try {\r\n            this.addTestSuiteFor$TestIsEmpty(overallTestSuite$);\r\n        } catch (java.lang.Throwable ex) {\r\n            overallTestSuite$.addTest\r\n                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));\r\n        }\r\n        try {\r\n            this.addTestSuiteFor$TestEquals(overallTestSuite$);\r\n        } catch (java.lang.Throwable ex) {\r\n            overallTestSuite$.addTest\r\n                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));\r\n        }\r\n        try {\r\n            this.addTestSuiteFor$TestHashCode(overallTestSuite$);\r\n        } catch (java.lang.Throwable ex) {\r\n            overallTestSuite$.addTest\r\n                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));\r\n        }\r\n        try {\r\n            this.addTestSuiteFor$TestAppend(overallTestSuite$);\r\n        } catch (java.lang.Throwable ex) {\r\n            overallTestSuite$.addTest\r\n                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));\r\n        }\r\n        try {\r\n            this.addTestSuiteFor$TestRemoveAllEntries(overallTestSuite$);\r\n        } catch (java.lang.Throwable ex) {\r\n            overallTestSuite$.addTest\r\n                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));\r\n        }\r\n        try {\r\n            this.addTestSuiteFor$TestFirstEntry(overallTestSuite$);\r\n        } catch (java.lang.Throwable ex) {\r\n            overallTestSuite$.addTest\r\n                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));\r\n        }\r\n        try {\r\n            this.addTestSuiteFor$TestIncrementCursor(overallTestSuite$);\r\n        } catch (java.lang.Throwable ex) {\r\n            overallTestSuite$.addTest\r\n                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));\r\n        }\r\n        try {\r\n            this.addTestSuiteFor$TestIsOffEnd(overallTestSuite$);\r\n        } catch (java.lang.Throwable ex) {\r\n            overallTestSuite$.addTest\r\n                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));\r\n        }\r\n        try {\r\n            this.addTestSuiteFor$TestIsOffFront(overallTestSuite$);\r\n        } catch (java.lang.Throwable ex) {\r\n            overallTestSuite$.addTest\r\n                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));\r\n        }\r\n        try {\r\n            this.addTestSuiteFor$TestGetEntry(overallTestSuite$);\r\n        } catch (java.lang.Throwable ex) {\r\n            overallTestSuite$.addTest\r\n                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));\r\n        }\r\n        try {\r\n            this.addTestSuiteFor$TestReplaceEntry(overallTestSuite$);\r\n        } catch (java.lang.Throwable ex) {\r\n            overallTestSuite$.addTest\r\n                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));\r\n        }\r\n        try {\r\n            this.addTestSuiteFor$TestToString(overallTestSuite$);\r\n        } catch (java.lang.Throwable ex) {\r\n            overallTestSuite$.addTest\r\n                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));\r\n        }\r\n    }\r\n\r\n    /** Add tests for the TwoWayList contructor\r\n     * to the overall test suite. */\r\n    private void addTestSuiteFor$TestTwoWayList\r\n        (junit.framework.TestSuite overallTestSuite$)\r\n    {\r\n        junit.framework.TestSuite methodTests$\r\n            = this.emptyTestSuiteFor(\"TwoWayList\");\r\n        try {\r\n            methodTests$.addTest\r\n                (new TestTwoWayList());\r\n        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {\r\n            // methodTests$ doesn't want more tests\r\n        }\r\n        overallTestSuite$.addTest(methodTests$);\r\n    }\r\n\r\n    /** Test for the TwoWayList contructor. */\r\n    protected static class TestTwoWayList extends OneTest {\r\n\r\n        /** Initialize this instance. */\r\n        public TestTwoWayList() {\r\n            super(\"TwoWayList\");\r\n        }\r\n\r\n        protected void doCall() throws java.lang.Throwable {\r\n            new TwoWayList();\r\n        }\r\n\r\n        protected java.lang.String failMessage\r\n            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)\r\n        {\r\n            java.lang.String msg = \"\\n\\tContructor 'TwoWayList'\";\r\n            return msg;\r\n        }\r\n    }\r\n\r\n    /** Add tests for the decrementCursor method\r\n     * to the overall test suite. */\r\n    private void addTestSuiteFor$TestDecrementCursor\r\n        (junit.framework.TestSuite overallTestSuite$)\r\n    {\r\n        junit.framework.TestSuite methodTests$\r\n            = this.emptyTestSuiteFor(\"decrementCursor\");\r\n        try {\r\n            org.jmlspecs.jmlunit.strategies.IndefiniteIterator\r\n                receivers$iter\r\n                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator\r\n                    (this.vorg_jmlspecs_samples_list_list2_TwoWayListIter(\"decrementCursor\", 0));\r\n            this.check_has_data\r\n                (receivers$iter,\r\n                 \"new NonNullIteratorDecorator(this.vorg_jmlspecs_samples_list_list2_TwoWayListIter(\\\"decrementCursor\\\", 0))\");\r\n            while (!receivers$iter.atEnd()) {\r\n                final org.jmlspecs.samples.list.list2.TwoWayList receiver$\r\n                    = (org.jmlspecs.samples.list.list2.TwoWayList) receivers$iter.get();\r\n                methodTests$.addTest\r\n                    (new TestDecrementCursor(receiver$));\r\n                receivers$iter.advance();\r\n            }\r\n        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {\r\n            // methodTests$ doesn't want more tests\r\n        }\r\n        overallTestSuite$.addTest(methodTests$);\r\n    }\r\n\r\n    /** Test for the decrementCursor method. */\r\n    protected static class TestDecrementCursor extends OneTest {\r\n        /** The receiver */\r\n        private org.jmlspecs.samples.list.list2.TwoWayList receiver$;\r\n\r\n        /** Initialize this instance. */\r\n        public TestDecrementCursor(org.jmlspecs.samples.list.list2.TwoWayList receiver$) {\r\n            super(\"decrementCursor\");\r\n            this.receiver$ = receiver$;\r\n        }\r\n\r\n        protected void doCall() throws java.lang.Throwable {\r\n            receiver$.decrementCursor();\r\n        }\r\n\r\n        protected java.lang.String failMessage\r\n            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)\r\n        {\r\n            java.lang.String msg = \"\\n\\tMethod 'decrementCursor' applied to\";\r\n            msg += \"\\n\\tReceiver: \" + this.receiver$;\r\n            return msg;\r\n        }\r\n    }\r\n\r\n    /** Add tests for the lastEntry method\r\n     * to the overall test suite. */\r\n    private void addTestSuiteFor$TestLastEntry\r\n        (junit.framework.TestSuite overallTestSuite$)\r\n    {\r\n        junit.framework.TestSuite methodTests$\r\n            = this.emptyTestSuiteFor(\"lastEntry\");\r\n        try {\r\n            org.jmlspecs.jmlunit.strategies.IndefiniteIterator\r\n                receivers$iter\r\n                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator\r\n                    (this.vorg_jmlspecs_samples_list_list2_TwoWayListIter(\"lastEntry\", 0));\r\n            this.check_has_data\r\n                (receivers$iter,\r\n                 \"new NonNullIteratorDecorator(this.vorg_jmlspecs_samples_list_list2_TwoWayListIter(\\\"lastEntry\\\", 0))\");\r\n            while (!receivers$iter.atEnd()) {\r\n                final org.jmlspecs.samples.list.list2.TwoWayList receiver$\r\n                    = (org.jmlspecs.samples.list.list2.TwoWayList) receivers$iter.get();\r\n                methodTests$.addTest\r\n                    (new TestLastEntry(receiver$));\r\n                receivers$iter.advance();\r\n            }\r\n        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {\r\n            // methodTests$ doesn't want more tests\r\n        }\r\n        overallTestSuite$.addTest(methodTests$);\r\n    }\r\n\r\n    /** Test for the lastEntry method. */\r\n    protected static class TestLastEntry extends OneTest {\r\n        /** The receiver */\r\n        private org.jmlspecs.samples.list.list2.TwoWayList receiver$;\r\n\r\n        /** Initialize this instance. */\r\n        public TestLastEntry(org.jmlspecs.samples.list.list2.TwoWayList receiver$) {\r\n            super(\"lastEntry\");\r\n            this.receiver$ = receiver$;\r\n        }\r\n\r\n        protected void doCall() throws java.lang.Throwable {\r\n            receiver$.lastEntry();\r\n        }\r\n\r\n        protected java.lang.String failMessage\r\n            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)\r\n        {\r\n            java.lang.String msg = \"\\n\\tMethod 'lastEntry' applied to\";\r\n            msg += \"\\n\\tReceiver: \" + this.receiver$;\r\n            return msg;\r\n        }\r\n    }\r\n\r\n    /** Add tests for the removeEntry method\r\n     * to the overall test suite. */\r\n    private void addTestSuiteFor$TestRemoveEntry\r\n        (junit.framework.TestSuite overallTestSuite$)\r\n    {\r\n        junit.framework.TestSuite methodTests$\r\n            = this.emptyTestSuiteFor(\"removeEntry\");\r\n        try {\r\n            org.jmlspecs.jmlunit.strategies.IndefiniteIterator\r\n                receivers$iter\r\n                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator\r\n                    (this.vorg_jmlspecs_samples_list_list2_TwoWayListIter(\"removeEntry\", 0));\r\n            this.check_has_data\r\n                (receivers$iter,\r\n                 \"new NonNullIteratorDecorator(this.vorg_jmlspecs_samples_list_list2_TwoWayListIter(\\\"removeEntry\\\", 0))\");\r\n            while (!receivers$iter.atEnd()) {\r\n                final org.jmlspecs.samples.list.list2.TwoWayList receiver$\r\n                    = (org.jmlspecs.samples.list.list2.TwoWayList) receivers$iter.get();\r\n                methodTests$.addTest\r\n                    (new TestRemoveEntry(receiver$));\r\n                receivers$iter.advance();\r\n            }\r\n        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {\r\n            // methodTests$ doesn't want more tests\r\n        }\r\n        overallTestSuite$.addTest(methodTests$);\r\n    }\r\n\r\n    /** Test for the removeEntry method. */\r\n    protected static class TestRemoveEntry extends OneTest {\r\n        /** The receiver */\r\n        private org.jmlspecs.samples.list.list2.TwoWayList receiver$;\r\n\r\n        /** Initialize this instance. */\r\n        public TestRemoveEntry(org.jmlspecs.samples.list.list2.TwoWayList receiver$) {\r\n            super(\"removeEntry\");\r\n            this.receiver$ = receiver$;\r\n        }\r\n\r\n        protected void doCall() throws java.lang.Throwable {\r\n            receiver$.removeEntry();\r\n        }\r\n\r\n        protected java.lang.String failMessage\r\n            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)\r\n        {\r\n            java.lang.String msg = \"\\n\\tMethod 'removeEntry' applied to\";\r\n            msg += \"\\n\\tReceiver: \" + this.receiver$;\r\n            return msg;\r\n        }\r\n    }\r\n\r\n    /** Add tests for the insertAfterCursor method\r\n     * to the overall test suite. */\r\n    private void addTestSuiteFor$TestInsertAfterCursor\r\n        (junit.framework.TestSuite overallTestSuite$)\r\n    {\r\n        junit.framework.TestSuite methodTests$\r\n            = this.emptyTestSuiteFor(\"insertAfterCursor\");\r\n        try {\r\n            org.jmlspecs.jmlunit.strategies.IndefiniteIterator\r\n                receivers$iter\r\n                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator\r\n                    (this.vorg_jmlspecs_samples_list_list2_TwoWayListIter(\"insertAfterCursor\", 1));\r\n            this.check_has_data\r\n                (receivers$iter,\r\n                 \"new NonNullIteratorDecorator(this.vorg_jmlspecs_samples_list_list2_TwoWayListIter(\\\"insertAfterCursor\\\", 1))\");\r\n            while (!receivers$iter.atEnd()) {\r\n                org.jmlspecs.jmlunit.strategies.IndefiniteIterator\r\n                    vjava_lang_Object$1$iter\r\n                    = this.vjava_lang_ObjectIter(\"insertAfterCursor\", 0);\r\n                this.check_has_data\r\n                    (vjava_lang_Object$1$iter,\r\n                     \"this.vjava_lang_ObjectIter(\\\"insertAfterCursor\\\", 0)\");\r\n                while (!vjava_lang_Object$1$iter.atEnd()) {\r\n                    final org.jmlspecs.samples.list.list2.TwoWayList receiver$\r\n                        = (org.jmlspecs.samples.list.list2.TwoWayList) receivers$iter.get();\r\n                    final java.lang.Object newEntry\r\n                        = (java.lang.Object) vjava_lang_Object$1$iter.get();\r\n                    methodTests$.addTest\r\n                        (new TestInsertAfterCursor(receiver$, newEntry));\r\n                    vjava_lang_Object$1$iter.advance();\r\n                }\r\n                receivers$iter.advance();\r\n            }\r\n        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {\r\n            // methodTests$ doesn't want more tests\r\n        }\r\n        overallTestSuite$.addTest(methodTests$);\r\n    }\r\n\r\n    /** Test for the insertAfterCursor method. */\r\n    protected static class TestInsertAfterCursor extends OneTest {\r\n        /** The receiver */\r\n        private org.jmlspecs.samples.list.list2.TwoWayList receiver$;\r\n        /** Argument newEntry */\r\n        private java.lang.Object newEntry;\r\n\r\n        /** Initialize this instance. */\r\n        public TestInsertAfterCursor(org.jmlspecs.samples.list.list2.TwoWayList receiver$, java.lang.Object newEntry) {\r\n            super(\"insertAfterCursor\"+ \":\" + (newEntry==null? \"null\" :\"{java.lang.Object}\"));\r\n            this.receiver$ = receiver$;\r\n            this.newEntry = newEntry;\r\n        }\r\n\r\n        protected void doCall() throws java.lang.Throwable {\r\n            receiver$.insertAfterCursor(newEntry);\r\n        }\r\n\r\n        protected java.lang.String failMessage\r\n            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)\r\n        {\r\n            java.lang.String msg = \"\\n\\tMethod 'insertAfterCursor' applied to\";\r\n            msg += \"\\n\\tReceiver: \" + this.receiver$;\r\n            msg += \"\\n\\tArgument newEntry: \" + this.newEntry;\r\n            return msg;\r\n        }\r\n    }\r\n\r\n    /** Add tests for the insertBeforeCursor method\r\n     * to the overall test suite. */\r\n    private void addTestSuiteFor$TestInsertBeforeCursor\r\n        (junit.framework.TestSuite overallTestSuite$)\r\n    {\r\n        junit.framework.TestSuite methodTests$\r\n            = this.emptyTestSuiteFor(\"insertBeforeCursor\");\r\n        try {\r\n            org.jmlspecs.jmlunit.strategies.IndefiniteIterator\r\n                receivers$iter\r\n                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator\r\n                    (this.vorg_jmlspecs_samples_list_list2_TwoWayListIter(\"insertBeforeCursor\", 1));\r\n            this.check_has_data\r\n                (receivers$iter,\r\n                 \"new NonNullIteratorDecorator(this.vorg_jmlspecs_samples_list_list2_TwoWayListIter(\\\"insertBeforeCursor\\\", 1))\");\r\n            while (!receivers$iter.atEnd()) {\r\n                org.jmlspecs.jmlunit.strategies.IndefiniteIterator\r\n                    vjava_lang_Object$1$iter\r\n                    = this.vjava_lang_ObjectIter(\"insertBeforeCursor\", 0);\r\n                this.check_has_data\r\n                    (vjava_lang_Object$1$iter,\r\n                     \"this.vjava_lang_ObjectIter(\\\"insertBeforeCursor\\\", 0)\");\r\n                while (!vjava_lang_Object$1$iter.atEnd()) {\r\n                    final org.jmlspecs.samples.list.list2.TwoWayList receiver$\r\n                        = (org.jmlspecs.samples.list.list2.TwoWayList) receivers$iter.get();\r\n                    final java.lang.Object newEntry\r\n                        = (java.lang.Object) vjava_lang_Object$1$iter.get();\r\n                    methodTests$.addTest\r\n                        (new TestInsertBeforeCursor(receiver$, newEntry));\r\n                    vjava_lang_Object$1$iter.advance();\r\n                }\r\n                receivers$iter.advance();\r\n            }\r\n        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {\r\n            // methodTests$ doesn't want more tests\r\n        }\r\n        overallTestSuite$.addTest(methodTests$);\r\n    }\r\n\r\n    /** Test for the insertBeforeCursor method. */\r\n    protected static class TestInsertBeforeCursor extends OneTest {\r\n        /** The receiver */\r\n        private org.jmlspecs.samples.list.list2.TwoWayList receiver$;\r\n        /** Argument newEntry */\r\n        private java.lang.Object newEntry;\r\n\r\n        /** Initialize this instance. */\r\n        public TestInsertBeforeCursor(org.jmlspecs.samples.list.list2.TwoWayList receiver$, java.lang.Object newEntry) {\r\n            super(\"insertBeforeCursor\"+ \":\" + (newEntry==null? \"null\" :\"{java.lang.Object}\"));\r\n            this.receiver$ = receiver$;\r\n            this.newEntry = newEntry;\r\n        }\r\n\r\n        protected void doCall() throws java.lang.Throwable {\r\n            receiver$.insertBeforeCursor(newEntry);\r\n        }\r\n\r\n        protected java.lang.String failMessage\r\n            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)\r\n        {\r\n            java.lang.String msg = \"\\n\\tMethod 'insertBeforeCursor' applied to\";\r\n            msg += \"\\n\\tReceiver: \" + this.receiver$;\r\n            msg += \"\\n\\tArgument newEntry: \" + this.newEntry;\r\n            return msg;\r\n        }\r\n    }\r\n\r\n    /** Add tests for the clone method\r\n     * to the overall test suite. */\r\n    private void addTestSuiteFor$TestClone\r\n        (junit.framework.TestSuite overallTestSuite$)\r\n    {\r\n        junit.framework.TestSuite methodTests$\r\n            = this.emptyTestSuiteFor(\"clone\");\r\n        try {\r\n            org.jmlspecs.jmlunit.strategies.IndefiniteIterator\r\n                receivers$iter\r\n                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator\r\n                    (this.vorg_jmlspecs_samples_list_list2_TwoWayListIter(\"clone\", 0));\r\n            this.check_has_data\r\n                (receivers$iter,\r\n                 \"new NonNullIteratorDecorator(this.vorg_jmlspecs_samples_list_list2_TwoWayListIter(\\\"clone\\\", 0))\");\r\n            while (!receivers$iter.atEnd()) {\r\n                final org.jmlspecs.samples.list.list2.TwoWayList receiver$\r\n                    = (org.jmlspecs.samples.list.list2.TwoWayList) receivers$iter.get();\r\n                methodTests$.addTest\r\n                    (new TestClone(receiver$));\r\n                receivers$iter.advance();\r\n            }\r\n        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {\r\n            // methodTests$ doesn't want more tests\r\n        }\r\n        overallTestSuite$.addTest(methodTests$);\r\n    }\r\n\r\n    /** Test for the clone method. */\r\n    protected static class TestClone extends OneTest {\r\n        /** The receiver */\r\n        private org.jmlspecs.samples.list.list2.TwoWayList receiver$;\r\n\r\n        /** Initialize this instance. */\r\n        public TestClone(org.jmlspecs.samples.list.list2.TwoWayList receiver$) {\r\n            super(\"clone\");\r\n            this.receiver$ = receiver$;\r\n        }\r\n\r\n        protected void doCall() throws java.lang.Throwable {\r\n            receiver$.clone();\r\n        }\r\n\r\n        protected java.lang.String failMessage\r\n            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)\r\n        {\r\n            java.lang.String msg = \"\\n\\tMethod 'clone' applied to\";\r\n            msg += \"\\n\\tReceiver: \" + this.receiver$;\r\n            return msg;\r\n        }\r\n    }\r\n\r\n    /** Add tests for the createIterator method\r\n     * to the overall test suite. */\r\n    private void addTestSuiteFor$TestCreateIterator\r\n        (junit.framework.TestSuite overallTestSuite$)\r\n    {\r\n        junit.framework.TestSuite methodTests$\r\n            = this.emptyTestSuiteFor(\"createIterator\");\r\n        try {\r\n            org.jmlspecs.jmlunit.strategies.IndefiniteIterator\r\n                receivers$iter\r\n                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator\r\n                    (this.vorg_jmlspecs_samples_list_list2_TwoWayListIter(\"createIterator\", 0));\r\n            this.check_has_data\r\n                (receivers$iter,\r\n                 \"new NonNullIteratorDecorator(this.vorg_jmlspecs_samples_list_list2_TwoWayListIter(\\\"createIterator\\\", 0))\");\r\n            while (!receivers$iter.atEnd()) {\r\n                final org.jmlspecs.samples.list.list2.TwoWayList receiver$\r\n                    = (org.jmlspecs.samples.list.list2.TwoWayList) receivers$iter.get();\r\n                methodTests$.addTest\r\n                    (new TestCreateIterator(receiver$));\r\n                receivers$iter.advance();\r\n            }\r\n        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {\r\n            // methodTests$ doesn't want more tests\r\n        }\r\n        overallTestSuite$.addTest(methodTests$);\r\n    }\r\n\r\n    /** Test for the createIterator method. */\r\n    protected static class TestCreateIterator extends OneTest {\r\n        /** The receiver */\r\n        private org.jmlspecs.samples.list.list2.TwoWayList receiver$;\r\n\r\n        /** Initialize this instance. */\r\n        public TestCreateIterator(org.jmlspecs.samples.list.list2.TwoWayList receiver$) {\r\n            super(\"createIterator\");\r\n            this.receiver$ = receiver$;\r\n        }\r\n\r\n        protected void doCall() throws java.lang.Throwable {\r\n            receiver$.createIterator();\r\n        }\r\n\r\n        protected java.lang.String failMessage\r\n            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)\r\n        {\r\n            java.lang.String msg = \"\\n\\tMethod 'createIterator' applied to\";\r\n            msg += \"\\n\\tReceiver: \" + this.receiver$;\r\n            return msg;\r\n        }\r\n    }\r\n\r\n    /** Add tests for the length method\r\n     * to the overall test suite. */\r\n    private void addTestSuiteFor$TestLength\r\n        (junit.framework.TestSuite overallTestSuite$)\r\n    {\r\n        junit.framework.TestSuite methodTests$\r\n            = this.emptyTestSuiteFor(\"length\");\r\n        try {\r\n            org.jmlspecs.jmlunit.strategies.IndefiniteIterator\r\n                receivers$iter\r\n                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator\r\n                    (this.vorg_jmlspecs_samples_list_list2_TwoWayListIter(\"length\", 0));\r\n            this.check_has_data\r\n                (receivers$iter,\r\n                 \"new NonNullIteratorDecorator(this.vorg_jmlspecs_samples_list_list2_TwoWayListIter(\\\"length\\\", 0))\");\r\n            while (!receivers$iter.atEnd()) {\r\n                final org.jmlspecs.samples.list.list2.TwoWayList receiver$\r\n                    = (org.jmlspecs.samples.list.list2.TwoWayList) receivers$iter.get();\r\n                methodTests$.addTest\r\n                    (new TestLength(receiver$));\r\n                receivers$iter.advance();\r\n            }\r\n        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {\r\n            // methodTests$ doesn't want more tests\r\n        }\r\n        overallTestSuite$.addTest(methodTests$);\r\n    }\r\n\r\n    /** Test for the length method. */\r\n    protected static class TestLength extends OneTest {\r\n        /** The receiver */\r\n        private org.jmlspecs.samples.list.list2.TwoWayList receiver$;\r\n\r\n        /** Initialize this instance. */\r\n        public TestLength(org.jmlspecs.samples.list.list2.TwoWayList receiver$) {\r\n            super(\"length\");\r\n            this.receiver$ = receiver$;\r\n        }\r\n\r\n        protected void doCall() throws java.lang.Throwable {\r\n            receiver$.length();\r\n        }\r\n\r\n        protected java.lang.String failMessage\r\n            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)\r\n        {\r\n            java.lang.String msg = \"\\n\\tMethod 'length' applied to\";\r\n            msg += \"\\n\\tReceiver: \" + this.receiver$;\r\n            return msg;\r\n        }\r\n    }\r\n\r\n    /** Add tests for the isEmpty method\r\n     * to the overall test suite. */\r\n    private void addTestSuiteFor$TestIsEmpty\r\n        (junit.framework.TestSuite overallTestSuite$)\r\n    {\r\n        junit.framework.TestSuite methodTests$\r\n            = this.emptyTestSuiteFor(\"isEmpty\");\r\n        try {\r\n            org.jmlspecs.jmlunit.strategies.IndefiniteIterator\r\n                receivers$iter\r\n                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator\r\n                    (this.vorg_jmlspecs_samples_list_list2_TwoWayListIter(\"isEmpty\", 0));\r\n            this.check_has_data\r\n                (receivers$iter,\r\n                 \"new NonNullIteratorDecorator(this.vorg_jmlspecs_samples_list_list2_TwoWayListIter(\\\"isEmpty\\\", 0))\");\r\n            while (!receivers$iter.atEnd()) {\r\n                final org.jmlspecs.samples.list.list2.TwoWayList receiver$\r\n                    = (org.jmlspecs.samples.list.list2.TwoWayList) receivers$iter.get();\r\n                methodTests$.addTest\r\n                    (new TestIsEmpty(receiver$));\r\n                receivers$iter.advance();\r\n            }\r\n        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {\r\n            // methodTests$ doesn't want more tests\r\n        }\r\n        overallTestSuite$.addTest(methodTests$);\r\n    }\r\n\r\n    /** Test for the isEmpty method. */\r\n    protected static class TestIsEmpty extends OneTest {\r\n        /** The receiver */\r\n        private org.jmlspecs.samples.list.list2.TwoWayList receiver$;\r\n\r\n        /** Initialize this instance. */\r\n        public TestIsEmpty(org.jmlspecs.samples.list.list2.TwoWayList receiver$) {\r\n            super(\"isEmpty\");\r\n            this.receiver$ = receiver$;\r\n        }\r\n\r\n        protected void doCall() throws java.lang.Throwable {\r\n            receiver$.isEmpty();\r\n        }\r\n\r\n        protected java.lang.String failMessage\r\n            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)\r\n        {\r\n            java.lang.String msg = \"\\n\\tMethod 'isEmpty' applied to\";\r\n            msg += \"\\n\\tReceiver: \" + this.receiver$;\r\n            return msg;\r\n        }\r\n    }\r\n\r\n    /** Add tests for the equals method\r\n     * to the overall test suite. */\r\n    private void addTestSuiteFor$TestEquals\r\n        (junit.framework.TestSuite overallTestSuite$)\r\n    {\r\n        junit.framework.TestSuite methodTests$\r\n            = this.emptyTestSuiteFor(\"equals\");\r\n        try {\r\n            org.jmlspecs.jmlunit.strategies.IndefiniteIterator\r\n                receivers$iter\r\n                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator\r\n                    (this.vorg_jmlspecs_samples_list_list2_TwoWayListIter(\"equals\", 1));\r\n            this.check_has_data\r\n                (receivers$iter,\r\n                 \"new NonNullIteratorDecorator(this.vorg_jmlspecs_samples_list_list2_TwoWayListIter(\\\"equals\\\", 1))\");\r\n            while (!receivers$iter.atEnd()) {\r\n                org.jmlspecs.jmlunit.strategies.IndefiniteIterator\r\n                    vjava_lang_Object$1$iter\r\n                    = this.vjava_lang_ObjectIter(\"equals\", 0);\r\n                this.check_has_data\r\n                    (vjava_lang_Object$1$iter,\r\n                     \"this.vjava_lang_ObjectIter(\\\"equals\\\", 0)\");\r\n                while (!vjava_lang_Object$1$iter.atEnd()) {\r\n                    final org.jmlspecs.samples.list.list2.TwoWayList receiver$\r\n                        = (org.jmlspecs.samples.list.list2.TwoWayList) receivers$iter.get();\r\n                    final java.lang.Object arg1\r\n                        = (java.lang.Object) vjava_lang_Object$1$iter.get();\r\n                    methodTests$.addTest\r\n                        (new TestEquals(receiver$, arg1));\r\n                    vjava_lang_Object$1$iter.advance();\r\n                }\r\n                receivers$iter.advance();\r\n            }\r\n        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {\r\n            // methodTests$ doesn't want more tests\r\n        }\r\n        overallTestSuite$.addTest(methodTests$);\r\n    }\r\n\r\n    /** Test for the equals method. */\r\n    protected static class TestEquals extends OneTest {\r\n        /** The receiver */\r\n        private org.jmlspecs.samples.list.list2.TwoWayList receiver$;\r\n        /** Argument arg1 */\r\n        private java.lang.Object arg1;\r\n\r\n        /** Initialize this instance. */\r\n        public TestEquals(org.jmlspecs.samples.list.list2.TwoWayList receiver$, java.lang.Object arg1) {\r\n            super(\"equals\"+ \":\" + (arg1==null? \"null\" :\"{java.lang.Object}\"));\r\n            this.receiver$ = receiver$;\r\n            this.arg1 = arg1;\r\n        }\r\n\r\n        protected void doCall() throws java.lang.Throwable {\r\n            receiver$.equals(arg1);\r\n        }\r\n\r\n        protected java.lang.String failMessage\r\n            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)\r\n        {\r\n            java.lang.String msg = \"\\n\\tMethod 'equals' applied to\";\r\n            msg += \"\\n\\tReceiver: \" + this.receiver$;\r\n            msg += \"\\n\\tArgument arg1: \" + this.arg1;\r\n            return msg;\r\n        }\r\n    }\r\n\r\n    /** Add tests for the hashCode method\r\n     * to the overall test suite. */\r\n    private void addTestSuiteFor$TestHashCode\r\n        (junit.framework.TestSuite overallTestSuite$)\r\n    {\r\n        junit.framework.TestSuite methodTests$\r\n            = this.emptyTestSuiteFor(\"hashCode\");\r\n        try {\r\n            org.jmlspecs.jmlunit.strategies.IndefiniteIterator\r\n                receivers$iter\r\n                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator\r\n                    (this.vorg_jmlspecs_samples_list_list2_TwoWayListIter(\"hashCode\", 0));\r\n            this.check_has_data\r\n                (receivers$iter,\r\n                 \"new NonNullIteratorDecorator(this.vorg_jmlspecs_samples_list_list2_TwoWayListIter(\\\"hashCode\\\", 0))\");\r\n            while (!receivers$iter.atEnd()) {\r\n                final org.jmlspecs.samples.list.list2.TwoWayList receiver$\r\n                    = (org.jmlspecs.samples.list.list2.TwoWayList) receivers$iter.get();\r\n                methodTests$.addTest\r\n                    (new TestHashCode(receiver$));\r\n                receivers$iter.advance();\r\n            }\r\n        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {\r\n            // methodTests$ doesn't want more tests\r\n        }\r\n        overallTestSuite$.addTest(methodTests$);\r\n    }\r\n\r\n    /** Test for the hashCode method. */\r\n    protected static class TestHashCode extends OneTest {\r\n        /** The receiver */\r\n        private org.jmlspecs.samples.list.list2.TwoWayList receiver$;\r\n\r\n        /** Initialize this instance. */\r\n        public TestHashCode(org.jmlspecs.samples.list.list2.TwoWayList receiver$) {\r\n            super(\"hashCode\");\r\n            this.receiver$ = receiver$;\r\n        }\r\n\r\n        protected void doCall() throws java.lang.Throwable {\r\n            receiver$.hashCode();\r\n        }\r\n\r\n        protected java.lang.String failMessage\r\n            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)\r\n        {\r\n            java.lang.String msg = \"\\n\\tMethod 'hashCode' applied to\";\r\n            msg += \"\\n\\tReceiver: \" + this.receiver$;\r\n            return msg;\r\n        }\r\n    }\r\n\r\n    /** Add tests for the append method\r\n     * to the overall test suite. */\r\n    private void addTestSuiteFor$TestAppend\r\n        (junit.framework.TestSuite overallTestSuite$)\r\n    {\r\n        junit.framework.TestSuite methodTests$\r\n            = this.emptyTestSuiteFor(\"append\");\r\n        try {\r\n            org.jmlspecs.jmlunit.strategies.IndefiniteIterator\r\n                receivers$iter\r\n                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator\r\n                    (this.vorg_jmlspecs_samples_list_list2_TwoWayListIter(\"append\", 1));\r\n            this.check_has_data\r\n                (receivers$iter,\r\n                 \"new NonNullIteratorDecorator(this.vorg_jmlspecs_samples_list_list2_TwoWayListIter(\\\"append\\\", 1))\");\r\n            while (!receivers$iter.atEnd()) {\r\n                org.jmlspecs.jmlunit.strategies.IndefiniteIterator\r\n                    vjava_lang_Object$1$iter\r\n                    = this.vjava_lang_ObjectIter(\"append\", 0);\r\n                this.check_has_data\r\n                    (vjava_lang_Object$1$iter,\r\n                     \"this.vjava_lang_ObjectIter(\\\"append\\\", 0)\");\r\n                while (!vjava_lang_Object$1$iter.atEnd()) {\r\n                    final org.jmlspecs.samples.list.list2.TwoWayList receiver$\r\n                        = (org.jmlspecs.samples.list.list2.TwoWayList) receivers$iter.get();\r\n                    final java.lang.Object arg1\r\n                        = (java.lang.Object) vjava_lang_Object$1$iter.get();\r\n                    methodTests$.addTest\r\n                        (new TestAppend(receiver$, arg1));\r\n                    vjava_lang_Object$1$iter.advance();\r\n                }\r\n                receivers$iter.advance();\r\n            }\r\n        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {\r\n            // methodTests$ doesn't want more tests\r\n        }\r\n        overallTestSuite$.addTest(methodTests$);\r\n    }\r\n\r\n    /** Test for the append method. */\r\n    protected static class TestAppend extends OneTest {\r\n        /** The receiver */\r\n        private org.jmlspecs.samples.list.list2.TwoWayList receiver$;\r\n        /** Argument arg1 */\r\n        private java.lang.Object arg1;\r\n\r\n        /** Initialize this instance. */\r\n        public TestAppend(org.jmlspecs.samples.list.list2.TwoWayList receiver$, java.lang.Object arg1) {\r\n            super(\"append\"+ \":\" + (arg1==null? \"null\" :\"{java.lang.Object}\"));\r\n            this.receiver$ = receiver$;\r\n            this.arg1 = arg1;\r\n        }\r\n\r\n        protected void doCall() throws java.lang.Throwable {\r\n            receiver$.append(arg1);\r\n        }\r\n\r\n        protected java.lang.String failMessage\r\n            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)\r\n        {\r\n            java.lang.String msg = \"\\n\\tMethod 'append' applied to\";\r\n            msg += \"\\n\\tReceiver: \" + this.receiver$;\r\n            msg += \"\\n\\tArgument arg1: \" + this.arg1;\r\n            return msg;\r\n        }\r\n    }\r\n\r\n    /** Add tests for the removeAllEntries method\r\n     * to the overall test suite. */\r\n    private void addTestSuiteFor$TestRemoveAllEntries\r\n        (junit.framework.TestSuite overallTestSuite$)\r\n    {\r\n        junit.framework.TestSuite methodTests$\r\n            = this.emptyTestSuiteFor(\"removeAllEntries\");\r\n        try {\r\n            org.jmlspecs.jmlunit.strategies.IndefiniteIterator\r\n                receivers$iter\r\n                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator\r\n                    (this.vorg_jmlspecs_samples_list_list2_TwoWayListIter(\"removeAllEntries\", 0));\r\n            this.check_has_data\r\n                (receivers$iter,\r\n                 \"new NonNullIteratorDecorator(this.vorg_jmlspecs_samples_list_list2_TwoWayListIter(\\\"removeAllEntries\\\", 0))\");\r\n            while (!receivers$iter.atEnd()) {\r\n                final org.jmlspecs.samples.list.list2.TwoWayList receiver$\r\n                    = (org.jmlspecs.samples.list.list2.TwoWayList) receivers$iter.get();\r\n                methodTests$.addTest\r\n                    (new TestRemoveAllEntries(receiver$));\r\n                receivers$iter.advance();\r\n            }\r\n        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {\r\n            // methodTests$ doesn't want more tests\r\n        }\r\n        overallTestSuite$.addTest(methodTests$);\r\n    }\r\n\r\n    /** Test for the removeAllEntries method. */\r\n    protected static class TestRemoveAllEntries extends OneTest {\r\n        /** The receiver */\r\n        private org.jmlspecs.samples.list.list2.TwoWayList receiver$;\r\n\r\n        /** Initialize this instance. */\r\n        public TestRemoveAllEntries(org.jmlspecs.samples.list.list2.TwoWayList receiver$) {\r\n            super(\"removeAllEntries\");\r\n            this.receiver$ = receiver$;\r\n        }\r\n\r\n        protected void doCall() throws java.lang.Throwable {\r\n            receiver$.removeAllEntries();\r\n        }\r\n\r\n        protected java.lang.String failMessage\r\n            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)\r\n        {\r\n            java.lang.String msg = \"\\n\\tMethod 'removeAllEntries' applied to\";\r\n            msg += \"\\n\\tReceiver: \" + this.receiver$;\r\n            return msg;\r\n        }\r\n    }\r\n\r\n    /** Add tests for the firstEntry method\r\n     * to the overall test suite. */\r\n    private void addTestSuiteFor$TestFirstEntry\r\n        (junit.framework.TestSuite overallTestSuite$)\r\n    {\r\n        junit.framework.TestSuite methodTests$\r\n            = this.emptyTestSuiteFor(\"firstEntry\");\r\n        try {\r\n            org.jmlspecs.jmlunit.strategies.IndefiniteIterator\r\n                receivers$iter\r\n                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator\r\n                    (this.vorg_jmlspecs_samples_list_list2_TwoWayListIter(\"firstEntry\", 0));\r\n            this.check_has_data\r\n                (receivers$iter,\r\n                 \"new NonNullIteratorDecorator(this.vorg_jmlspecs_samples_list_list2_TwoWayListIter(\\\"firstEntry\\\", 0))\");\r\n            while (!receivers$iter.atEnd()) {\r\n                final org.jmlspecs.samples.list.list2.TwoWayList receiver$\r\n                    = (org.jmlspecs.samples.list.list2.TwoWayList) receivers$iter.get();\r\n                methodTests$.addTest\r\n                    (new TestFirstEntry(receiver$));\r\n                receivers$iter.advance();\r\n            }\r\n        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {\r\n            // methodTests$ doesn't want more tests\r\n        }\r\n        overallTestSuite$.addTest(methodTests$);\r\n    }\r\n\r\n    /** Test for the firstEntry method. */\r\n    protected static class TestFirstEntry extends OneTest {\r\n        /** The receiver */\r\n        private org.jmlspecs.samples.list.list2.TwoWayList receiver$;\r\n\r\n        /** Initialize this instance. */\r\n        public TestFirstEntry(org.jmlspecs.samples.list.list2.TwoWayList receiver$) {\r\n            super(\"firstEntry\");\r\n            this.receiver$ = receiver$;\r\n        }\r\n\r\n        protected void doCall() throws java.lang.Throwable {\r\n            receiver$.firstEntry();\r\n        }\r\n\r\n        protected java.lang.String failMessage\r\n            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)\r\n        {\r\n            java.lang.String msg = \"\\n\\tMethod 'firstEntry' applied to\";\r\n            msg += \"\\n\\tReceiver: \" + this.receiver$;\r\n            return msg;\r\n        }\r\n    }\r\n\r\n    /** Add tests for the incrementCursor method\r\n     * to the overall test suite. */\r\n    private void addTestSuiteFor$TestIncrementCursor\r\n        (junit.framework.TestSuite overallTestSuite$)\r\n    {\r\n        junit.framework.TestSuite methodTests$\r\n            = this.emptyTestSuiteFor(\"incrementCursor\");\r\n        try {\r\n            org.jmlspecs.jmlunit.strategies.IndefiniteIterator\r\n                receivers$iter\r\n                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator\r\n                    (this.vorg_jmlspecs_samples_list_list2_TwoWayListIter(\"incrementCursor\", 0));\r\n            this.check_has_data\r\n                (receivers$iter,\r\n                 \"new NonNullIteratorDecorator(this.vorg_jmlspecs_samples_list_list2_TwoWayListIter(\\\"incrementCursor\\\", 0))\");\r\n            while (!receivers$iter.atEnd()) {\r\n                final org.jmlspecs.samples.list.list2.TwoWayList receiver$\r\n                    = (org.jmlspecs.samples.list.list2.TwoWayList) receivers$iter.get();\r\n                methodTests$.addTest\r\n                    (new TestIncrementCursor(receiver$));\r\n                receivers$iter.advance();\r\n            }\r\n        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {\r\n            // methodTests$ doesn't want more tests\r\n        }\r\n        overallTestSuite$.addTest(methodTests$);\r\n    }\r\n\r\n    /** Test for the incrementCursor method. */\r\n    protected static class TestIncrementCursor extends OneTest {\r\n        /** The receiver */\r\n        private org.jmlspecs.samples.list.list2.TwoWayList receiver$;\r\n\r\n        /** Initialize this instance. */\r\n        public TestIncrementCursor(org.jmlspecs.samples.list.list2.TwoWayList receiver$) {\r\n            super(\"incrementCursor\");\r\n            this.receiver$ = receiver$;\r\n        }\r\n\r\n        protected void doCall() throws java.lang.Throwable {\r\n            receiver$.incrementCursor();\r\n        }\r\n\r\n        protected java.lang.String failMessage\r\n            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)\r\n        {\r\n            java.lang.String msg = \"\\n\\tMethod 'incrementCursor' applied to\";\r\n            msg += \"\\n\\tReceiver: \" + this.receiver$;\r\n            return msg;\r\n        }\r\n    }\r\n\r\n    /** Add tests for the isOffEnd method\r\n     * to the overall test suite. */\r\n    private void addTestSuiteFor$TestIsOffEnd\r\n        (junit.framework.TestSuite overallTestSuite$)\r\n    {\r\n        junit.framework.TestSuite methodTests$\r\n            = this.emptyTestSuiteFor(\"isOffEnd\");\r\n        try {\r\n            org.jmlspecs.jmlunit.strategies.IndefiniteIterator\r\n                receivers$iter\r\n                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator\r\n                    (this.vorg_jmlspecs_samples_list_list2_TwoWayListIter(\"isOffEnd\", 0));\r\n            this.check_has_data\r\n                (receivers$iter,\r\n                 \"new NonNullIteratorDecorator(this.vorg_jmlspecs_samples_list_list2_TwoWayListIter(\\\"isOffEnd\\\", 0))\");\r\n            while (!receivers$iter.atEnd()) {\r\n                final org.jmlspecs.samples.list.list2.TwoWayList receiver$\r\n                    = (org.jmlspecs.samples.list.list2.TwoWayList) receivers$iter.get();\r\n                methodTests$.addTest\r\n                    (new TestIsOffEnd(receiver$));\r\n                receivers$iter.advance();\r\n            }\r\n        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {\r\n            // methodTests$ doesn't want more tests\r\n        }\r\n        overallTestSuite$.addTest(methodTests$);\r\n    }\r\n\r\n    /** Test for the isOffEnd method. */\r\n    protected static class TestIsOffEnd extends OneTest {\r\n        /** The receiver */\r\n        private org.jmlspecs.samples.list.list2.TwoWayList receiver$;\r\n\r\n        /** Initialize this instance. */\r\n        public TestIsOffEnd(org.jmlspecs.samples.list.list2.TwoWayList receiver$) {\r\n            super(\"isOffEnd\");\r\n            this.receiver$ = receiver$;\r\n        }\r\n\r\n        protected void doCall() throws java.lang.Throwable {\r\n            receiver$.isOffEnd();\r\n        }\r\n\r\n        protected java.lang.String failMessage\r\n            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)\r\n        {\r\n            java.lang.String msg = \"\\n\\tMethod 'isOffEnd' applied to\";\r\n            msg += \"\\n\\tReceiver: \" + this.receiver$;\r\n            return msg;\r\n        }\r\n    }\r\n\r\n    /** Add tests for the isOffFront method\r\n     * to the overall test suite. */\r\n    private void addTestSuiteFor$TestIsOffFront\r\n        (junit.framework.TestSuite overallTestSuite$)\r\n    {\r\n        junit.framework.TestSuite methodTests$\r\n            = this.emptyTestSuiteFor(\"isOffFront\");\r\n        try {\r\n            org.jmlspecs.jmlunit.strategies.IndefiniteIterator\r\n                receivers$iter\r\n                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator\r\n                    (this.vorg_jmlspecs_samples_list_list2_TwoWayListIter(\"isOffFront\", 0));\r\n            this.check_has_data\r\n                (receivers$iter,\r\n                 \"new NonNullIteratorDecorator(this.vorg_jmlspecs_samples_list_list2_TwoWayListIter(\\\"isOffFront\\\", 0))\");\r\n            while (!receivers$iter.atEnd()) {\r\n                final org.jmlspecs.samples.list.list2.TwoWayList receiver$\r\n                    = (org.jmlspecs.samples.list.list2.TwoWayList) receivers$iter.get();\r\n                methodTests$.addTest\r\n                    (new TestIsOffFront(receiver$));\r\n                receivers$iter.advance();\r\n            }\r\n        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {\r\n            // methodTests$ doesn't want more tests\r\n        }\r\n        overallTestSuite$.addTest(methodTests$);\r\n    }\r\n\r\n    /** Test for the isOffFront method. */\r\n    protected static class TestIsOffFront extends OneTest {\r\n        /** The receiver */\r\n        private org.jmlspecs.samples.list.list2.TwoWayList receiver$;\r\n\r\n        /** Initialize this instance. */\r\n        public TestIsOffFront(org.jmlspecs.samples.list.list2.TwoWayList receiver$) {\r\n            super(\"isOffFront\");\r\n            this.receiver$ = receiver$;\r\n        }\r\n\r\n        protected void doCall() throws java.lang.Throwable {\r\n            receiver$.isOffFront();\r\n        }\r\n\r\n        protected java.lang.String failMessage\r\n            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)\r\n        {\r\n            java.lang.String msg = \"\\n\\tMethod 'isOffFront' applied to\";\r\n            msg += \"\\n\\tReceiver: \" + this.receiver$;\r\n            return msg;\r\n        }\r\n    }\r\n\r\n    /** Add tests for the getEntry method\r\n     * to the overall test suite. */\r\n    private void addTestSuiteFor$TestGetEntry\r\n        (junit.framework.TestSuite overallTestSuite$)\r\n    {\r\n        junit.framework.TestSuite methodTests$\r\n            = this.emptyTestSuiteFor(\"getEntry\");\r\n        try {\r\n            org.jmlspecs.jmlunit.strategies.IndefiniteIterator\r\n                receivers$iter\r\n                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator\r\n                    (this.vorg_jmlspecs_samples_list_list2_TwoWayListIter(\"getEntry\", 0));\r\n            this.check_has_data\r\n                (receivers$iter,\r\n                 \"new NonNullIteratorDecorator(this.vorg_jmlspecs_samples_list_list2_TwoWayListIter(\\\"getEntry\\\", 0))\");\r\n            while (!receivers$iter.atEnd()) {\r\n                final org.jmlspecs.samples.list.list2.TwoWayList receiver$\r\n                    = (org.jmlspecs.samples.list.list2.TwoWayList) receivers$iter.get();\r\n                methodTests$.addTest\r\n                    (new TestGetEntry(receiver$));\r\n                receivers$iter.advance();\r\n            }\r\n        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {\r\n            // methodTests$ doesn't want more tests\r\n        }\r\n        overallTestSuite$.addTest(methodTests$);\r\n    }\r\n\r\n    /** Test for the getEntry method. */\r\n    protected static class TestGetEntry extends OneTest {\r\n        /** The receiver */\r\n        private org.jmlspecs.samples.list.list2.TwoWayList receiver$;\r\n\r\n        /** Initialize this instance. */\r\n        public TestGetEntry(org.jmlspecs.samples.list.list2.TwoWayList receiver$) {\r\n            super(\"getEntry\");\r\n            this.receiver$ = receiver$;\r\n        }\r\n\r\n        protected void doCall() throws java.lang.Throwable {\r\n            receiver$.getEntry();\r\n        }\r\n\r\n        protected java.lang.String failMessage\r\n            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)\r\n        {\r\n            java.lang.String msg = \"\\n\\tMethod 'getEntry' applied to\";\r\n            msg += \"\\n\\tReceiver: \" + this.receiver$;\r\n            return msg;\r\n        }\r\n    }\r\n\r\n    /** Add tests for the replaceEntry method\r\n     * to the overall test suite. */\r\n    private void addTestSuiteFor$TestReplaceEntry\r\n        (junit.framework.TestSuite overallTestSuite$)\r\n    {\r\n        junit.framework.TestSuite methodTests$\r\n            = this.emptyTestSuiteFor(\"replaceEntry\");\r\n        try {\r\n            org.jmlspecs.jmlunit.strategies.IndefiniteIterator\r\n                receivers$iter\r\n                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator\r\n                    (this.vorg_jmlspecs_samples_list_list2_TwoWayListIter(\"replaceEntry\", 1));\r\n            this.check_has_data\r\n                (receivers$iter,\r\n                 \"new NonNullIteratorDecorator(this.vorg_jmlspecs_samples_list_list2_TwoWayListIter(\\\"replaceEntry\\\", 1))\");\r\n            while (!receivers$iter.atEnd()) {\r\n                org.jmlspecs.jmlunit.strategies.IndefiniteIterator\r\n                    vjava_lang_Object$1$iter\r\n                    = this.vjava_lang_ObjectIter(\"replaceEntry\", 0);\r\n                this.check_has_data\r\n                    (vjava_lang_Object$1$iter,\r\n                     \"this.vjava_lang_ObjectIter(\\\"replaceEntry\\\", 0)\");\r\n                while (!vjava_lang_Object$1$iter.atEnd()) {\r\n                    final org.jmlspecs.samples.list.list2.TwoWayList receiver$\r\n                        = (org.jmlspecs.samples.list.list2.TwoWayList) receivers$iter.get();\r\n                    final java.lang.Object arg1\r\n                        = (java.lang.Object) vjava_lang_Object$1$iter.get();\r\n                    methodTests$.addTest\r\n                        (new TestReplaceEntry(receiver$, arg1));\r\n                    vjava_lang_Object$1$iter.advance();\r\n                }\r\n                receivers$iter.advance();\r\n            }\r\n        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {\r\n            // methodTests$ doesn't want more tests\r\n        }\r\n        overallTestSuite$.addTest(methodTests$);\r\n    }\r\n\r\n    /** Test for the replaceEntry method. */\r\n    protected static class TestReplaceEntry extends OneTest {\r\n        /** The receiver */\r\n        private org.jmlspecs.samples.list.list2.TwoWayList receiver$;\r\n        /** Argument arg1 */\r\n        private java.lang.Object arg1;\r\n\r\n        /** Initialize this instance. */\r\n        public TestReplaceEntry(org.jmlspecs.samples.list.list2.TwoWayList receiver$, java.lang.Object arg1) {\r\n            super(\"replaceEntry\"+ \":\" + (arg1==null? \"null\" :\"{java.lang.Object}\"));\r\n            this.receiver$ = receiver$;\r\n            this.arg1 = arg1;\r\n        }\r\n\r\n        protected void doCall() throws java.lang.Throwable {\r\n            receiver$.replaceEntry(arg1);\r\n        }\r\n\r\n        protected java.lang.String failMessage\r\n            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)\r\n        {\r\n            java.lang.String msg = \"\\n\\tMethod 'replaceEntry' applied to\";\r\n            msg += \"\\n\\tReceiver: \" + this.receiver$;\r\n            msg += \"\\n\\tArgument arg1: \" + this.arg1;\r\n            return msg;\r\n        }\r\n    }\r\n\r\n    /** Add tests for the toString method\r\n     * to the overall test suite. */\r\n    private void addTestSuiteFor$TestToString\r\n        (junit.framework.TestSuite overallTestSuite$)\r\n    {\r\n        junit.framework.TestSuite methodTests$\r\n            = this.emptyTestSuiteFor(\"toString\");\r\n        try {\r\n            org.jmlspecs.jmlunit.strategies.IndefiniteIterator\r\n                receivers$iter\r\n                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator\r\n                    (this.vorg_jmlspecs_samples_list_list2_TwoWayListIter(\"toString\", 0));\r\n            this.check_has_data\r\n                (receivers$iter,\r\n                 \"new NonNullIteratorDecorator(this.vorg_jmlspecs_samples_list_list2_TwoWayListIter(\\\"toString\\\", 0))\");\r\n            while (!receivers$iter.atEnd()) {\r\n                final org.jmlspecs.samples.list.list2.TwoWayList receiver$\r\n                    = (org.jmlspecs.samples.list.list2.TwoWayList) receivers$iter.get();\r\n                methodTests$.addTest\r\n                    (new TestToString(receiver$));\r\n                receivers$iter.advance();\r\n            }\r\n        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {\r\n            // methodTests$ doesn't want more tests\r\n        }\r\n        overallTestSuite$.addTest(methodTests$);\r\n    }\r\n\r\n    /** Test for the toString method. */\r\n    protected static class TestToString extends OneTest {\r\n        /** The receiver */\r\n        private org.jmlspecs.samples.list.list2.TwoWayList receiver$;\r\n\r\n        /** Initialize this instance. */\r\n        public TestToString(org.jmlspecs.samples.list.list2.TwoWayList receiver$) {\r\n            super(\"toString\");\r\n            this.receiver$ = receiver$;\r\n        }\r\n\r\n        protected void doCall() throws java.lang.Throwable {\r\n            receiver$.toString();\r\n        }\r\n\r\n        protected java.lang.String failMessage\r\n            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)\r\n        {\r\n            java.lang.String msg = \"\\n\\tMethod 'toString' applied to\";\r\n            msg += \"\\n\\tReceiver: \" + this.receiver$;\r\n            return msg;\r\n        }\r\n    }\r\n\r\n    /** Check that the iterator is non-null and not empty. */\r\n    private void\r\n    check_has_data(org.jmlspecs.jmlunit.strategies.IndefiniteIterator iter,\r\n                   String call)\r\n    {\r\n        if (iter == null) {\r\n            junit.framework.Assert.fail(call + \" returned null\");\r\n        }\r\n        if (iter.atEnd()) {\r\n            junit.framework.Assert.fail(call + \" returned an empty iterator\");\r\n        }\r\n    }\r\n\r\n    /** Converts a char to a printable String for display */\r\n    public static String charToString(char c) {\r\n        if (c == '\\n') {\r\n            return \"NL\";\r\n        } else if (c == '\\r') {\r\n            return \"CR\";\r\n        } else if (c == '\\t') {\r\n            return \"TAB\";\r\n        } else if (Character.isISOControl(c)) {\r\n            int i = (int)c;\r\n            return \"\\\\u\"\r\n                    + Character.forDigit((i/2048)%16,16)\r\n                    + Character.forDigit((i/256)%16,16)\r\n                    + Character.forDigit((i/16)%16,16)\r\n                    + Character.forDigit((i)%16,16);\r\n        }\r\n        return Character.toString(c);\r\n    }\r\n}\r\n",
        "name": "TwoWayList_JML_Test.java",
        "path": "examples/jml/www.eecs.ucf.edu/~leavens/JML-release/org/jmlspecs/samples/list/list2/TwoWayList_JML_Test.java",
        "url": "/github.com/hipsleek/hipsleek/-/blob/examples/jml/www.eecs.ucf.edu/~leavens/JML-release/org/jmlspecs/samples/list/list2/TwoWayList_JML_Test.java"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 48,
          "offsetAndLengths": [
            [
              4,
              12
            ]
          ],
          "preview": "    //@ ensures \\result != null;\r"
        },
        {
          "limitHit": false,
          "lineNumber": 75,
          "offsetAndLengths": [
            [
              8,
              13
            ]
          ],
          "preview": "        //@ requires result != null;\r"
        },
        {
          "limitHit": false,
          "lineNumber": 135,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires overallTestSuite$ != null;\r"
        }
      ],
      "repository": {
        "name": "github.com/hipsleek/hipsleek",
        "url": "/github.com/hipsleek/hipsleek"
      }
    },
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "b8e044655ec3d3e80172fe3f0a9fa519bf171099"
        },
        "content": "// This file was generated by jmlunit on Sun Nov 04 15:54:59 EST 2007.\r\n\r\npackage org.jmlspecs.samples.list.list2;\r\n\r\nimport org.jmlspecs.samples.list.node.OneWayNode;\r\n\r\n/** Automatically-generated test driver for JML and JUnit based\r\n * testing of OneWayList. The superclass of this class should be edited\r\n * to supply test data. However it's best not to edit this class\r\n * directly; instead use the command\r\n * \u003cpre\u003e\r\n *  jmlunit OneWayList.java\r\n * \u003c/pre\u003e\r\n * to regenerate this class whenever OneWayList.java changes.\r\n */\r\npublic class OneWayList_JML_Test\r\n     extends OneWayList_JML_TestData\r\n{\r\n    /** Initialize this class. */\r\n    public OneWayList_JML_Test(java.lang.String name) {\r\n        super(name);\r\n    }\r\n\r\n    /** Run the tests. */\r\n    public static void main(java.lang.String[] args) {\r\n        org.jmlspecs.jmlunit.JMLTestRunner.run(suite());\r\n        // You can also use a JUnit test runner such as:\r\n        // junit.textui.TestRunner.run(suite());\r\n    }\r\n\r\n    /** Test to see if the code for class OneWayList\r\n     * has been compiled with runtime assertion checking (i.e., by jmlc).\r\n     * Code that is not compiled with jmlc would not make an effective test,\r\n     * since no assertion checking would be done. */\r\n    public void test$IsRACCompiled() {\r\n        junit.framework.Assert.assertTrue(\"code for class OneWayList\"\r\n                + \" was not compiled with jmlc\"\r\n                + \" so no assertions will be checked!\",\r\n            org.jmlspecs.jmlrac.runtime.JMLChecker.isRACCompiled(OneWayList.class)\r\n            );\r\n    }\r\n\r\n    /** Return the test suite for this test class.  This will have\r\n    * added to it at least test$IsRACCompiled(), and any test methods\r\n    * written explicitly by the user in the superclass.  It will also\r\n    * have added test suites for each testing each method and\r\n    * constructor.\r\n    */\r\n    //@ ensures \\result != null;\r\n    public static junit.framework.Test suite() {\r\n        OneWayList_JML_Test testobj\r\n            = new OneWayList_JML_Test(\"OneWayList_JML_Test\");\r\n        junit.framework.TestSuite testsuite = testobj.overallTestSuite();\r\n        // Add instances of Test found by the reflection mechanism.\r\n        testsuite.addTestSuite(OneWayList_JML_Test.class);\r\n        testobj.addTestSuiteForEachMethod(testsuite);\r\n        return testsuite;\r\n    }\r\n\r\n    /** A JUnit test object that can run a single test method.  This\r\n     * is defined as a nested class solely for convenience; it can't\r\n     * be defined once and for all because it must subclass its\r\n     * enclosing class.\r\n     */\r\n    protected static abstract class OneTest extends OneWayList_JML_Test {\r\n\r\n        /** Initialize this test object. */\r\n        public OneTest(String name) {\r\n            super(name);\r\n        }\r\n\r\n        /** The result object that holds information about testing. */\r\n        protected junit.framework.TestResult result;\r\n\r\n        //@ also\r\n        //@ requires result != null;\r\n        public void run(junit.framework.TestResult result) {\r\n            this.result = result;\r\n            super.run(result);\r\n        }\r\n\r\n        /* Run a single test and decide whether the test was\r\n         * successful, meaningless, or a failure.  This is the\r\n         * Template Method pattern abstraction of the inner loop in a\r\n         * JML/JUnit test. */\r\n        public void runTest() throws java.lang.Throwable {\r\n            try {\r\n                // The call being tested!\r\n                doCall();\r\n            }\r\n            catch (org.jmlspecs.jmlrac.runtime.JMLEntryPreconditionError e) {\r\n                // meaningless test input\r\n                addMeaningless();\r\n            } catch (org.jmlspecs.jmlrac.runtime.JMLAssertionError e) {\r\n                // test failure\r\n                int l = org.jmlspecs.jmlrac.runtime.JMLChecker.getLevel();\r\n                org.jmlspecs.jmlrac.runtime.JMLChecker.setLevel\r\n                    (org.jmlspecs.jmlrac.runtime.JMLOption.NONE);\r\n                try {\r\n                    java.lang.String failmsg = this.failMessage(e);\r\n                    junit.framework.AssertionFailedError err\r\n                        = new junit.framework.AssertionFailedError(failmsg);\r\n                    err.setStackTrace(new java.lang.StackTraceElement[]{});\r\n                    err.initCause(e);\r\n                    result.addFailure(this, err);\r\n                } finally {\r\n                    org.jmlspecs.jmlrac.runtime.JMLChecker.setLevel(l);\r\n                }\r\n            } catch (java.lang.Throwable e) {\r\n                // test success\r\n            }\r\n        }\r\n\r\n        /** Call the method to be tested with the appropriate arguments. */\r\n        protected abstract void doCall() throws java.lang.Throwable;\r\n\r\n        /** Format the error message for a test failure, based on the\r\n         * method's arguments. */\r\n        protected abstract java.lang.String failMessage\r\n            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e);\r\n\r\n        /** Inform listeners that a meaningless test was run. */\r\n        private void addMeaningless() {\r\n            if (result instanceof org.jmlspecs.jmlunit.JMLTestResult) {\r\n                ((org.jmlspecs.jmlunit.JMLTestResult)result)\r\n                    .addMeaningless(this);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** Create the tests that are to be run for testing the class\r\n     * OneWayList.  The framework will then run them.\r\n     * @param overallTestSuite$ The suite accumulating all of the tests\r\n     * for this driver class.\r\n     */\r\n    //@ requires overallTestSuite$ != null;\r\n    public void addTestSuiteForEachMethod\r\n        (junit.framework.TestSuite overallTestSuite$)\r\n    {\r\n        try {\r\n            this.addTestSuiteFor$TestOneWayList(overallTestSuite$);\r\n        } catch (java.lang.Throwable ex) {\r\n            overallTestSuite$.addTest\r\n                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));\r\n        }\r\n        try {\r\n            this.addTestSuiteFor$TestFirstEntry(overallTestSuite$);\r\n        } catch (java.lang.Throwable ex) {\r\n            overallTestSuite$.addTest\r\n                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));\r\n        }\r\n        try {\r\n            this.addTestSuiteFor$TestIncrementCursor(overallTestSuite$);\r\n        } catch (java.lang.Throwable ex) {\r\n            overallTestSuite$.addTest\r\n                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));\r\n        }\r\n        try {\r\n            this.addTestSuiteFor$TestIsOffEnd(overallTestSuite$);\r\n        } catch (java.lang.Throwable ex) {\r\n            overallTestSuite$.addTest\r\n                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));\r\n        }\r\n        try {\r\n            this.addTestSuiteFor$TestIsOffFront(overallTestSuite$);\r\n        } catch (java.lang.Throwable ex) {\r\n            overallTestSuite$.addTest\r\n                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));\r\n        }\r\n        try {\r\n            this.addTestSuiteFor$TestGetEntry(overallTestSuite$);\r\n        } catch (java.lang.Throwable ex) {\r\n            overallTestSuite$.addTest\r\n                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));\r\n        }\r\n        try {\r\n            this.addTestSuiteFor$TestRemoveEntry(overallTestSuite$);\r\n        } catch (java.lang.Throwable ex) {\r\n            overallTestSuite$.addTest\r\n                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));\r\n        }\r\n        try {\r\n            this.addTestSuiteFor$TestReplaceEntry(overallTestSuite$);\r\n        } catch (java.lang.Throwable ex) {\r\n            overallTestSuite$.addTest\r\n                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));\r\n        }\r\n        try {\r\n            this.addTestSuiteFor$TestInsertAfterCursor(overallTestSuite$);\r\n        } catch (java.lang.Throwable ex) {\r\n            overallTestSuite$.addTest\r\n                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));\r\n        }\r\n        try {\r\n            this.addTestSuiteFor$TestInsertBeforeCursor(overallTestSuite$);\r\n        } catch (java.lang.Throwable ex) {\r\n            overallTestSuite$.addTest\r\n                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));\r\n        }\r\n        try {\r\n            this.addTestSuiteFor$TestClone(overallTestSuite$);\r\n        } catch (java.lang.Throwable ex) {\r\n            overallTestSuite$.addTest\r\n                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));\r\n        }\r\n        try {\r\n            this.addTestSuiteFor$TestToString(overallTestSuite$);\r\n        } catch (java.lang.Throwable ex) {\r\n            overallTestSuite$.addTest\r\n                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));\r\n        }\r\n    }\r\n\r\n    /** Add tests for the OneWayList contructor\r\n     * to the overall test suite. */\r\n    private void addTestSuiteFor$TestOneWayList\r\n        (junit.framework.TestSuite overallTestSuite$)\r\n    {\r\n        junit.framework.TestSuite methodTests$\r\n            = this.emptyTestSuiteFor(\"OneWayList\");\r\n        try {\r\n            methodTests$.addTest\r\n                (new TestOneWayList());\r\n        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {\r\n            // methodTests$ doesn't want more tests\r\n        }\r\n        overallTestSuite$.addTest(methodTests$);\r\n    }\r\n\r\n    /** Test for the OneWayList contructor. */\r\n    protected static class TestOneWayList extends OneTest {\r\n\r\n        /** Initialize this instance. */\r\n        public TestOneWayList() {\r\n            super(\"OneWayList\");\r\n        }\r\n\r\n        protected void doCall() throws java.lang.Throwable {\r\n            new OneWayList();\r\n        }\r\n\r\n        protected java.lang.String failMessage\r\n            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)\r\n        {\r\n            java.lang.String msg = \"\\n\\tContructor 'OneWayList'\";\r\n            return msg;\r\n        }\r\n    }\r\n\r\n    /** Add tests for the firstEntry method\r\n     * to the overall test suite. */\r\n    private void addTestSuiteFor$TestFirstEntry\r\n        (junit.framework.TestSuite overallTestSuite$)\r\n    {\r\n        junit.framework.TestSuite methodTests$\r\n            = this.emptyTestSuiteFor(\"firstEntry\");\r\n        try {\r\n            org.jmlspecs.jmlunit.strategies.IndefiniteIterator\r\n                receivers$iter\r\n                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator\r\n                    (this.vorg_jmlspecs_samples_list_list2_OneWayListIter(\"firstEntry\", 0));\r\n            this.check_has_data\r\n                (receivers$iter,\r\n                 \"new NonNullIteratorDecorator(this.vorg_jmlspecs_samples_list_list2_OneWayListIter(\\\"firstEntry\\\", 0))\");\r\n            while (!receivers$iter.atEnd()) {\r\n                final org.jmlspecs.samples.list.list2.OneWayList receiver$\r\n                    = (org.jmlspecs.samples.list.list2.OneWayList) receivers$iter.get();\r\n                methodTests$.addTest\r\n                    (new TestFirstEntry(receiver$));\r\n                receivers$iter.advance();\r\n            }\r\n        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {\r\n            // methodTests$ doesn't want more tests\r\n        }\r\n        overallTestSuite$.addTest(methodTests$);\r\n    }\r\n\r\n    /** Test for the firstEntry method. */\r\n    protected static class TestFirstEntry extends OneTest {\r\n        /** The receiver */\r\n        private org.jmlspecs.samples.list.list2.OneWayList receiver$;\r\n\r\n        /** Initialize this instance. */\r\n        public TestFirstEntry(org.jmlspecs.samples.list.list2.OneWayList receiver$) {\r\n            super(\"firstEntry\");\r\n            this.receiver$ = receiver$;\r\n        }\r\n\r\n        protected void doCall() throws java.lang.Throwable {\r\n            receiver$.firstEntry();\r\n        }\r\n\r\n        protected java.lang.String failMessage\r\n            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)\r\n        {\r\n            java.lang.String msg = \"\\n\\tMethod 'firstEntry' applied to\";\r\n            msg += \"\\n\\tReceiver: \" + this.receiver$;\r\n            return msg;\r\n        }\r\n    }\r\n\r\n    /** Add tests for the incrementCursor method\r\n     * to the overall test suite. */\r\n    private void addTestSuiteFor$TestIncrementCursor\r\n        (junit.framework.TestSuite overallTestSuite$)\r\n    {\r\n        junit.framework.TestSuite methodTests$\r\n            = this.emptyTestSuiteFor(\"incrementCursor\");\r\n        try {\r\n            org.jmlspecs.jmlunit.strategies.IndefiniteIterator\r\n                receivers$iter\r\n                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator\r\n                    (this.vorg_jmlspecs_samples_list_list2_OneWayListIter(\"incrementCursor\", 0));\r\n            this.check_has_data\r\n                (receivers$iter,\r\n                 \"new NonNullIteratorDecorator(this.vorg_jmlspecs_samples_list_list2_OneWayListIter(\\\"incrementCursor\\\", 0))\");\r\n            while (!receivers$iter.atEnd()) {\r\n                final org.jmlspecs.samples.list.list2.OneWayList receiver$\r\n                    = (org.jmlspecs.samples.list.list2.OneWayList) receivers$iter.get();\r\n                methodTests$.addTest\r\n                    (new TestIncrementCursor(receiver$));\r\n                receivers$iter.advance();\r\n            }\r\n        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {\r\n            // methodTests$ doesn't want more tests\r\n        }\r\n        overallTestSuite$.addTest(methodTests$);\r\n    }\r\n\r\n    /** Test for the incrementCursor method. */\r\n    protected static class TestIncrementCursor extends OneTest {\r\n        /** The receiver */\r\n        private org.jmlspecs.samples.list.list2.OneWayList receiver$;\r\n\r\n        /** Initialize this instance. */\r\n        public TestIncrementCursor(org.jmlspecs.samples.list.list2.OneWayList receiver$) {\r\n            super(\"incrementCursor\");\r\n            this.receiver$ = receiver$;\r\n        }\r\n\r\n        protected void doCall() throws java.lang.Throwable {\r\n            receiver$.incrementCursor();\r\n        }\r\n\r\n        protected java.lang.String failMessage\r\n            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)\r\n        {\r\n            java.lang.String msg = \"\\n\\tMethod 'incrementCursor' applied to\";\r\n            msg += \"\\n\\tReceiver: \" + this.receiver$;\r\n            return msg;\r\n        }\r\n    }\r\n\r\n    /** Add tests for the isOffEnd method\r\n     * to the overall test suite. */\r\n    private void addTestSuiteFor$TestIsOffEnd\r\n        (junit.framework.TestSuite overallTestSuite$)\r\n    {\r\n        junit.framework.TestSuite methodTests$\r\n            = this.emptyTestSuiteFor(\"isOffEnd\");\r\n        try {\r\n            org.jmlspecs.jmlunit.strategies.IndefiniteIterator\r\n                receivers$iter\r\n                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator\r\n                    (this.vorg_jmlspecs_samples_list_list2_OneWayListIter(\"isOffEnd\", 0));\r\n            this.check_has_data\r\n                (receivers$iter,\r\n                 \"new NonNullIteratorDecorator(this.vorg_jmlspecs_samples_list_list2_OneWayListIter(\\\"isOffEnd\\\", 0))\");\r\n            while (!receivers$iter.atEnd()) {\r\n                final org.jmlspecs.samples.list.list2.OneWayList receiver$\r\n                    = (org.jmlspecs.samples.list.list2.OneWayList) receivers$iter.get();\r\n                methodTests$.addTest\r\n                    (new TestIsOffEnd(receiver$));\r\n                receivers$iter.advance();\r\n            }\r\n        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {\r\n            // methodTests$ doesn't want more tests\r\n        }\r\n        overallTestSuite$.addTest(methodTests$);\r\n    }\r\n\r\n    /** Test for the isOffEnd method. */\r\n    protected static class TestIsOffEnd extends OneTest {\r\n        /** The receiver */\r\n        private org.jmlspecs.samples.list.list2.OneWayList receiver$;\r\n\r\n        /** Initialize this instance. */\r\n        public TestIsOffEnd(org.jmlspecs.samples.list.list2.OneWayList receiver$) {\r\n            super(\"isOffEnd\");\r\n            this.receiver$ = receiver$;\r\n        }\r\n\r\n        protected void doCall() throws java.lang.Throwable {\r\n            receiver$.isOffEnd();\r\n        }\r\n\r\n        protected java.lang.String failMessage\r\n            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)\r\n        {\r\n            java.lang.String msg = \"\\n\\tMethod 'isOffEnd' applied to\";\r\n            msg += \"\\n\\tReceiver: \" + this.receiver$;\r\n            return msg;\r\n        }\r\n    }\r\n\r\n    /** Add tests for the isOffFront method\r\n     * to the overall test suite. */\r\n    private void addTestSuiteFor$TestIsOffFront\r\n        (junit.framework.TestSuite overallTestSuite$)\r\n    {\r\n        junit.framework.TestSuite methodTests$\r\n            = this.emptyTestSuiteFor(\"isOffFront\");\r\n        try {\r\n            org.jmlspecs.jmlunit.strategies.IndefiniteIterator\r\n                receivers$iter\r\n                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator\r\n                    (this.vorg_jmlspecs_samples_list_list2_OneWayListIter(\"isOffFront\", 0));\r\n            this.check_has_data\r\n                (receivers$iter,\r\n                 \"new NonNullIteratorDecorator(this.vorg_jmlspecs_samples_list_list2_OneWayListIter(\\\"isOffFront\\\", 0))\");\r\n            while (!receivers$iter.atEnd()) {\r\n                final org.jmlspecs.samples.list.list2.OneWayList receiver$\r\n                    = (org.jmlspecs.samples.list.list2.OneWayList) receivers$iter.get();\r\n                methodTests$.addTest\r\n                    (new TestIsOffFront(receiver$));\r\n                receivers$iter.advance();\r\n            }\r\n        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {\r\n            // methodTests$ doesn't want more tests\r\n        }\r\n        overallTestSuite$.addTest(methodTests$);\r\n    }\r\n\r\n    /** Test for the isOffFront method. */\r\n    protected static class TestIsOffFront extends OneTest {\r\n        /** The receiver */\r\n        private org.jmlspecs.samples.list.list2.OneWayList receiver$;\r\n\r\n        /** Initialize this instance. */\r\n        public TestIsOffFront(org.jmlspecs.samples.list.list2.OneWayList receiver$) {\r\n            super(\"isOffFront\");\r\n            this.receiver$ = receiver$;\r\n        }\r\n\r\n        protected void doCall() throws java.lang.Throwable {\r\n            receiver$.isOffFront();\r\n        }\r\n\r\n        protected java.lang.String failMessage\r\n            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)\r\n        {\r\n            java.lang.String msg = \"\\n\\tMethod 'isOffFront' applied to\";\r\n            msg += \"\\n\\tReceiver: \" + this.receiver$;\r\n            return msg;\r\n        }\r\n    }\r\n\r\n    /** Add tests for the getEntry method\r\n     * to the overall test suite. */\r\n    private void addTestSuiteFor$TestGetEntry\r\n        (junit.framework.TestSuite overallTestSuite$)\r\n    {\r\n        junit.framework.TestSuite methodTests$\r\n            = this.emptyTestSuiteFor(\"getEntry\");\r\n        try {\r\n            org.jmlspecs.jmlunit.strategies.IndefiniteIterator\r\n                receivers$iter\r\n                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator\r\n                    (this.vorg_jmlspecs_samples_list_list2_OneWayListIter(\"getEntry\", 0));\r\n            this.check_has_data\r\n                (receivers$iter,\r\n                 \"new NonNullIteratorDecorator(this.vorg_jmlspecs_samples_list_list2_OneWayListIter(\\\"getEntry\\\", 0))\");\r\n            while (!receivers$iter.atEnd()) {\r\n                final org.jmlspecs.samples.list.list2.OneWayList receiver$\r\n                    = (org.jmlspecs.samples.list.list2.OneWayList) receivers$iter.get();\r\n                methodTests$.addTest\r\n                    (new TestGetEntry(receiver$));\r\n                receivers$iter.advance();\r\n            }\r\n        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {\r\n            // methodTests$ doesn't want more tests\r\n        }\r\n        overallTestSuite$.addTest(methodTests$);\r\n    }\r\n\r\n    /** Test for the getEntry method. */\r\n    protected static class TestGetEntry extends OneTest {\r\n        /** The receiver */\r\n        private org.jmlspecs.samples.list.list2.OneWayList receiver$;\r\n\r\n        /** Initialize this instance. */\r\n        public TestGetEntry(org.jmlspecs.samples.list.list2.OneWayList receiver$) {\r\n            super(\"getEntry\");\r\n            this.receiver$ = receiver$;\r\n        }\r\n\r\n        protected void doCall() throws java.lang.Throwable {\r\n            receiver$.getEntry();\r\n        }\r\n\r\n        protected java.lang.String failMessage\r\n            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)\r\n        {\r\n            java.lang.String msg = \"\\n\\tMethod 'getEntry' applied to\";\r\n            msg += \"\\n\\tReceiver: \" + this.receiver$;\r\n            return msg;\r\n        }\r\n    }\r\n\r\n    /** Add tests for the removeEntry method\r\n     * to the overall test suite. */\r\n    private void addTestSuiteFor$TestRemoveEntry\r\n        (junit.framework.TestSuite overallTestSuite$)\r\n    {\r\n        junit.framework.TestSuite methodTests$\r\n            = this.emptyTestSuiteFor(\"removeEntry\");\r\n        try {\r\n            org.jmlspecs.jmlunit.strategies.IndefiniteIterator\r\n                receivers$iter\r\n                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator\r\n                    (this.vorg_jmlspecs_samples_list_list2_OneWayListIter(\"removeEntry\", 0));\r\n            this.check_has_data\r\n                (receivers$iter,\r\n                 \"new NonNullIteratorDecorator(this.vorg_jmlspecs_samples_list_list2_OneWayListIter(\\\"removeEntry\\\", 0))\");\r\n            while (!receivers$iter.atEnd()) {\r\n                final org.jmlspecs.samples.list.list2.OneWayList receiver$\r\n                    = (org.jmlspecs.samples.list.list2.OneWayList) receivers$iter.get();\r\n                methodTests$.addTest\r\n                    (new TestRemoveEntry(receiver$));\r\n                receivers$iter.advance();\r\n            }\r\n        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {\r\n            // methodTests$ doesn't want more tests\r\n        }\r\n        overallTestSuite$.addTest(methodTests$);\r\n    }\r\n\r\n    /** Test for the removeEntry method. */\r\n    protected static class TestRemoveEntry extends OneTest {\r\n        /** The receiver */\r\n        private org.jmlspecs.samples.list.list2.OneWayList receiver$;\r\n\r\n        /** Initialize this instance. */\r\n        public TestRemoveEntry(org.jmlspecs.samples.list.list2.OneWayList receiver$) {\r\n            super(\"removeEntry\");\r\n            this.receiver$ = receiver$;\r\n        }\r\n\r\n        protected void doCall() throws java.lang.Throwable {\r\n            receiver$.removeEntry();\r\n        }\r\n\r\n        protected java.lang.String failMessage\r\n            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)\r\n        {\r\n            java.lang.String msg = \"\\n\\tMethod 'removeEntry' applied to\";\r\n            msg += \"\\n\\tReceiver: \" + this.receiver$;\r\n            return msg;\r\n        }\r\n    }\r\n\r\n    /** Add tests for the replaceEntry method\r\n     * to the overall test suite. */\r\n    private void addTestSuiteFor$TestReplaceEntry\r\n        (junit.framework.TestSuite overallTestSuite$)\r\n    {\r\n        junit.framework.TestSuite methodTests$\r\n            = this.emptyTestSuiteFor(\"replaceEntry\");\r\n        try {\r\n            org.jmlspecs.jmlunit.strategies.IndefiniteIterator\r\n                receivers$iter\r\n                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator\r\n                    (this.vorg_jmlspecs_samples_list_list2_OneWayListIter(\"replaceEntry\", 1));\r\n            this.check_has_data\r\n                (receivers$iter,\r\n                 \"new NonNullIteratorDecorator(this.vorg_jmlspecs_samples_list_list2_OneWayListIter(\\\"replaceEntry\\\", 1))\");\r\n            while (!receivers$iter.atEnd()) {\r\n                org.jmlspecs.jmlunit.strategies.IndefiniteIterator\r\n                    vjava_lang_Object$1$iter\r\n                    = this.vjava_lang_ObjectIter(\"replaceEntry\", 0);\r\n                this.check_has_data\r\n                    (vjava_lang_Object$1$iter,\r\n                     \"this.vjava_lang_ObjectIter(\\\"replaceEntry\\\", 0)\");\r\n                while (!vjava_lang_Object$1$iter.atEnd()) {\r\n                    final org.jmlspecs.samples.list.list2.OneWayList receiver$\r\n                        = (org.jmlspecs.samples.list.list2.OneWayList) receivers$iter.get();\r\n                    final java.lang.Object newEntry\r\n                        = (java.lang.Object) vjava_lang_Object$1$iter.get();\r\n                    methodTests$.addTest\r\n                        (new TestReplaceEntry(receiver$, newEntry));\r\n                    vjava_lang_Object$1$iter.advance();\r\n                }\r\n                receivers$iter.advance();\r\n            }\r\n        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {\r\n            // methodTests$ doesn't want more tests\r\n        }\r\n        overallTestSuite$.addTest(methodTests$);\r\n    }\r\n\r\n    /** Test for the replaceEntry method. */\r\n    protected static class TestReplaceEntry extends OneTest {\r\n        /** The receiver */\r\n        private org.jmlspecs.samples.list.list2.OneWayList receiver$;\r\n        /** Argument newEntry */\r\n        private java.lang.Object newEntry;\r\n\r\n        /** Initialize this instance. */\r\n        public TestReplaceEntry(org.jmlspecs.samples.list.list2.OneWayList receiver$, java.lang.Object newEntry) {\r\n            super(\"replaceEntry\"+ \":\" + (newEntry==null? \"null\" :\"{java.lang.Object}\"));\r\n            this.receiver$ = receiver$;\r\n            this.newEntry = newEntry;\r\n        }\r\n\r\n        protected void doCall() throws java.lang.Throwable {\r\n            receiver$.replaceEntry(newEntry);\r\n        }\r\n\r\n        protected java.lang.String failMessage\r\n            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)\r\n        {\r\n            java.lang.String msg = \"\\n\\tMethod 'replaceEntry' applied to\";\r\n            msg += \"\\n\\tReceiver: \" + this.receiver$;\r\n            msg += \"\\n\\tArgument newEntry: \" + this.newEntry;\r\n            return msg;\r\n        }\r\n    }\r\n\r\n    /** Add tests for the insertAfterCursor method\r\n     * to the overall test suite. */\r\n    private void addTestSuiteFor$TestInsertAfterCursor\r\n        (junit.framework.TestSuite overallTestSuite$)\r\n    {\r\n        junit.framework.TestSuite methodTests$\r\n            = this.emptyTestSuiteFor(\"insertAfterCursor\");\r\n        try {\r\n            org.jmlspecs.jmlunit.strategies.IndefiniteIterator\r\n                receivers$iter\r\n                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator\r\n                    (this.vorg_jmlspecs_samples_list_list2_OneWayListIter(\"insertAfterCursor\", 1));\r\n            this.check_has_data\r\n                (receivers$iter,\r\n                 \"new NonNullIteratorDecorator(this.vorg_jmlspecs_samples_list_list2_OneWayListIter(\\\"insertAfterCursor\\\", 1))\");\r\n            while (!receivers$iter.atEnd()) {\r\n                org.jmlspecs.jmlunit.strategies.IndefiniteIterator\r\n                    vjava_lang_Object$1$iter\r\n                    = this.vjava_lang_ObjectIter(\"insertAfterCursor\", 0);\r\n                this.check_has_data\r\n                    (vjava_lang_Object$1$iter,\r\n                     \"this.vjava_lang_ObjectIter(\\\"insertAfterCursor\\\", 0)\");\r\n                while (!vjava_lang_Object$1$iter.atEnd()) {\r\n                    final org.jmlspecs.samples.list.list2.OneWayList receiver$\r\n                        = (org.jmlspecs.samples.list.list2.OneWayList) receivers$iter.get();\r\n                    final java.lang.Object newEntry\r\n                        = (java.lang.Object) vjava_lang_Object$1$iter.get();\r\n                    methodTests$.addTest\r\n                        (new TestInsertAfterCursor(receiver$, newEntry));\r\n                    vjava_lang_Object$1$iter.advance();\r\n                }\r\n                receivers$iter.advance();\r\n            }\r\n        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {\r\n            // methodTests$ doesn't want more tests\r\n        }\r\n        overallTestSuite$.addTest(methodTests$);\r\n    }\r\n\r\n    /** Test for the insertAfterCursor method. */\r\n    protected static class TestInsertAfterCursor extends OneTest {\r\n        /** The receiver */\r\n        private org.jmlspecs.samples.list.list2.OneWayList receiver$;\r\n        /** Argument newEntry */\r\n        private java.lang.Object newEntry;\r\n\r\n        /** Initialize this instance. */\r\n        public TestInsertAfterCursor(org.jmlspecs.samples.list.list2.OneWayList receiver$, java.lang.Object newEntry) {\r\n            super(\"insertAfterCursor\"+ \":\" + (newEntry==null? \"null\" :\"{java.lang.Object}\"));\r\n            this.receiver$ = receiver$;\r\n            this.newEntry = newEntry;\r\n        }\r\n\r\n        protected void doCall() throws java.lang.Throwable {\r\n            receiver$.insertAfterCursor(newEntry);\r\n        }\r\n\r\n        protected java.lang.String failMessage\r\n            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)\r\n        {\r\n            java.lang.String msg = \"\\n\\tMethod 'insertAfterCursor' applied to\";\r\n            msg += \"\\n\\tReceiver: \" + this.receiver$;\r\n            msg += \"\\n\\tArgument newEntry: \" + this.newEntry;\r\n            return msg;\r\n        }\r\n    }\r\n\r\n    /** Add tests for the insertBeforeCursor method\r\n     * to the overall test suite. */\r\n    private void addTestSuiteFor$TestInsertBeforeCursor\r\n        (junit.framework.TestSuite overallTestSuite$)\r\n    {\r\n        junit.framework.TestSuite methodTests$\r\n            = this.emptyTestSuiteFor(\"insertBeforeCursor\");\r\n        try {\r\n            org.jmlspecs.jmlunit.strategies.IndefiniteIterator\r\n                receivers$iter\r\n                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator\r\n                    (this.vorg_jmlspecs_samples_list_list2_OneWayListIter(\"insertBeforeCursor\", 1));\r\n            this.check_has_data\r\n                (receivers$iter,\r\n                 \"new NonNullIteratorDecorator(this.vorg_jmlspecs_samples_list_list2_OneWayListIter(\\\"insertBeforeCursor\\\", 1))\");\r\n            while (!receivers$iter.atEnd()) {\r\n                org.jmlspecs.jmlunit.strategies.IndefiniteIterator\r\n                    vjava_lang_Object$1$iter\r\n                    = this.vjava_lang_ObjectIter(\"insertBeforeCursor\", 0);\r\n                this.check_has_data\r\n                    (vjava_lang_Object$1$iter,\r\n                     \"this.vjava_lang_ObjectIter(\\\"insertBeforeCursor\\\", 0)\");\r\n                while (!vjava_lang_Object$1$iter.atEnd()) {\r\n                    final org.jmlspecs.samples.list.list2.OneWayList receiver$\r\n                        = (org.jmlspecs.samples.list.list2.OneWayList) receivers$iter.get();\r\n                    final java.lang.Object newEntry\r\n                        = (java.lang.Object) vjava_lang_Object$1$iter.get();\r\n                    methodTests$.addTest\r\n                        (new TestInsertBeforeCursor(receiver$, newEntry));\r\n                    vjava_lang_Object$1$iter.advance();\r\n                }\r\n                receivers$iter.advance();\r\n            }\r\n        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {\r\n            // methodTests$ doesn't want more tests\r\n        }\r\n        overallTestSuite$.addTest(methodTests$);\r\n    }\r\n\r\n    /** Test for the insertBeforeCursor method. */\r\n    protected static class TestInsertBeforeCursor extends OneTest {\r\n        /** The receiver */\r\n        private org.jmlspecs.samples.list.list2.OneWayList receiver$;\r\n        /** Argument newEntry */\r\n        private java.lang.Object newEntry;\r\n\r\n        /** Initialize this instance. */\r\n        public TestInsertBeforeCursor(org.jmlspecs.samples.list.list2.OneWayList receiver$, java.lang.Object newEntry) {\r\n            super(\"insertBeforeCursor\"+ \":\" + (newEntry==null? \"null\" :\"{java.lang.Object}\"));\r\n            this.receiver$ = receiver$;\r\n            this.newEntry = newEntry;\r\n        }\r\n\r\n        protected void doCall() throws java.lang.Throwable {\r\n            receiver$.insertBeforeCursor(newEntry);\r\n        }\r\n\r\n        protected java.lang.String failMessage\r\n            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)\r\n        {\r\n            java.lang.String msg = \"\\n\\tMethod 'insertBeforeCursor' applied to\";\r\n            msg += \"\\n\\tReceiver: \" + this.receiver$;\r\n            msg += \"\\n\\tArgument newEntry: \" + this.newEntry;\r\n            return msg;\r\n        }\r\n    }\r\n\r\n    /** Add tests for the clone method\r\n     * to the overall test suite. */\r\n    private void addTestSuiteFor$TestClone\r\n        (junit.framework.TestSuite overallTestSuite$)\r\n    {\r\n        junit.framework.TestSuite methodTests$\r\n            = this.emptyTestSuiteFor(\"clone\");\r\n        try {\r\n            org.jmlspecs.jmlunit.strategies.IndefiniteIterator\r\n                receivers$iter\r\n                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator\r\n                    (this.vorg_jmlspecs_samples_list_list2_OneWayListIter(\"clone\", 0));\r\n            this.check_has_data\r\n                (receivers$iter,\r\n                 \"new NonNullIteratorDecorator(this.vorg_jmlspecs_samples_list_list2_OneWayListIter(\\\"clone\\\", 0))\");\r\n            while (!receivers$iter.atEnd()) {\r\n                final org.jmlspecs.samples.list.list2.OneWayList receiver$\r\n                    = (org.jmlspecs.samples.list.list2.OneWayList) receivers$iter.get();\r\n                methodTests$.addTest\r\n                    (new TestClone(receiver$));\r\n                receivers$iter.advance();\r\n            }\r\n        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {\r\n            // methodTests$ doesn't want more tests\r\n        }\r\n        overallTestSuite$.addTest(methodTests$);\r\n    }\r\n\r\n    /** Test for the clone method. */\r\n    protected static class TestClone extends OneTest {\r\n        /** The receiver */\r\n        private org.jmlspecs.samples.list.list2.OneWayList receiver$;\r\n\r\n        /** Initialize this instance. */\r\n        public TestClone(org.jmlspecs.samples.list.list2.OneWayList receiver$) {\r\n            super(\"clone\");\r\n            this.receiver$ = receiver$;\r\n        }\r\n\r\n        protected void doCall() throws java.lang.Throwable {\r\n            receiver$.clone();\r\n        }\r\n\r\n        protected java.lang.String failMessage\r\n            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)\r\n        {\r\n            java.lang.String msg = \"\\n\\tMethod 'clone' applied to\";\r\n            msg += \"\\n\\tReceiver: \" + this.receiver$;\r\n            return msg;\r\n        }\r\n    }\r\n\r\n    /** Add tests for the toString method\r\n     * to the overall test suite. */\r\n    private void addTestSuiteFor$TestToString\r\n        (junit.framework.TestSuite overallTestSuite$)\r\n    {\r\n        junit.framework.TestSuite methodTests$\r\n            = this.emptyTestSuiteFor(\"toString\");\r\n        try {\r\n            org.jmlspecs.jmlunit.strategies.IndefiniteIterator\r\n                receivers$iter\r\n                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator\r\n                    (this.vorg_jmlspecs_samples_list_list2_OneWayListIter(\"toString\", 0));\r\n            this.check_has_data\r\n                (receivers$iter,\r\n                 \"new NonNullIteratorDecorator(this.vorg_jmlspecs_samples_list_list2_OneWayListIter(\\\"toString\\\", 0))\");\r\n            while (!receivers$iter.atEnd()) {\r\n                final org.jmlspecs.samples.list.list2.OneWayList receiver$\r\n                    = (org.jmlspecs.samples.list.list2.OneWayList) receivers$iter.get();\r\n                methodTests$.addTest\r\n                    (new TestToString(receiver$));\r\n                receivers$iter.advance();\r\n            }\r\n        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {\r\n            // methodTests$ doesn't want more tests\r\n        }\r\n        overallTestSuite$.addTest(methodTests$);\r\n    }\r\n\r\n    /** Test for the toString method. */\r\n    protected static class TestToString extends OneTest {\r\n        /** The receiver */\r\n        private org.jmlspecs.samples.list.list2.OneWayList receiver$;\r\n\r\n        /** Initialize this instance. */\r\n        public TestToString(org.jmlspecs.samples.list.list2.OneWayList receiver$) {\r\n            super(\"toString\");\r\n            this.receiver$ = receiver$;\r\n        }\r\n\r\n        protected void doCall() throws java.lang.Throwable {\r\n            receiver$.toString();\r\n        }\r\n\r\n        protected java.lang.String failMessage\r\n            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)\r\n        {\r\n            java.lang.String msg = \"\\n\\tMethod 'toString' applied to\";\r\n            msg += \"\\n\\tReceiver: \" + this.receiver$;\r\n            return msg;\r\n        }\r\n    }\r\n\r\n    /** Check that the iterator is non-null and not empty. */\r\n    private void\r\n    check_has_data(org.jmlspecs.jmlunit.strategies.IndefiniteIterator iter,\r\n                   String call)\r\n    {\r\n        if (iter == null) {\r\n            junit.framework.Assert.fail(call + \" returned null\");\r\n        }\r\n        if (iter.atEnd()) {\r\n            junit.framework.Assert.fail(call + \" returned an empty iterator\");\r\n        }\r\n    }\r\n\r\n    /** Converts a char to a printable String for display */\r\n    public static String charToString(char c) {\r\n        if (c == '\\n') {\r\n            return \"NL\";\r\n        } else if (c == '\\r') {\r\n            return \"CR\";\r\n        } else if (c == '\\t') {\r\n            return \"TAB\";\r\n        } else if (Character.isISOControl(c)) {\r\n            int i = (int)c;\r\n            return \"\\\\u\"\r\n                    + Character.forDigit((i/2048)%16,16)\r\n                    + Character.forDigit((i/256)%16,16)\r\n                    + Character.forDigit((i/16)%16,16)\r\n                    + Character.forDigit((i)%16,16);\r\n        }\r\n        return Character.toString(c);\r\n    }\r\n}\r\n",
        "name": "OneWayList_JML_Test.java",
        "path": "examples/jml/www.eecs.ucf.edu/~leavens/JML-release/org/jmlspecs/samples/list/list2/OneWayList_JML_Test.java",
        "url": "/github.com/hipsleek/hipsleek/-/blob/examples/jml/www.eecs.ucf.edu/~leavens/JML-release/org/jmlspecs/samples/list/list2/OneWayList_JML_Test.java"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 48,
          "offsetAndLengths": [
            [
              4,
              12
            ]
          ],
          "preview": "    //@ ensures \\result != null;\r"
        },
        {
          "limitHit": false,
          "lineNumber": 75,
          "offsetAndLengths": [
            [
              8,
              13
            ]
          ],
          "preview": "        //@ requires result != null;\r"
        },
        {
          "limitHit": false,
          "lineNumber": 135,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires overallTestSuite$ != null;\r"
        }
      ],
      "repository": {
        "name": "github.com/hipsleek/hipsleek",
        "url": "/github.com/hipsleek/hipsleek"
      }
    },
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "b8e044655ec3d3e80172fe3f0a9fa519bf171099"
        },
        "content": "// This file was generated by jmlunit on Sun Nov 04 15:55:01 EST 2007.\r\n\r\npackage org.jmlspecs.samples.list.list2;\r\n\r\nimport org.jmlspecs.samples.list.node.OneWayNode;\r\n\r\n/** Automatically-generated test driver for JML and JUnit based\r\n * testing of E_OneWayList. The superclass of this class should be edited\r\n * to supply test data. However it's best not to edit this class\r\n * directly; instead use the command\r\n * \u003cpre\u003e\r\n *  jmlunit E_OneWayList.java\r\n * \u003c/pre\u003e\r\n * to regenerate this class whenever E_OneWayList.java changes.\r\n */\r\npublic class E_OneWayList_JML_Test\r\n     extends E_OneWayList_JML_TestData\r\n{\r\n    /** Initialize this class. */\r\n    public E_OneWayList_JML_Test(java.lang.String name) {\r\n        super(name);\r\n    }\r\n\r\n    /** Run the tests. */\r\n    public static void main(java.lang.String[] args) {\r\n        org.jmlspecs.jmlunit.JMLTestRunner.run(suite());\r\n        // You can also use a JUnit test runner such as:\r\n        // junit.textui.TestRunner.run(suite());\r\n    }\r\n\r\n    /** Test to see if the code for class E_OneWayList\r\n     * has been compiled with runtime assertion checking (i.e., by jmlc).\r\n     * Code that is not compiled with jmlc would not make an effective test,\r\n     * since no assertion checking would be done. */\r\n    public void test$IsRACCompiled() {\r\n        junit.framework.Assert.assertTrue(\"code for class E_OneWayList\"\r\n                + \" was not compiled with jmlc\"\r\n                + \" so no assertions will be checked!\",\r\n            org.jmlspecs.jmlrac.runtime.JMLChecker.isRACCompiled(E_OneWayList.class)\r\n            );\r\n    }\r\n\r\n    /** Return the test suite for this test class.  This will have\r\n    * added to it at least test$IsRACCompiled(), and any test methods\r\n    * written explicitly by the user in the superclass.  It will also\r\n    * have added test suites for each testing each method and\r\n    * constructor.\r\n    */\r\n    //@ ensures \\result != null;\r\n    public static junit.framework.Test suite() {\r\n        E_OneWayList_JML_Test testobj\r\n            = new E_OneWayList_JML_Test(\"E_OneWayList_JML_Test\");\r\n        junit.framework.TestSuite testsuite = testobj.overallTestSuite();\r\n        // Add instances of Test found by the reflection mechanism.\r\n        testsuite.addTestSuite(E_OneWayList_JML_Test.class);\r\n        testobj.addTestSuiteForEachMethod(testsuite);\r\n        return testsuite;\r\n    }\r\n\r\n    /** A JUnit test object that can run a single test method.  This\r\n     * is defined as a nested class solely for convenience; it can't\r\n     * be defined once and for all because it must subclass its\r\n     * enclosing class.\r\n     */\r\n    protected static abstract class OneTest extends E_OneWayList_JML_Test {\r\n\r\n        /** Initialize this test object. */\r\n        public OneTest(String name) {\r\n            super(name);\r\n        }\r\n\r\n        /** The result object that holds information about testing. */\r\n        protected junit.framework.TestResult result;\r\n\r\n        //@ also\r\n        //@ requires result != null;\r\n        public void run(junit.framework.TestResult result) {\r\n            this.result = result;\r\n            super.run(result);\r\n        }\r\n\r\n        /* Run a single test and decide whether the test was\r\n         * successful, meaningless, or a failure.  This is the\r\n         * Template Method pattern abstraction of the inner loop in a\r\n         * JML/JUnit test. */\r\n        public void runTest() throws java.lang.Throwable {\r\n            try {\r\n                // The call being tested!\r\n                doCall();\r\n            }\r\n            catch (org.jmlspecs.jmlrac.runtime.JMLEntryPreconditionError e) {\r\n                // meaningless test input\r\n                addMeaningless();\r\n            } catch (org.jmlspecs.jmlrac.runtime.JMLAssertionError e) {\r\n                // test failure\r\n                int l = org.jmlspecs.jmlrac.runtime.JMLChecker.getLevel();\r\n                org.jmlspecs.jmlrac.runtime.JMLChecker.setLevel\r\n                    (org.jmlspecs.jmlrac.runtime.JMLOption.NONE);\r\n                try {\r\n                    java.lang.String failmsg = this.failMessage(e);\r\n                    junit.framework.AssertionFailedError err\r\n                        = new junit.framework.AssertionFailedError(failmsg);\r\n                    err.setStackTrace(new java.lang.StackTraceElement[]{});\r\n                    err.initCause(e);\r\n                    result.addFailure(this, err);\r\n                } finally {\r\n                    org.jmlspecs.jmlrac.runtime.JMLChecker.setLevel(l);\r\n                }\r\n            } catch (java.lang.Throwable e) {\r\n                // test success\r\n            }\r\n        }\r\n\r\n        /** Call the method to be tested with the appropriate arguments. */\r\n        protected abstract void doCall() throws java.lang.Throwable;\r\n\r\n        /** Format the error message for a test failure, based on the\r\n         * method's arguments. */\r\n        protected abstract java.lang.String failMessage\r\n            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e);\r\n\r\n        /** Inform listeners that a meaningless test was run. */\r\n        private void addMeaningless() {\r\n            if (result instanceof org.jmlspecs.jmlunit.JMLTestResult) {\r\n                ((org.jmlspecs.jmlunit.JMLTestResult)result)\r\n                    .addMeaningless(this);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** Create the tests that are to be run for testing the class\r\n     * E_OneWayList.  The framework will then run them.\r\n     * @param overallTestSuite$ The suite accumulating all of the tests\r\n     * for this driver class.\r\n     */\r\n    //@ requires overallTestSuite$ != null;\r\n    public void addTestSuiteForEachMethod\r\n        (junit.framework.TestSuite overallTestSuite$)\r\n    {\r\n        try {\r\n            this.addTestSuiteFor$TestE_OneWayList(overallTestSuite$);\r\n        } catch (java.lang.Throwable ex) {\r\n            overallTestSuite$.addTest\r\n                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));\r\n        }\r\n        try {\r\n            this.addTestSuiteFor$TestLength(overallTestSuite$);\r\n        } catch (java.lang.Throwable ex) {\r\n            overallTestSuite$.addTest\r\n                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));\r\n        }\r\n        try {\r\n            this.addTestSuiteFor$TestIsEmpty(overallTestSuite$);\r\n        } catch (java.lang.Throwable ex) {\r\n            overallTestSuite$.addTest\r\n                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));\r\n        }\r\n        try {\r\n            this.addTestSuiteFor$TestEquals(overallTestSuite$);\r\n        } catch (java.lang.Throwable ex) {\r\n            overallTestSuite$.addTest\r\n                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));\r\n        }\r\n        try {\r\n            this.addTestSuiteFor$TestHashCode(overallTestSuite$);\r\n        } catch (java.lang.Throwable ex) {\r\n            overallTestSuite$.addTest\r\n                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));\r\n        }\r\n        try {\r\n            this.addTestSuiteFor$TestRemoveEntry(overallTestSuite$);\r\n        } catch (java.lang.Throwable ex) {\r\n            overallTestSuite$.addTest\r\n                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));\r\n        }\r\n        try {\r\n            this.addTestSuiteFor$TestInsertAfterCursor(overallTestSuite$);\r\n        } catch (java.lang.Throwable ex) {\r\n            overallTestSuite$.addTest\r\n                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));\r\n        }\r\n        try {\r\n            this.addTestSuiteFor$TestInsertBeforeCursor(overallTestSuite$);\r\n        } catch (java.lang.Throwable ex) {\r\n            overallTestSuite$.addTest\r\n                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));\r\n        }\r\n        try {\r\n            this.addTestSuiteFor$TestAppend(overallTestSuite$);\r\n        } catch (java.lang.Throwable ex) {\r\n            overallTestSuite$.addTest\r\n                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));\r\n        }\r\n        try {\r\n            this.addTestSuiteFor$TestRemoveAllEntries(overallTestSuite$);\r\n        } catch (java.lang.Throwable ex) {\r\n            overallTestSuite$.addTest\r\n                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));\r\n        }\r\n        try {\r\n            this.addTestSuiteFor$TestClone(overallTestSuite$);\r\n        } catch (java.lang.Throwable ex) {\r\n            overallTestSuite$.addTest\r\n                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));\r\n        }\r\n        try {\r\n            this.addTestSuiteFor$TestFirstEntry(overallTestSuite$);\r\n        } catch (java.lang.Throwable ex) {\r\n            overallTestSuite$.addTest\r\n                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));\r\n        }\r\n        try {\r\n            this.addTestSuiteFor$TestIncrementCursor(overallTestSuite$);\r\n        } catch (java.lang.Throwable ex) {\r\n            overallTestSuite$.addTest\r\n                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));\r\n        }\r\n        try {\r\n            this.addTestSuiteFor$TestIsOffEnd(overallTestSuite$);\r\n        } catch (java.lang.Throwable ex) {\r\n            overallTestSuite$.addTest\r\n                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));\r\n        }\r\n        try {\r\n            this.addTestSuiteFor$TestIsOffFront(overallTestSuite$);\r\n        } catch (java.lang.Throwable ex) {\r\n            overallTestSuite$.addTest\r\n                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));\r\n        }\r\n        try {\r\n            this.addTestSuiteFor$TestGetEntry(overallTestSuite$);\r\n        } catch (java.lang.Throwable ex) {\r\n            overallTestSuite$.addTest\r\n                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));\r\n        }\r\n        try {\r\n            this.addTestSuiteFor$TestReplaceEntry(overallTestSuite$);\r\n        } catch (java.lang.Throwable ex) {\r\n            overallTestSuite$.addTest\r\n                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));\r\n        }\r\n        try {\r\n            this.addTestSuiteFor$TestToString(overallTestSuite$);\r\n        } catch (java.lang.Throwable ex) {\r\n            overallTestSuite$.addTest\r\n                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));\r\n        }\r\n    }\r\n\r\n    /** Add tests for the E_OneWayList contructor\r\n     * to the overall test suite. */\r\n    private void addTestSuiteFor$TestE_OneWayList\r\n        (junit.framework.TestSuite overallTestSuite$)\r\n    {\r\n        junit.framework.TestSuite methodTests$\r\n            = this.emptyTestSuiteFor(\"E_OneWayList\");\r\n        try {\r\n            methodTests$.addTest\r\n                (new TestE_OneWayList());\r\n        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {\r\n            // methodTests$ doesn't want more tests\r\n        }\r\n        overallTestSuite$.addTest(methodTests$);\r\n    }\r\n\r\n    /** Test for the E_OneWayList contructor. */\r\n    protected static class TestE_OneWayList extends OneTest {\r\n\r\n        /** Initialize this instance. */\r\n        public TestE_OneWayList() {\r\n            super(\"E_OneWayList\");\r\n        }\r\n\r\n        protected void doCall() throws java.lang.Throwable {\r\n            new E_OneWayList();\r\n        }\r\n\r\n        protected java.lang.String failMessage\r\n            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)\r\n        {\r\n            java.lang.String msg = \"\\n\\tContructor 'E_OneWayList'\";\r\n            return msg;\r\n        }\r\n    }\r\n\r\n    /** Add tests for the length method\r\n     * to the overall test suite. */\r\n    private void addTestSuiteFor$TestLength\r\n        (junit.framework.TestSuite overallTestSuite$)\r\n    {\r\n        junit.framework.TestSuite methodTests$\r\n            = this.emptyTestSuiteFor(\"length\");\r\n        try {\r\n            org.jmlspecs.jmlunit.strategies.IndefiniteIterator\r\n                receivers$iter\r\n                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator\r\n                    (this.vorg_jmlspecs_samples_list_list2_E_OneWayListIter(\"length\", 0));\r\n            this.check_has_data\r\n                (receivers$iter,\r\n                 \"new NonNullIteratorDecorator(this.vorg_jmlspecs_samples_list_list2_E_OneWayListIter(\\\"length\\\", 0))\");\r\n            while (!receivers$iter.atEnd()) {\r\n                final org.jmlspecs.samples.list.list2.E_OneWayList receiver$\r\n                    = (org.jmlspecs.samples.list.list2.E_OneWayList) receivers$iter.get();\r\n                methodTests$.addTest\r\n                    (new TestLength(receiver$));\r\n                receivers$iter.advance();\r\n            }\r\n        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {\r\n            // methodTests$ doesn't want more tests\r\n        }\r\n        overallTestSuite$.addTest(methodTests$);\r\n    }\r\n\r\n    /** Test for the length method. */\r\n    protected static class TestLength extends OneTest {\r\n        /** The receiver */\r\n        private org.jmlspecs.samples.list.list2.E_OneWayList receiver$;\r\n\r\n        /** Initialize this instance. */\r\n        public TestLength(org.jmlspecs.samples.list.list2.E_OneWayList receiver$) {\r\n            super(\"length\");\r\n            this.receiver$ = receiver$;\r\n        }\r\n\r\n        protected void doCall() throws java.lang.Throwable {\r\n            receiver$.length();\r\n        }\r\n\r\n        protected java.lang.String failMessage\r\n            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)\r\n        {\r\n            java.lang.String msg = \"\\n\\tMethod 'length' applied to\";\r\n            msg += \"\\n\\tReceiver: \" + this.receiver$;\r\n            return msg;\r\n        }\r\n    }\r\n\r\n    /** Add tests for the isEmpty method\r\n     * to the overall test suite. */\r\n    private void addTestSuiteFor$TestIsEmpty\r\n        (junit.framework.TestSuite overallTestSuite$)\r\n    {\r\n        junit.framework.TestSuite methodTests$\r\n            = this.emptyTestSuiteFor(\"isEmpty\");\r\n        try {\r\n            org.jmlspecs.jmlunit.strategies.IndefiniteIterator\r\n                receivers$iter\r\n                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator\r\n                    (this.vorg_jmlspecs_samples_list_list2_E_OneWayListIter(\"isEmpty\", 0));\r\n            this.check_has_data\r\n                (receivers$iter,\r\n                 \"new NonNullIteratorDecorator(this.vorg_jmlspecs_samples_list_list2_E_OneWayListIter(\\\"isEmpty\\\", 0))\");\r\n            while (!receivers$iter.atEnd()) {\r\n                final org.jmlspecs.samples.list.list2.E_OneWayList receiver$\r\n                    = (org.jmlspecs.samples.list.list2.E_OneWayList) receivers$iter.get();\r\n                methodTests$.addTest\r\n                    (new TestIsEmpty(receiver$));\r\n                receivers$iter.advance();\r\n            }\r\n        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {\r\n            // methodTests$ doesn't want more tests\r\n        }\r\n        overallTestSuite$.addTest(methodTests$);\r\n    }\r\n\r\n    /** Test for the isEmpty method. */\r\n    protected static class TestIsEmpty extends OneTest {\r\n        /** The receiver */\r\n        private org.jmlspecs.samples.list.list2.E_OneWayList receiver$;\r\n\r\n        /** Initialize this instance. */\r\n        public TestIsEmpty(org.jmlspecs.samples.list.list2.E_OneWayList receiver$) {\r\n            super(\"isEmpty\");\r\n            this.receiver$ = receiver$;\r\n        }\r\n\r\n        protected void doCall() throws java.lang.Throwable {\r\n            receiver$.isEmpty();\r\n        }\r\n\r\n        protected java.lang.String failMessage\r\n            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)\r\n        {\r\n            java.lang.String msg = \"\\n\\tMethod 'isEmpty' applied to\";\r\n            msg += \"\\n\\tReceiver: \" + this.receiver$;\r\n            return msg;\r\n        }\r\n    }\r\n\r\n    /** Add tests for the equals method\r\n     * to the overall test suite. */\r\n    private void addTestSuiteFor$TestEquals\r\n        (junit.framework.TestSuite overallTestSuite$)\r\n    {\r\n        junit.framework.TestSuite methodTests$\r\n            = this.emptyTestSuiteFor(\"equals\");\r\n        try {\r\n            org.jmlspecs.jmlunit.strategies.IndefiniteIterator\r\n                receivers$iter\r\n                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator\r\n                    (this.vorg_jmlspecs_samples_list_list2_E_OneWayListIter(\"equals\", 1));\r\n            this.check_has_data\r\n                (receivers$iter,\r\n                 \"new NonNullIteratorDecorator(this.vorg_jmlspecs_samples_list_list2_E_OneWayListIter(\\\"equals\\\", 1))\");\r\n            while (!receivers$iter.atEnd()) {\r\n                org.jmlspecs.jmlunit.strategies.IndefiniteIterator\r\n                    vjava_lang_Object$1$iter\r\n                    = this.vjava_lang_ObjectIter(\"equals\", 0);\r\n                this.check_has_data\r\n                    (vjava_lang_Object$1$iter,\r\n                     \"this.vjava_lang_ObjectIter(\\\"equals\\\", 0)\");\r\n                while (!vjava_lang_Object$1$iter.atEnd()) {\r\n                    final org.jmlspecs.samples.list.list2.E_OneWayList receiver$\r\n                        = (org.jmlspecs.samples.list.list2.E_OneWayList) receivers$iter.get();\r\n                    final java.lang.Object obj\r\n                        = (java.lang.Object) vjava_lang_Object$1$iter.get();\r\n                    methodTests$.addTest\r\n                        (new TestEquals(receiver$, obj));\r\n                    vjava_lang_Object$1$iter.advance();\r\n                }\r\n                receivers$iter.advance();\r\n            }\r\n        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {\r\n            // methodTests$ doesn't want more tests\r\n        }\r\n        overallTestSuite$.addTest(methodTests$);\r\n    }\r\n\r\n    /** Test for the equals method. */\r\n    protected static class TestEquals extends OneTest {\r\n        /** The receiver */\r\n        private org.jmlspecs.samples.list.list2.E_OneWayList receiver$;\r\n        /** Argument obj */\r\n        private java.lang.Object obj;\r\n\r\n        /** Initialize this instance. */\r\n        public TestEquals(org.jmlspecs.samples.list.list2.E_OneWayList receiver$, java.lang.Object obj) {\r\n            super(\"equals\"+ \":\" + (obj==null? \"null\" :\"{java.lang.Object}\"));\r\n            this.receiver$ = receiver$;\r\n            this.obj = obj;\r\n        }\r\n\r\n        protected void doCall() throws java.lang.Throwable {\r\n            receiver$.equals(obj);\r\n        }\r\n\r\n        protected java.lang.String failMessage\r\n            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)\r\n        {\r\n            java.lang.String msg = \"\\n\\tMethod 'equals' applied to\";\r\n            msg += \"\\n\\tReceiver: \" + this.receiver$;\r\n            msg += \"\\n\\tArgument obj: \" + this.obj;\r\n            return msg;\r\n        }\r\n    }\r\n\r\n    /** Add tests for the hashCode method\r\n     * to the overall test suite. */\r\n    private void addTestSuiteFor$TestHashCode\r\n        (junit.framework.TestSuite overallTestSuite$)\r\n    {\r\n        junit.framework.TestSuite methodTests$\r\n            = this.emptyTestSuiteFor(\"hashCode\");\r\n        try {\r\n            org.jmlspecs.jmlunit.strategies.IndefiniteIterator\r\n                receivers$iter\r\n                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator\r\n                    (this.vorg_jmlspecs_samples_list_list2_E_OneWayListIter(\"hashCode\", 0));\r\n            this.check_has_data\r\n                (receivers$iter,\r\n                 \"new NonNullIteratorDecorator(this.vorg_jmlspecs_samples_list_list2_E_OneWayListIter(\\\"hashCode\\\", 0))\");\r\n            while (!receivers$iter.atEnd()) {\r\n                final org.jmlspecs.samples.list.list2.E_OneWayList receiver$\r\n                    = (org.jmlspecs.samples.list.list2.E_OneWayList) receivers$iter.get();\r\n                methodTests$.addTest\r\n                    (new TestHashCode(receiver$));\r\n                receivers$iter.advance();\r\n            }\r\n        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {\r\n            // methodTests$ doesn't want more tests\r\n        }\r\n        overallTestSuite$.addTest(methodTests$);\r\n    }\r\n\r\n    /** Test for the hashCode method. */\r\n    protected static class TestHashCode extends OneTest {\r\n        /** The receiver */\r\n        private org.jmlspecs.samples.list.list2.E_OneWayList receiver$;\r\n\r\n        /** Initialize this instance. */\r\n        public TestHashCode(org.jmlspecs.samples.list.list2.E_OneWayList receiver$) {\r\n            super(\"hashCode\");\r\n            this.receiver$ = receiver$;\r\n        }\r\n\r\n        protected void doCall() throws java.lang.Throwable {\r\n            receiver$.hashCode();\r\n        }\r\n\r\n        protected java.lang.String failMessage\r\n            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)\r\n        {\r\n            java.lang.String msg = \"\\n\\tMethod 'hashCode' applied to\";\r\n            msg += \"\\n\\tReceiver: \" + this.receiver$;\r\n            return msg;\r\n        }\r\n    }\r\n\r\n    /** Add tests for the removeEntry method\r\n     * to the overall test suite. */\r\n    private void addTestSuiteFor$TestRemoveEntry\r\n        (junit.framework.TestSuite overallTestSuite$)\r\n    {\r\n        junit.framework.TestSuite methodTests$\r\n            = this.emptyTestSuiteFor(\"removeEntry\");\r\n        try {\r\n            org.jmlspecs.jmlunit.strategies.IndefiniteIterator\r\n                receivers$iter\r\n                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator\r\n                    (this.vorg_jmlspecs_samples_list_list2_E_OneWayListIter(\"removeEntry\", 0));\r\n            this.check_has_data\r\n                (receivers$iter,\r\n                 \"new NonNullIteratorDecorator(this.vorg_jmlspecs_samples_list_list2_E_OneWayListIter(\\\"removeEntry\\\", 0))\");\r\n            while (!receivers$iter.atEnd()) {\r\n                final org.jmlspecs.samples.list.list2.E_OneWayList receiver$\r\n                    = (org.jmlspecs.samples.list.list2.E_OneWayList) receivers$iter.get();\r\n                methodTests$.addTest\r\n                    (new TestRemoveEntry(receiver$));\r\n                receivers$iter.advance();\r\n            }\r\n        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {\r\n            // methodTests$ doesn't want more tests\r\n        }\r\n        overallTestSuite$.addTest(methodTests$);\r\n    }\r\n\r\n    /** Test for the removeEntry method. */\r\n    protected static class TestRemoveEntry extends OneTest {\r\n        /** The receiver */\r\n        private org.jmlspecs.samples.list.list2.E_OneWayList receiver$;\r\n\r\n        /** Initialize this instance. */\r\n        public TestRemoveEntry(org.jmlspecs.samples.list.list2.E_OneWayList receiver$) {\r\n            super(\"removeEntry\");\r\n            this.receiver$ = receiver$;\r\n        }\r\n\r\n        protected void doCall() throws java.lang.Throwable {\r\n            receiver$.removeEntry();\r\n        }\r\n\r\n        protected java.lang.String failMessage\r\n            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)\r\n        {\r\n            java.lang.String msg = \"\\n\\tMethod 'removeEntry' applied to\";\r\n            msg += \"\\n\\tReceiver: \" + this.receiver$;\r\n            return msg;\r\n        }\r\n    }\r\n\r\n    /** Add tests for the insertAfterCursor method\r\n     * to the overall test suite. */\r\n    private void addTestSuiteFor$TestInsertAfterCursor\r\n        (junit.framework.TestSuite overallTestSuite$)\r\n    {\r\n        junit.framework.TestSuite methodTests$\r\n            = this.emptyTestSuiteFor(\"insertAfterCursor\");\r\n        try {\r\n            org.jmlspecs.jmlunit.strategies.IndefiniteIterator\r\n                receivers$iter\r\n                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator\r\n                    (this.vorg_jmlspecs_samples_list_list2_E_OneWayListIter(\"insertAfterCursor\", 1));\r\n            this.check_has_data\r\n                (receivers$iter,\r\n                 \"new NonNullIteratorDecorator(this.vorg_jmlspecs_samples_list_list2_E_OneWayListIter(\\\"insertAfterCursor\\\", 1))\");\r\n            while (!receivers$iter.atEnd()) {\r\n                org.jmlspecs.jmlunit.strategies.IndefiniteIterator\r\n                    vjava_lang_Object$1$iter\r\n                    = this.vjava_lang_ObjectIter(\"insertAfterCursor\", 0);\r\n                this.check_has_data\r\n                    (vjava_lang_Object$1$iter,\r\n                     \"this.vjava_lang_ObjectIter(\\\"insertAfterCursor\\\", 0)\");\r\n                while (!vjava_lang_Object$1$iter.atEnd()) {\r\n                    final org.jmlspecs.samples.list.list2.E_OneWayList receiver$\r\n                        = (org.jmlspecs.samples.list.list2.E_OneWayList) receivers$iter.get();\r\n                    final java.lang.Object newEntry\r\n                        = (java.lang.Object) vjava_lang_Object$1$iter.get();\r\n                    methodTests$.addTest\r\n                        (new TestInsertAfterCursor(receiver$, newEntry));\r\n                    vjava_lang_Object$1$iter.advance();\r\n                }\r\n                receivers$iter.advance();\r\n            }\r\n        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {\r\n            // methodTests$ doesn't want more tests\r\n        }\r\n        overallTestSuite$.addTest(methodTests$);\r\n    }\r\n\r\n    /** Test for the insertAfterCursor method. */\r\n    protected static class TestInsertAfterCursor extends OneTest {\r\n        /** The receiver */\r\n        private org.jmlspecs.samples.list.list2.E_OneWayList receiver$;\r\n        /** Argument newEntry */\r\n        private java.lang.Object newEntry;\r\n\r\n        /** Initialize this instance. */\r\n        public TestInsertAfterCursor(org.jmlspecs.samples.list.list2.E_OneWayList receiver$, java.lang.Object newEntry) {\r\n            super(\"insertAfterCursor\"+ \":\" + (newEntry==null? \"null\" :\"{java.lang.Object}\"));\r\n            this.receiver$ = receiver$;\r\n            this.newEntry = newEntry;\r\n        }\r\n\r\n        protected void doCall() throws java.lang.Throwable {\r\n            receiver$.insertAfterCursor(newEntry);\r\n        }\r\n\r\n        protected java.lang.String failMessage\r\n            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)\r\n        {\r\n            java.lang.String msg = \"\\n\\tMethod 'insertAfterCursor' applied to\";\r\n            msg += \"\\n\\tReceiver: \" + this.receiver$;\r\n            msg += \"\\n\\tArgument newEntry: \" + this.newEntry;\r\n            return msg;\r\n        }\r\n    }\r\n\r\n    /** Add tests for the insertBeforeCursor method\r\n     * to the overall test suite. */\r\n    private void addTestSuiteFor$TestInsertBeforeCursor\r\n        (junit.framework.TestSuite overallTestSuite$)\r\n    {\r\n        junit.framework.TestSuite methodTests$\r\n            = this.emptyTestSuiteFor(\"insertBeforeCursor\");\r\n        try {\r\n            org.jmlspecs.jmlunit.strategies.IndefiniteIterator\r\n                receivers$iter\r\n                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator\r\n                    (this.vorg_jmlspecs_samples_list_list2_E_OneWayListIter(\"insertBeforeCursor\", 1));\r\n            this.check_has_data\r\n                (receivers$iter,\r\n                 \"new NonNullIteratorDecorator(this.vorg_jmlspecs_samples_list_list2_E_OneWayListIter(\\\"insertBeforeCursor\\\", 1))\");\r\n            while (!receivers$iter.atEnd()) {\r\n                org.jmlspecs.jmlunit.strategies.IndefiniteIterator\r\n                    vjava_lang_Object$1$iter\r\n                    = this.vjava_lang_ObjectIter(\"insertBeforeCursor\", 0);\r\n                this.check_has_data\r\n                    (vjava_lang_Object$1$iter,\r\n                     \"this.vjava_lang_ObjectIter(\\\"insertBeforeCursor\\\", 0)\");\r\n                while (!vjava_lang_Object$1$iter.atEnd()) {\r\n                    final org.jmlspecs.samples.list.list2.E_OneWayList receiver$\r\n                        = (org.jmlspecs.samples.list.list2.E_OneWayList) receivers$iter.get();\r\n                    final java.lang.Object newEntry\r\n                        = (java.lang.Object) vjava_lang_Object$1$iter.get();\r\n                    methodTests$.addTest\r\n                        (new TestInsertBeforeCursor(receiver$, newEntry));\r\n                    vjava_lang_Object$1$iter.advance();\r\n                }\r\n                receivers$iter.advance();\r\n            }\r\n        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {\r\n            // methodTests$ doesn't want more tests\r\n        }\r\n        overallTestSuite$.addTest(methodTests$);\r\n    }\r\n\r\n    /** Test for the insertBeforeCursor method. */\r\n    protected static class TestInsertBeforeCursor extends OneTest {\r\n        /** The receiver */\r\n        private org.jmlspecs.samples.list.list2.E_OneWayList receiver$;\r\n        /** Argument newEntry */\r\n        private java.lang.Object newEntry;\r\n\r\n        /** Initialize this instance. */\r\n        public TestInsertBeforeCursor(org.jmlspecs.samples.list.list2.E_OneWayList receiver$, java.lang.Object newEntry) {\r\n            super(\"insertBeforeCursor\"+ \":\" + (newEntry==null? \"null\" :\"{java.lang.Object}\"));\r\n            this.receiver$ = receiver$;\r\n            this.newEntry = newEntry;\r\n        }\r\n\r\n        protected void doCall() throws java.lang.Throwable {\r\n            receiver$.insertBeforeCursor(newEntry);\r\n        }\r\n\r\n        protected java.lang.String failMessage\r\n            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)\r\n        {\r\n            java.lang.String msg = \"\\n\\tMethod 'insertBeforeCursor' applied to\";\r\n            msg += \"\\n\\tReceiver: \" + this.receiver$;\r\n            msg += \"\\n\\tArgument newEntry: \" + this.newEntry;\r\n            return msg;\r\n        }\r\n    }\r\n\r\n    /** Add tests for the append method\r\n     * to the overall test suite. */\r\n    private void addTestSuiteFor$TestAppend\r\n        (junit.framework.TestSuite overallTestSuite$)\r\n    {\r\n        junit.framework.TestSuite methodTests$\r\n            = this.emptyTestSuiteFor(\"append\");\r\n        try {\r\n            org.jmlspecs.jmlunit.strategies.IndefiniteIterator\r\n                receivers$iter\r\n                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator\r\n                    (this.vorg_jmlspecs_samples_list_list2_E_OneWayListIter(\"append\", 1));\r\n            this.check_has_data\r\n                (receivers$iter,\r\n                 \"new NonNullIteratorDecorator(this.vorg_jmlspecs_samples_list_list2_E_OneWayListIter(\\\"append\\\", 1))\");\r\n            while (!receivers$iter.atEnd()) {\r\n                org.jmlspecs.jmlunit.strategies.IndefiniteIterator\r\n                    vjava_lang_Object$1$iter\r\n                    = this.vjava_lang_ObjectIter(\"append\", 0);\r\n                this.check_has_data\r\n                    (vjava_lang_Object$1$iter,\r\n                     \"this.vjava_lang_ObjectIter(\\\"append\\\", 0)\");\r\n                while (!vjava_lang_Object$1$iter.atEnd()) {\r\n                    final org.jmlspecs.samples.list.list2.E_OneWayList receiver$\r\n                        = (org.jmlspecs.samples.list.list2.E_OneWayList) receivers$iter.get();\r\n                    final java.lang.Object newEntry\r\n                        = (java.lang.Object) vjava_lang_Object$1$iter.get();\r\n                    methodTests$.addTest\r\n                        (new TestAppend(receiver$, newEntry));\r\n                    vjava_lang_Object$1$iter.advance();\r\n                }\r\n                receivers$iter.advance();\r\n            }\r\n        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {\r\n            // methodTests$ doesn't want more tests\r\n        }\r\n        overallTestSuite$.addTest(methodTests$);\r\n    }\r\n\r\n    /** Test for the append method. */\r\n    protected static class TestAppend extends OneTest {\r\n        /** The receiver */\r\n        private org.jmlspecs.samples.list.list2.E_OneWayList receiver$;\r\n        /** Argument newEntry */\r\n        private java.lang.Object newEntry;\r\n\r\n        /** Initialize this instance. */\r\n        public TestAppend(org.jmlspecs.samples.list.list2.E_OneWayList receiver$, java.lang.Object newEntry) {\r\n            super(\"append\"+ \":\" + (newEntry==null? \"null\" :\"{java.lang.Object}\"));\r\n            this.receiver$ = receiver$;\r\n            this.newEntry = newEntry;\r\n        }\r\n\r\n        protected void doCall() throws java.lang.Throwable {\r\n            receiver$.append(newEntry);\r\n        }\r\n\r\n        protected java.lang.String failMessage\r\n            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)\r\n        {\r\n            java.lang.String msg = \"\\n\\tMethod 'append' applied to\";\r\n            msg += \"\\n\\tReceiver: \" + this.receiver$;\r\n            msg += \"\\n\\tArgument newEntry: \" + this.newEntry;\r\n            return msg;\r\n        }\r\n    }\r\n\r\n    /** Add tests for the removeAllEntries method\r\n     * to the overall test suite. */\r\n    private void addTestSuiteFor$TestRemoveAllEntries\r\n        (junit.framework.TestSuite overallTestSuite$)\r\n    {\r\n        junit.framework.TestSuite methodTests$\r\n            = this.emptyTestSuiteFor(\"removeAllEntries\");\r\n        try {\r\n            org.jmlspecs.jmlunit.strategies.IndefiniteIterator\r\n                receivers$iter\r\n                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator\r\n                    (this.vorg_jmlspecs_samples_list_list2_E_OneWayListIter(\"removeAllEntries\", 0));\r\n            this.check_has_data\r\n                (receivers$iter,\r\n                 \"new NonNullIteratorDecorator(this.vorg_jmlspecs_samples_list_list2_E_OneWayListIter(\\\"removeAllEntries\\\", 0))\");\r\n            while (!receivers$iter.atEnd()) {\r\n                final org.jmlspecs.samples.list.list2.E_OneWayList receiver$\r\n                    = (org.jmlspecs.samples.list.list2.E_OneWayList) receivers$iter.get();\r\n                methodTests$.addTest\r\n                    (new TestRemoveAllEntries(receiver$));\r\n                receivers$iter.advance();\r\n            }\r\n        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {\r\n            // methodTests$ doesn't want more tests\r\n        }\r\n        overallTestSuite$.addTest(methodTests$);\r\n    }\r\n\r\n    /** Test for the removeAllEntries method. */\r\n    protected static class TestRemoveAllEntries extends OneTest {\r\n        /** The receiver */\r\n        private org.jmlspecs.samples.list.list2.E_OneWayList receiver$;\r\n\r\n        /** Initialize this instance. */\r\n        public TestRemoveAllEntries(org.jmlspecs.samples.list.list2.E_OneWayList receiver$) {\r\n            super(\"removeAllEntries\");\r\n            this.receiver$ = receiver$;\r\n        }\r\n\r\n        protected void doCall() throws java.lang.Throwable {\r\n            receiver$.removeAllEntries();\r\n        }\r\n\r\n        protected java.lang.String failMessage\r\n            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)\r\n        {\r\n            java.lang.String msg = \"\\n\\tMethod 'removeAllEntries' applied to\";\r\n            msg += \"\\n\\tReceiver: \" + this.receiver$;\r\n            return msg;\r\n        }\r\n    }\r\n\r\n    /** Add tests for the clone method\r\n     * to the overall test suite. */\r\n    private void addTestSuiteFor$TestClone\r\n        (junit.framework.TestSuite overallTestSuite$)\r\n    {\r\n        junit.framework.TestSuite methodTests$\r\n            = this.emptyTestSuiteFor(\"clone\");\r\n        try {\r\n            org.jmlspecs.jmlunit.strategies.IndefiniteIterator\r\n                receivers$iter\r\n                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator\r\n                    (this.vorg_jmlspecs_samples_list_list2_E_OneWayListIter(\"clone\", 0));\r\n            this.check_has_data\r\n                (receivers$iter,\r\n                 \"new NonNullIteratorDecorator(this.vorg_jmlspecs_samples_list_list2_E_OneWayListIter(\\\"clone\\\", 0))\");\r\n            while (!receivers$iter.atEnd()) {\r\n                final org.jmlspecs.samples.list.list2.E_OneWayList receiver$\r\n                    = (org.jmlspecs.samples.list.list2.E_OneWayList) receivers$iter.get();\r\n                methodTests$.addTest\r\n                    (new TestClone(receiver$));\r\n                receivers$iter.advance();\r\n            }\r\n        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {\r\n            // methodTests$ doesn't want more tests\r\n        }\r\n        overallTestSuite$.addTest(methodTests$);\r\n    }\r\n\r\n    /** Test for the clone method. */\r\n    protected static class TestClone extends OneTest {\r\n        /** The receiver */\r\n        private org.jmlspecs.samples.list.list2.E_OneWayList receiver$;\r\n\r\n        /** Initialize this instance. */\r\n        public TestClone(org.jmlspecs.samples.list.list2.E_OneWayList receiver$) {\r\n            super(\"clone\");\r\n            this.receiver$ = receiver$;\r\n        }\r\n\r\n        protected void doCall() throws java.lang.Throwable {\r\n            receiver$.clone();\r\n        }\r\n\r\n        protected java.lang.String failMessage\r\n            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)\r\n        {\r\n            java.lang.String msg = \"\\n\\tMethod 'clone' applied to\";\r\n            msg += \"\\n\\tReceiver: \" + this.receiver$;\r\n            return msg;\r\n        }\r\n    }\r\n\r\n    /** Add tests for the firstEntry method\r\n     * to the overall test suite. */\r\n    private void addTestSuiteFor$TestFirstEntry\r\n        (junit.framework.TestSuite overallTestSuite$)\r\n    {\r\n        junit.framework.TestSuite methodTests$\r\n            = this.emptyTestSuiteFor(\"firstEntry\");\r\n        try {\r\n            org.jmlspecs.jmlunit.strategies.IndefiniteIterator\r\n                receivers$iter\r\n                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator\r\n                    (this.vorg_jmlspecs_samples_list_list2_E_OneWayListIter(\"firstEntry\", 0));\r\n            this.check_has_data\r\n                (receivers$iter,\r\n                 \"new NonNullIteratorDecorator(this.vorg_jmlspecs_samples_list_list2_E_OneWayListIter(\\\"firstEntry\\\", 0))\");\r\n            while (!receivers$iter.atEnd()) {\r\n                final org.jmlspecs.samples.list.list2.E_OneWayList receiver$\r\n                    = (org.jmlspecs.samples.list.list2.E_OneWayList) receivers$iter.get();\r\n                methodTests$.addTest\r\n                    (new TestFirstEntry(receiver$));\r\n                receivers$iter.advance();\r\n            }\r\n        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {\r\n            // methodTests$ doesn't want more tests\r\n        }\r\n        overallTestSuite$.addTest(methodTests$);\r\n    }\r\n\r\n    /** Test for the firstEntry method. */\r\n    protected static class TestFirstEntry extends OneTest {\r\n        /** The receiver */\r\n        private org.jmlspecs.samples.list.list2.E_OneWayList receiver$;\r\n\r\n        /** Initialize this instance. */\r\n        public TestFirstEntry(org.jmlspecs.samples.list.list2.E_OneWayList receiver$) {\r\n            super(\"firstEntry\");\r\n            this.receiver$ = receiver$;\r\n        }\r\n\r\n        protected void doCall() throws java.lang.Throwable {\r\n            receiver$.firstEntry();\r\n        }\r\n\r\n        protected java.lang.String failMessage\r\n            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)\r\n        {\r\n            java.lang.String msg = \"\\n\\tMethod 'firstEntry' applied to\";\r\n            msg += \"\\n\\tReceiver: \" + this.receiver$;\r\n            return msg;\r\n        }\r\n    }\r\n\r\n    /** Add tests for the incrementCursor method\r\n     * to the overall test suite. */\r\n    private void addTestSuiteFor$TestIncrementCursor\r\n        (junit.framework.TestSuite overallTestSuite$)\r\n    {\r\n        junit.framework.TestSuite methodTests$\r\n            = this.emptyTestSuiteFor(\"incrementCursor\");\r\n        try {\r\n            org.jmlspecs.jmlunit.strategies.IndefiniteIterator\r\n                receivers$iter\r\n                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator\r\n                    (this.vorg_jmlspecs_samples_list_list2_E_OneWayListIter(\"incrementCursor\", 0));\r\n            this.check_has_data\r\n                (receivers$iter,\r\n                 \"new NonNullIteratorDecorator(this.vorg_jmlspecs_samples_list_list2_E_OneWayListIter(\\\"incrementCursor\\\", 0))\");\r\n            while (!receivers$iter.atEnd()) {\r\n                final org.jmlspecs.samples.list.list2.E_OneWayList receiver$\r\n                    = (org.jmlspecs.samples.list.list2.E_OneWayList) receivers$iter.get();\r\n                methodTests$.addTest\r\n                    (new TestIncrementCursor(receiver$));\r\n                receivers$iter.advance();\r\n            }\r\n        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {\r\n            // methodTests$ doesn't want more tests\r\n        }\r\n        overallTestSuite$.addTest(methodTests$);\r\n    }\r\n\r\n    /** Test for the incrementCursor method. */\r\n    protected static class TestIncrementCursor extends OneTest {\r\n        /** The receiver */\r\n        private org.jmlspecs.samples.list.list2.E_OneWayList receiver$;\r\n\r\n        /** Initialize this instance. */\r\n        public TestIncrementCursor(org.jmlspecs.samples.list.list2.E_OneWayList receiver$) {\r\n            super(\"incrementCursor\");\r\n            this.receiver$ = receiver$;\r\n        }\r\n\r\n        protected void doCall() throws java.lang.Throwable {\r\n            receiver$.incrementCursor();\r\n        }\r\n\r\n        protected java.lang.String failMessage\r\n            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)\r\n        {\r\n            java.lang.String msg = \"\\n\\tMethod 'incrementCursor' applied to\";\r\n            msg += \"\\n\\tReceiver: \" + this.receiver$;\r\n            return msg;\r\n        }\r\n    }\r\n\r\n    /** Add tests for the isOffEnd method\r\n     * to the overall test suite. */\r\n    private void addTestSuiteFor$TestIsOffEnd\r\n        (junit.framework.TestSuite overallTestSuite$)\r\n    {\r\n        junit.framework.TestSuite methodTests$\r\n            = this.emptyTestSuiteFor(\"isOffEnd\");\r\n        try {\r\n            org.jmlspecs.jmlunit.strategies.IndefiniteIterator\r\n                receivers$iter\r\n                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator\r\n                    (this.vorg_jmlspecs_samples_list_list2_E_OneWayListIter(\"isOffEnd\", 0));\r\n            this.check_has_data\r\n                (receivers$iter,\r\n                 \"new NonNullIteratorDecorator(this.vorg_jmlspecs_samples_list_list2_E_OneWayListIter(\\\"isOffEnd\\\", 0))\");\r\n            while (!receivers$iter.atEnd()) {\r\n                final org.jmlspecs.samples.list.list2.E_OneWayList receiver$\r\n                    = (org.jmlspecs.samples.list.list2.E_OneWayList) receivers$iter.get();\r\n                methodTests$.addTest\r\n                    (new TestIsOffEnd(receiver$));\r\n                receivers$iter.advance();\r\n            }\r\n        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {\r\n            // methodTests$ doesn't want more tests\r\n        }\r\n        overallTestSuite$.addTest(methodTests$);\r\n    }\r\n\r\n    /** Test for the isOffEnd method. */\r\n    protected static class TestIsOffEnd extends OneTest {\r\n        /** The receiver */\r\n        private org.jmlspecs.samples.list.list2.E_OneWayList receiver$;\r\n\r\n        /** Initialize this instance. */\r\n        public TestIsOffEnd(org.jmlspecs.samples.list.list2.E_OneWayList receiver$) {\r\n            super(\"isOffEnd\");\r\n            this.receiver$ = receiver$;\r\n        }\r\n\r\n        protected void doCall() throws java.lang.Throwable {\r\n            receiver$.isOffEnd();\r\n        }\r\n\r\n        protected java.lang.String failMessage\r\n            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)\r\n        {\r\n            java.lang.String msg = \"\\n\\tMethod 'isOffEnd' applied to\";\r\n            msg += \"\\n\\tReceiver: \" + this.receiver$;\r\n            return msg;\r\n        }\r\n    }\r\n\r\n    /** Add tests for the isOffFront method\r\n     * to the overall test suite. */\r\n    private void addTestSuiteFor$TestIsOffFront\r\n        (junit.framework.TestSuite overallTestSuite$)\r\n    {\r\n        junit.framework.TestSuite methodTests$\r\n            = this.emptyTestSuiteFor(\"isOffFront\");\r\n        try {\r\n            org.jmlspecs.jmlunit.strategies.IndefiniteIterator\r\n                receivers$iter\r\n                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator\r\n                    (this.vorg_jmlspecs_samples_list_list2_E_OneWayListIter(\"isOffFront\", 0));\r\n            this.check_has_data\r\n                (receivers$iter,\r\n                 \"new NonNullIteratorDecorator(this.vorg_jmlspecs_samples_list_list2_E_OneWayListIter(\\\"isOffFront\\\", 0))\");\r\n            while (!receivers$iter.atEnd()) {\r\n                final org.jmlspecs.samples.list.list2.E_OneWayList receiver$\r\n                    = (org.jmlspecs.samples.list.list2.E_OneWayList) receivers$iter.get();\r\n                methodTests$.addTest\r\n                    (new TestIsOffFront(receiver$));\r\n                receivers$iter.advance();\r\n            }\r\n        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {\r\n            // methodTests$ doesn't want more tests\r\n        }\r\n        overallTestSuite$.addTest(methodTests$);\r\n    }\r\n\r\n    /** Test for the isOffFront method. */\r\n    protected static class TestIsOffFront extends OneTest {\r\n        /** The receiver */\r\n        private org.jmlspecs.samples.list.list2.E_OneWayList receiver$;\r\n\r\n        /** Initialize this instance. */\r\n        public TestIsOffFront(org.jmlspecs.samples.list.list2.E_OneWayList receiver$) {\r\n            super(\"isOffFront\");\r\n            this.receiver$ = receiver$;\r\n        }\r\n\r\n        protected void doCall() throws java.lang.Throwable {\r\n            receiver$.isOffFront();\r\n        }\r\n\r\n        protected java.lang.String failMessage\r\n            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)\r\n        {\r\n            java.lang.String msg = \"\\n\\tMethod 'isOffFront' applied to\";\r\n            msg += \"\\n\\tReceiver: \" + this.receiver$;\r\n            return msg;\r\n        }\r\n    }\r\n\r\n    /** Add tests for the getEntry method\r\n     * to the overall test suite. */\r\n    private void addTestSuiteFor$TestGetEntry\r\n        (junit.framework.TestSuite overallTestSuite$)\r\n    {\r\n        junit.framework.TestSuite methodTests$\r\n            = this.emptyTestSuiteFor(\"getEntry\");\r\n        try {\r\n            org.jmlspecs.jmlunit.strategies.IndefiniteIterator\r\n                receivers$iter\r\n                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator\r\n                    (this.vorg_jmlspecs_samples_list_list2_E_OneWayListIter(\"getEntry\", 0));\r\n            this.check_has_data\r\n                (receivers$iter,\r\n                 \"new NonNullIteratorDecorator(this.vorg_jmlspecs_samples_list_list2_E_OneWayListIter(\\\"getEntry\\\", 0))\");\r\n            while (!receivers$iter.atEnd()) {\r\n                final org.jmlspecs.samples.list.list2.E_OneWayList receiver$\r\n                    = (org.jmlspecs.samples.list.list2.E_OneWayList) receivers$iter.get();\r\n                methodTests$.addTest\r\n                    (new TestGetEntry(receiver$));\r\n                receivers$iter.advance();\r\n            }\r\n        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {\r\n            // methodTests$ doesn't want more tests\r\n        }\r\n        overallTestSuite$.addTest(methodTests$);\r\n    }\r\n\r\n    /** Test for the getEntry method. */\r\n    protected static class TestGetEntry extends OneTest {\r\n        /** The receiver */\r\n        private org.jmlspecs.samples.list.list2.E_OneWayList receiver$;\r\n\r\n        /** Initialize this instance. */\r\n        public TestGetEntry(org.jmlspecs.samples.list.list2.E_OneWayList receiver$) {\r\n            super(\"getEntry\");\r\n            this.receiver$ = receiver$;\r\n        }\r\n\r\n        protected void doCall() throws java.lang.Throwable {\r\n            receiver$.getEntry();\r\n        }\r\n\r\n        protected java.lang.String failMessage\r\n            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)\r\n        {\r\n            java.lang.String msg = \"\\n\\tMethod 'getEntry' applied to\";\r\n            msg += \"\\n\\tReceiver: \" + this.receiver$;\r\n            return msg;\r\n        }\r\n    }\r\n\r\n    /** Add tests for the replaceEntry method\r\n     * to the overall test suite. */\r\n    private void addTestSuiteFor$TestReplaceEntry\r\n        (junit.framework.TestSuite overallTestSuite$)\r\n    {\r\n        junit.framework.TestSuite methodTests$\r\n            = this.emptyTestSuiteFor(\"replaceEntry\");\r\n        try {\r\n            org.jmlspecs.jmlunit.strategies.IndefiniteIterator\r\n                receivers$iter\r\n                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator\r\n                    (this.vorg_jmlspecs_samples_list_list2_E_OneWayListIter(\"replaceEntry\", 1));\r\n            this.check_has_data\r\n                (receivers$iter,\r\n                 \"new NonNullIteratorDecorator(this.vorg_jmlspecs_samples_list_list2_E_OneWayListIter(\\\"replaceEntry\\\", 1))\");\r\n            while (!receivers$iter.atEnd()) {\r\n                org.jmlspecs.jmlunit.strategies.IndefiniteIterator\r\n                    vjava_lang_Object$1$iter\r\n                    = this.vjava_lang_ObjectIter(\"replaceEntry\", 0);\r\n                this.check_has_data\r\n                    (vjava_lang_Object$1$iter,\r\n                     \"this.vjava_lang_ObjectIter(\\\"replaceEntry\\\", 0)\");\r\n                while (!vjava_lang_Object$1$iter.atEnd()) {\r\n                    final org.jmlspecs.samples.list.list2.E_OneWayList receiver$\r\n                        = (org.jmlspecs.samples.list.list2.E_OneWayList) receivers$iter.get();\r\n                    final java.lang.Object arg1\r\n                        = (java.lang.Object) vjava_lang_Object$1$iter.get();\r\n                    methodTests$.addTest\r\n                        (new TestReplaceEntry(receiver$, arg1));\r\n                    vjava_lang_Object$1$iter.advance();\r\n                }\r\n                receivers$iter.advance();\r\n            }\r\n        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {\r\n            // methodTests$ doesn't want more tests\r\n        }\r\n        overallTestSuite$.addTest(methodTests$);\r\n    }\r\n\r\n    /** Test for the replaceEntry method. */\r\n    protected static class TestReplaceEntry extends OneTest {\r\n        /** The receiver */\r\n        private org.jmlspecs.samples.list.list2.E_OneWayList receiver$;\r\n        /** Argument arg1 */\r\n        private java.lang.Object arg1;\r\n\r\n        /** Initialize this instance. */\r\n        public TestReplaceEntry(org.jmlspecs.samples.list.list2.E_OneWayList receiver$, java.lang.Object arg1) {\r\n            super(\"replaceEntry\"+ \":\" + (arg1==null? \"null\" :\"{java.lang.Object}\"));\r\n            this.receiver$ = receiver$;\r\n            this.arg1 = arg1;\r\n        }\r\n\r\n        protected void doCall() throws java.lang.Throwable {\r\n            receiver$.replaceEntry(arg1);\r\n        }\r\n\r\n        protected java.lang.String failMessage\r\n            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)\r\n        {\r\n            java.lang.String msg = \"\\n\\tMethod 'replaceEntry' applied to\";\r\n            msg += \"\\n\\tReceiver: \" + this.receiver$;\r\n            msg += \"\\n\\tArgument arg1: \" + this.arg1;\r\n            return msg;\r\n        }\r\n    }\r\n\r\n    /** Add tests for the toString method\r\n     * to the overall test suite. */\r\n    private void addTestSuiteFor$TestToString\r\n        (junit.framework.TestSuite overallTestSuite$)\r\n    {\r\n        junit.framework.TestSuite methodTests$\r\n            = this.emptyTestSuiteFor(\"toString\");\r\n        try {\r\n            org.jmlspecs.jmlunit.strategies.IndefiniteIterator\r\n                receivers$iter\r\n                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator\r\n                    (this.vorg_jmlspecs_samples_list_list2_E_OneWayListIter(\"toString\", 0));\r\n            this.check_has_data\r\n                (receivers$iter,\r\n                 \"new NonNullIteratorDecorator(this.vorg_jmlspecs_samples_list_list2_E_OneWayListIter(\\\"toString\\\", 0))\");\r\n            while (!receivers$iter.atEnd()) {\r\n                final org.jmlspecs.samples.list.list2.E_OneWayList receiver$\r\n                    = (org.jmlspecs.samples.list.list2.E_OneWayList) receivers$iter.get();\r\n                methodTests$.addTest\r\n                    (new TestToString(receiver$));\r\n                receivers$iter.advance();\r\n            }\r\n        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {\r\n            // methodTests$ doesn't want more tests\r\n        }\r\n        overallTestSuite$.addTest(methodTests$);\r\n    }\r\n\r\n    /** Test for the toString method. */\r\n    protected static class TestToString extends OneTest {\r\n        /** The receiver */\r\n        private org.jmlspecs.samples.list.list2.E_OneWayList receiver$;\r\n\r\n        /** Initialize this instance. */\r\n        public TestToString(org.jmlspecs.samples.list.list2.E_OneWayList receiver$) {\r\n            super(\"toString\");\r\n            this.receiver$ = receiver$;\r\n        }\r\n\r\n        protected void doCall() throws java.lang.Throwable {\r\n            receiver$.toString();\r\n        }\r\n\r\n        protected java.lang.String failMessage\r\n            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)\r\n        {\r\n            java.lang.String msg = \"\\n\\tMethod 'toString' applied to\";\r\n            msg += \"\\n\\tReceiver: \" + this.receiver$;\r\n            return msg;\r\n        }\r\n    }\r\n\r\n    /** Check that the iterator is non-null and not empty. */\r\n    private void\r\n    check_has_data(org.jmlspecs.jmlunit.strategies.IndefiniteIterator iter,\r\n                   String call)\r\n    {\r\n        if (iter == null) {\r\n            junit.framework.Assert.fail(call + \" returned null\");\r\n        }\r\n        if (iter.atEnd()) {\r\n            junit.framework.Assert.fail(call + \" returned an empty iterator\");\r\n        }\r\n    }\r\n\r\n    /** Converts a char to a printable String for display */\r\n    public static String charToString(char c) {\r\n        if (c == '\\n') {\r\n            return \"NL\";\r\n        } else if (c == '\\r') {\r\n            return \"CR\";\r\n        } else if (c == '\\t') {\r\n            return \"TAB\";\r\n        } else if (Character.isISOControl(c)) {\r\n            int i = (int)c;\r\n            return \"\\\\u\"\r\n                    + Character.forDigit((i/2048)%16,16)\r\n                    + Character.forDigit((i/256)%16,16)\r\n                    + Character.forDigit((i/16)%16,16)\r\n                    + Character.forDigit((i)%16,16);\r\n        }\r\n        return Character.toString(c);\r\n    }\r\n}\r\n",
        "name": "E_OneWayList_JML_Test.java",
        "path": "examples/jml/www.eecs.ucf.edu/~leavens/JML-release/org/jmlspecs/samples/list/list2/E_OneWayList_JML_Test.java",
        "url": "/github.com/hipsleek/hipsleek/-/blob/examples/jml/www.eecs.ucf.edu/~leavens/JML-release/org/jmlspecs/samples/list/list2/E_OneWayList_JML_Test.java"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 48,
          "offsetAndLengths": [
            [
              4,
              12
            ]
          ],
          "preview": "    //@ ensures \\result != null;\r"
        },
        {
          "limitHit": false,
          "lineNumber": 75,
          "offsetAndLengths": [
            [
              8,
              13
            ]
          ],
          "preview": "        //@ requires result != null;\r"
        },
        {
          "limitHit": false,
          "lineNumber": 135,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires overallTestSuite$ != null;\r"
        }
      ],
      "repository": {
        "name": "github.com/hipsleek/hipsleek",
        "url": "/github.com/hipsleek/hipsleek"
      }
    },
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "b8e044655ec3d3e80172fe3f0a9fa519bf171099"
        },
        "content": "// This file was generated by jmlunit on Sun Nov 04 15:55:06 EST 2007.\r\n\r\npackage org.jmlspecs.samples.list.list2;\r\n\r\nimport org.jmlspecs.models.JMLObjectSequence;\r\nimport org.jmlspecs.samples.list.node.OneWayNode;\r\nimport org.jmlspecs.samples.list.node.TwoWayNode;\r\nimport org.jmlspecs.samples.list.iterator.RestartableIterator;\r\n\r\n/** Automatically-generated test driver for JML and JUnit based\r\n * testing of TwoWayIterator. The superclass of this class should be edited\r\n * to supply test data. However it's best not to edit this class\r\n * directly; instead use the command\r\n * \u003cpre\u003e\r\n *  jmlunit TwoWayIterator.java\r\n * \u003c/pre\u003e\r\n * to regenerate this class whenever TwoWayIterator.java changes.\r\n */\r\npublic class TwoWayIterator_JML_Test\r\n     extends TwoWayIterator_JML_TestData\r\n{\r\n    /** Initialize this class. */\r\n    public TwoWayIterator_JML_Test(java.lang.String name) {\r\n        super(name);\r\n    }\r\n\r\n    /** Run the tests. */\r\n    public static void main(java.lang.String[] args) {\r\n        org.jmlspecs.jmlunit.JMLTestRunner.run(suite());\r\n        // You can also use a JUnit test runner such as:\r\n        // junit.textui.TestRunner.run(suite());\r\n    }\r\n\r\n    /** Test to see if the code for class TwoWayIterator\r\n     * has been compiled with runtime assertion checking (i.e., by jmlc).\r\n     * Code that is not compiled with jmlc would not make an effective test,\r\n     * since no assertion checking would be done. */\r\n    public void test$IsRACCompiled() {\r\n        junit.framework.Assert.assertTrue(\"code for class TwoWayIterator\"\r\n                + \" was not compiled with jmlc\"\r\n                + \" so no assertions will be checked!\",\r\n            org.jmlspecs.jmlrac.runtime.JMLChecker.isRACCompiled(TwoWayIterator.class)\r\n            );\r\n    }\r\n\r\n    /** Return the test suite for this test class.  This will have\r\n    * added to it at least test$IsRACCompiled(), and any test methods\r\n    * written explicitly by the user in the superclass.  It will also\r\n    * have added test suites for each testing each method and\r\n    * constructor.\r\n    */\r\n    //@ ensures \\result != null;\r\n    public static junit.framework.Test suite() {\r\n        TwoWayIterator_JML_Test testobj\r\n            = new TwoWayIterator_JML_Test(\"TwoWayIterator_JML_Test\");\r\n        junit.framework.TestSuite testsuite = testobj.overallTestSuite();\r\n        // Add instances of Test found by the reflection mechanism.\r\n        testsuite.addTestSuite(TwoWayIterator_JML_Test.class);\r\n        testobj.addTestSuiteForEachMethod(testsuite);\r\n        return testsuite;\r\n    }\r\n\r\n    /** A JUnit test object that can run a single test method.  This\r\n     * is defined as a nested class solely for convenience; it can't\r\n     * be defined once and for all because it must subclass its\r\n     * enclosing class.\r\n     */\r\n    protected static abstract class OneTest extends TwoWayIterator_JML_Test {\r\n\r\n        /** Initialize this test object. */\r\n        public OneTest(String name) {\r\n            super(name);\r\n        }\r\n\r\n        /** The result object that holds information about testing. */\r\n        protected junit.framework.TestResult result;\r\n\r\n        //@ also\r\n        //@ requires result != null;\r\n        public void run(junit.framework.TestResult result) {\r\n            this.result = result;\r\n            super.run(result);\r\n        }\r\n\r\n        /* Run a single test and decide whether the test was\r\n         * successful, meaningless, or a failure.  This is the\r\n         * Template Method pattern abstraction of the inner loop in a\r\n         * JML/JUnit test. */\r\n        public void runTest() throws java.lang.Throwable {\r\n            try {\r\n                // The call being tested!\r\n                doCall();\r\n            }\r\n            catch (org.jmlspecs.jmlrac.runtime.JMLEntryPreconditionError e) {\r\n                // meaningless test input\r\n                addMeaningless();\r\n            } catch (org.jmlspecs.jmlrac.runtime.JMLAssertionError e) {\r\n                // test failure\r\n                int l = org.jmlspecs.jmlrac.runtime.JMLChecker.getLevel();\r\n                org.jmlspecs.jmlrac.runtime.JMLChecker.setLevel\r\n                    (org.jmlspecs.jmlrac.runtime.JMLOption.NONE);\r\n                try {\r\n                    java.lang.String failmsg = this.failMessage(e);\r\n                    junit.framework.AssertionFailedError err\r\n                        = new junit.framework.AssertionFailedError(failmsg);\r\n                    err.setStackTrace(new java.lang.StackTraceElement[]{});\r\n                    err.initCause(e);\r\n                    result.addFailure(this, err);\r\n                } finally {\r\n                    org.jmlspecs.jmlrac.runtime.JMLChecker.setLevel(l);\r\n                }\r\n            } catch (java.lang.Throwable e) {\r\n                // test success\r\n            }\r\n        }\r\n\r\n        /** Call the method to be tested with the appropriate arguments. */\r\n        protected abstract void doCall() throws java.lang.Throwable;\r\n\r\n        /** Format the error message for a test failure, based on the\r\n         * method's arguments. */\r\n        protected abstract java.lang.String failMessage\r\n            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e);\r\n\r\n        /** Inform listeners that a meaningless test was run. */\r\n        private void addMeaningless() {\r\n            if (result instanceof org.jmlspecs.jmlunit.JMLTestResult) {\r\n                ((org.jmlspecs.jmlunit.JMLTestResult)result)\r\n                    .addMeaningless(this);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** Create the tests that are to be run for testing the class\r\n     * TwoWayIterator.  The framework will then run them.\r\n     * @param overallTestSuite$ The suite accumulating all of the tests\r\n     * for this driver class.\r\n     */\r\n    //@ requires overallTestSuite$ != null;\r\n    public void addTestSuiteForEachMethod\r\n        (junit.framework.TestSuite overallTestSuite$)\r\n    {\r\n        try {\r\n            this.addTestSuiteFor$TestTwoWayIterator(overallTestSuite$);\r\n        } catch (java.lang.Throwable ex) {\r\n            overallTestSuite$.addTest\r\n                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));\r\n        }\r\n        try {\r\n            this.addTestSuiteFor$TestFirst(overallTestSuite$);\r\n        } catch (java.lang.Throwable ex) {\r\n            overallTestSuite$.addTest\r\n                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));\r\n        }\r\n        try {\r\n            this.addTestSuiteFor$TestNext(overallTestSuite$);\r\n        } catch (java.lang.Throwable ex) {\r\n            overallTestSuite$.addTest\r\n                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));\r\n        }\r\n        try {\r\n            this.addTestSuiteFor$TestIsDone(overallTestSuite$);\r\n        } catch (java.lang.Throwable ex) {\r\n            overallTestSuite$.addTest\r\n                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));\r\n        }\r\n        try {\r\n            this.addTestSuiteFor$TestCurrentItem(overallTestSuite$);\r\n        } catch (java.lang.Throwable ex) {\r\n            overallTestSuite$.addTest\r\n                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));\r\n        }\r\n        try {\r\n            this.addTestSuiteFor$TestLast(overallTestSuite$);\r\n        } catch (java.lang.Throwable ex) {\r\n            overallTestSuite$.addTest\r\n                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));\r\n        }\r\n        try {\r\n            this.addTestSuiteFor$TestPrevious(overallTestSuite$);\r\n        } catch (java.lang.Throwable ex) {\r\n            overallTestSuite$.addTest\r\n                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));\r\n        }\r\n        try {\r\n            this.addTestSuiteFor$TestIsAtFront(overallTestSuite$);\r\n        } catch (java.lang.Throwable ex) {\r\n            overallTestSuite$.addTest\r\n                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));\r\n        }\r\n        try {\r\n            this.addTestSuiteFor$TestToString(overallTestSuite$);\r\n        } catch (java.lang.Throwable ex) {\r\n            overallTestSuite$.addTest\r\n                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));\r\n        }\r\n    }\r\n\r\n    /** Add tests for the TwoWayIterator contructor\r\n     * to the overall test suite. */\r\n    private void addTestSuiteFor$TestTwoWayIterator\r\n        (junit.framework.TestSuite overallTestSuite$)\r\n    {\r\n        junit.framework.TestSuite methodTests$\r\n            = this.emptyTestSuiteFor(\"TwoWayIterator\");\r\n        try {\r\n            org.jmlspecs.jmlunit.strategies.IndefiniteIterator\r\n                vorg_jmlspecs_samples_list_node_TwoWayNode$1$iter\r\n                = this.vorg_jmlspecs_samples_list_node_TwoWayNodeIter(\"TwoWayIterator\", 0);\r\n            this.check_has_data\r\n                (vorg_jmlspecs_samples_list_node_TwoWayNode$1$iter,\r\n                 \"this.vorg_jmlspecs_samples_list_node_TwoWayNodeIter(\\\"TwoWayIterator\\\", 0)\");\r\n            while (!vorg_jmlspecs_samples_list_node_TwoWayNode$1$iter.atEnd()) {\r\n                final org.jmlspecs.samples.list.node.TwoWayNode link\r\n                    = (org.jmlspecs.samples.list.node.TwoWayNode) vorg_jmlspecs_samples_list_node_TwoWayNode$1$iter.get();\r\n                methodTests$.addTest\r\n                    (new TestTwoWayIterator(link));\r\n                vorg_jmlspecs_samples_list_node_TwoWayNode$1$iter.advance();\r\n            }\r\n        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {\r\n            // methodTests$ doesn't want more tests\r\n        }\r\n        overallTestSuite$.addTest(methodTests$);\r\n    }\r\n\r\n    /** Test for the TwoWayIterator contructor. */\r\n    protected static class TestTwoWayIterator extends OneTest {\r\n        /** Argument link */\r\n        private org.jmlspecs.samples.list.node.TwoWayNode link;\r\n\r\n        /** Initialize this instance. */\r\n        public TestTwoWayIterator(org.jmlspecs.samples.list.node.TwoWayNode link) {\r\n            super(\"TwoWayIterator\"+ \":\" + (link==null? \"null\" :\"{org.jmlspecs.samples.list.node.TwoWayNode}\"));\r\n            this.link = link;\r\n        }\r\n\r\n        protected void doCall() throws java.lang.Throwable {\r\n            new TwoWayIterator(link);\r\n        }\r\n\r\n        protected java.lang.String failMessage\r\n            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)\r\n        {\r\n            java.lang.String msg = \"\\n\\tContructor 'TwoWayIterator' applied to\";\r\n            msg += \"\\n\\tArgument link: \" + this.link;\r\n            return msg;\r\n        }\r\n    }\r\n\r\n    /** Add tests for the first method\r\n     * to the overall test suite. */\r\n    private void addTestSuiteFor$TestFirst\r\n        (junit.framework.TestSuite overallTestSuite$)\r\n    {\r\n        junit.framework.TestSuite methodTests$\r\n            = this.emptyTestSuiteFor(\"first\");\r\n        try {\r\n            org.jmlspecs.jmlunit.strategies.IndefiniteIterator\r\n                receivers$iter\r\n                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator\r\n                    (this.vorg_jmlspecs_samples_list_list2_TwoWayIteratorIter(\"first\", 0));\r\n            this.check_has_data\r\n                (receivers$iter,\r\n                 \"new NonNullIteratorDecorator(this.vorg_jmlspecs_samples_list_list2_TwoWayIteratorIter(\\\"first\\\", 0))\");\r\n            while (!receivers$iter.atEnd()) {\r\n                final org.jmlspecs.samples.list.list2.TwoWayIterator receiver$\r\n                    = (org.jmlspecs.samples.list.list2.TwoWayIterator) receivers$iter.get();\r\n                methodTests$.addTest\r\n                    (new TestFirst(receiver$));\r\n                receivers$iter.advance();\r\n            }\r\n        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {\r\n            // methodTests$ doesn't want more tests\r\n        }\r\n        overallTestSuite$.addTest(methodTests$);\r\n    }\r\n\r\n    /** Test for the first method. */\r\n    protected static class TestFirst extends OneTest {\r\n        /** The receiver */\r\n        private org.jmlspecs.samples.list.list2.TwoWayIterator receiver$;\r\n\r\n        /** Initialize this instance. */\r\n        public TestFirst(org.jmlspecs.samples.list.list2.TwoWayIterator receiver$) {\r\n            super(\"first\");\r\n            this.receiver$ = receiver$;\r\n        }\r\n\r\n        protected void doCall() throws java.lang.Throwable {\r\n            receiver$.first();\r\n        }\r\n\r\n        protected java.lang.String failMessage\r\n            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)\r\n        {\r\n            java.lang.String msg = \"\\n\\tMethod 'first' applied to\";\r\n            msg += \"\\n\\tReceiver: \" + this.receiver$;\r\n            return msg;\r\n        }\r\n    }\r\n\r\n    /** Add tests for the next method\r\n     * to the overall test suite. */\r\n    private void addTestSuiteFor$TestNext\r\n        (junit.framework.TestSuite overallTestSuite$)\r\n    {\r\n        junit.framework.TestSuite methodTests$\r\n            = this.emptyTestSuiteFor(\"next\");\r\n        try {\r\n            org.jmlspecs.jmlunit.strategies.IndefiniteIterator\r\n                receivers$iter\r\n                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator\r\n                    (this.vorg_jmlspecs_samples_list_list2_TwoWayIteratorIter(\"next\", 0));\r\n            this.check_has_data\r\n                (receivers$iter,\r\n                 \"new NonNullIteratorDecorator(this.vorg_jmlspecs_samples_list_list2_TwoWayIteratorIter(\\\"next\\\", 0))\");\r\n            while (!receivers$iter.atEnd()) {\r\n                final org.jmlspecs.samples.list.list2.TwoWayIterator receiver$\r\n                    = (org.jmlspecs.samples.list.list2.TwoWayIterator) receivers$iter.get();\r\n                methodTests$.addTest\r\n                    (new TestNext(receiver$));\r\n                receivers$iter.advance();\r\n            }\r\n        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {\r\n            // methodTests$ doesn't want more tests\r\n        }\r\n        overallTestSuite$.addTest(methodTests$);\r\n    }\r\n\r\n    /** Test for the next method. */\r\n    protected static class TestNext extends OneTest {\r\n        /** The receiver */\r\n        private org.jmlspecs.samples.list.list2.TwoWayIterator receiver$;\r\n\r\n        /** Initialize this instance. */\r\n        public TestNext(org.jmlspecs.samples.list.list2.TwoWayIterator receiver$) {\r\n            super(\"next\");\r\n            this.receiver$ = receiver$;\r\n        }\r\n\r\n        protected void doCall() throws java.lang.Throwable {\r\n            receiver$.next();\r\n        }\r\n\r\n        protected java.lang.String failMessage\r\n            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)\r\n        {\r\n            java.lang.String msg = \"\\n\\tMethod 'next' applied to\";\r\n            msg += \"\\n\\tReceiver: \" + this.receiver$;\r\n            return msg;\r\n        }\r\n    }\r\n\r\n    /** Add tests for the isDone method\r\n     * to the overall test suite. */\r\n    private void addTestSuiteFor$TestIsDone\r\n        (junit.framework.TestSuite overallTestSuite$)\r\n    {\r\n        junit.framework.TestSuite methodTests$\r\n            = this.emptyTestSuiteFor(\"isDone\");\r\n        try {\r\n            org.jmlspecs.jmlunit.strategies.IndefiniteIterator\r\n                receivers$iter\r\n                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator\r\n                    (this.vorg_jmlspecs_samples_list_list2_TwoWayIteratorIter(\"isDone\", 0));\r\n            this.check_has_data\r\n                (receivers$iter,\r\n                 \"new NonNullIteratorDecorator(this.vorg_jmlspecs_samples_list_list2_TwoWayIteratorIter(\\\"isDone\\\", 0))\");\r\n            while (!receivers$iter.atEnd()) {\r\n                final org.jmlspecs.samples.list.list2.TwoWayIterator receiver$\r\n                    = (org.jmlspecs.samples.list.list2.TwoWayIterator) receivers$iter.get();\r\n                methodTests$.addTest\r\n                    (new TestIsDone(receiver$));\r\n                receivers$iter.advance();\r\n            }\r\n        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {\r\n            // methodTests$ doesn't want more tests\r\n        }\r\n        overallTestSuite$.addTest(methodTests$);\r\n    }\r\n\r\n    /** Test for the isDone method. */\r\n    protected static class TestIsDone extends OneTest {\r\n        /** The receiver */\r\n        private org.jmlspecs.samples.list.list2.TwoWayIterator receiver$;\r\n\r\n        /** Initialize this instance. */\r\n        public TestIsDone(org.jmlspecs.samples.list.list2.TwoWayIterator receiver$) {\r\n            super(\"isDone\");\r\n            this.receiver$ = receiver$;\r\n        }\r\n\r\n        protected void doCall() throws java.lang.Throwable {\r\n            receiver$.isDone();\r\n        }\r\n\r\n        protected java.lang.String failMessage\r\n            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)\r\n        {\r\n            java.lang.String msg = \"\\n\\tMethod 'isDone' applied to\";\r\n            msg += \"\\n\\tReceiver: \" + this.receiver$;\r\n            return msg;\r\n        }\r\n    }\r\n\r\n    /** Add tests for the currentItem method\r\n     * to the overall test suite. */\r\n    private void addTestSuiteFor$TestCurrentItem\r\n        (junit.framework.TestSuite overallTestSuite$)\r\n    {\r\n        junit.framework.TestSuite methodTests$\r\n            = this.emptyTestSuiteFor(\"currentItem\");\r\n        try {\r\n            org.jmlspecs.jmlunit.strategies.IndefiniteIterator\r\n                receivers$iter\r\n                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator\r\n                    (this.vorg_jmlspecs_samples_list_list2_TwoWayIteratorIter(\"currentItem\", 0));\r\n            this.check_has_data\r\n                (receivers$iter,\r\n                 \"new NonNullIteratorDecorator(this.vorg_jmlspecs_samples_list_list2_TwoWayIteratorIter(\\\"currentItem\\\", 0))\");\r\n            while (!receivers$iter.atEnd()) {\r\n                final org.jmlspecs.samples.list.list2.TwoWayIterator receiver$\r\n                    = (org.jmlspecs.samples.list.list2.TwoWayIterator) receivers$iter.get();\r\n                methodTests$.addTest\r\n                    (new TestCurrentItem(receiver$));\r\n                receivers$iter.advance();\r\n            }\r\n        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {\r\n            // methodTests$ doesn't want more tests\r\n        }\r\n        overallTestSuite$.addTest(methodTests$);\r\n    }\r\n\r\n    /** Test for the currentItem method. */\r\n    protected static class TestCurrentItem extends OneTest {\r\n        /** The receiver */\r\n        private org.jmlspecs.samples.list.list2.TwoWayIterator receiver$;\r\n\r\n        /** Initialize this instance. */\r\n        public TestCurrentItem(org.jmlspecs.samples.list.list2.TwoWayIterator receiver$) {\r\n            super(\"currentItem\");\r\n            this.receiver$ = receiver$;\r\n        }\r\n\r\n        protected void doCall() throws java.lang.Throwable {\r\n            receiver$.currentItem();\r\n        }\r\n\r\n        protected java.lang.String failMessage\r\n            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)\r\n        {\r\n            java.lang.String msg = \"\\n\\tMethod 'currentItem' applied to\";\r\n            msg += \"\\n\\tReceiver: \" + this.receiver$;\r\n            return msg;\r\n        }\r\n    }\r\n\r\n    /** Add tests for the last method\r\n     * to the overall test suite. */\r\n    private void addTestSuiteFor$TestLast\r\n        (junit.framework.TestSuite overallTestSuite$)\r\n    {\r\n        junit.framework.TestSuite methodTests$\r\n            = this.emptyTestSuiteFor(\"last\");\r\n        try {\r\n            org.jmlspecs.jmlunit.strategies.IndefiniteIterator\r\n                receivers$iter\r\n                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator\r\n                    (this.vorg_jmlspecs_samples_list_list2_TwoWayIteratorIter(\"last\", 0));\r\n            this.check_has_data\r\n                (receivers$iter,\r\n                 \"new NonNullIteratorDecorator(this.vorg_jmlspecs_samples_list_list2_TwoWayIteratorIter(\\\"last\\\", 0))\");\r\n            while (!receivers$iter.atEnd()) {\r\n                final org.jmlspecs.samples.list.list2.TwoWayIterator receiver$\r\n                    = (org.jmlspecs.samples.list.list2.TwoWayIterator) receivers$iter.get();\r\n                methodTests$.addTest\r\n                    (new TestLast(receiver$));\r\n                receivers$iter.advance();\r\n            }\r\n        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {\r\n            // methodTests$ doesn't want more tests\r\n        }\r\n        overallTestSuite$.addTest(methodTests$);\r\n    }\r\n\r\n    /** Test for the last method. */\r\n    protected static class TestLast extends OneTest {\r\n        /** The receiver */\r\n        private org.jmlspecs.samples.list.list2.TwoWayIterator receiver$;\r\n\r\n        /** Initialize this instance. */\r\n        public TestLast(org.jmlspecs.samples.list.list2.TwoWayIterator receiver$) {\r\n            super(\"last\");\r\n            this.receiver$ = receiver$;\r\n        }\r\n\r\n        protected void doCall() throws java.lang.Throwable {\r\n            receiver$.last();\r\n        }\r\n\r\n        protected java.lang.String failMessage\r\n            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)\r\n        {\r\n            java.lang.String msg = \"\\n\\tMethod 'last' applied to\";\r\n            msg += \"\\n\\tReceiver: \" + this.receiver$;\r\n            return msg;\r\n        }\r\n    }\r\n\r\n    /** Add tests for the previous method\r\n     * to the overall test suite. */\r\n    private void addTestSuiteFor$TestPrevious\r\n        (junit.framework.TestSuite overallTestSuite$)\r\n    {\r\n        junit.framework.TestSuite methodTests$\r\n            = this.emptyTestSuiteFor(\"previous\");\r\n        try {\r\n            org.jmlspecs.jmlunit.strategies.IndefiniteIterator\r\n                receivers$iter\r\n                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator\r\n                    (this.vorg_jmlspecs_samples_list_list2_TwoWayIteratorIter(\"previous\", 0));\r\n            this.check_has_data\r\n                (receivers$iter,\r\n                 \"new NonNullIteratorDecorator(this.vorg_jmlspecs_samples_list_list2_TwoWayIteratorIter(\\\"previous\\\", 0))\");\r\n            while (!receivers$iter.atEnd()) {\r\n                final org.jmlspecs.samples.list.list2.TwoWayIterator receiver$\r\n                    = (org.jmlspecs.samples.list.list2.TwoWayIterator) receivers$iter.get();\r\n                methodTests$.addTest\r\n                    (new TestPrevious(receiver$));\r\n                receivers$iter.advance();\r\n            }\r\n        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {\r\n            // methodTests$ doesn't want more tests\r\n        }\r\n        overallTestSuite$.addTest(methodTests$);\r\n    }\r\n\r\n    /** Test for the previous method. */\r\n    protected static class TestPrevious extends OneTest {\r\n        /** The receiver */\r\n        private org.jmlspecs.samples.list.list2.TwoWayIterator receiver$;\r\n\r\n        /** Initialize this instance. */\r\n        public TestPrevious(org.jmlspecs.samples.list.list2.TwoWayIterator receiver$) {\r\n            super(\"previous\");\r\n            this.receiver$ = receiver$;\r\n        }\r\n\r\n        protected void doCall() throws java.lang.Throwable {\r\n            receiver$.previous();\r\n        }\r\n\r\n        protected java.lang.String failMessage\r\n            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)\r\n        {\r\n            java.lang.String msg = \"\\n\\tMethod 'previous' applied to\";\r\n            msg += \"\\n\\tReceiver: \" + this.receiver$;\r\n            return msg;\r\n        }\r\n    }\r\n\r\n    /** Add tests for the isAtFront method\r\n     * to the overall test suite. */\r\n    private void addTestSuiteFor$TestIsAtFront\r\n        (junit.framework.TestSuite overallTestSuite$)\r\n    {\r\n        junit.framework.TestSuite methodTests$\r\n            = this.emptyTestSuiteFor(\"isAtFront\");\r\n        try {\r\n            org.jmlspecs.jmlunit.strategies.IndefiniteIterator\r\n                receivers$iter\r\n                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator\r\n                    (this.vorg_jmlspecs_samples_list_list2_TwoWayIteratorIter(\"isAtFront\", 0));\r\n            this.check_has_data\r\n                (receivers$iter,\r\n                 \"new NonNullIteratorDecorator(this.vorg_jmlspecs_samples_list_list2_TwoWayIteratorIter(\\\"isAtFront\\\", 0))\");\r\n            while (!receivers$iter.atEnd()) {\r\n                final org.jmlspecs.samples.list.list2.TwoWayIterator receiver$\r\n                    = (org.jmlspecs.samples.list.list2.TwoWayIterator) receivers$iter.get();\r\n                methodTests$.addTest\r\n                    (new TestIsAtFront(receiver$));\r\n                receivers$iter.advance();\r\n            }\r\n        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {\r\n            // methodTests$ doesn't want more tests\r\n        }\r\n        overallTestSuite$.addTest(methodTests$);\r\n    }\r\n\r\n    /** Test for the isAtFront method. */\r\n    protected static class TestIsAtFront extends OneTest {\r\n        /** The receiver */\r\n        private org.jmlspecs.samples.list.list2.TwoWayIterator receiver$;\r\n\r\n        /** Initialize this instance. */\r\n        public TestIsAtFront(org.jmlspecs.samples.list.list2.TwoWayIterator receiver$) {\r\n            super(\"isAtFront\");\r\n            this.receiver$ = receiver$;\r\n        }\r\n\r\n        protected void doCall() throws java.lang.Throwable {\r\n            receiver$.isAtFront();\r\n        }\r\n\r\n        protected java.lang.String failMessage\r\n            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)\r\n        {\r\n            java.lang.String msg = \"\\n\\tMethod 'isAtFront' applied to\";\r\n            msg += \"\\n\\tReceiver: \" + this.receiver$;\r\n            return msg;\r\n        }\r\n    }\r\n\r\n    /** Add tests for the toString method\r\n     * to the overall test suite. */\r\n    private void addTestSuiteFor$TestToString\r\n        (junit.framework.TestSuite overallTestSuite$)\r\n    {\r\n        junit.framework.TestSuite methodTests$\r\n            = this.emptyTestSuiteFor(\"toString\");\r\n        try {\r\n            org.jmlspecs.jmlunit.strategies.IndefiniteIterator\r\n                receivers$iter\r\n                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator\r\n                    (this.vorg_jmlspecs_samples_list_list2_TwoWayIteratorIter(\"toString\", 0));\r\n            this.check_has_data\r\n                (receivers$iter,\r\n                 \"new NonNullIteratorDecorator(this.vorg_jmlspecs_samples_list_list2_TwoWayIteratorIter(\\\"toString\\\", 0))\");\r\n            while (!receivers$iter.atEnd()) {\r\n                final org.jmlspecs.samples.list.list2.TwoWayIterator receiver$\r\n                    = (org.jmlspecs.samples.list.list2.TwoWayIterator) receivers$iter.get();\r\n                methodTests$.addTest\r\n                    (new TestToString(receiver$));\r\n                receivers$iter.advance();\r\n            }\r\n        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {\r\n            // methodTests$ doesn't want more tests\r\n        }\r\n        overallTestSuite$.addTest(methodTests$);\r\n    }\r\n\r\n    /** Test for the toString method. */\r\n    protected static class TestToString extends OneTest {\r\n        /** The receiver */\r\n        private org.jmlspecs.samples.list.list2.TwoWayIterator receiver$;\r\n\r\n        /** Initialize this instance. */\r\n        public TestToString(org.jmlspecs.samples.list.list2.TwoWayIterator receiver$) {\r\n            super(\"toString\");\r\n            this.receiver$ = receiver$;\r\n        }\r\n\r\n        protected void doCall() throws java.lang.Throwable {\r\n            receiver$.toString();\r\n        }\r\n\r\n        protected java.lang.String failMessage\r\n            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)\r\n        {\r\n            java.lang.String msg = \"\\n\\tMethod 'toString' applied to\";\r\n            msg += \"\\n\\tReceiver: \" + this.receiver$;\r\n            return msg;\r\n        }\r\n    }\r\n\r\n    /** Check that the iterator is non-null and not empty. */\r\n    private void\r\n    check_has_data(org.jmlspecs.jmlunit.strategies.IndefiniteIterator iter,\r\n                   String call)\r\n    {\r\n        if (iter == null) {\r\n            junit.framework.Assert.fail(call + \" returned null\");\r\n        }\r\n        if (iter.atEnd()) {\r\n            junit.framework.Assert.fail(call + \" returned an empty iterator\");\r\n        }\r\n    }\r\n\r\n    /** Converts a char to a printable String for display */\r\n    public static String charToString(char c) {\r\n        if (c == '\\n') {\r\n            return \"NL\";\r\n        } else if (c == '\\r') {\r\n            return \"CR\";\r\n        } else if (c == '\\t') {\r\n            return \"TAB\";\r\n        } else if (Character.isISOControl(c)) {\r\n            int i = (int)c;\r\n            return \"\\\\u\"\r\n                    + Character.forDigit((i/2048)%16,16)\r\n                    + Character.forDigit((i/256)%16,16)\r\n                    + Character.forDigit((i/16)%16,16)\r\n                    + Character.forDigit((i)%16,16);\r\n        }\r\n        return Character.toString(c);\r\n    }\r\n}\r\n",
        "name": "TwoWayIterator_JML_Test.java",
        "path": "examples/jml/www.eecs.ucf.edu/~leavens/JML-release/org/jmlspecs/samples/list/list2/TwoWayIterator_JML_Test.java",
        "url": "/github.com/hipsleek/hipsleek/-/blob/examples/jml/www.eecs.ucf.edu/~leavens/JML-release/org/jmlspecs/samples/list/list2/TwoWayIterator_JML_Test.java"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 51,
          "offsetAndLengths": [
            [
              4,
              12
            ]
          ],
          "preview": "    //@ ensures \\result != null;\r"
        },
        {
          "limitHit": false,
          "lineNumber": 78,
          "offsetAndLengths": [
            [
              8,
              13
            ]
          ],
          "preview": "        //@ requires result != null;\r"
        },
        {
          "limitHit": false,
          "lineNumber": 138,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires overallTestSuite$ != null;\r"
        }
      ],
      "repository": {
        "name": "github.com/hipsleek/hipsleek",
        "url": "/github.com/hipsleek/hipsleek"
      }
    },
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "b8e044655ec3d3e80172fe3f0a9fa519bf171099"
        },
        "content": "// @(#)$Id: TwoWayList_JML_TestData.java,v 1.2 2009-02-17 08:55:21 chinwn Exp $\n\n// Copyright (C) 2004 Iowa State University\n\n// This file is part of JML\n\n// JML is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2, or (at your option)\n// any later version.\n\n// JML is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with JML; see the file COPYING.  If not, write to\n// the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.\n\npackage org.jmlspecs.samples.list.list2;\n\nimport org.jmlspecs.samples.list.node.TwoWayNode;\n\n/** Supply test data for the JML and JUnit based testing of \n *  TwoWayList.\n *\n *  \u003cp\u003eTest data is supplied by overriding methods in this class.  See\n *  the JML documentation and the comments below about how to do this.\n *\n *  \u003cp\u003eThis class is also the place to override the \u003ckbd\u003esetUp()\u003c/kbd\u003e\n *  and \u003ckbd\u003etearDown()\u003c/kbd\u003e methods if your testing needs some\n *  actions to be taken before and after each test is executed.\n *\n *  \u003cp\u003eThis class is never rewritten by jmlunit.\n *\n */\npublic abstract class TwoWayList_JML_TestData\n    extends junit.framework.TestCase\n{\n    /** Initialize this class. */\n    public TwoWayList_JML_TestData(java.lang.String name) {\n        super(name);\n    }\n\n    /** Return the overall test suite for accumulating tests; the\n     * result will hold every test that will be run.  This factory\n     * method can be altered to provide filtering of test suites, as\n     * they are added to this overall test suite, based on various\n     * criteria.  The test driver will first call the method\n     * addTestSuite to add a test suite formed from custom programmed\n     * test methods (named testX for some X), which you can add to\n     * this class; this initial test suite will also include a method\n     * to check that the code being tested was compiled with jmlc.\n     * After that, for each method to be tested, a test suite\n     * containing tests for that method will be added to this overall\n     * test suite, using the addTest method.  Test suites added for a\n     * method will have some subtype of TestSuite and that method's\n     * name as their name. So, if you want to control the overall\n     * suite of tests for testing some method, e.g., to limit the\n     * number of tests for each method, return a special-purpose\n     * subclass of junit.framework.TestSuite in which you override the\n     * addTest method.\n     * @see junit.framework.TestSuite\n     */\n    //@ assignable objectState;\n    //@ ensures \\result != null;\n    public junit.framework.TestSuite overallTestSuite() {\n        return new junit.framework.TestSuite(\"Overall tests for TwoWayList\");\n    }\n\n    /** Return an empty test suite for accumulating tests for the\n     * named method.  This factory method can be altered to provide\n     * filtering or limiting of the tests for the named method, as\n     * they are added to the test suite for this method.  The driver\n     * will add individual tests using the addTest method.  So, if you\n     * want to filter individual tests, return a subclass of TestSuite\n     * in which you override the addTest method.\n     * @param methodName The method the tests in this suite are for.\n     * @see junit.framework.TestSuite\n     * @see org.jmlspecs.jmlunit.strategies.LimitedTestSuite\n     */\n    //@ assignable objectState;\n    //@ ensures \\result != null;\n    public junit.framework.TestSuite emptyTestSuiteFor\n        (java.lang.String methodName)\n    {\n        return new junit.framework.TestSuite(methodName);\n    }\n\n    // You should edit the following code to supply test data.  In the\n    // skeleton originally supplied below the jmlunit tool made a\n    // guess as to a minimal strategy for generating test data for\n    // each type of object used as a receiver, and each type used as\n    // an argument.  There is a library of strategies for generating\n    // test data in org.jmlspecs.jmlunit.strategies, which are used in\n    // the tool's guesses.  See the documentation for JML and in\n    // particular for the org.jmlspecs.jmlunit.strategies package for\n    // a general discussion of how to do this.  (This package's\n    // documentation is available through the JML.html file in the top\n    // of the JML release, and also in the package.html file that\n    // ships with the package.)\n    //\n    // You can change the strategies guessed by the jmlunit tool, and\n    // you can also define new ones to suit your needs.  You can also\n    // delete any useless sample test data that has been generated\n    // for you to show you the pattern of how to add your own test\n    // data.  The only requirement is that you implement the methods\n    // below.\n    //\n    // If you change the type being tested in a way that introduces\n    // new types of arguments for some methods, then you will have to\n    // introduce (by hand) definitions that are similar to the ones\n    // below, because jmlunit never rewrites this file.\n\n    String first = \"first\";\n    String second = \"second\";\n    String third = \"third\";\n    String fourth = \"fourth\";\n\n    /** Return a new, freshly allocated indefinite iterator that\n     * produces test data of type \n     * org.jmlspecs.samples.list.list2.TwoWayList\n     * for testing the method named by the String methodName in\n     * a loop that encloses loopsThisSurrounds many other loops.\n     * @param methodName name of the method for which this\n     *                      test data will be used.\n     * @param loopsThisSurrounds number of loops that the test\n     *                           contains inside this one.\n     */\n    //@ requires methodName != null \u0026\u0026 loopsThisSurrounds \u003e= 0;\n    //@ ensures \\fresh(\\result);\n    protected org.jmlspecs.jmlunit.strategies.IndefiniteIterator\n        vorg_jmlspecs_samples_list_list2_TwoWayListIter\n        (java.lang.String methodName, int loopsThisSurrounds)\n    {\n        return vorg_jmlspecs_samples_list_list2_TwoWayListStrategy.iterator();\n    }\n\n    /** The strategy for generating test data of type\n     * org.jmlspecs.samples.list.list2.TwoWayList. */\n    private org.jmlspecs.jmlunit.strategies.StrategyType\n        vorg_jmlspecs_samples_list_list2_TwoWayListStrategy\n        = new org.jmlspecs.jmlunit.strategies.CloneableObjectAbstractStrategy()\n            {\n                protected java.lang.Object[] addData() {\n                    org.jmlspecs.samples.list.list2.TwoWayList[] receivers\n                        = new TwoWayList[] { \n                            new TwoWayList(),\n                            new TwoWayList(),\n                            new TwoWayList(),\n                            new TwoWayList(),\n                            new TwoWayList(),\n                            new TwoWayList(),\n                            new TwoWayList(),\n                            new TwoWayList(),\n                            null, // replaced below by a regular value\n                        };\n                    receivers[1].insertBeforeCursor(\"it\"+\"-L1\");\n                    receivers[1].firstEntry();\n                    receivers[2].insertBeforeCursor(first+\"-L2\");\n                    receivers[2].firstEntry();\n                    receivers[2].insertAfterCursor(second+\"-L2\");\n                    receivers[2].incrementCursor();\n                    receivers[2].incrementCursor();\n                    receivers[3].insertBeforeCursor(first+\"-L3\");\n                    receivers[3].insertBeforeCursor(second+\"-L3\");\n                    receivers[3].insertBeforeCursor(third+\"-L3\");\n                    receivers[3].insertBeforeCursor(fourth+\"-L3\");\n                    receivers[3].firstEntry();\n                    receivers[3].incrementCursor();\n                    receivers[3].incrementCursor();\n                    receivers[4].insertBeforeCursor(new int[1]);\n                    receivers[4].insertBeforeCursor(new int[2]);\n                    receivers[4].insertBeforeCursor(new int[3]);\n                    receivers[4].insertBeforeCursor(new int[4]);\n                    receivers[4].firstEntry();\n                    receivers[5].insertBeforeCursor(\"it-L5\");\n                    receivers[5].decrementCursor();\n                    receivers[5].decrementCursor();\n                    receivers[6].insertBeforeCursor(\"it-L6\");\n                    receivers[7].insertBeforeCursor(\"8th-L7\");\n                    receivers[7].insertBeforeCursor(\"7th-L7\");\n                    receivers[7].insertBeforeCursor(\"6th-L7\");\n                    receivers[7].insertBeforeCursor(\"5th-L7\");\n                    receivers[8] = new TwoWayList(receivers[7]);\n\n                    return receivers;\n                }\n\n                //@ also\n                //@ requires o$ != null;\n                protected Object cloneElement(java.lang.Object o$) {\n                    org.jmlspecs.samples.list.list2.TwoWayList down$\n                        = (org.jmlspecs.samples.list.list2.TwoWayList) o$;\n                    return down$.clone();\n                }\n            };\n\n    /** Return a new, freshly allocated indefinite iterator that\n     * produces test data of type \n     * java.lang.Object\n     * for testing the method named by the String methodName in\n     * a loop that encloses loopsThisSurrounds many other loops.\n     * @param methodName name of the method for which this\n     *                      test data will be used.\n     * @param loopsThisSurrounds number of loops that the test\n     *                           contains inside this one.\n     */\n    //@ requires methodName != null \u0026\u0026 loopsThisSurrounds \u003e= 0;\n    //@ ensures \\fresh(\\result);\n    protected org.jmlspecs.jmlunit.strategies.IndefiniteIterator\n        vjava_lang_ObjectIter\n        (java.lang.String methodName, int loopsThisSurrounds)\n    {\n        return vjava_lang_ObjectStrategy.iterator();\n    }\n\n    /** The strategy for generating test data of type\n     * java.lang.Object. */\n    private org.jmlspecs.jmlunit.strategies.StrategyType\n        vjava_lang_ObjectStrategy\n        = new org.jmlspecs.jmlunit.strategies.CompositeStrategy\n        (new org.jmlspecs.jmlunit.strategies.StrategyType[] {\n            new org.jmlspecs.jmlunit.strategies.ObjectStrategy(),\n            vorg_jmlspecs_samples_list_list2_TwoWayListStrategy,\n        });\n}\n",
        "name": "TwoWayList_JML_TestData.java",
        "path": "examples/jml/www.eecs.ucf.edu/~leavens/JML-release/org/jmlspecs/samples/list/list2/TwoWayList_JML_TestData.java",
        "url": "/github.com/hipsleek/hipsleek/-/blob/examples/jml/www.eecs.ucf.edu/~leavens/JML-release/org/jmlspecs/samples/list/list2/TwoWayList_JML_TestData.java"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 66,
          "offsetAndLengths": [
            [
              4,
              12
            ]
          ],
          "preview": "    //@ ensures \\result != null;"
        },
        {
          "limitHit": false,
          "lineNumber": 83,
          "offsetAndLengths": [
            [
              4,
              12
            ]
          ],
          "preview": "    //@ ensures \\result != null;"
        },
        {
          "limitHit": false,
          "lineNumber": 130,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires methodName != null \u0026\u0026 loopsThisSurrounds \u003e= 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 131,
          "offsetAndLengths": [
            [
              4,
              12
            ]
          ],
          "preview": "    //@ ensures \\fresh(\\result);"
        },
        {
          "limitHit": false,
          "lineNumber": 191,
          "offsetAndLengths": [
            [
              16,
              13
            ]
          ],
          "preview": "                //@ requires o$ != null;"
        },
        {
          "limitHit": false,
          "lineNumber": 209,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires methodName != null \u0026\u0026 loopsThisSurrounds \u003e= 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 210,
          "offsetAndLengths": [
            [
              4,
              12
            ]
          ],
          "preview": "    //@ ensures \\fresh(\\result);"
        }
      ],
      "repository": {
        "name": "github.com/hipsleek/hipsleek",
        "url": "/github.com/hipsleek/hipsleek"
      }
    },
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "b8e044655ec3d3e80172fe3f0a9fa519bf171099"
        },
        "content": "// @(#)$Id: OneWayList_JML_TestData.java,v 1.2 2009-02-17 08:55:21 chinwn Exp $\n\n// Copyright (C) 2004 Iowa State University\n\n// This file is part of JML\n\n// JML is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2, or (at your option)\n// any later version.\n\n// JML is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with JML; see the file COPYING.  If not, write to\n// the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.\n\npackage org.jmlspecs.samples.list.list2;\n\nimport org.jmlspecs.samples.list.node.OneWayNode;\n\n/** Supply test data for the JML and JUnit based testing of \n *  OneWayList.\n *\n *  \u003cp\u003eTest data is supplied by overriding methods in this class.  See\n *  the JML documentation and the comments below about how to do this.\n *\n *  \u003cp\u003eThis class is also the place to override the \u003ckbd\u003esetUp()\u003c/kbd\u003e\n *  and \u003ckbd\u003etearDown()\u003c/kbd\u003e methods if your testing needs some\n *  actions to be taken before and after each test is executed.\n *\n *  \u003cp\u003eThis class is never rewritten by jmlunit.\n *\n */\npublic abstract class OneWayList_JML_TestData\n    extends junit.framework.TestCase\n{\n    /** Initialize this class. */\n    public OneWayList_JML_TestData(java.lang.String name) {\n        super(name);\n    }\n\n    /** Return the overall test suite for accumulating tests; the\n     * result will hold every test that will be run.  This factory\n     * method can be altered to provide filtering of test suites, as\n     * they are added to this overall test suite, based on various\n     * criteria.  The test driver will first call the method\n     * addTestSuite to add a test suite formed from custom programmed\n     * test methods (named testX for some X), which you can add to\n     * this class; this initial test suite will also include a method\n     * to check that the code being tested was compiled with jmlc.\n     * After that, for each method to be tested, a test suite\n     * containing tests for that method will be added to this overall\n     * test suite, using the addTest method.  Test suites added for a\n     * method will have some subtype of TestSuite and that method's\n     * name as their name. So, if you want to control the overall\n     * suite of tests for testing some method, e.g., to limit the\n     * number of tests for each method, return a special-purpose\n     * subclass of junit.framework.TestSuite in which you override the\n     * addTest method.\n     * @see junit.framework.TestSuite\n     */\n    //@ assignable objectState;\n    //@ ensures \\result != null;\n    public junit.framework.TestSuite overallTestSuite() {\n        return new junit.framework.TestSuite(\"Overall tests for OneWayList\");\n    }\n\n    /** Return an empty test suite for accumulating tests for the\n     * named method.  This factory method can be altered to provide\n     * filtering or limiting of the tests for the named method, as\n     * they are added to the test suite for this method.  The driver\n     * will add individual tests using the addTest method.  So, if you\n     * want to filter individual tests, return a subclass of TestSuite\n     * in which you override the addTest method.\n     * @param methodName The method the tests in this suite are for.\n     * @see junit.framework.TestSuite\n     * @see org.jmlspecs.jmlunit.strategies.LimitedTestSuite\n     */\n    //@ assignable objectState;\n    //@ ensures \\result != null;\n    public junit.framework.TestSuite emptyTestSuiteFor\n        (java.lang.String methodName)\n    {\n        return new junit.framework.TestSuite(methodName);\n    }\n\n    // You should edit the following code to supply test data.  In the\n    // skeleton originally supplied below the jmlunit tool made a\n    // guess as to a minimal strategy for generating test data for\n    // each type of object used as a receiver, and each type used as\n    // an argument.  There is a library of strategies for generating\n    // test data in org.jmlspecs.jmlunit.strategies, which are used in\n    // the tool's guesses.  See the documentation for JML and in\n    // particular for the org.jmlspecs.jmlunit.strategies package for\n    // a general discussion of how to do this.  (This package's\n    // documentation is available through the JML.html file in the top\n    // of the JML release, and also in the package.html file that\n    // ships with the package.)\n    //\n    // You can change the strategies guessed by the jmlunit tool, and\n    // you can also define new ones to suit your needs.  You can also\n    // delete any useless sample test data that has been generated\n    // for you to show you the pattern of how to add your own test\n    // data.  The only requirement is that you implement the methods\n    // below.\n    //\n    // If you change the type being tested in a way that introduces\n    // new types of arguments for some methods, then you will have to\n    // introduce (by hand) definitions that are similar to the ones\n    // below, because jmlunit never rewrites this file.\n\n    /** Return a new, freshly allocated indefinite iterator that\n     * produces test data of type \n     * org.jmlspecs.samples.list.list2.OneWayList\n     * for testing the method named by the String methodName in\n     * a loop that encloses loopsThisSurrounds many other loops.\n     * @param methodName name of the method for which this\n     *                      test data will be used.\n     * @param loopsThisSurrounds number of loops that the test\n     *                           contains inside this one.\n     */\n    //@ requires methodName != null \u0026\u0026 loopsThisSurrounds \u003e= 0;\n    //@ ensures \\fresh(\\result);\n    protected org.jmlspecs.jmlunit.strategies.IndefiniteIterator\n        vorg_jmlspecs_samples_list_list2_OneWayListIter\n        (java.lang.String methodName, int loopsThisSurrounds)\n    {\n        return vorg_jmlspecs_samples_list_list2_OneWayListStrategy.iterator();\n    }\n\n    /** The strategy for generating test data of type\n     * org.jmlspecs.samples.list.list2.OneWayList. */\n    private org.jmlspecs.jmlunit.strategies.StrategyType\n        vorg_jmlspecs_samples_list_list2_OneWayListStrategy\n        = new org.jmlspecs.jmlunit.strategies.CloneableObjectAbstractStrategy()\n            {\n                protected java.lang.Object[] addData() {\n                    org.jmlspecs.samples.list.list2.OneWayList[] receivers\n                        = new OneWayList[] { \n                            new OneWayList(),\n                            new OneWayList(),\n                            new OneWayList(),\n                            new OneWayList(),\n                            new OneWayList(),\n                            new OneWayList(),\n                            new OneWayList(),\n                            new OneWayList(),\n                        };\n                    receivers[1].insertBeforeCursor(\"it\");\n                    receivers[1].firstEntry();\n                    receivers[2].insertBeforeCursor(\"first\");\n                    receivers[2].firstEntry();\n                    receivers[2].insertAfterCursor(\"second\");\n                    receivers[2].incrementCursor();\n                    receivers[2].incrementCursor();\n                    receivers[3].insertBeforeCursor(\"first\");\n                    receivers[3].insertBeforeCursor(\"second\");\n                    receivers[3].insertBeforeCursor(\"third\");\n                    receivers[3].insertBeforeCursor(\"fourth\");\n                    receivers[3].firstEntry();\n                    receivers[3].incrementCursor();\n                    receivers[3].incrementCursor();\n                    receivers[4].insertBeforeCursor(new int[1]);\n                    receivers[4].insertBeforeCursor(new int[2]);\n                    receivers[4].insertBeforeCursor(new int[3]);\n                    receivers[4].insertBeforeCursor(new int[4]);\n                    receivers[4].firstEntry();\n                    receivers[5].insertBeforeCursor(\"it1\");\n                    receivers[6].insertBeforeCursor(\"it2\");\n\n                    return receivers;\n                }\n\n                //@ also\n                //@ requires o$ != null;\n                protected Object cloneElement(java.lang.Object o$) {\n                    org.jmlspecs.samples.list.list2.OneWayList down$\n                        = (org.jmlspecs.samples.list.list2.OneWayList) o$;\n                    return down$.clone();\n                }\n            };\n\n    /** Return a new, freshly allocated indefinite iterator that\n     * produces test data of type \n     * java.lang.Object\n     * for testing the method named by the String methodName in\n     * a loop that encloses loopsThisSurrounds many other loops.\n     * @param methodName name of the method for which this\n     *                      test data will be used.\n     * @param loopsThisSurrounds number of loops that the test\n     *                           contains inside this one.\n     */\n    //@ requires methodName != null \u0026\u0026 loopsThisSurrounds \u003e= 0;\n    //@ ensures \\fresh(\\result);\n    protected org.jmlspecs.jmlunit.strategies.IndefiniteIterator\n        vjava_lang_ObjectIter\n        (java.lang.String methodName, int loopsThisSurrounds)\n    {\n        return vjava_lang_ObjectStrategy.iterator();\n    }\n\n    /** The strategy for generating test data of type\n     * java.lang.Object. */\n    private org.jmlspecs.jmlunit.strategies.StrategyType\n        vjava_lang_ObjectStrategy\n        = new org.jmlspecs.jmlunit.strategies.CompositeStrategy\n        (new org.jmlspecs.jmlunit.strategies.StrategyType[] {\n            new org.jmlspecs.jmlunit.strategies.ObjectStrategy(),\n            vorg_jmlspecs_samples_list_list2_OneWayListStrategy,\n        });\n\n}\n",
        "name": "OneWayList_JML_TestData.java",
        "path": "examples/jml/www.eecs.ucf.edu/~leavens/JML-release/org/jmlspecs/samples/list/list2/OneWayList_JML_TestData.java",
        "url": "/github.com/hipsleek/hipsleek/-/blob/examples/jml/www.eecs.ucf.edu/~leavens/JML-release/org/jmlspecs/samples/list/list2/OneWayList_JML_TestData.java"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 66,
          "offsetAndLengths": [
            [
              4,
              12
            ]
          ],
          "preview": "    //@ ensures \\result != null;"
        },
        {
          "limitHit": false,
          "lineNumber": 83,
          "offsetAndLengths": [
            [
              4,
              12
            ]
          ],
          "preview": "    //@ ensures \\result != null;"
        },
        {
          "limitHit": false,
          "lineNumber": 125,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires methodName != null \u0026\u0026 loopsThisSurrounds \u003e= 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 126,
          "offsetAndLengths": [
            [
              4,
              12
            ]
          ],
          "preview": "    //@ ensures \\fresh(\\result);"
        },
        {
          "limitHit": false,
          "lineNumber": 178,
          "offsetAndLengths": [
            [
              16,
              13
            ]
          ],
          "preview": "                //@ requires o$ != null;"
        },
        {
          "limitHit": false,
          "lineNumber": 196,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires methodName != null \u0026\u0026 loopsThisSurrounds \u003e= 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 197,
          "offsetAndLengths": [
            [
              4,
              12
            ]
          ],
          "preview": "    //@ ensures \\fresh(\\result);"
        }
      ],
      "repository": {
        "name": "github.com/hipsleek/hipsleek",
        "url": "/github.com/hipsleek/hipsleek"
      }
    },
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "b8e044655ec3d3e80172fe3f0a9fa519bf171099"
        },
        "content": "// @(#)$Id: E_OneWayList_JML_TestData.java,v 1.2 2009-02-17 08:55:21 chinwn Exp $\n\n// Copyright (C) 2004 Iowa State University\n\n// This file is part of JML\n\n// JML is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2, or (at your option)\n// any later version.\n\n// JML is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with JML; see the file COPYING.  If not, write to\n// the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.\n\npackage org.jmlspecs.samples.list.list2;\n\nimport org.jmlspecs.samples.list.node.OneWayNode;\n\n/** Supply test data for the JML and JUnit based testing of \n *  E_OneWayList.\n *\n *  \u003cp\u003eTest data is supplied by overriding methods in this class.  See\n *  the JML documentation and the comments below about how to do this.\n *\n *  \u003cp\u003eThis class is also the place to override the \u003ckbd\u003esetUp()\u003c/kbd\u003e\n *  and \u003ckbd\u003etearDown()\u003c/kbd\u003e methods if your testing needs some\n *  actions to be taken before and after each test is executed.\n *\n *  \u003cp\u003eThis class is never rewritten by jmlunit.\n *\n */\npublic abstract class E_OneWayList_JML_TestData\n    extends junit.framework.TestCase\n{\n    /** Initialize this class. */\n    public E_OneWayList_JML_TestData(java.lang.String name) {\n        super(name);\n    }\n\n    /** Return the overall test suite for accumulating tests; the\n     * result will hold every test that will be run.  This factory\n     * method can be altered to provide filtering of test suites, as\n     * they are added to this overall test suite, based on various\n     * criteria.  The test driver will first call the method\n     * addTestSuite to add a test suite formed from custom programmed\n     * test methods (named testX for some X), which you can add to\n     * this class; this initial test suite will also include a method\n     * to check that the code being tested was compiled with jmlc.\n     * After that, for each method to be tested, a test suite\n     * containing tests for that method will be added to this overall\n     * test suite, using the addTest method.  Test suites added for a\n     * method will have some subtype of TestSuite and that method's\n     * name as their name. So, if you want to control the overall\n     * suite of tests for testing some method, e.g., to limit the\n     * number of tests for each method, return a special-purpose\n     * subclass of junit.framework.TestSuite in which you override the\n     * addTest method.\n     * @see junit.framework.TestSuite\n     */\n    //@ assignable objectState;\n    //@ ensures \\result != null;\n    public junit.framework.TestSuite overallTestSuite() {\n        return new junit.framework.TestSuite(\"Overall tests for E_OneWayList\");\n    }\n\n    /** Return an empty test suite for accumulating tests for the\n     * named method.  This factory method can be altered to provide\n     * filtering or limiting of the tests for the named method, as\n     * they are added to the test suite for this method.  The driver\n     * will add individual tests using the addTest method.  So, if you\n     * want to filter individual tests, return a subclass of TestSuite\n     * in which you override the addTest method.\n     * @param methodName The method the tests in this suite are for.\n     * @see junit.framework.TestSuite\n     * @see org.jmlspecs.jmlunit.strategies.LimitedTestSuite\n     */\n    //@ assignable objectState;\n    //@ ensures \\result != null;\n    public junit.framework.TestSuite emptyTestSuiteFor\n        (java.lang.String methodName)\n    {\n        return new junit.framework.TestSuite(methodName);\n    }\n\n    // You should edit the following code to supply test data.  In the\n    // skeleton originally supplied below the jmlunit tool made a\n    // guess as to a minimal strategy for generating test data for\n    // each type of object used as a receiver, and each type used as\n    // an argument.  There is a library of strategies for generating\n    // test data in org.jmlspecs.jmlunit.strategies, which are used in\n    // the tool's guesses.  See the documentation for JML and in\n    // particular for the org.jmlspecs.jmlunit.strategies package for\n    // a general discussion of how to do this.  (This package's\n    // documentation is available through the JML.html file in the top\n    // of the JML release, and also in the package.html file that\n    // ships with the package.)\n    //\n    // You can change the strategies guessed by the jmlunit tool, and\n    // you can also define new ones to suit your needs.  You can also\n    // delete any useless sample test data that has been generated\n    // for you to show you the pattern of how to add your own test\n    // data.  The only requirement is that you implement the methods\n    // below.\n    //\n    // If you change the type being tested in a way that introduces\n    // new types of arguments for some methods, then you will have to\n    // introduce (by hand) definitions that are similar to the ones\n    // below, because jmlunit never rewrites this file.\n\n    String first = \"first\";\n    String second = \"second\";\n    String third = \"third\";\n    String fourth = \"fourth\";\n\n    /** Return a new, freshly allocated indefinite iterator that\n     * produces test data of type \n     * java.lang.Object\n     * for testing the method named by the String methodName in\n     * a loop that encloses loopsThisSurrounds many other loops.\n     * @param methodName name of the method for which this\n     *                      test data will be used.\n     * @param loopsThisSurrounds number of loops that the test\n     *                           contains inside this one.\n     */\n    //@ requires methodName != null \u0026\u0026 loopsThisSurrounds \u003e= 0;\n    //@ ensures \\fresh(\\result);\n    protected org.jmlspecs.jmlunit.strategies.IndefiniteIterator\n        vjava_lang_ObjectIter\n        (java.lang.String methodName, int loopsThisSurrounds)\n    {\n        return vjava_lang_ObjectStrategy.iterator();\n    }\n\n    /** The strategy for generating test data of type\n     * java.lang.Object. */\n    private org.jmlspecs.jmlunit.strategies.StrategyType\n        vjava_lang_ObjectStrategy\n        = new org.jmlspecs.jmlunit.strategies.ObjectStrategy()\n            {\n                protected Object make(int n) {\n                    switch (n) {\n                    case 0:\n                        E_OneWayList lst0 = new E_OneWayList();\n                        lst0.insertBeforeCursor(first);\n                        lst0.insertBeforeCursor(second);\n                        lst0.insertBeforeCursor(third);\n                        lst0.insertBeforeCursor(fourth);\n                        return lst0;\n                    case 1:\n                        OneWayList lst1 = new OneWayList();\n                        lst1.insertBeforeCursor(first);\n                        lst1.insertBeforeCursor(second);\n                        lst1.insertBeforeCursor(third);\n                        lst1.insertBeforeCursor(fourth);\n                        return lst1;\n                    case 2:\n                        return \"it\";\n                    case 3:\n                        return \"first\";\n                    case 4:\n                        return \"second\";\n                    case 5:\n                        return \"third\";\n                    case 6:\n                        return \"fourth\";\n                    default:\n                        break;\n                    }\n                    throw new java.util.NoSuchElementException();\n                }\n            };\n\n    /** Return a new, freshly allocated indefinite iterator that\n     * produces test data of type \n     * org.jmlspecs.samples.list.list2.E_OneWayList\n     * for testing the method named by the String methodName in\n     * a loop that encloses loopsThisSurrounds many other loops.\n     * @param methodName name of the method for which this\n     *                      test data will be used.\n     * @param loopsThisSurrounds number of loops that the test\n     *                           contains inside this one.\n     */\n    //@ requires methodName != null \u0026\u0026 loopsThisSurrounds \u003e= 0;\n    //@ ensures \\fresh(\\result);\n    protected org.jmlspecs.jmlunit.strategies.IndefiniteIterator\n        vorg_jmlspecs_samples_list_list2_E_OneWayListIter\n        (java.lang.String methodName, int loopsThisSurrounds)\n    {\n        return vorg_jmlspecs_samples_list_list2_E_OneWayListStrategy.iterator();\n    }\n\n    /** The strategy for generating test data of type\n     * org.jmlspecs.samples.list.list2.E_OneWayList. */\n    private org.jmlspecs.jmlunit.strategies.StrategyType\n        vorg_jmlspecs_samples_list_list2_E_OneWayListStrategy\n        = new org.jmlspecs.jmlunit.strategies.CloneableObjectAbstractStrategy()\n            {\n                protected java.lang.Object[] addData() {\n                    org.jmlspecs.samples.list.list2.E_OneWayList[] receivers\n                        = new E_OneWayList[] { \n                            new E_OneWayList(),\n                            new E_OneWayList(),\n                            new E_OneWayList(),\n                            new E_OneWayList(),\n                            new E_OneWayList(),\n                            new E_OneWayList(),\n                            new E_OneWayList(),\n                            new E_OneWayList(),\n                            null,\n                        };\n                    receivers[1].insertBeforeCursor(\"it\");\n                    receivers[1].firstEntry();\n                    receivers[2].insertBeforeCursor(first);\n                    receivers[2].firstEntry();\n                    receivers[2].insertAfterCursor(second);\n                    receivers[2].incrementCursor();\n                    receivers[2].incrementCursor();\n                    receivers[3].insertBeforeCursor(first);\n                    receivers[3].insertBeforeCursor(second);\n                    receivers[3].insertBeforeCursor(third);\n                    receivers[3].insertBeforeCursor(fourth);\n                    receivers[3].firstEntry();\n                    receivers[3].incrementCursor();\n                    receivers[3].incrementCursor();\n                    receivers[4].insertBeforeCursor(new int[1]);\n                    receivers[4].insertBeforeCursor(new int[2]);\n                    receivers[4].insertBeforeCursor(new int[3]);\n                    receivers[4].insertBeforeCursor(new int[4]);\n                    receivers[4].firstEntry();\n                    receivers[5].insertBeforeCursor(\"it\");\n                    receivers[6].insertBeforeCursor(\"it\");\n                    receivers[7].insertBeforeCursor(first);\n                    receivers[7].insertBeforeCursor(second);\n                    receivers[7].insertBeforeCursor(third);\n                    receivers[7].insertBeforeCursor(fourth);\n                    receivers[7] = new E_OneWayList(receivers[7]);\n\n                    return receivers;\n                }\n\n                //@ also\n                //@ requires o$ != null;\n                protected Object cloneElement(java.lang.Object o$) {\n                    org.jmlspecs.samples.list.list2.E_OneWayList down$\n                        = (org.jmlspecs.samples.list.list2.E_OneWayList) o$;\n                    return down$.clone();\n                }\n            };\n}\n",
        "name": "E_OneWayList_JML_TestData.java",
        "path": "examples/jml/www.eecs.ucf.edu/~leavens/JML-release/org/jmlspecs/samples/list/list2/E_OneWayList_JML_TestData.java",
        "url": "/github.com/hipsleek/hipsleek/-/blob/examples/jml/www.eecs.ucf.edu/~leavens/JML-release/org/jmlspecs/samples/list/list2/E_OneWayList_JML_TestData.java"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 66,
          "offsetAndLengths": [
            [
              4,
              12
            ]
          ],
          "preview": "    //@ ensures \\result != null;"
        },
        {
          "limitHit": false,
          "lineNumber": 83,
          "offsetAndLengths": [
            [
              4,
              12
            ]
          ],
          "preview": "    //@ ensures \\result != null;"
        },
        {
          "limitHit": false,
          "lineNumber": 130,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires methodName != null \u0026\u0026 loopsThisSurrounds \u003e= 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 131,
          "offsetAndLengths": [
            [
              4,
              12
            ]
          ],
          "preview": "    //@ ensures \\fresh(\\result);"
        },
        {
          "limitHit": false,
          "lineNumber": 188,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires methodName != null \u0026\u0026 loopsThisSurrounds \u003e= 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 189,
          "offsetAndLengths": [
            [
              4,
              12
            ]
          ],
          "preview": "    //@ ensures \\fresh(\\result);"
        },
        {
          "limitHit": false,
          "lineNumber": 247,
          "offsetAndLengths": [
            [
              16,
              13
            ]
          ],
          "preview": "                //@ requires o$ != null;"
        }
      ],
      "repository": {
        "name": "github.com/hipsleek/hipsleek",
        "url": "/github.com/hipsleek/hipsleek"
      }
    },
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "b8e044655ec3d3e80172fe3f0a9fa519bf171099"
        },
        "content": "// @(#)$Id: TwoWayIterator_JML_TestData.java,v 1.2 2009-02-17 08:55:21 chinwn Exp $\n\n// Copyright (C) 2004 Iowa State University\n\n// This file is part of JML\n\n// JML is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation; either version 2, or (at your option)\n// any later version.\n\n// JML is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with JML; see the file COPYING.  If not, write to\n// the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.\n\npackage org.jmlspecs.samples.list.list2;\n\nimport org.jmlspecs.models.JMLObjectSequence;\nimport org.jmlspecs.samples.list.node.TwoWayNode;\nimport org.jmlspecs.samples.list.iterator.RestartableIterator;\n\n/** Supply test data for the JML and JUnit based testing of \n *  TwoWayIterator.\n *\n *  \u003cp\u003eTest data is supplied by overriding methods in this class.  See\n *  the JML documentation and the comments below about how to do this.\n *\n *  \u003cp\u003eThis class is also the place to override the \u003ckbd\u003esetUp()\u003c/kbd\u003e\n *  and \u003ckbd\u003etearDown()\u003c/kbd\u003e methods if your testing needs some\n *  actions to be taken before and after each test is executed.\n *\n *  \u003cp\u003eThis class is never rewritten by jmlunit.\n *\n */\n// FIXME: adapt this file to non-null-by-default and remove the following modifier.\n/*@ nullable_by_default @*/ \npublic abstract class TwoWayIterator_JML_TestData\n    extends junit.framework.TestCase\n{\n    /** Initialize this class. */\n    public TwoWayIterator_JML_TestData(java.lang.String name) {\n        super(name);\n    }\n\n    /** Return the overall test suite for accumulating tests; the\n     * result will hold every test that will be run.  This factory\n     * method can be altered to provide filtering of test suites, as\n     * they are added to this overall test suite, based on various\n     * criteria.  The test driver will first call the method\n     * addTestSuite to add a test suite formed from custom programmed\n     * test methods (named testX for some X), which you can add to\n     * this class; this initial test suite will also include a method\n     * to check that the code being tested was compiled with jmlc.\n     * After that, for each method to be tested, a test suite\n     * containing tests for that method will be added to this overall\n     * test suite, using the addTest method.  Test suites added for a\n     * method will have some subtype of TestSuite and that method's\n     * name as their name. So, if you want to control the overall\n     * suite of tests for testing some method, e.g., to limit the\n     * number of tests for each method, return a special-purpose\n     * subclass of junit.framework.TestSuite in which you override the\n     * addTest method.\n     * @see junit.framework.TestSuite\n     */\n    //@ assignable objectState;\n    //@ ensures \\result != null;\n    public junit.framework.TestSuite overallTestSuite() {\n        return new junit.framework.TestSuite(\"Overall tests for TwoWayIterator\");\n    }\n\n    /** Return an empty test suite for accumulating tests for the\n     * named method.  This factory method can be altered to provide\n     * filtering or limiting of the tests for the named method, as\n     * they are added to the test suite for this method.  The driver\n     * will add individual tests using the addTest method.  So, if you\n     * want to filter individual tests, return a subclass of TestSuite\n     * in which you override the addTest method.\n     * @param methodName The method the tests in this suite are for.\n     * @see junit.framework.TestSuite\n     * @see org.jmlspecs.jmlunit.strategies.LimitedTestSuite\n     */\n    //@ assignable objectState;\n    //@ ensures \\result != null;\n    public junit.framework.TestSuite emptyTestSuiteFor\n        (java.lang.String methodName)\n    {\n        return new junit.framework.TestSuite(methodName);\n    }\n\n    // You should edit the following code to supply test data.  In the\n    // skeleton originally supplied below the jmlunit tool made a\n    // guess as to a minimal strategy for generating test data for\n    // each type of object used as a receiver, and each type used as\n    // an argument.  There is a library of strategies for generating\n    // test data in org.jmlspecs.jmlunit.strategies, which are used in\n    // the tool's guesses.  See the documentation for JML and in\n    // particular for the org.jmlspecs.jmlunit.strategies package for\n    // a general discussion of how to do this.  (This package's\n    // documentation is available through the JML.html file in the top\n    // of the JML release, and also in the package.html file that\n    // ships with the package.)\n    //\n    // You can change the strategies guessed by the jmlunit tool, and\n    // you can also define new ones to suit your needs.  You can also\n    // delete any useless sample test data that has been generated\n    // for you to show you the pattern of how to add your own test\n    // data.  The only requirement is that you implement the methods\n    // below.\n    //\n    // If you change the type being tested in a way that introduces\n    // new types of arguments for some methods, then you will have to\n    // introduce (by hand) definitions that are similar to the ones\n    // below, because jmlunit never rewrites this file.\n\n\tTwoWayList[] list \n            = new TwoWayList[] {\n                new TwoWayList(),\n                new TwoWayList(),\n                new TwoWayList(),\n                new TwoWayList(),\n                new TwoWayList(),\n                new TwoWayList(),\n                new TwoWayList(),\n                new TwoWayList(),\n                new TwoWayList(),\n            };\n\n    {\n        list[1].insertBeforeCursor(\"it-r1\");\n        list[1].firstEntry();\n        list[2].insertBeforeCursor(\"first2\");\n        list[2].firstEntry();\n        list[2].insertAfterCursor(\"second2\");\n        list[2].append(\"third2\");\n        list[3].append(\"first3\");\n        list[3].append(\"second3\");\n        list[3].append(\"third3\");\n        list[3].append(\"fourth3\");\n        list[4].insertBeforeCursor(new int[1]);\n        list[4].insertBeforeCursor(new int[2]);\n        list[4].insertBeforeCursor(new int[3]);\n        list[4].insertBeforeCursor(new int[4]);\n        list[4].firstEntry();\n        list[5].insertBeforeCursor(\"it-r5\");\n        list[5].decrementCursor();\n        list[5].decrementCursor();\n        list[6].insertBeforeCursor(\"it-r6\");\n        list[7].insertAfterCursor(\"L7\");\n    }\n\n    /** Return a new, freshly allocated indefinite iterator that\n     * produces test data of type \n     * org.jmlspecs.samples.list.list2.TwoWayIterator\n     * for testing the method named by the String methodName in\n     * a loop that encloses loopsThisSurrounds many other loops.\n     * @param methodName name of the method for which this\n     *                      test data will be used.\n     * @param loopsThisSurrounds number of loops that the test\n     *                           contains inside this one.\n     */\n    //@ requires methodName != null \u0026\u0026 loopsThisSurrounds \u003e= 0;\n    //@ ensures \\fresh(\\result);\n    protected org.jmlspecs.jmlunit.strategies.IndefiniteIterator\n        vorg_jmlspecs_samples_list_list2_TwoWayIteratorIter\n        (java.lang.String methodName, int loopsThisSurrounds)\n    {\n        return vorg_jmlspecs_samples_list_list2_TwoWayIteratorStrategy.iterator();\n    }\n\n    /** The strategy for generating test data of type\n     * org.jmlspecs.samples.list.list2.TwoWayIterator. */\n    private org.jmlspecs.jmlunit.strategies.StrategyType\n        vorg_jmlspecs_samples_list_list2_TwoWayIteratorStrategy\n        = new org.jmlspecs.jmlunit.strategies.NewObjectAbstractStrategy()\n            {\n                protected Object make(int i) {\n                    if (i \u003c= 8) {\n                        return list[i].createIterator();\n                    } else {\n                        switch (i) {\n                        case 9:\n\t\t\t    TwoWayList list9 = (TwoWayList) list[0].clone();\n                            TwoWayIterator iter9 = list9.createIterator();\n                            return iter9;\n                        case 10:\n\t\t\t    TwoWayList list10 = (TwoWayList) list[2].clone();\n                            TwoWayIterator iter10 = list10.createIterator();\n                            iter10.last();\n                            iter10.next();\n                            return iter10;\n                        case 11:\n\t\t\t    TwoWayList list11 = (TwoWayList) list[3].clone();\n                            TwoWayIterator iter11 = list11.createIterator();\n                            iter11.last();\n                            return iter11;\n                        case 12:\n                            return null;\n                        default:\n                            break;\n                        }\n                        throw new java.util.NoSuchElementException();\n                    }\n                }\n            };\n\n    /** Return a new, freshly allocated indefinite iterator that\n     * produces test data of type \n     * org.jmlspecs.samples.list.node.TwoWayNode\n     * for testing the method named by the String methodName in\n     * a loop that encloses loopsThisSurrounds many other loops.\n     * @param methodName name of the method for which this\n     *                      test data will be used.\n     * @param loopsThisSurrounds number of loops that the test\n     *                           contains inside this one.\n     */\n    //@ requires methodName != null \u0026\u0026 loopsThisSurrounds \u003e= 0;\n    //@ ensures \\fresh(\\result);\n    protected org.jmlspecs.jmlunit.strategies.IndefiniteIterator\n        vorg_jmlspecs_samples_list_node_TwoWayNodeIter\n        (java.lang.String methodName, int loopsThisSurrounds)\n    {\n        return vorg_jmlspecs_samples_list_node_TwoWayNodeStrategy.iterator();\n    }\n\n    /** The strategy for generating test data of type\n     * org.jmlspecs.samples.list.node.TwoWayNode. */\n    private org.jmlspecs.jmlunit.strategies.StrategyType\n        vorg_jmlspecs_samples_list_node_TwoWayNodeStrategy\n        = new org.jmlspecs.jmlunit.strategies.NewObjectAbstractStrategy()\n            {\n                protected Object make(int n) {\n                    switch (n) {\n                    case 0:\n                        return null;\n                    case 1:\n                        return new TwoWayNode();\n                    case 2:\n                        TwoWayNode node0 = new TwoWayNode(null);\n                        return node0;\n                    case 3:\n                        TwoWayNode node1 = new TwoWayNode(null);\n                        node1.insertAfter(new TwoWayNode(\"it-n1\"));\n                        return node1;\n                    case 4:\n                        TwoWayNode node2 = new TwoWayNode(null);\n                        node2.insertAfter(\"fourth-n2\");\n                        node2.insertAfter(\"third-n2\");\n                        node2.insertAfter(\"second-n2\");\n                        node2.insertAfter(\"first-n2\");\n                        return node2;\n                    case 5:\n                        TwoWayNode node3 = new TwoWayNode(null);\n                        node3.insertAfter(\"first-n3\");\n                        node3.insertAfter(\"second-n3\");\n                        return node3;\n                    case 6:\n                        TwoWayNode node4 = new TwoWayNode(null);\n                        node4.insertAfter(\"sixth-n4\");\n                        node4.insertAfter(\"fifth-n4\");\n                        return node4;\n                    case 7:\n                        TwoWayNode node5 = new TwoWayNode(null);\n                        node5.insertAfter(\"eighth-n5\");\n                        node5.insertAfter(\"seventh-n5\");\n                        return node5;\n                    case 8:\n                        TwoWayNode node8 = new TwoWayNode(null);\n                        node8.insertAfter(\"tenth-n8\");\n                        node8.insertAfter(\"ninth-n8\");\n                        return node8;\n                    case 9:\n                        TwoWayNode node7 = new TwoWayNode(null);\n                        node7.insertAfter(\"9\");\n                        node7.insertAfter(\"8\");\n                        node7.insertAfter(\"7\");\n                        node7.insertAfter(\"6\");\n                        node7.insertAfter(\"5\");\n                        node7.insertAfter(\"4\");\n                        node7.insertAfter(\"3\");\n                        node7.insertAfter(\"2\");\n                        node7.insertAfter(\"1\");\n                        return node7;\n                    default:\n                        break;\n                    }\n                    throw new java.util.NoSuchElementException();\n                }\n            };\n}\n",
        "name": "TwoWayIterator_JML_TestData.java",
        "path": "examples/jml/www.eecs.ucf.edu/~leavens/JML-release/org/jmlspecs/samples/list/list2/TwoWayIterator_JML_TestData.java",
        "url": "/github.com/hipsleek/hipsleek/-/blob/examples/jml/www.eecs.ucf.edu/~leavens/JML-release/org/jmlspecs/samples/list/list2/TwoWayIterator_JML_TestData.java"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 70,
          "offsetAndLengths": [
            [
              4,
              12
            ]
          ],
          "preview": "    //@ ensures \\result != null;"
        },
        {
          "limitHit": false,
          "lineNumber": 87,
          "offsetAndLengths": [
            [
              4,
              12
            ]
          ],
          "preview": "    //@ ensures \\result != null;"
        },
        {
          "limitHit": false,
          "lineNumber": 165,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires methodName != null \u0026\u0026 loopsThisSurrounds \u003e= 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 166,
          "offsetAndLengths": [
            [
              4,
              12
            ]
          ],
          "preview": "    //@ ensures \\fresh(\\result);"
        },
        {
          "limitHit": false,
          "lineNumber": 220,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires methodName != null \u0026\u0026 loopsThisSurrounds \u003e= 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 221,
          "offsetAndLengths": [
            [
              4,
              12
            ]
          ],
          "preview": "    //@ ensures \\fresh(\\result);"
        }
      ],
      "repository": {
        "name": "github.com/hipsleek/hipsleek",
        "url": "/github.com/hipsleek/hipsleek"
      }
    }
  ],
  "LimitHit": false,
  "Cloning": [],
  "Missing": [],
  "Timedout": [],
  "ResultCount": 39,
  "ElapsedMilliseconds": 75,
  "Alert": {
    "Title": "",
    "Description": "",
    "ProposedQueries": null
  }
}
