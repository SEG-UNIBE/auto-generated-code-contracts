{
  "SourcegraphEndpoint": "https://sourcegraph.com",
  "Query": "(//@ requires )|(//@ ensures ) repo:github.com/bdqnghi/bi-tbcnn lang:java count:all case:yes type:file patterntype:regexp",
  "Site": {
    "BuildVersion": "238702_2023-08-16_5.1-acf4bcc841e5"
  },
  "Results": [
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "309f5f16c3211f922fa04eed32fa7d6c58978faf"
        },
        "content": "public class Quicksort {\n\n    // Write formal pre- and post-conditions for this method.\n\t/*@ requires a != null; \n      @ requires ulimit == (\\max int i; i \u003e= 0 \u0026\u0026 i \u003c a.length; a[i]);\n      @ requires llimit == (\\min int i; i \u003e= 0 \u0026\u0026 i \u003c a.length; a[i]);\n\t  @ modifies a[*];\n\t  @ ensures a.length == \\old(a.length);\n\t  @ ensures (\\forall int i; (i \u003e 0 \u0026\u0026 i \u003c a.length) ==\u003e a[i-1] \u003c= a[i]);\n\t  @*/\n    public static void sort(int[] a, int ulimit, int llimit)\n    {\n        quicksort(a, 0, a.length, ulimit, llimit);\n    }\n\n    // Write pre-conditions for this method.\n    //@ requires a != null;\n    //@ requires start \u003e= 0;\n    //@ requires stop \u003c= a.length;\n    //@ modifies a[*];\n    // Write post-conditions for this method.\n\t//@ ensures a != null;\n    //@ ensures start \u003e= 0 \u0026\u0026 stop \u003c= a.length;\n    private static void quicksort(int[] a, int start, int stop, int ulimit, int llimit)\n    {\n        if (stop - start \u003e 1) {\n            int p = pivot(a, start, stop, ulimit, llimit);\n            quicksort(a, start, p, a[p], llimit);\n            quicksort(a, p+1, stop, ulimit, a[p]);\n        }\n    }\n\n    // Write pre-conditions for this method.\n    //@ requires a != null;\n    //@ requires start \u003c stop;\n    //@ requires start \u003e= 0;\n    //@ requires stop \u003c= a.length;\n    //@ modifies a[*];\n    // Write post-conditions for this method.\n    //@ ensures \\result \u003e= 0 \u0026\u0026 \\result \u003c a.length;\n    private static int pivot(int[] a, int start, int stop, int ulimit, int llimit)\n    {\n        int p = partition(a, a[start], start+1, stop, ulimit, llimit);\n        if (start \u003c p)\n            swap(a, start, p);\n        return p;\n    }\n\n    // Write pre-conditions for this method.\n    //@ requires a != null;\n    //@ requires start \u003e= 0 \u0026\u0026 start \u003c= a.length;\n    //@ requires stop \u003e= 0 \u0026\u0026 stop \u003c= a.length;\n    //@ modifies a[*];\n    // Write post-conditions for this method.\n    //@ ensures (\\result \u003e= 0 \u0026\u0026 \\result \u003c a.length) || \\result == start -1;\n    private static int partition(int[] a, int pivot, int start, int stop, int ulimit, int llimit)\n    {\n        if (start \u003e= stop) \n            return start - 1;\n        if (a[start] \u003c pivot)\n            return partition(a, pivot, start + 1, stop, ulimit, llimit);\n        if (a[--stop] \u003e pivot)\n            return partition(a, pivot, start, stop, ulimit, llimit);\n        if (start \u003c stop) {\n            swap(a, start, stop);\n            return partition(a, pivot, start+1, stop, ulimit, llimit);\n        } else\n            return start;\n    }\n\n    /*@ requires a != null;\n      @ requires 0 \u003c= i \u0026\u0026 i \u003c a.length;\n      @ requires 0 \u003c= j \u0026\u0026 j \u003c a.length;\n      @ modifies a[i], a[j];\n      @ ensures a[i] == \\old(a[j]) \u0026\u0026 a[j] == \\old(a[i]);\n      @*/\n    public static void swap(int[] a, int i, int j)\n    {\n        int temp = a[i];\n        a[i] = a[j];\n        a[j] = temp;\n    }\n}\n",
        "name": "1917.java",
        "path": "code/quicksort/java/1917.java",
        "url": "/github.com/bdqnghi/bi-tbcnn/-/blob/code/quicksort/java/1917.java"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 16,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires a != null;"
        },
        {
          "limitHit": false,
          "lineNumber": 17,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires start \u003e= 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 18,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires stop \u003c= a.length;"
        },
        {
          "limitHit": false,
          "lineNumber": 22,
          "offsetAndLengths": [
            [
              4,
              12
            ]
          ],
          "preview": "    //@ ensures start \u003e= 0 \u0026\u0026 stop \u003c= a.length;"
        },
        {
          "limitHit": false,
          "lineNumber": 33,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires a != null;"
        },
        {
          "limitHit": false,
          "lineNumber": 34,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires start \u003c stop;"
        },
        {
          "limitHit": false,
          "lineNumber": 35,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires start \u003e= 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 36,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires stop \u003c= a.length;"
        },
        {
          "limitHit": false,
          "lineNumber": 39,
          "offsetAndLengths": [
            [
              4,
              12
            ]
          ],
          "preview": "    //@ ensures \\result \u003e= 0 \u0026\u0026 \\result \u003c a.length;"
        },
        {
          "limitHit": false,
          "lineNumber": 49,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires a != null;"
        },
        {
          "limitHit": false,
          "lineNumber": 50,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires start \u003e= 0 \u0026\u0026 start \u003c= a.length;"
        },
        {
          "limitHit": false,
          "lineNumber": 51,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires stop \u003e= 0 \u0026\u0026 stop \u003c= a.length;"
        },
        {
          "limitHit": false,
          "lineNumber": 54,
          "offsetAndLengths": [
            [
              4,
              12
            ]
          ],
          "preview": "    //@ ensures (\\result \u003e= 0 \u0026\u0026 \\result \u003c a.length) || \\result == start -1;"
        },
        {
          "limitHit": false,
          "lineNumber": 21,
          "offsetAndLengths": [
            [
              1,
              12
            ]
          ],
          "preview": "\t//@ ensures a != null;"
        }
      ],
      "repository": {
        "name": "github.com/bdqnghi/bi-tbcnn",
        "url": "/github.com/bdqnghi/bi-tbcnn"
      }
    },
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "309f5f16c3211f922fa04eed32fa7d6c58978faf"
        },
        "content": "public class Quicksort {\n\n    // Write formal pre- and post-conditions for this method.\n\t/*@ requires a != null; \n      @ requires ulimit == (\\max int i; i \u003e= 0 \u0026\u0026 i \u003c a.length; a[i]);\n      @ requires llimit == (\\min int i; i \u003e= 0 \u0026\u0026 i \u003c a.length; a[i]);\n\t  @ modifies a[*];\n\t  @ ensures a.length == \\old(a.length);\n\t  @ ensures (\\forall int i; (i \u003e 0 \u0026\u0026 i \u003c a.length) ==\u003e a[i-1] \u003c= a[i]);\n\t  @*/\n    public static void sort(int[] a, int ulimit, int llimit)\n    {\n        quicksort(a, 0, a.length, ulimit, llimit);\n    }\n\n    // Write pre-conditions for this method.\n    //@ requires a != null;\n    //@ requires start \u003e= 0;\n    //@ requires stop \u003c= a.length;\n    //@ modifies a[*];\n    // Write post-conditions for this method.\n\t//@ ensures a != null;\n    //@ ensures start \u003e= 0 \u0026\u0026 stop \u003c= a.length;\n    private static void quicksort(int[] a, int start, int stop, int ulimit, int llimit)\n    {\n        if (stop - start \u003e 1) {\n            int p = pivot(a, start, stop, ulimit, llimit);\n            quicksort(a, start, p, a[p], llimit);\n            quicksort(a, p+1, stop, ulimit, a[p]);\n        }\n    }\n\n    // Write pre-conditions for this method.\n    //@ requires a != null;\n    //@ requires start \u003c stop;\n    //@ requires start \u003e= 0;\n    //@ requires stop \u003c= a.length;\n    //@ modifies a[*];\n    // Write post-conditions for this method.\n    //@ ensures \\result \u003e= 0 \u0026\u0026 \\result \u003c a.length;\n    private static int pivot(int[] a, int start, int stop, int ulimit, int llimit)\n    {\n        int p = partition(a, a[start], start+1, stop, ulimit, llimit);\n        if (start \u003c p)\n            swap(a, start, p);\n        return p;\n    }\n\n    // Write pre-conditions for this method.\n    //@ requires a != null;\n    //@ requires start \u003e= 0 \u0026\u0026 start \u003c= a.length;\n    //@ requires stop \u003e= 0 \u0026\u0026 stop \u003c= a.length;\n    //@ modifies a[*];\n    // Write post-conditions for this method.\n    //@ ensures (\\result \u003e= 0 \u0026\u0026 \\result \u003c a.length) || \\result == start -1;\n    private static int partition(int[] a, int pivot, int start, int stop, int ulimit, int llimit)\n    {\n        if (start \u003e= stop) \n            return start - 1;\n        if (a[start] \u003c pivot)\n            return partition(a, pivot, start + 1, stop, ulimit, llimit);\n        if (a[--stop] \u003e pivot)\n            return partition(a, pivot, start, stop, ulimit, llimit);\n        if (start \u003c stop) {\n            swap(a, start, stop);\n            return partition(a, pivot, start+1, stop, ulimit, llimit);\n        } else\n            return start;\n    }\n\n    /*@ requires a != null;\n      @ requires 0 \u003c= i \u0026\u0026 i \u003c a.length;\n      @ requires 0 \u003c= j \u0026\u0026 j \u003c a.length;\n      @ modifies a[i], a[j];\n      @ ensures a[i] == \\old(a[j]) \u0026\u0026 a[j] == \\old(a[i]);\n      @*/\n    public static void swap(int[] a, int i, int j)\n    {\n        int temp = a[i];\n        a[i] = a[j];\n        a[j] = temp;\n    }\n}\n",
        "name": "1947.java",
        "path": "code/quicksort/java/1947.java",
        "url": "/github.com/bdqnghi/bi-tbcnn/-/blob/code/quicksort/java/1947.java"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 16,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires a != null;"
        },
        {
          "limitHit": false,
          "lineNumber": 17,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires start \u003e= 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 18,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires stop \u003c= a.length;"
        },
        {
          "limitHit": false,
          "lineNumber": 22,
          "offsetAndLengths": [
            [
              4,
              12
            ]
          ],
          "preview": "    //@ ensures start \u003e= 0 \u0026\u0026 stop \u003c= a.length;"
        },
        {
          "limitHit": false,
          "lineNumber": 33,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires a != null;"
        },
        {
          "limitHit": false,
          "lineNumber": 34,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires start \u003c stop;"
        },
        {
          "limitHit": false,
          "lineNumber": 35,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires start \u003e= 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 36,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires stop \u003c= a.length;"
        },
        {
          "limitHit": false,
          "lineNumber": 39,
          "offsetAndLengths": [
            [
              4,
              12
            ]
          ],
          "preview": "    //@ ensures \\result \u003e= 0 \u0026\u0026 \\result \u003c a.length;"
        },
        {
          "limitHit": false,
          "lineNumber": 49,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires a != null;"
        },
        {
          "limitHit": false,
          "lineNumber": 50,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires start \u003e= 0 \u0026\u0026 start \u003c= a.length;"
        },
        {
          "limitHit": false,
          "lineNumber": 51,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires stop \u003e= 0 \u0026\u0026 stop \u003c= a.length;"
        },
        {
          "limitHit": false,
          "lineNumber": 54,
          "offsetAndLengths": [
            [
              4,
              12
            ]
          ],
          "preview": "    //@ ensures (\\result \u003e= 0 \u0026\u0026 \\result \u003c a.length) || \\result == start -1;"
        },
        {
          "limitHit": false,
          "lineNumber": 21,
          "offsetAndLengths": [
            [
              1,
              12
            ]
          ],
          "preview": "\t//@ ensures a != null;"
        }
      ],
      "repository": {
        "name": "github.com/bdqnghi/bi-tbcnn",
        "url": "/github.com/bdqnghi/bi-tbcnn"
      }
    },
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "309f5f16c3211f922fa04eed32fa7d6c58978faf"
        },
        "content": "public class Quicksort {\n\n    // Write formal pre- and post-conditions for this method.\n\t/*@ requires a != null; \n      @ requires ulimit == (\\max int i; i \u003e= 0 \u0026\u0026 i \u003c a.length; a[i]);\n      @ requires llimit == (\\min int i; i \u003e= 0 \u0026\u0026 i \u003c a.length; a[i]);\n\t  @ modifies a[*];\n\t  @ ensures a.length == \\old(a.length);\n\t  @ ensures (\\forall int i; (i \u003e 0 \u0026\u0026 i \u003c a.length) ==\u003e a[i-1] \u003c= a[i]);\n\t  @*/\n    public static void sort(int[] a, int ulimit, int llimit)\n    {\n        quicksort(a, 0, a.length, ulimit, llimit);\n    }\n\n    // Write pre-conditions for this method.\n    //@ requires a != null;\n    //@ requires start \u003e= 0;\n    //@ requires stop \u003c= a.length;\n    //@ modifies a[*];\n    // Write post-conditions for this method.\n\t//@ ensures a != null;\n    //@ ensures start \u003e= 0 \u0026\u0026 stop \u003c= a.length;\n    private static void quicksort(int[] a, int start, int stop, int ulimit, int llimit)\n    {\n        if (stop - start \u003e 1) {\n            int p = pivot(a, start, stop, ulimit, llimit);\n            quicksort(a, start, p, a[p], llimit);\n            quicksort(a, p+1, stop, ulimit, a[p]);\n        }\n    }\n\n    // Write pre-conditions for this method.\n    //@ requires a != null;\n    //@ requires start \u003c stop;\n    //@ requires start \u003e= 0;\n    //@ requires stop \u003c= a.length;\n    //@ modifies a[*];\n    // Write post-conditions for this method.\n    //@ ensures \\result \u003e= 0 \u0026\u0026 \\result \u003c a.length;\n    private static int pivot(int[] a, int start, int stop, int ulimit, int llimit)\n    {\n        int p = partition(a, a[start], start+1, stop, ulimit, llimit);\n        if (start \u003c p)\n            swap(a, start, p);\n        return p;\n    }\n\n    // Write pre-conditions for this method.\n    //@ requires a != null;\n    //@ requires start \u003e= 0 \u0026\u0026 start \u003c= a.length;\n    //@ requires stop \u003e= 0 \u0026\u0026 stop \u003c= a.length;\n    //@ modifies a[*];\n    // Write post-conditions for this method.\n    //@ ensures (\\result \u003e= 0 \u0026\u0026 \\result \u003c a.length) || \\result == start -1;\n    private static int partition(int[] a, int pivot, int start, int stop, int ulimit, int llimit)\n    {\n        if (start \u003e= stop) \n            return start - 1;\n        if (a[start] \u003c pivot)\n            return partition(a, pivot, start + 1, stop, ulimit, llimit);\n        if (a[--stop] \u003e pivot)\n            return partition(a, pivot, start, stop, ulimit, llimit);\n        if (start \u003c stop) {\n            swap(a, start, stop);\n            return partition(a, pivot, start+1, stop, ulimit, llimit);\n        } else\n            return start;\n    }\n\n    /*@ requires a != null;\n      @ requires 0 \u003c= i \u0026\u0026 i \u003c a.length;\n      @ requires 0 \u003c= j \u0026\u0026 j \u003c a.length;\n      @ modifies a[i], a[j];\n      @ ensures a[i] == \\old(a[j]) \u0026\u0026 a[j] == \\old(a[i]);\n      @*/\n    public static void swap(int[] a, int i, int j)\n    {\n        int temp = a[i];\n        a[i] = a[j];\n        a[j] = temp;\n    }\n}\n",
        "name": "1977.java",
        "path": "code/quicksort/java/1977.java",
        "url": "/github.com/bdqnghi/bi-tbcnn/-/blob/code/quicksort/java/1977.java"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 16,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires a != null;"
        },
        {
          "limitHit": false,
          "lineNumber": 17,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires start \u003e= 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 18,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires stop \u003c= a.length;"
        },
        {
          "limitHit": false,
          "lineNumber": 22,
          "offsetAndLengths": [
            [
              4,
              12
            ]
          ],
          "preview": "    //@ ensures start \u003e= 0 \u0026\u0026 stop \u003c= a.length;"
        },
        {
          "limitHit": false,
          "lineNumber": 33,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires a != null;"
        },
        {
          "limitHit": false,
          "lineNumber": 34,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires start \u003c stop;"
        },
        {
          "limitHit": false,
          "lineNumber": 35,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires start \u003e= 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 36,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires stop \u003c= a.length;"
        },
        {
          "limitHit": false,
          "lineNumber": 39,
          "offsetAndLengths": [
            [
              4,
              12
            ]
          ],
          "preview": "    //@ ensures \\result \u003e= 0 \u0026\u0026 \\result \u003c a.length;"
        },
        {
          "limitHit": false,
          "lineNumber": 49,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires a != null;"
        },
        {
          "limitHit": false,
          "lineNumber": 50,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires start \u003e= 0 \u0026\u0026 start \u003c= a.length;"
        },
        {
          "limitHit": false,
          "lineNumber": 51,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires stop \u003e= 0 \u0026\u0026 stop \u003c= a.length;"
        },
        {
          "limitHit": false,
          "lineNumber": 54,
          "offsetAndLengths": [
            [
              4,
              12
            ]
          ],
          "preview": "    //@ ensures (\\result \u003e= 0 \u0026\u0026 \\result \u003c a.length) || \\result == start -1;"
        },
        {
          "limitHit": false,
          "lineNumber": 21,
          "offsetAndLengths": [
            [
              1,
              12
            ]
          ],
          "preview": "\t//@ ensures a != null;"
        }
      ],
      "repository": {
        "name": "github.com/bdqnghi/bi-tbcnn",
        "url": "/github.com/bdqnghi/bi-tbcnn"
      }
    },
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "309f5f16c3211f922fa04eed32fa7d6c58978faf"
        },
        "content": "public class Quicksort {\n\n    // Write formal pre- and post-conditions for this method.\n\t/*@ requires a != null; \n      @ requires ulimit == (\\max int i; i \u003e= 0 \u0026\u0026 i \u003c a.length; a[i]);\n      @ requires llimit == (\\min int i; i \u003e= 0 \u0026\u0026 i \u003c a.length; a[i]);\n\t  @ modifies a[*];\n\t  @ ensures a.length == \\old(a.length);\n\t  @ ensures (\\forall int i; (i \u003e 0 \u0026\u0026 i \u003c a.length) ==\u003e a[i-1] \u003c= a[i]);\n\t  @*/\n    public static void sort(int[] a, int ulimit, int llimit)\n    {\n        quicksort(a, 0, a.length, ulimit, llimit);\n    }\n\n    // Write pre-conditions for this method.\n    //@ requires a != null;\n    //@ requires start \u003e= 0;\n    //@ requires stop \u003c= a.length;\n    //@ modifies a[*];\n    // Write post-conditions for this method.\n\t//@ ensures a != null;\n    //@ ensures start \u003e= 0 \u0026\u0026 stop \u003c= a.length;\n    private static void quicksort(int[] a, int start, int stop, int ulimit, int llimit)\n    {\n        if (stop - start \u003e 1) {\n            int p = pivot(a, start, stop, ulimit, llimit);\n            quicksort(a, start, p, a[p], llimit);\n            quicksort(a, p+1, stop, ulimit, a[p]);\n        }\n    }\n\n    // Write pre-conditions for this method.\n    //@ requires a != null;\n    //@ requires start \u003c stop;\n    //@ requires start \u003e= 0;\n    //@ requires stop \u003c= a.length;\n    //@ modifies a[*];\n    // Write post-conditions for this method.\n    //@ ensures \\result \u003e= 0 \u0026\u0026 \\result \u003c a.length;\n    private static int pivot(int[] a, int start, int stop, int ulimit, int llimit)\n    {\n        int p = partition(a, a[start], start+1, stop, ulimit, llimit);\n        if (start \u003c p)\n            swap(a, start, p);\n        return p;\n    }\n\n    // Write pre-conditions for this method.\n    //@ requires a != null;\n    //@ requires start \u003e= 0 \u0026\u0026 start \u003c= a.length;\n    //@ requires stop \u003e= 0 \u0026\u0026 stop \u003c= a.length;\n    //@ modifies a[*];\n    // Write post-conditions for this method.\n    //@ ensures (\\result \u003e= 0 \u0026\u0026 \\result \u003c a.length) || \\result == start -1;\n    private static int partition(int[] a, int pivot, int start, int stop, int ulimit, int llimit)\n    {\n        if (start \u003e= stop) \n            return start - 1;\n        if (a[start] \u003c pivot)\n            return partition(a, pivot, start + 1, stop, ulimit, llimit);\n        if (a[--stop] \u003e pivot)\n            return partition(a, pivot, start, stop, ulimit, llimit);\n        if (start \u003c stop) {\n            swap(a, start, stop);\n            return partition(a, pivot, start+1, stop, ulimit, llimit);\n        } else\n            return start;\n    }\n\n    /*@ requires a != null;\n      @ requires 0 \u003c= i \u0026\u0026 i \u003c a.length;\n      @ requires 0 \u003c= j \u0026\u0026 j \u003c a.length;\n      @ modifies a[i], a[j];\n      @ ensures a[i] == \\old(a[j]) \u0026\u0026 a[j] == \\old(a[i]);\n      @*/\n    public static void swap(int[] a, int i, int j)\n    {\n        int temp = a[i];\n        a[i] = a[j];\n        a[j] = temp;\n    }\n}\n",
        "name": "2007.java",
        "path": "code/quicksort/java/2007.java",
        "url": "/github.com/bdqnghi/bi-tbcnn/-/blob/code/quicksort/java/2007.java"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 16,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires a != null;"
        },
        {
          "limitHit": false,
          "lineNumber": 17,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires start \u003e= 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 18,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires stop \u003c= a.length;"
        },
        {
          "limitHit": false,
          "lineNumber": 22,
          "offsetAndLengths": [
            [
              4,
              12
            ]
          ],
          "preview": "    //@ ensures start \u003e= 0 \u0026\u0026 stop \u003c= a.length;"
        },
        {
          "limitHit": false,
          "lineNumber": 33,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires a != null;"
        },
        {
          "limitHit": false,
          "lineNumber": 34,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires start \u003c stop;"
        },
        {
          "limitHit": false,
          "lineNumber": 35,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires start \u003e= 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 36,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires stop \u003c= a.length;"
        },
        {
          "limitHit": false,
          "lineNumber": 39,
          "offsetAndLengths": [
            [
              4,
              12
            ]
          ],
          "preview": "    //@ ensures \\result \u003e= 0 \u0026\u0026 \\result \u003c a.length;"
        },
        {
          "limitHit": false,
          "lineNumber": 49,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires a != null;"
        },
        {
          "limitHit": false,
          "lineNumber": 50,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires start \u003e= 0 \u0026\u0026 start \u003c= a.length;"
        },
        {
          "limitHit": false,
          "lineNumber": 51,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires stop \u003e= 0 \u0026\u0026 stop \u003c= a.length;"
        },
        {
          "limitHit": false,
          "lineNumber": 54,
          "offsetAndLengths": [
            [
              4,
              12
            ]
          ],
          "preview": "    //@ ensures (\\result \u003e= 0 \u0026\u0026 \\result \u003c a.length) || \\result == start -1;"
        },
        {
          "limitHit": false,
          "lineNumber": 21,
          "offsetAndLengths": [
            [
              1,
              12
            ]
          ],
          "preview": "\t//@ ensures a != null;"
        }
      ],
      "repository": {
        "name": "github.com/bdqnghi/bi-tbcnn",
        "url": "/github.com/bdqnghi/bi-tbcnn"
      }
    },
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "309f5f16c3211f922fa04eed32fa7d6c58978faf"
        },
        "content": "public class Quicksort {\n\n    // Write formal pre- and post-conditions for this method.\n\t/*@ requires a != null; \n      @ requires ulimit == (\\max int i; i \u003e= 0 \u0026\u0026 i \u003c a.length; a[i]);\n      @ requires llimit == (\\min int i; i \u003e= 0 \u0026\u0026 i \u003c a.length; a[i]);\n\t  @ modifies a[*];\n\t  @ ensures a.length == \\old(a.length);\n\t  @ ensures (\\forall int i; (i \u003e 0 \u0026\u0026 i \u003c a.length) ==\u003e a[i-1] \u003c= a[i]);\n\t  @*/\n    public static void sort(int[] a, int ulimit, int llimit)\n    {\n        quicksort(a, 0, a.length, ulimit, llimit);\n    }\n\n    // Write pre-conditions for this method.\n    //@ requires a != null;\n    //@ requires start \u003e= 0;\n    //@ requires stop \u003c= a.length;\n    //@ modifies a[*];\n    // Write post-conditions for this method.\n\t//@ ensures a != null;\n    //@ ensures start \u003e= 0 \u0026\u0026 stop \u003c= a.length;\n    private static void quicksort(int[] a, int start, int stop, int ulimit, int llimit)\n    {\n        if (stop - start \u003e 1) {\n            int p = pivot(a, start, stop, ulimit, llimit);\n            quicksort(a, start, p, a[p], llimit);\n            quicksort(a, p+1, stop, ulimit, a[p]);\n        }\n    }\n\n    // Write pre-conditions for this method.\n    //@ requires a != null;\n    //@ requires start \u003c stop;\n    //@ requires start \u003e= 0;\n    //@ requires stop \u003c= a.length;\n    //@ modifies a[*];\n    // Write post-conditions for this method.\n    //@ ensures \\result \u003e= 0 \u0026\u0026 \\result \u003c a.length;\n    private static int pivot(int[] a, int start, int stop, int ulimit, int llimit)\n    {\n        int p = partition(a, a[start], start+1, stop, ulimit, llimit);\n        if (start \u003c p)\n            swap(a, start, p);\n        return p;\n    }\n\n    // Write pre-conditions for this method.\n    //@ requires a != null;\n    //@ requires start \u003e= 0 \u0026\u0026 start \u003c= a.length;\n    //@ requires stop \u003e= 0 \u0026\u0026 stop \u003c= a.length;\n    //@ modifies a[*];\n    // Write post-conditions for this method.\n    //@ ensures (\\result \u003e= 0 \u0026\u0026 \\result \u003c a.length) || \\result == start -1;\n    private static int partition(int[] a, int pivot, int start, int stop, int ulimit, int llimit)\n    {\n        if (start \u003e= stop) \n            return start - 1;\n        if (a[start] \u003c pivot)\n            return partition(a, pivot, start + 1, stop, ulimit, llimit);\n        if (a[--stop] \u003e pivot)\n            return partition(a, pivot, start, stop, ulimit, llimit);\n        if (start \u003c stop) {\n            swap(a, start, stop);\n            return partition(a, pivot, start+1, stop, ulimit, llimit);\n        } else\n            return start;\n    }\n\n    /*@ requires a != null;\n      @ requires 0 \u003c= i \u0026\u0026 i \u003c a.length;\n      @ requires 0 \u003c= j \u0026\u0026 j \u003c a.length;\n      @ modifies a[i], a[j];\n      @ ensures a[i] == \\old(a[j]) \u0026\u0026 a[j] == \\old(a[i]);\n      @*/\n    public static void swap(int[] a, int i, int j)\n    {\n        int temp = a[i];\n        a[i] = a[j];\n        a[j] = temp;\n    }\n}\n",
        "name": "2037.java",
        "path": "code/quicksort/java/2037.java",
        "url": "/github.com/bdqnghi/bi-tbcnn/-/blob/code/quicksort/java/2037.java"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 16,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires a != null;"
        },
        {
          "limitHit": false,
          "lineNumber": 17,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires start \u003e= 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 18,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires stop \u003c= a.length;"
        },
        {
          "limitHit": false,
          "lineNumber": 22,
          "offsetAndLengths": [
            [
              4,
              12
            ]
          ],
          "preview": "    //@ ensures start \u003e= 0 \u0026\u0026 stop \u003c= a.length;"
        },
        {
          "limitHit": false,
          "lineNumber": 33,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires a != null;"
        },
        {
          "limitHit": false,
          "lineNumber": 34,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires start \u003c stop;"
        },
        {
          "limitHit": false,
          "lineNumber": 35,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires start \u003e= 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 36,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires stop \u003c= a.length;"
        },
        {
          "limitHit": false,
          "lineNumber": 39,
          "offsetAndLengths": [
            [
              4,
              12
            ]
          ],
          "preview": "    //@ ensures \\result \u003e= 0 \u0026\u0026 \\result \u003c a.length;"
        },
        {
          "limitHit": false,
          "lineNumber": 49,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires a != null;"
        },
        {
          "limitHit": false,
          "lineNumber": 50,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires start \u003e= 0 \u0026\u0026 start \u003c= a.length;"
        },
        {
          "limitHit": false,
          "lineNumber": 51,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires stop \u003e= 0 \u0026\u0026 stop \u003c= a.length;"
        },
        {
          "limitHit": false,
          "lineNumber": 54,
          "offsetAndLengths": [
            [
              4,
              12
            ]
          ],
          "preview": "    //@ ensures (\\result \u003e= 0 \u0026\u0026 \\result \u003c a.length) || \\result == start -1;"
        },
        {
          "limitHit": false,
          "lineNumber": 21,
          "offsetAndLengths": [
            [
              1,
              12
            ]
          ],
          "preview": "\t//@ ensures a != null;"
        }
      ],
      "repository": {
        "name": "github.com/bdqnghi/bi-tbcnn",
        "url": "/github.com/bdqnghi/bi-tbcnn"
      }
    },
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "309f5f16c3211f922fa04eed32fa7d6c58978faf"
        },
        "content": "public class Quicksort {\n\n    // Write formal pre- and post-conditions for this method.\n\t/*@ requires a != null; \n      @ requires ulimit == (\\max int i; i \u003e= 0 \u0026\u0026 i \u003c a.length; a[i]);\n      @ requires llimit == (\\min int i; i \u003e= 0 \u0026\u0026 i \u003c a.length; a[i]);\n\t  @ modifies a[*];\n\t  @ ensures a.length == \\old(a.length);\n\t  @ ensures (\\forall int i; (i \u003e 0 \u0026\u0026 i \u003c a.length) ==\u003e a[i-1] \u003c= a[i]);\n\t  @*/\n    public static void sort(int[] a, int ulimit, int llimit)\n    {\n        quicksort(a, 0, a.length, ulimit, llimit);\n    }\n\n    // Write pre-conditions for this method.\n    //@ requires a != null;\n    //@ requires start \u003e= 0;\n    //@ requires stop \u003c= a.length;\n    //@ modifies a[*];\n    // Write post-conditions for this method.\n\t//@ ensures a != null;\n    //@ ensures start \u003e= 0 \u0026\u0026 stop \u003c= a.length;\n    private static void quicksort(int[] a, int start, int stop, int ulimit, int llimit)\n    {\n        if (stop - start \u003e 1) {\n            int p = pivot(a, start, stop, ulimit, llimit);\n            quicksort(a, start, p, a[p], llimit);\n            quicksort(a, p+1, stop, ulimit, a[p]);\n        }\n    }\n\n    // Write pre-conditions for this method.\n    //@ requires a != null;\n    //@ requires start \u003c stop;\n    //@ requires start \u003e= 0;\n    //@ requires stop \u003c= a.length;\n    //@ modifies a[*];\n    // Write post-conditions for this method.\n    //@ ensures \\result \u003e= 0 \u0026\u0026 \\result \u003c a.length;\n    private static int pivot(int[] a, int start, int stop, int ulimit, int llimit)\n    {\n        int p = partition(a, a[start], start+1, stop, ulimit, llimit);\n        if (start \u003c p)\n            swap(a, start, p);\n        return p;\n    }\n\n    // Write pre-conditions for this method.\n    //@ requires a != null;\n    //@ requires start \u003e= 0 \u0026\u0026 start \u003c= a.length;\n    //@ requires stop \u003e= 0 \u0026\u0026 stop \u003c= a.length;\n    //@ modifies a[*];\n    // Write post-conditions for this method.\n    //@ ensures (\\result \u003e= 0 \u0026\u0026 \\result \u003c a.length) || \\result == start -1;\n    private static int partition(int[] a, int pivot, int start, int stop, int ulimit, int llimit)\n    {\n        if (start \u003e= stop) \n            return start - 1;\n        if (a[start] \u003c pivot)\n            return partition(a, pivot, start + 1, stop, ulimit, llimit);\n        if (a[--stop] \u003e pivot)\n            return partition(a, pivot, start, stop, ulimit, llimit);\n        if (start \u003c stop) {\n            swap(a, start, stop);\n            return partition(a, pivot, start+1, stop, ulimit, llimit);\n        } else\n            return start;\n    }\n\n    /*@ requires a != null;\n      @ requires 0 \u003c= i \u0026\u0026 i \u003c a.length;\n      @ requires 0 \u003c= j \u0026\u0026 j \u003c a.length;\n      @ modifies a[i], a[j];\n      @ ensures a[i] == \\old(a[j]) \u0026\u0026 a[j] == \\old(a[i]);\n      @*/\n    public static void swap(int[] a, int i, int j)\n    {\n        int temp = a[i];\n        a[i] = a[j];\n        a[j] = temp;\n    }\n}\n",
        "name": "2067.java",
        "path": "code/quicksort/java/2067.java",
        "url": "/github.com/bdqnghi/bi-tbcnn/-/blob/code/quicksort/java/2067.java"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 16,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires a != null;"
        },
        {
          "limitHit": false,
          "lineNumber": 17,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires start \u003e= 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 18,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires stop \u003c= a.length;"
        },
        {
          "limitHit": false,
          "lineNumber": 22,
          "offsetAndLengths": [
            [
              4,
              12
            ]
          ],
          "preview": "    //@ ensures start \u003e= 0 \u0026\u0026 stop \u003c= a.length;"
        },
        {
          "limitHit": false,
          "lineNumber": 33,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires a != null;"
        },
        {
          "limitHit": false,
          "lineNumber": 34,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires start \u003c stop;"
        },
        {
          "limitHit": false,
          "lineNumber": 35,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires start \u003e= 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 36,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires stop \u003c= a.length;"
        },
        {
          "limitHit": false,
          "lineNumber": 39,
          "offsetAndLengths": [
            [
              4,
              12
            ]
          ],
          "preview": "    //@ ensures \\result \u003e= 0 \u0026\u0026 \\result \u003c a.length;"
        },
        {
          "limitHit": false,
          "lineNumber": 49,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires a != null;"
        },
        {
          "limitHit": false,
          "lineNumber": 50,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires start \u003e= 0 \u0026\u0026 start \u003c= a.length;"
        },
        {
          "limitHit": false,
          "lineNumber": 51,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires stop \u003e= 0 \u0026\u0026 stop \u003c= a.length;"
        },
        {
          "limitHit": false,
          "lineNumber": 54,
          "offsetAndLengths": [
            [
              4,
              12
            ]
          ],
          "preview": "    //@ ensures (\\result \u003e= 0 \u0026\u0026 \\result \u003c a.length) || \\result == start -1;"
        },
        {
          "limitHit": false,
          "lineNumber": 21,
          "offsetAndLengths": [
            [
              1,
              12
            ]
          ],
          "preview": "\t//@ ensures a != null;"
        }
      ],
      "repository": {
        "name": "github.com/bdqnghi/bi-tbcnn",
        "url": "/github.com/bdqnghi/bi-tbcnn"
      }
    },
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "309f5f16c3211f922fa04eed32fa7d6c58978faf"
        },
        "content": "public class Quicksort {\n\n    // Write formal pre- and post-conditions for this method.\n\t/*@ requires a != null; \n      @ requires ulimit == (\\max int i; i \u003e= 0 \u0026\u0026 i \u003c a.length; a[i]);\n      @ requires llimit == (\\min int i; i \u003e= 0 \u0026\u0026 i \u003c a.length; a[i]);\n\t  @ modifies a[*];\n\t  @ ensures a.length == \\old(a.length);\n\t  @ ensures (\\forall int i; (i \u003e 0 \u0026\u0026 i \u003c a.length) ==\u003e a[i-1] \u003c= a[i]);\n\t  @*/\n    public static void sort(int[] a, int ulimit, int llimit)\n    {\n        quicksort(a, 0, a.length, ulimit, llimit);\n    }\n\n    // Write pre-conditions for this method.\n    //@ requires a != null;\n    //@ requires start \u003e= 0;\n    //@ requires stop \u003c= a.length;\n    //@ modifies a[*];\n    // Write post-conditions for this method.\n\t//@ ensures a != null;\n    //@ ensures start \u003e= 0 \u0026\u0026 stop \u003c= a.length;\n    private static void quicksort(int[] a, int start, int stop, int ulimit, int llimit)\n    {\n        if (stop - start \u003e 1) {\n            int p = pivot(a, start, stop, ulimit, llimit);\n            quicksort(a, start, p, a[p], llimit);\n            quicksort(a, p+1, stop, ulimit, a[p]);\n        }\n    }\n\n    // Write pre-conditions for this method.\n    //@ requires a != null;\n    //@ requires start \u003c stop;\n    //@ requires start \u003e= 0;\n    //@ requires stop \u003c= a.length;\n    //@ modifies a[*];\n    // Write post-conditions for this method.\n    //@ ensures \\result \u003e= 0 \u0026\u0026 \\result \u003c a.length;\n    private static int pivot(int[] a, int start, int stop, int ulimit, int llimit)\n    {\n        int p = partition(a, a[start], start+1, stop, ulimit, llimit);\n        if (start \u003c p)\n            swap(a, start, p);\n        return p;\n    }\n\n    // Write pre-conditions for this method.\n    //@ requires a != null;\n    //@ requires start \u003e= 0 \u0026\u0026 start \u003c= a.length;\n    //@ requires stop \u003e= 0 \u0026\u0026 stop \u003c= a.length;\n    //@ modifies a[*];\n    // Write post-conditions for this method.\n    //@ ensures (\\result \u003e= 0 \u0026\u0026 \\result \u003c a.length) || \\result == start -1;\n    private static int partition(int[] a, int pivot, int start, int stop, int ulimit, int llimit)\n    {\n        if (start \u003e= stop) \n            return start - 1;\n        if (a[start] \u003c pivot)\n            return partition(a, pivot, start + 1, stop, ulimit, llimit);\n        if (a[--stop] \u003e pivot)\n            return partition(a, pivot, start, stop, ulimit, llimit);\n        if (start \u003c stop) {\n            swap(a, start, stop);\n            return partition(a, pivot, start+1, stop, ulimit, llimit);\n        } else\n            return start;\n    }\n\n    /*@ requires a != null;\n      @ requires 0 \u003c= i \u0026\u0026 i \u003c a.length;\n      @ requires 0 \u003c= j \u0026\u0026 j \u003c a.length;\n      @ modifies a[i], a[j];\n      @ ensures a[i] == \\old(a[j]) \u0026\u0026 a[j] == \\old(a[i]);\n      @*/\n    public static void swap(int[] a, int i, int j)\n    {\n        int temp = a[i];\n        a[i] = a[j];\n        a[j] = temp;\n    }\n}\n",
        "name": "2097.java",
        "path": "code/quicksort/java/2097.java",
        "url": "/github.com/bdqnghi/bi-tbcnn/-/blob/code/quicksort/java/2097.java"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 16,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires a != null;"
        },
        {
          "limitHit": false,
          "lineNumber": 17,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires start \u003e= 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 18,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires stop \u003c= a.length;"
        },
        {
          "limitHit": false,
          "lineNumber": 22,
          "offsetAndLengths": [
            [
              4,
              12
            ]
          ],
          "preview": "    //@ ensures start \u003e= 0 \u0026\u0026 stop \u003c= a.length;"
        },
        {
          "limitHit": false,
          "lineNumber": 33,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires a != null;"
        },
        {
          "limitHit": false,
          "lineNumber": 34,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires start \u003c stop;"
        },
        {
          "limitHit": false,
          "lineNumber": 35,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires start \u003e= 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 36,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires stop \u003c= a.length;"
        },
        {
          "limitHit": false,
          "lineNumber": 39,
          "offsetAndLengths": [
            [
              4,
              12
            ]
          ],
          "preview": "    //@ ensures \\result \u003e= 0 \u0026\u0026 \\result \u003c a.length;"
        },
        {
          "limitHit": false,
          "lineNumber": 49,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires a != null;"
        },
        {
          "limitHit": false,
          "lineNumber": 50,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires start \u003e= 0 \u0026\u0026 start \u003c= a.length;"
        },
        {
          "limitHit": false,
          "lineNumber": 51,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires stop \u003e= 0 \u0026\u0026 stop \u003c= a.length;"
        },
        {
          "limitHit": false,
          "lineNumber": 54,
          "offsetAndLengths": [
            [
              4,
              12
            ]
          ],
          "preview": "    //@ ensures (\\result \u003e= 0 \u0026\u0026 \\result \u003c a.length) || \\result == start -1;"
        },
        {
          "limitHit": false,
          "lineNumber": 21,
          "offsetAndLengths": [
            [
              1,
              12
            ]
          ],
          "preview": "\t//@ ensures a != null;"
        }
      ],
      "repository": {
        "name": "github.com/bdqnghi/bi-tbcnn",
        "url": "/github.com/bdqnghi/bi-tbcnn"
      }
    },
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "309f5f16c3211f922fa04eed32fa7d6c58978faf"
        },
        "content": "public class Quicksort {\n\n    // Write formal pre- and post-conditions for this method.\n\t/*@ requires a != null; \n      @ requires ulimit == (\\max int i; i \u003e= 0 \u0026\u0026 i \u003c a.length; a[i]);\n      @ requires llimit == (\\min int i; i \u003e= 0 \u0026\u0026 i \u003c a.length; a[i]);\n\t  @ modifies a[*];\n\t  @ ensures a.length == \\old(a.length);\n\t  @ ensures (\\forall int i; (i \u003e 0 \u0026\u0026 i \u003c a.length) ==\u003e a[i-1] \u003c= a[i]);\n\t  @*/\n    public static void sort(int[] a, int ulimit, int llimit)\n    {\n        quicksort(a, 0, a.length, ulimit, llimit);\n    }\n\n    // Write pre-conditions for this method.\n    //@ requires a != null;\n    //@ requires start \u003e= 0;\n    //@ requires stop \u003c= a.length;\n    //@ modifies a[*];\n    // Write post-conditions for this method.\n\t//@ ensures a != null;\n    //@ ensures start \u003e= 0 \u0026\u0026 stop \u003c= a.length;\n    private static void quicksort(int[] a, int start, int stop, int ulimit, int llimit)\n    {\n        if (stop - start \u003e 1) {\n            int p = pivot(a, start, stop, ulimit, llimit);\n            quicksort(a, start, p, a[p], llimit);\n            quicksort(a, p+1, stop, ulimit, a[p]);\n        }\n    }\n\n    // Write pre-conditions for this method.\n    //@ requires a != null;\n    //@ requires start \u003c stop;\n    //@ requires start \u003e= 0;\n    //@ requires stop \u003c= a.length;\n    //@ modifies a[*];\n    // Write post-conditions for this method.\n    //@ ensures \\result \u003e= 0 \u0026\u0026 \\result \u003c a.length;\n    private static int pivot(int[] a, int start, int stop, int ulimit, int llimit)\n    {\n        int p = partition(a, a[start], start+1, stop, ulimit, llimit);\n        if (start \u003c p)\n            swap(a, start, p);\n        return p;\n    }\n\n    // Write pre-conditions for this method.\n    //@ requires a != null;\n    //@ requires start \u003e= 0 \u0026\u0026 start \u003c= a.length;\n    //@ requires stop \u003e= 0 \u0026\u0026 stop \u003c= a.length;\n    //@ modifies a[*];\n    // Write post-conditions for this method.\n    //@ ensures (\\result \u003e= 0 \u0026\u0026 \\result \u003c a.length) || \\result == start -1;\n    private static int partition(int[] a, int pivot, int start, int stop, int ulimit, int llimit)\n    {\n        if (start \u003e= stop) \n            return start - 1;\n        if (a[start] \u003c pivot)\n            return partition(a, pivot, start + 1, stop, ulimit, llimit);\n        if (a[--stop] \u003e pivot)\n            return partition(a, pivot, start, stop, ulimit, llimit);\n        if (start \u003c stop) {\n            swap(a, start, stop);\n            return partition(a, pivot, start+1, stop, ulimit, llimit);\n        } else\n            return start;\n    }\n\n    /*@ requires a != null;\n      @ requires 0 \u003c= i \u0026\u0026 i \u003c a.length;\n      @ requires 0 \u003c= j \u0026\u0026 j \u003c a.length;\n      @ modifies a[i], a[j];\n      @ ensures a[i] == \\old(a[j]) \u0026\u0026 a[j] == \\old(a[i]);\n      @*/\n    public static void swap(int[] a, int i, int j)\n    {\n        int temp = a[i];\n        a[i] = a[j];\n        a[j] = temp;\n    }\n}\n",
        "name": "2127.java",
        "path": "code/quicksort/java/2127.java",
        "url": "/github.com/bdqnghi/bi-tbcnn/-/blob/code/quicksort/java/2127.java"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 16,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires a != null;"
        },
        {
          "limitHit": false,
          "lineNumber": 17,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires start \u003e= 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 18,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires stop \u003c= a.length;"
        },
        {
          "limitHit": false,
          "lineNumber": 22,
          "offsetAndLengths": [
            [
              4,
              12
            ]
          ],
          "preview": "    //@ ensures start \u003e= 0 \u0026\u0026 stop \u003c= a.length;"
        },
        {
          "limitHit": false,
          "lineNumber": 33,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires a != null;"
        },
        {
          "limitHit": false,
          "lineNumber": 34,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires start \u003c stop;"
        },
        {
          "limitHit": false,
          "lineNumber": 35,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires start \u003e= 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 36,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires stop \u003c= a.length;"
        },
        {
          "limitHit": false,
          "lineNumber": 39,
          "offsetAndLengths": [
            [
              4,
              12
            ]
          ],
          "preview": "    //@ ensures \\result \u003e= 0 \u0026\u0026 \\result \u003c a.length;"
        },
        {
          "limitHit": false,
          "lineNumber": 49,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires a != null;"
        },
        {
          "limitHit": false,
          "lineNumber": 50,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires start \u003e= 0 \u0026\u0026 start \u003c= a.length;"
        },
        {
          "limitHit": false,
          "lineNumber": 51,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires stop \u003e= 0 \u0026\u0026 stop \u003c= a.length;"
        },
        {
          "limitHit": false,
          "lineNumber": 54,
          "offsetAndLengths": [
            [
              4,
              12
            ]
          ],
          "preview": "    //@ ensures (\\result \u003e= 0 \u0026\u0026 \\result \u003c a.length) || \\result == start -1;"
        },
        {
          "limitHit": false,
          "lineNumber": 21,
          "offsetAndLengths": [
            [
              1,
              12
            ]
          ],
          "preview": "\t//@ ensures a != null;"
        }
      ],
      "repository": {
        "name": "github.com/bdqnghi/bi-tbcnn",
        "url": "/github.com/bdqnghi/bi-tbcnn"
      }
    },
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "309f5f16c3211f922fa04eed32fa7d6c58978faf"
        },
        "content": "public class Quicksort {\n\n    // Write formal pre- and post-conditions for this method.\n\t/*@ requires a != null; \n      @ requires ulimit == (\\max int i; i \u003e= 0 \u0026\u0026 i \u003c a.length; a[i]);\n      @ requires llimit == (\\min int i; i \u003e= 0 \u0026\u0026 i \u003c a.length; a[i]);\n\t  @ modifies a[*];\n\t  @ ensures a.length == \\old(a.length);\n\t  @ ensures (\\forall int i; (i \u003e 0 \u0026\u0026 i \u003c a.length) ==\u003e a[i-1] \u003c= a[i]);\n\t  @*/\n    public static void sort(int[] a, int ulimit, int llimit)\n    {\n        quicksort(a, 0, a.length, ulimit, llimit);\n    }\n\n    // Write pre-conditions for this method.\n    //@ requires a != null;\n    //@ requires start \u003e= 0;\n    //@ requires stop \u003c= a.length;\n    //@ modifies a[*];\n    // Write post-conditions for this method.\n\t//@ ensures a != null;\n    //@ ensures start \u003e= 0 \u0026\u0026 stop \u003c= a.length;\n    private static void quicksort(int[] a, int start, int stop, int ulimit, int llimit)\n    {\n        if (stop - start \u003e 1) {\n            int p = pivot(a, start, stop, ulimit, llimit);\n            quicksort(a, start, p, a[p], llimit);\n            quicksort(a, p+1, stop, ulimit, a[p]);\n        }\n    }\n\n    // Write pre-conditions for this method.\n    //@ requires a != null;\n    //@ requires start \u003c stop;\n    //@ requires start \u003e= 0;\n    //@ requires stop \u003c= a.length;\n    //@ modifies a[*];\n    // Write post-conditions for this method.\n    //@ ensures \\result \u003e= 0 \u0026\u0026 \\result \u003c a.length;\n    private static int pivot(int[] a, int start, int stop, int ulimit, int llimit)\n    {\n        int p = partition(a, a[start], start+1, stop, ulimit, llimit);\n        if (start \u003c p)\n            swap(a, start, p);\n        return p;\n    }\n\n    // Write pre-conditions for this method.\n    //@ requires a != null;\n    //@ requires start \u003e= 0 \u0026\u0026 start \u003c= a.length;\n    //@ requires stop \u003e= 0 \u0026\u0026 stop \u003c= a.length;\n    //@ modifies a[*];\n    // Write post-conditions for this method.\n    //@ ensures (\\result \u003e= 0 \u0026\u0026 \\result \u003c a.length) || \\result == start -1;\n    private static int partition(int[] a, int pivot, int start, int stop, int ulimit, int llimit)\n    {\n        if (start \u003e= stop) \n            return start - 1;\n        if (a[start] \u003c pivot)\n            return partition(a, pivot, start + 1, stop, ulimit, llimit);\n        if (a[--stop] \u003e pivot)\n            return partition(a, pivot, start, stop, ulimit, llimit);\n        if (start \u003c stop) {\n            swap(a, start, stop);\n            return partition(a, pivot, start+1, stop, ulimit, llimit);\n        } else\n            return start;\n    }\n\n    /*@ requires a != null;\n      @ requires 0 \u003c= i \u0026\u0026 i \u003c a.length;\n      @ requires 0 \u003c= j \u0026\u0026 j \u003c a.length;\n      @ modifies a[i], a[j];\n      @ ensures a[i] == \\old(a[j]) \u0026\u0026 a[j] == \\old(a[i]);\n      @*/\n    public static void swap(int[] a, int i, int j)\n    {\n        int temp = a[i];\n        a[i] = a[j];\n        a[j] = temp;\n    }\n}\n",
        "name": "2157.java",
        "path": "code/quicksort/java/2157.java",
        "url": "/github.com/bdqnghi/bi-tbcnn/-/blob/code/quicksort/java/2157.java"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 16,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires a != null;"
        },
        {
          "limitHit": false,
          "lineNumber": 17,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires start \u003e= 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 18,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires stop \u003c= a.length;"
        },
        {
          "limitHit": false,
          "lineNumber": 22,
          "offsetAndLengths": [
            [
              4,
              12
            ]
          ],
          "preview": "    //@ ensures start \u003e= 0 \u0026\u0026 stop \u003c= a.length;"
        },
        {
          "limitHit": false,
          "lineNumber": 33,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires a != null;"
        },
        {
          "limitHit": false,
          "lineNumber": 34,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires start \u003c stop;"
        },
        {
          "limitHit": false,
          "lineNumber": 35,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires start \u003e= 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 36,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires stop \u003c= a.length;"
        },
        {
          "limitHit": false,
          "lineNumber": 39,
          "offsetAndLengths": [
            [
              4,
              12
            ]
          ],
          "preview": "    //@ ensures \\result \u003e= 0 \u0026\u0026 \\result \u003c a.length;"
        },
        {
          "limitHit": false,
          "lineNumber": 49,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires a != null;"
        },
        {
          "limitHit": false,
          "lineNumber": 50,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires start \u003e= 0 \u0026\u0026 start \u003c= a.length;"
        },
        {
          "limitHit": false,
          "lineNumber": 51,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires stop \u003e= 0 \u0026\u0026 stop \u003c= a.length;"
        },
        {
          "limitHit": false,
          "lineNumber": 54,
          "offsetAndLengths": [
            [
              4,
              12
            ]
          ],
          "preview": "    //@ ensures (\\result \u003e= 0 \u0026\u0026 \\result \u003c a.length) || \\result == start -1;"
        },
        {
          "limitHit": false,
          "lineNumber": 21,
          "offsetAndLengths": [
            [
              1,
              12
            ]
          ],
          "preview": "\t//@ ensures a != null;"
        }
      ],
      "repository": {
        "name": "github.com/bdqnghi/bi-tbcnn",
        "url": "/github.com/bdqnghi/bi-tbcnn"
      }
    },
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "309f5f16c3211f922fa04eed32fa7d6c58978faf"
        },
        "content": "public class Quicksort {\n\n    // Write formal pre- and post-conditions for this method.\n\t/*@ requires a != null; \n      @ requires ulimit == (\\max int i; i \u003e= 0 \u0026\u0026 i \u003c a.length; a[i]);\n      @ requires llimit == (\\min int i; i \u003e= 0 \u0026\u0026 i \u003c a.length; a[i]);\n\t  @ modifies a[*];\n\t  @ ensures a.length == \\old(a.length);\n\t  @ ensures (\\forall int i; (i \u003e 0 \u0026\u0026 i \u003c a.length) ==\u003e a[i-1] \u003c= a[i]);\n\t  @*/\n    public static void sort(int[] a, int ulimit, int llimit)\n    {\n        quicksort(a, 0, a.length, ulimit, llimit);\n    }\n\n    // Write pre-conditions for this method.\n    //@ requires a != null;\n    //@ requires start \u003e= 0;\n    //@ requires stop \u003c= a.length;\n    //@ modifies a[*];\n    // Write post-conditions for this method.\n\t//@ ensures a != null;\n    //@ ensures start \u003e= 0 \u0026\u0026 stop \u003c= a.length;\n    private static void quicksort(int[] a, int start, int stop, int ulimit, int llimit)\n    {\n        if (stop - start \u003e 1) {\n            int p = pivot(a, start, stop, ulimit, llimit);\n            quicksort(a, start, p, a[p], llimit);\n            quicksort(a, p+1, stop, ulimit, a[p]);\n        }\n    }\n\n    // Write pre-conditions for this method.\n    //@ requires a != null;\n    //@ requires start \u003c stop;\n    //@ requires start \u003e= 0;\n    //@ requires stop \u003c= a.length;\n    //@ modifies a[*];\n    // Write post-conditions for this method.\n    //@ ensures \\result \u003e= 0 \u0026\u0026 \\result \u003c a.length;\n    private static int pivot(int[] a, int start, int stop, int ulimit, int llimit)\n    {\n        int p = partition(a, a[start], start+1, stop, ulimit, llimit);\n        if (start \u003c p)\n            swap(a, start, p);\n        return p;\n    }\n\n    // Write pre-conditions for this method.\n    //@ requires a != null;\n    //@ requires start \u003e= 0 \u0026\u0026 start \u003c= a.length;\n    //@ requires stop \u003e= 0 \u0026\u0026 stop \u003c= a.length;\n    //@ modifies a[*];\n    // Write post-conditions for this method.\n    //@ ensures (\\result \u003e= 0 \u0026\u0026 \\result \u003c a.length) || \\result == start -1;\n    private static int partition(int[] a, int pivot, int start, int stop, int ulimit, int llimit)\n    {\n        if (start \u003e= stop) \n            return start - 1;\n        if (a[start] \u003c pivot)\n            return partition(a, pivot, start + 1, stop, ulimit, llimit);\n        if (a[--stop] \u003e pivot)\n            return partition(a, pivot, start, stop, ulimit, llimit);\n        if (start \u003c stop) {\n            swap(a, start, stop);\n            return partition(a, pivot, start+1, stop, ulimit, llimit);\n        } else\n            return start;\n    }\n\n    /*@ requires a != null;\n      @ requires 0 \u003c= i \u0026\u0026 i \u003c a.length;\n      @ requires 0 \u003c= j \u0026\u0026 j \u003c a.length;\n      @ modifies a[i], a[j];\n      @ ensures a[i] == \\old(a[j]) \u0026\u0026 a[j] == \\old(a[i]);\n      @*/\n    public static void swap(int[] a, int i, int j)\n    {\n        int temp = a[i];\n        a[i] = a[j];\n        a[j] = temp;\n    }\n}\n",
        "name": "2187.java",
        "path": "code/quicksort/java/2187.java",
        "url": "/github.com/bdqnghi/bi-tbcnn/-/blob/code/quicksort/java/2187.java"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 16,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires a != null;"
        },
        {
          "limitHit": false,
          "lineNumber": 17,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires start \u003e= 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 18,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires stop \u003c= a.length;"
        },
        {
          "limitHit": false,
          "lineNumber": 22,
          "offsetAndLengths": [
            [
              4,
              12
            ]
          ],
          "preview": "    //@ ensures start \u003e= 0 \u0026\u0026 stop \u003c= a.length;"
        },
        {
          "limitHit": false,
          "lineNumber": 33,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires a != null;"
        },
        {
          "limitHit": false,
          "lineNumber": 34,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires start \u003c stop;"
        },
        {
          "limitHit": false,
          "lineNumber": 35,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires start \u003e= 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 36,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires stop \u003c= a.length;"
        },
        {
          "limitHit": false,
          "lineNumber": 39,
          "offsetAndLengths": [
            [
              4,
              12
            ]
          ],
          "preview": "    //@ ensures \\result \u003e= 0 \u0026\u0026 \\result \u003c a.length;"
        },
        {
          "limitHit": false,
          "lineNumber": 49,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires a != null;"
        },
        {
          "limitHit": false,
          "lineNumber": 50,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires start \u003e= 0 \u0026\u0026 start \u003c= a.length;"
        },
        {
          "limitHit": false,
          "lineNumber": 51,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires stop \u003e= 0 \u0026\u0026 stop \u003c= a.length;"
        },
        {
          "limitHit": false,
          "lineNumber": 54,
          "offsetAndLengths": [
            [
              4,
              12
            ]
          ],
          "preview": "    //@ ensures (\\result \u003e= 0 \u0026\u0026 \\result \u003c a.length) || \\result == start -1;"
        },
        {
          "limitHit": false,
          "lineNumber": 21,
          "offsetAndLengths": [
            [
              1,
              12
            ]
          ],
          "preview": "\t//@ ensures a != null;"
        }
      ],
      "repository": {
        "name": "github.com/bdqnghi/bi-tbcnn",
        "url": "/github.com/bdqnghi/bi-tbcnn"
      }
    },
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "309f5f16c3211f922fa04eed32fa7d6c58978faf"
        },
        "content": "public class Quicksort {\n\n    // Write formal pre- and post-conditions for this method.\n\t/*@ requires a != null; \n      @ requires ulimit == (\\max int i; i \u003e= 0 \u0026\u0026 i \u003c a.length; a[i]);\n      @ requires llimit == (\\min int i; i \u003e= 0 \u0026\u0026 i \u003c a.length; a[i]);\n\t  @ modifies a[*];\n\t  @ ensures a.length == \\old(a.length);\n\t  @ ensures (\\forall int i; (i \u003e 0 \u0026\u0026 i \u003c a.length) ==\u003e a[i-1] \u003c= a[i]);\n\t  @*/\n    public static void sort(int[] a, int ulimit, int llimit)\n    {\n        quicksort(a, 0, a.length, ulimit, llimit);\n    }\n\n    // Write pre-conditions for this method.\n    //@ requires a != null;\n    //@ requires start \u003e= 0;\n    //@ requires stop \u003c= a.length;\n    //@ modifies a[*];\n    // Write post-conditions for this method.\n\t//@ ensures a != null;\n    //@ ensures start \u003e= 0 \u0026\u0026 stop \u003c= a.length;\n    private static void quicksort(int[] a, int start, int stop, int ulimit, int llimit)\n    {\n        if (stop - start \u003e 1) {\n            int p = pivot(a, start, stop, ulimit, llimit);\n            quicksort(a, start, p, a[p], llimit);\n            quicksort(a, p+1, stop, ulimit, a[p]);\n        }\n    }\n\n    // Write pre-conditions for this method.\n    //@ requires a != null;\n    //@ requires start \u003c stop;\n    //@ requires start \u003e= 0;\n    //@ requires stop \u003c= a.length;\n    //@ modifies a[*];\n    // Write post-conditions for this method.\n    //@ ensures \\result \u003e= 0 \u0026\u0026 \\result \u003c a.length;\n    private static int pivot(int[] a, int start, int stop, int ulimit, int llimit)\n    {\n        int p = partition(a, a[start], start+1, stop, ulimit, llimit);\n        if (start \u003c p)\n            swap(a, start, p);\n        return p;\n    }\n\n    // Write pre-conditions for this method.\n    //@ requires a != null;\n    //@ requires start \u003e= 0 \u0026\u0026 start \u003c= a.length;\n    //@ requires stop \u003e= 0 \u0026\u0026 stop \u003c= a.length;\n    //@ modifies a[*];\n    // Write post-conditions for this method.\n    //@ ensures (\\result \u003e= 0 \u0026\u0026 \\result \u003c a.length) || \\result == start -1;\n    private static int partition(int[] a, int pivot, int start, int stop, int ulimit, int llimit)\n    {\n        if (start \u003e= stop) \n            return start - 1;\n        if (a[start] \u003c pivot)\n            return partition(a, pivot, start + 1, stop, ulimit, llimit);\n        if (a[--stop] \u003e pivot)\n            return partition(a, pivot, start, stop, ulimit, llimit);\n        if (start \u003c stop) {\n            swap(a, start, stop);\n            return partition(a, pivot, start+1, stop, ulimit, llimit);\n        } else\n            return start;\n    }\n\n    /*@ requires a != null;\n      @ requires 0 \u003c= i \u0026\u0026 i \u003c a.length;\n      @ requires 0 \u003c= j \u0026\u0026 j \u003c a.length;\n      @ modifies a[i], a[j];\n      @ ensures a[i] == \\old(a[j]) \u0026\u0026 a[j] == \\old(a[i]);\n      @*/\n    public static void swap(int[] a, int i, int j)\n    {\n        int temp = a[i];\n        a[i] = a[j];\n        a[j] = temp;\n    }\n}\n",
        "name": "2217.java",
        "path": "code/quicksort/java/2217.java",
        "url": "/github.com/bdqnghi/bi-tbcnn/-/blob/code/quicksort/java/2217.java"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 16,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires a != null;"
        },
        {
          "limitHit": false,
          "lineNumber": 17,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires start \u003e= 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 18,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires stop \u003c= a.length;"
        },
        {
          "limitHit": false,
          "lineNumber": 22,
          "offsetAndLengths": [
            [
              4,
              12
            ]
          ],
          "preview": "    //@ ensures start \u003e= 0 \u0026\u0026 stop \u003c= a.length;"
        },
        {
          "limitHit": false,
          "lineNumber": 33,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires a != null;"
        },
        {
          "limitHit": false,
          "lineNumber": 34,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires start \u003c stop;"
        },
        {
          "limitHit": false,
          "lineNumber": 35,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires start \u003e= 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 36,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires stop \u003c= a.length;"
        },
        {
          "limitHit": false,
          "lineNumber": 39,
          "offsetAndLengths": [
            [
              4,
              12
            ]
          ],
          "preview": "    //@ ensures \\result \u003e= 0 \u0026\u0026 \\result \u003c a.length;"
        },
        {
          "limitHit": false,
          "lineNumber": 49,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires a != null;"
        },
        {
          "limitHit": false,
          "lineNumber": 50,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires start \u003e= 0 \u0026\u0026 start \u003c= a.length;"
        },
        {
          "limitHit": false,
          "lineNumber": 51,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires stop \u003e= 0 \u0026\u0026 stop \u003c= a.length;"
        },
        {
          "limitHit": false,
          "lineNumber": 54,
          "offsetAndLengths": [
            [
              4,
              12
            ]
          ],
          "preview": "    //@ ensures (\\result \u003e= 0 \u0026\u0026 \\result \u003c a.length) || \\result == start -1;"
        },
        {
          "limitHit": false,
          "lineNumber": 21,
          "offsetAndLengths": [
            [
              1,
              12
            ]
          ],
          "preview": "\t//@ ensures a != null;"
        }
      ],
      "repository": {
        "name": "github.com/bdqnghi/bi-tbcnn",
        "url": "/github.com/bdqnghi/bi-tbcnn"
      }
    },
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "309f5f16c3211f922fa04eed32fa7d6c58978faf"
        },
        "content": "public class Quicksort {\n\n    // Write formal pre- and post-conditions for this method.\n\t/*@ requires a != null; \n      @ requires ulimit == (\\max int i; i \u003e= 0 \u0026\u0026 i \u003c a.length; a[i]);\n      @ requires llimit == (\\min int i; i \u003e= 0 \u0026\u0026 i \u003c a.length; a[i]);\n\t  @ modifies a[*];\n\t  @ ensures a.length == \\old(a.length);\n\t  @ ensures (\\forall int i; (i \u003e 0 \u0026\u0026 i \u003c a.length) ==\u003e a[i-1] \u003c= a[i]);\n\t  @*/\n    public static void sort(int[] a, int ulimit, int llimit)\n    {\n        quicksort(a, 0, a.length, ulimit, llimit);\n    }\n\n    // Write pre-conditions for this method.\n    //@ requires a != null;\n    //@ requires start \u003e= 0;\n    //@ requires stop \u003c= a.length;\n    //@ modifies a[*];\n    // Write post-conditions for this method.\n\t//@ ensures a != null;\n    //@ ensures start \u003e= 0 \u0026\u0026 stop \u003c= a.length;\n    private static void quicksort(int[] a, int start, int stop, int ulimit, int llimit)\n    {\n        if (stop - start \u003e 1) {\n            int p = pivot(a, start, stop, ulimit, llimit);\n            quicksort(a, start, p, a[p], llimit);\n            quicksort(a, p+1, stop, ulimit, a[p]);\n        }\n    }\n\n    // Write pre-conditions for this method.\n    //@ requires a != null;\n    //@ requires start \u003c stop;\n    //@ requires start \u003e= 0;\n    //@ requires stop \u003c= a.length;\n    //@ modifies a[*];\n    // Write post-conditions for this method.\n    //@ ensures \\result \u003e= 0 \u0026\u0026 \\result \u003c a.length;\n    private static int pivot(int[] a, int start, int stop, int ulimit, int llimit)\n    {\n        int p = partition(a, a[start], start+1, stop, ulimit, llimit);\n        if (start \u003c p)\n            swap(a, start, p);\n        return p;\n    }\n\n    // Write pre-conditions for this method.\n    //@ requires a != null;\n    //@ requires start \u003e= 0 \u0026\u0026 start \u003c= a.length;\n    //@ requires stop \u003e= 0 \u0026\u0026 stop \u003c= a.length;\n    //@ modifies a[*];\n    // Write post-conditions for this method.\n    //@ ensures (\\result \u003e= 0 \u0026\u0026 \\result \u003c a.length) || \\result == start -1;\n    private static int partition(int[] a, int pivot, int start, int stop, int ulimit, int llimit)\n    {\n        if (start \u003e= stop) \n            return start - 1;\n        if (a[start] \u003c pivot)\n            return partition(a, pivot, start + 1, stop, ulimit, llimit);\n        if (a[--stop] \u003e pivot)\n            return partition(a, pivot, start, stop, ulimit, llimit);\n        if (start \u003c stop) {\n            swap(a, start, stop);\n            return partition(a, pivot, start+1, stop, ulimit, llimit);\n        } else\n            return start;\n    }\n\n    /*@ requires a != null;\n      @ requires 0 \u003c= i \u0026\u0026 i \u003c a.length;\n      @ requires 0 \u003c= j \u0026\u0026 j \u003c a.length;\n      @ modifies a[i], a[j];\n      @ ensures a[i] == \\old(a[j]) \u0026\u0026 a[j] == \\old(a[i]);\n      @*/\n    public static void swap(int[] a, int i, int j)\n    {\n        int temp = a[i];\n        a[i] = a[j];\n        a[j] = temp;\n    }\n}\n",
        "name": "2247.java",
        "path": "code/quicksort/java/2247.java",
        "url": "/github.com/bdqnghi/bi-tbcnn/-/blob/code/quicksort/java/2247.java"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 16,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires a != null;"
        },
        {
          "limitHit": false,
          "lineNumber": 17,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires start \u003e= 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 18,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires stop \u003c= a.length;"
        },
        {
          "limitHit": false,
          "lineNumber": 22,
          "offsetAndLengths": [
            [
              4,
              12
            ]
          ],
          "preview": "    //@ ensures start \u003e= 0 \u0026\u0026 stop \u003c= a.length;"
        },
        {
          "limitHit": false,
          "lineNumber": 33,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires a != null;"
        },
        {
          "limitHit": false,
          "lineNumber": 34,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires start \u003c stop;"
        },
        {
          "limitHit": false,
          "lineNumber": 35,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires start \u003e= 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 36,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires stop \u003c= a.length;"
        },
        {
          "limitHit": false,
          "lineNumber": 39,
          "offsetAndLengths": [
            [
              4,
              12
            ]
          ],
          "preview": "    //@ ensures \\result \u003e= 0 \u0026\u0026 \\result \u003c a.length;"
        },
        {
          "limitHit": false,
          "lineNumber": 49,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires a != null;"
        },
        {
          "limitHit": false,
          "lineNumber": 50,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires start \u003e= 0 \u0026\u0026 start \u003c= a.length;"
        },
        {
          "limitHit": false,
          "lineNumber": 51,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires stop \u003e= 0 \u0026\u0026 stop \u003c= a.length;"
        },
        {
          "limitHit": false,
          "lineNumber": 54,
          "offsetAndLengths": [
            [
              4,
              12
            ]
          ],
          "preview": "    //@ ensures (\\result \u003e= 0 \u0026\u0026 \\result \u003c a.length) || \\result == start -1;"
        },
        {
          "limitHit": false,
          "lineNumber": 21,
          "offsetAndLengths": [
            [
              1,
              12
            ]
          ],
          "preview": "\t//@ ensures a != null;"
        }
      ],
      "repository": {
        "name": "github.com/bdqnghi/bi-tbcnn",
        "url": "/github.com/bdqnghi/bi-tbcnn"
      }
    },
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "309f5f16c3211f922fa04eed32fa7d6c58978faf"
        },
        "content": "public class Quicksort {\n\n    // Write formal pre- and post-conditions for this method.\n\t/*@ requires a != null; \n      @ requires ulimit == (\\max int i; i \u003e= 0 \u0026\u0026 i \u003c a.length; a[i]);\n      @ requires llimit == (\\min int i; i \u003e= 0 \u0026\u0026 i \u003c a.length; a[i]);\n\t  @ modifies a[*];\n\t  @ ensures a.length == \\old(a.length);\n\t  @ ensures (\\forall int i; (i \u003e 0 \u0026\u0026 i \u003c a.length) ==\u003e a[i-1] \u003c= a[i]);\n\t  @*/\n    public static void sort(int[] a, int ulimit, int llimit)\n    {\n        quicksort(a, 0, a.length, ulimit, llimit);\n    }\n\n    // Write pre-conditions for this method.\n    //@ requires a != null;\n    //@ requires start \u003e= 0;\n    //@ requires stop \u003c= a.length;\n    //@ modifies a[*];\n    // Write post-conditions for this method.\n\t//@ ensures a != null;\n    //@ ensures start \u003e= 0 \u0026\u0026 stop \u003c= a.length;\n    private static void quicksort(int[] a, int start, int stop, int ulimit, int llimit)\n    {\n        if (stop - start \u003e 1) {\n            int p = pivot(a, start, stop, ulimit, llimit);\n            quicksort(a, start, p, a[p], llimit);\n            quicksort(a, p+1, stop, ulimit, a[p]);\n        }\n    }\n\n    // Write pre-conditions for this method.\n    //@ requires a != null;\n    //@ requires start \u003c stop;\n    //@ requires start \u003e= 0;\n    //@ requires stop \u003c= a.length;\n    //@ modifies a[*];\n    // Write post-conditions for this method.\n    //@ ensures \\result \u003e= 0 \u0026\u0026 \\result \u003c a.length;\n    private static int pivot(int[] a, int start, int stop, int ulimit, int llimit)\n    {\n        int p = partition(a, a[start], start+1, stop, ulimit, llimit);\n        if (start \u003c p)\n            swap(a, start, p);\n        return p;\n    }\n\n    // Write pre-conditions for this method.\n    //@ requires a != null;\n    //@ requires start \u003e= 0 \u0026\u0026 start \u003c= a.length;\n    //@ requires stop \u003e= 0 \u0026\u0026 stop \u003c= a.length;\n    //@ modifies a[*];\n    // Write post-conditions for this method.\n    //@ ensures (\\result \u003e= 0 \u0026\u0026 \\result \u003c a.length) || \\result == start -1;\n    private static int partition(int[] a, int pivot, int start, int stop, int ulimit, int llimit)\n    {\n        if (start \u003e= stop) \n            return start - 1;\n        if (a[start] \u003c pivot)\n            return partition(a, pivot, start + 1, stop, ulimit, llimit);\n        if (a[--stop] \u003e pivot)\n            return partition(a, pivot, start, stop, ulimit, llimit);\n        if (start \u003c stop) {\n            swap(a, start, stop);\n            return partition(a, pivot, start+1, stop, ulimit, llimit);\n        } else\n            return start;\n    }\n\n    /*@ requires a != null;\n      @ requires 0 \u003c= i \u0026\u0026 i \u003c a.length;\n      @ requires 0 \u003c= j \u0026\u0026 j \u003c a.length;\n      @ modifies a[i], a[j];\n      @ ensures a[i] == \\old(a[j]) \u0026\u0026 a[j] == \\old(a[i]);\n      @*/\n    public static void swap(int[] a, int i, int j)\n    {\n        int temp = a[i];\n        a[i] = a[j];\n        a[j] = temp;\n    }\n}\n",
        "name": "2277.java",
        "path": "code/quicksort/java/2277.java",
        "url": "/github.com/bdqnghi/bi-tbcnn/-/blob/code/quicksort/java/2277.java"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 16,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires a != null;"
        },
        {
          "limitHit": false,
          "lineNumber": 17,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires start \u003e= 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 18,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires stop \u003c= a.length;"
        },
        {
          "limitHit": false,
          "lineNumber": 22,
          "offsetAndLengths": [
            [
              4,
              12
            ]
          ],
          "preview": "    //@ ensures start \u003e= 0 \u0026\u0026 stop \u003c= a.length;"
        },
        {
          "limitHit": false,
          "lineNumber": 33,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires a != null;"
        },
        {
          "limitHit": false,
          "lineNumber": 34,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires start \u003c stop;"
        },
        {
          "limitHit": false,
          "lineNumber": 35,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires start \u003e= 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 36,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires stop \u003c= a.length;"
        },
        {
          "limitHit": false,
          "lineNumber": 39,
          "offsetAndLengths": [
            [
              4,
              12
            ]
          ],
          "preview": "    //@ ensures \\result \u003e= 0 \u0026\u0026 \\result \u003c a.length;"
        },
        {
          "limitHit": false,
          "lineNumber": 49,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires a != null;"
        },
        {
          "limitHit": false,
          "lineNumber": 50,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires start \u003e= 0 \u0026\u0026 start \u003c= a.length;"
        },
        {
          "limitHit": false,
          "lineNumber": 51,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires stop \u003e= 0 \u0026\u0026 stop \u003c= a.length;"
        },
        {
          "limitHit": false,
          "lineNumber": 54,
          "offsetAndLengths": [
            [
              4,
              12
            ]
          ],
          "preview": "    //@ ensures (\\result \u003e= 0 \u0026\u0026 \\result \u003c a.length) || \\result == start -1;"
        },
        {
          "limitHit": false,
          "lineNumber": 21,
          "offsetAndLengths": [
            [
              1,
              12
            ]
          ],
          "preview": "\t//@ ensures a != null;"
        }
      ],
      "repository": {
        "name": "github.com/bdqnghi/bi-tbcnn",
        "url": "/github.com/bdqnghi/bi-tbcnn"
      }
    },
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "309f5f16c3211f922fa04eed32fa7d6c58978faf"
        },
        "content": "public class Quicksort {\n\n    // Write formal pre- and post-conditions for this method.\n\t/*@ requires a != null; \n      @ requires ulimit == (\\max int i; i \u003e= 0 \u0026\u0026 i \u003c a.length; a[i]);\n      @ requires llimit == (\\min int i; i \u003e= 0 \u0026\u0026 i \u003c a.length; a[i]);\n\t  @ modifies a[*];\n\t  @ ensures a.length == \\old(a.length);\n\t  @ ensures (\\forall int i; (i \u003e 0 \u0026\u0026 i \u003c a.length) ==\u003e a[i-1] \u003c= a[i]);\n\t  @*/\n    public static void sort(int[] a, int ulimit, int llimit)\n    {\n        quicksort(a, 0, a.length, ulimit, llimit);\n    }\n\n    // Write pre-conditions for this method.\n    //@ requires a != null;\n    //@ requires start \u003e= 0;\n    //@ requires stop \u003c= a.length;\n    //@ modifies a[*];\n    // Write post-conditions for this method.\n\t//@ ensures a != null;\n    //@ ensures start \u003e= 0 \u0026\u0026 stop \u003c= a.length;\n    private static void quicksort(int[] a, int start, int stop, int ulimit, int llimit)\n    {\n        if (stop - start \u003e 1) {\n            int p = pivot(a, start, stop, ulimit, llimit);\n            quicksort(a, start, p, a[p], llimit);\n            quicksort(a, p+1, stop, ulimit, a[p]);\n        }\n    }\n\n    // Write pre-conditions for this method.\n    //@ requires a != null;\n    //@ requires start \u003c stop;\n    //@ requires start \u003e= 0;\n    //@ requires stop \u003c= a.length;\n    //@ modifies a[*];\n    // Write post-conditions for this method.\n    //@ ensures \\result \u003e= 0 \u0026\u0026 \\result \u003c a.length;\n    private static int pivot(int[] a, int start, int stop, int ulimit, int llimit)\n    {\n        int p = partition(a, a[start], start+1, stop, ulimit, llimit);\n        if (start \u003c p)\n            swap(a, start, p);\n        return p;\n    }\n\n    // Write pre-conditions for this method.\n    //@ requires a != null;\n    //@ requires start \u003e= 0 \u0026\u0026 start \u003c= a.length;\n    //@ requires stop \u003e= 0 \u0026\u0026 stop \u003c= a.length;\n    //@ modifies a[*];\n    // Write post-conditions for this method.\n    //@ ensures (\\result \u003e= 0 \u0026\u0026 \\result \u003c a.length) || \\result == start -1;\n    private static int partition(int[] a, int pivot, int start, int stop, int ulimit, int llimit)\n    {\n        if (start \u003e= stop) \n            return start - 1;\n        if (a[start] \u003c pivot)\n            return partition(a, pivot, start + 1, stop, ulimit, llimit);\n        if (a[--stop] \u003e pivot)\n            return partition(a, pivot, start, stop, ulimit, llimit);\n        if (start \u003c stop) {\n            swap(a, start, stop);\n            return partition(a, pivot, start+1, stop, ulimit, llimit);\n        } else\n            return start;\n    }\n\n    /*@ requires a != null;\n      @ requires 0 \u003c= i \u0026\u0026 i \u003c a.length;\n      @ requires 0 \u003c= j \u0026\u0026 j \u003c a.length;\n      @ modifies a[i], a[j];\n      @ ensures a[i] == \\old(a[j]) \u0026\u0026 a[j] == \\old(a[i]);\n      @*/\n    public static void swap(int[] a, int i, int j)\n    {\n        int temp = a[i];\n        a[i] = a[j];\n        a[j] = temp;\n    }\n}\n",
        "name": "2307.java",
        "path": "code/quicksort/java/2307.java",
        "url": "/github.com/bdqnghi/bi-tbcnn/-/blob/code/quicksort/java/2307.java"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 16,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires a != null;"
        },
        {
          "limitHit": false,
          "lineNumber": 17,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires start \u003e= 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 18,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires stop \u003c= a.length;"
        },
        {
          "limitHit": false,
          "lineNumber": 22,
          "offsetAndLengths": [
            [
              4,
              12
            ]
          ],
          "preview": "    //@ ensures start \u003e= 0 \u0026\u0026 stop \u003c= a.length;"
        },
        {
          "limitHit": false,
          "lineNumber": 33,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires a != null;"
        },
        {
          "limitHit": false,
          "lineNumber": 34,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires start \u003c stop;"
        },
        {
          "limitHit": false,
          "lineNumber": 35,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires start \u003e= 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 36,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires stop \u003c= a.length;"
        },
        {
          "limitHit": false,
          "lineNumber": 39,
          "offsetAndLengths": [
            [
              4,
              12
            ]
          ],
          "preview": "    //@ ensures \\result \u003e= 0 \u0026\u0026 \\result \u003c a.length;"
        },
        {
          "limitHit": false,
          "lineNumber": 49,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires a != null;"
        },
        {
          "limitHit": false,
          "lineNumber": 50,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires start \u003e= 0 \u0026\u0026 start \u003c= a.length;"
        },
        {
          "limitHit": false,
          "lineNumber": 51,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires stop \u003e= 0 \u0026\u0026 stop \u003c= a.length;"
        },
        {
          "limitHit": false,
          "lineNumber": 54,
          "offsetAndLengths": [
            [
              4,
              12
            ]
          ],
          "preview": "    //@ ensures (\\result \u003e= 0 \u0026\u0026 \\result \u003c a.length) || \\result == start -1;"
        },
        {
          "limitHit": false,
          "lineNumber": 21,
          "offsetAndLengths": [
            [
              1,
              12
            ]
          ],
          "preview": "\t//@ ensures a != null;"
        }
      ],
      "repository": {
        "name": "github.com/bdqnghi/bi-tbcnn",
        "url": "/github.com/bdqnghi/bi-tbcnn"
      }
    },
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "309f5f16c3211f922fa04eed32fa7d6c58978faf"
        },
        "content": "public class Quicksort {\n\n    // Write formal pre- and post-conditions for this method.\n\t/*@ requires a != null; \n      @ requires ulimit == (\\max int i; i \u003e= 0 \u0026\u0026 i \u003c a.length; a[i]);\n      @ requires llimit == (\\min int i; i \u003e= 0 \u0026\u0026 i \u003c a.length; a[i]);\n\t  @ modifies a[*];\n\t  @ ensures a.length == \\old(a.length);\n\t  @ ensures (\\forall int i; (i \u003e 0 \u0026\u0026 i \u003c a.length) ==\u003e a[i-1] \u003c= a[i]);\n\t  @*/\n    public static void sort(int[] a, int ulimit, int llimit)\n    {\n        quicksort(a, 0, a.length, ulimit, llimit);\n    }\n\n    // Write pre-conditions for this method.\n    //@ requires a != null;\n    //@ requires start \u003e= 0;\n    //@ requires stop \u003c= a.length;\n    //@ modifies a[*];\n    // Write post-conditions for this method.\n\t//@ ensures a != null;\n    //@ ensures start \u003e= 0 \u0026\u0026 stop \u003c= a.length;\n    private static void quicksort(int[] a, int start, int stop, int ulimit, int llimit)\n    {\n        if (stop - start \u003e 1) {\n            int p = pivot(a, start, stop, ulimit, llimit);\n            quicksort(a, start, p, a[p], llimit);\n            quicksort(a, p+1, stop, ulimit, a[p]);\n        }\n    }\n\n    // Write pre-conditions for this method.\n    //@ requires a != null;\n    //@ requires start \u003c stop;\n    //@ requires start \u003e= 0;\n    //@ requires stop \u003c= a.length;\n    //@ modifies a[*];\n    // Write post-conditions for this method.\n    //@ ensures \\result \u003e= 0 \u0026\u0026 \\result \u003c a.length;\n    private static int pivot(int[] a, int start, int stop, int ulimit, int llimit)\n    {\n        int p = partition(a, a[start], start+1, stop, ulimit, llimit);\n        if (start \u003c p)\n            swap(a, start, p);\n        return p;\n    }\n\n    // Write pre-conditions for this method.\n    //@ requires a != null;\n    //@ requires start \u003e= 0 \u0026\u0026 start \u003c= a.length;\n    //@ requires stop \u003e= 0 \u0026\u0026 stop \u003c= a.length;\n    //@ modifies a[*];\n    // Write post-conditions for this method.\n    //@ ensures (\\result \u003e= 0 \u0026\u0026 \\result \u003c a.length) || \\result == start -1;\n    private static int partition(int[] a, int pivot, int start, int stop, int ulimit, int llimit)\n    {\n        if (start \u003e= stop) \n            return start - 1;\n        if (a[start] \u003c pivot)\n            return partition(a, pivot, start + 1, stop, ulimit, llimit);\n        if (a[--stop] \u003e pivot)\n            return partition(a, pivot, start, stop, ulimit, llimit);\n        if (start \u003c stop) {\n            swap(a, start, stop);\n            return partition(a, pivot, start+1, stop, ulimit, llimit);\n        } else\n            return start;\n    }\n\n    /*@ requires a != null;\n      @ requires 0 \u003c= i \u0026\u0026 i \u003c a.length;\n      @ requires 0 \u003c= j \u0026\u0026 j \u003c a.length;\n      @ modifies a[i], a[j];\n      @ ensures a[i] == \\old(a[j]) \u0026\u0026 a[j] == \\old(a[i]);\n      @*/\n    public static void swap(int[] a, int i, int j)\n    {\n        int temp = a[i];\n        a[i] = a[j];\n        a[j] = temp;\n    }\n}\n",
        "name": "2337.java",
        "path": "code/quicksort/java/2337.java",
        "url": "/github.com/bdqnghi/bi-tbcnn/-/blob/code/quicksort/java/2337.java"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 16,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires a != null;"
        },
        {
          "limitHit": false,
          "lineNumber": 17,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires start \u003e= 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 18,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires stop \u003c= a.length;"
        },
        {
          "limitHit": false,
          "lineNumber": 22,
          "offsetAndLengths": [
            [
              4,
              12
            ]
          ],
          "preview": "    //@ ensures start \u003e= 0 \u0026\u0026 stop \u003c= a.length;"
        },
        {
          "limitHit": false,
          "lineNumber": 33,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires a != null;"
        },
        {
          "limitHit": false,
          "lineNumber": 34,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires start \u003c stop;"
        },
        {
          "limitHit": false,
          "lineNumber": 35,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires start \u003e= 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 36,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires stop \u003c= a.length;"
        },
        {
          "limitHit": false,
          "lineNumber": 39,
          "offsetAndLengths": [
            [
              4,
              12
            ]
          ],
          "preview": "    //@ ensures \\result \u003e= 0 \u0026\u0026 \\result \u003c a.length;"
        },
        {
          "limitHit": false,
          "lineNumber": 49,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires a != null;"
        },
        {
          "limitHit": false,
          "lineNumber": 50,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires start \u003e= 0 \u0026\u0026 start \u003c= a.length;"
        },
        {
          "limitHit": false,
          "lineNumber": 51,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires stop \u003e= 0 \u0026\u0026 stop \u003c= a.length;"
        },
        {
          "limitHit": false,
          "lineNumber": 54,
          "offsetAndLengths": [
            [
              4,
              12
            ]
          ],
          "preview": "    //@ ensures (\\result \u003e= 0 \u0026\u0026 \\result \u003c a.length) || \\result == start -1;"
        },
        {
          "limitHit": false,
          "lineNumber": 21,
          "offsetAndLengths": [
            [
              1,
              12
            ]
          ],
          "preview": "\t//@ ensures a != null;"
        }
      ],
      "repository": {
        "name": "github.com/bdqnghi/bi-tbcnn",
        "url": "/github.com/bdqnghi/bi-tbcnn"
      }
    },
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "309f5f16c3211f922fa04eed32fa7d6c58978faf"
        },
        "content": "public class Quicksort {\n\n    // Write formal pre- and post-conditions for this method.\n\t/*@ requires a != null; \n      @ requires ulimit == (\\max int i; i \u003e= 0 \u0026\u0026 i \u003c a.length; a[i]);\n      @ requires llimit == (\\min int i; i \u003e= 0 \u0026\u0026 i \u003c a.length; a[i]);\n\t  @ modifies a[*];\n\t  @ ensures a.length == \\old(a.length);\n\t  @ ensures (\\forall int i; (i \u003e 0 \u0026\u0026 i \u003c a.length) ==\u003e a[i-1] \u003c= a[i]);\n\t  @*/\n    public static void sort(int[] a, int ulimit, int llimit)\n    {\n        quicksort(a, 0, a.length, ulimit, llimit);\n    }\n\n    // Write pre-conditions for this method.\n    //@ requires a != null;\n    //@ requires start \u003e= 0;\n    //@ requires stop \u003c= a.length;\n    //@ modifies a[*];\n    // Write post-conditions for this method.\n\t//@ ensures a != null;\n    //@ ensures start \u003e= 0 \u0026\u0026 stop \u003c= a.length;\n    private static void quicksort(int[] a, int start, int stop, int ulimit, int llimit)\n    {\n        if (stop - start \u003e 1) {\n            int p = pivot(a, start, stop, ulimit, llimit);\n            quicksort(a, start, p, a[p], llimit);\n            quicksort(a, p+1, stop, ulimit, a[p]);\n        }\n    }\n\n    // Write pre-conditions for this method.\n    //@ requires a != null;\n    //@ requires start \u003c stop;\n    //@ requires start \u003e= 0;\n    //@ requires stop \u003c= a.length;\n    //@ modifies a[*];\n    // Write post-conditions for this method.\n    //@ ensures \\result \u003e= 0 \u0026\u0026 \\result \u003c a.length;\n    private static int pivot(int[] a, int start, int stop, int ulimit, int llimit)\n    {\n        int p = partition(a, a[start], start+1, stop, ulimit, llimit);\n        if (start \u003c p)\n            swap(a, start, p);\n        return p;\n    }\n\n    // Write pre-conditions for this method.\n    //@ requires a != null;\n    //@ requires start \u003e= 0 \u0026\u0026 start \u003c= a.length;\n    //@ requires stop \u003e= 0 \u0026\u0026 stop \u003c= a.length;\n    //@ modifies a[*];\n    // Write post-conditions for this method.\n    //@ ensures (\\result \u003e= 0 \u0026\u0026 \\result \u003c a.length) || \\result == start -1;\n    private static int partition(int[] a, int pivot, int start, int stop, int ulimit, int llimit)\n    {\n        if (start \u003e= stop) \n            return start - 1;\n        if (a[start] \u003c pivot)\n            return partition(a, pivot, start + 1, stop, ulimit, llimit);\n        if (a[--stop] \u003e pivot)\n            return partition(a, pivot, start, stop, ulimit, llimit);\n        if (start \u003c stop) {\n            swap(a, start, stop);\n            return partition(a, pivot, start+1, stop, ulimit, llimit);\n        } else\n            return start;\n    }\n\n    /*@ requires a != null;\n      @ requires 0 \u003c= i \u0026\u0026 i \u003c a.length;\n      @ requires 0 \u003c= j \u0026\u0026 j \u003c a.length;\n      @ modifies a[i], a[j];\n      @ ensures a[i] == \\old(a[j]) \u0026\u0026 a[j] == \\old(a[i]);\n      @*/\n    public static void swap(int[] a, int i, int j)\n    {\n        int temp = a[i];\n        a[i] = a[j];\n        a[j] = temp;\n    }\n}\n",
        "name": "2367.java",
        "path": "code/quicksort/java/2367.java",
        "url": "/github.com/bdqnghi/bi-tbcnn/-/blob/code/quicksort/java/2367.java"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 16,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires a != null;"
        },
        {
          "limitHit": false,
          "lineNumber": 17,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires start \u003e= 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 18,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires stop \u003c= a.length;"
        },
        {
          "limitHit": false,
          "lineNumber": 22,
          "offsetAndLengths": [
            [
              4,
              12
            ]
          ],
          "preview": "    //@ ensures start \u003e= 0 \u0026\u0026 stop \u003c= a.length;"
        },
        {
          "limitHit": false,
          "lineNumber": 33,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires a != null;"
        },
        {
          "limitHit": false,
          "lineNumber": 34,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires start \u003c stop;"
        },
        {
          "limitHit": false,
          "lineNumber": 35,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires start \u003e= 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 36,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires stop \u003c= a.length;"
        },
        {
          "limitHit": false,
          "lineNumber": 39,
          "offsetAndLengths": [
            [
              4,
              12
            ]
          ],
          "preview": "    //@ ensures \\result \u003e= 0 \u0026\u0026 \\result \u003c a.length;"
        },
        {
          "limitHit": false,
          "lineNumber": 49,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires a != null;"
        },
        {
          "limitHit": false,
          "lineNumber": 50,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires start \u003e= 0 \u0026\u0026 start \u003c= a.length;"
        },
        {
          "limitHit": false,
          "lineNumber": 51,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires stop \u003e= 0 \u0026\u0026 stop \u003c= a.length;"
        },
        {
          "limitHit": false,
          "lineNumber": 54,
          "offsetAndLengths": [
            [
              4,
              12
            ]
          ],
          "preview": "    //@ ensures (\\result \u003e= 0 \u0026\u0026 \\result \u003c a.length) || \\result == start -1;"
        },
        {
          "limitHit": false,
          "lineNumber": 21,
          "offsetAndLengths": [
            [
              1,
              12
            ]
          ],
          "preview": "\t//@ ensures a != null;"
        }
      ],
      "repository": {
        "name": "github.com/bdqnghi/bi-tbcnn",
        "url": "/github.com/bdqnghi/bi-tbcnn"
      }
    },
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "309f5f16c3211f922fa04eed32fa7d6c58978faf"
        },
        "content": "public class Quicksort {\n\n    // Write formal pre- and post-conditions for this method.\n\t/*@ requires a != null; \n      @ requires ulimit == (\\max int i; i \u003e= 0 \u0026\u0026 i \u003c a.length; a[i]);\n      @ requires llimit == (\\min int i; i \u003e= 0 \u0026\u0026 i \u003c a.length; a[i]);\n\t  @ modifies a[*];\n\t  @ ensures a.length == \\old(a.length);\n\t  @ ensures (\\forall int i; (i \u003e 0 \u0026\u0026 i \u003c a.length) ==\u003e a[i-1] \u003c= a[i]);\n\t  @*/\n    public static void sort(int[] a, int ulimit, int llimit)\n    {\n        quicksort(a, 0, a.length, ulimit, llimit);\n    }\n\n    // Write pre-conditions for this method.\n    //@ requires a != null;\n    //@ requires start \u003e= 0;\n    //@ requires stop \u003c= a.length;\n    //@ modifies a[*];\n    // Write post-conditions for this method.\n\t//@ ensures a != null;\n    //@ ensures start \u003e= 0 \u0026\u0026 stop \u003c= a.length;\n    private static void quicksort(int[] a, int start, int stop, int ulimit, int llimit)\n    {\n        if (stop - start \u003e 1) {\n            int p = pivot(a, start, stop, ulimit, llimit);\n            quicksort(a, start, p, a[p], llimit);\n            quicksort(a, p+1, stop, ulimit, a[p]);\n        }\n    }\n\n    // Write pre-conditions for this method.\n    //@ requires a != null;\n    //@ requires start \u003c stop;\n    //@ requires start \u003e= 0;\n    //@ requires stop \u003c= a.length;\n    //@ modifies a[*];\n    // Write post-conditions for this method.\n    //@ ensures \\result \u003e= 0 \u0026\u0026 \\result \u003c a.length;\n    private static int pivot(int[] a, int start, int stop, int ulimit, int llimit)\n    {\n        int p = partition(a, a[start], start+1, stop, ulimit, llimit);\n        if (start \u003c p)\n            swap(a, start, p);\n        return p;\n    }\n\n    // Write pre-conditions for this method.\n    //@ requires a != null;\n    //@ requires start \u003e= 0 \u0026\u0026 start \u003c= a.length;\n    //@ requires stop \u003e= 0 \u0026\u0026 stop \u003c= a.length;\n    //@ modifies a[*];\n    // Write post-conditions for this method.\n    //@ ensures (\\result \u003e= 0 \u0026\u0026 \\result \u003c a.length) || \\result == start -1;\n    private static int partition(int[] a, int pivot, int start, int stop, int ulimit, int llimit)\n    {\n        if (start \u003e= stop) \n            return start - 1;\n        if (a[start] \u003c pivot)\n            return partition(a, pivot, start + 1, stop, ulimit, llimit);\n        if (a[--stop] \u003e pivot)\n            return partition(a, pivot, start, stop, ulimit, llimit);\n        if (start \u003c stop) {\n            swap(a, start, stop);\n            return partition(a, pivot, start+1, stop, ulimit, llimit);\n        } else\n            return start;\n    }\n\n    /*@ requires a != null;\n      @ requires 0 \u003c= i \u0026\u0026 i \u003c a.length;\n      @ requires 0 \u003c= j \u0026\u0026 j \u003c a.length;\n      @ modifies a[i], a[j];\n      @ ensures a[i] == \\old(a[j]) \u0026\u0026 a[j] == \\old(a[i]);\n      @*/\n    public static void swap(int[] a, int i, int j)\n    {\n        int temp = a[i];\n        a[i] = a[j];\n        a[j] = temp;\n    }\n}\n",
        "name": "2397.java",
        "path": "code/quicksort/java/2397.java",
        "url": "/github.com/bdqnghi/bi-tbcnn/-/blob/code/quicksort/java/2397.java"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 16,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires a != null;"
        },
        {
          "limitHit": false,
          "lineNumber": 17,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires start \u003e= 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 18,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires stop \u003c= a.length;"
        },
        {
          "limitHit": false,
          "lineNumber": 22,
          "offsetAndLengths": [
            [
              4,
              12
            ]
          ],
          "preview": "    //@ ensures start \u003e= 0 \u0026\u0026 stop \u003c= a.length;"
        },
        {
          "limitHit": false,
          "lineNumber": 33,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires a != null;"
        },
        {
          "limitHit": false,
          "lineNumber": 34,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires start \u003c stop;"
        },
        {
          "limitHit": false,
          "lineNumber": 35,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires start \u003e= 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 36,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires stop \u003c= a.length;"
        },
        {
          "limitHit": false,
          "lineNumber": 39,
          "offsetAndLengths": [
            [
              4,
              12
            ]
          ],
          "preview": "    //@ ensures \\result \u003e= 0 \u0026\u0026 \\result \u003c a.length;"
        },
        {
          "limitHit": false,
          "lineNumber": 49,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires a != null;"
        },
        {
          "limitHit": false,
          "lineNumber": 50,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires start \u003e= 0 \u0026\u0026 start \u003c= a.length;"
        },
        {
          "limitHit": false,
          "lineNumber": 51,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires stop \u003e= 0 \u0026\u0026 stop \u003c= a.length;"
        },
        {
          "limitHit": false,
          "lineNumber": 54,
          "offsetAndLengths": [
            [
              4,
              12
            ]
          ],
          "preview": "    //@ ensures (\\result \u003e= 0 \u0026\u0026 \\result \u003c a.length) || \\result == start -1;"
        },
        {
          "limitHit": false,
          "lineNumber": 21,
          "offsetAndLengths": [
            [
              1,
              12
            ]
          ],
          "preview": "\t//@ ensures a != null;"
        }
      ],
      "repository": {
        "name": "github.com/bdqnghi/bi-tbcnn",
        "url": "/github.com/bdqnghi/bi-tbcnn"
      }
    },
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "309f5f16c3211f922fa04eed32fa7d6c58978faf"
        },
        "content": "public class Quicksort {\n\n    // Write formal pre- and post-conditions for this method.\n\t/*@ requires a != null; \n      @ requires ulimit == (\\max int i; i \u003e= 0 \u0026\u0026 i \u003c a.length; a[i]);\n      @ requires llimit == (\\min int i; i \u003e= 0 \u0026\u0026 i \u003c a.length; a[i]);\n\t  @ modifies a[*];\n\t  @ ensures a.length == \\old(a.length);\n\t  @ ensures (\\forall int i; (i \u003e 0 \u0026\u0026 i \u003c a.length) ==\u003e a[i-1] \u003c= a[i]);\n\t  @*/\n    public static void sort(int[] a, int ulimit, int llimit)\n    {\n        quicksort(a, 0, a.length, ulimit, llimit);\n    }\n\n    // Write pre-conditions for this method.\n    //@ requires a != null;\n    //@ requires start \u003e= 0;\n    //@ requires stop \u003c= a.length;\n    //@ modifies a[*];\n    // Write post-conditions for this method.\n\t//@ ensures a != null;\n    //@ ensures start \u003e= 0 \u0026\u0026 stop \u003c= a.length;\n    private static void quicksort(int[] a, int start, int stop, int ulimit, int llimit)\n    {\n        if (stop - start \u003e 1) {\n            int p = pivot(a, start, stop, ulimit, llimit);\n            quicksort(a, start, p, a[p], llimit);\n            quicksort(a, p+1, stop, ulimit, a[p]);\n        }\n    }\n\n    // Write pre-conditions for this method.\n    //@ requires a != null;\n    //@ requires start \u003c stop;\n    //@ requires start \u003e= 0;\n    //@ requires stop \u003c= a.length;\n    //@ modifies a[*];\n    // Write post-conditions for this method.\n    //@ ensures \\result \u003e= 0 \u0026\u0026 \\result \u003c a.length;\n    private static int pivot(int[] a, int start, int stop, int ulimit, int llimit)\n    {\n        int p = partition(a, a[start], start+1, stop, ulimit, llimit);\n        if (start \u003c p)\n            swap(a, start, p);\n        return p;\n    }\n\n    // Write pre-conditions for this method.\n    //@ requires a != null;\n    //@ requires start \u003e= 0 \u0026\u0026 start \u003c= a.length;\n    //@ requires stop \u003e= 0 \u0026\u0026 stop \u003c= a.length;\n    //@ modifies a[*];\n    // Write post-conditions for this method.\n    //@ ensures (\\result \u003e= 0 \u0026\u0026 \\result \u003c a.length) || \\result == start -1;\n    private static int partition(int[] a, int pivot, int start, int stop, int ulimit, int llimit)\n    {\n        if (start \u003e= stop) \n            return start - 1;\n        if (a[start] \u003c pivot)\n            return partition(a, pivot, start + 1, stop, ulimit, llimit);\n        if (a[--stop] \u003e pivot)\n            return partition(a, pivot, start, stop, ulimit, llimit);\n        if (start \u003c stop) {\n            swap(a, start, stop);\n            return partition(a, pivot, start+1, stop, ulimit, llimit);\n        } else\n            return start;\n    }\n\n    /*@ requires a != null;\n      @ requires 0 \u003c= i \u0026\u0026 i \u003c a.length;\n      @ requires 0 \u003c= j \u0026\u0026 j \u003c a.length;\n      @ modifies a[i], a[j];\n      @ ensures a[i] == \\old(a[j]) \u0026\u0026 a[j] == \\old(a[i]);\n      @*/\n    public static void swap(int[] a, int i, int j)\n    {\n        int temp = a[i];\n        a[i] = a[j];\n        a[j] = temp;\n    }\n}\n",
        "name": "2427.java",
        "path": "code/quicksort/java/2427.java",
        "url": "/github.com/bdqnghi/bi-tbcnn/-/blob/code/quicksort/java/2427.java"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 16,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires a != null;"
        },
        {
          "limitHit": false,
          "lineNumber": 17,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires start \u003e= 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 18,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires stop \u003c= a.length;"
        },
        {
          "limitHit": false,
          "lineNumber": 22,
          "offsetAndLengths": [
            [
              4,
              12
            ]
          ],
          "preview": "    //@ ensures start \u003e= 0 \u0026\u0026 stop \u003c= a.length;"
        },
        {
          "limitHit": false,
          "lineNumber": 33,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires a != null;"
        },
        {
          "limitHit": false,
          "lineNumber": 34,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires start \u003c stop;"
        },
        {
          "limitHit": false,
          "lineNumber": 35,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires start \u003e= 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 36,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires stop \u003c= a.length;"
        },
        {
          "limitHit": false,
          "lineNumber": 39,
          "offsetAndLengths": [
            [
              4,
              12
            ]
          ],
          "preview": "    //@ ensures \\result \u003e= 0 \u0026\u0026 \\result \u003c a.length;"
        },
        {
          "limitHit": false,
          "lineNumber": 49,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires a != null;"
        },
        {
          "limitHit": false,
          "lineNumber": 50,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires start \u003e= 0 \u0026\u0026 start \u003c= a.length;"
        },
        {
          "limitHit": false,
          "lineNumber": 51,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires stop \u003e= 0 \u0026\u0026 stop \u003c= a.length;"
        },
        {
          "limitHit": false,
          "lineNumber": 54,
          "offsetAndLengths": [
            [
              4,
              12
            ]
          ],
          "preview": "    //@ ensures (\\result \u003e= 0 \u0026\u0026 \\result \u003c a.length) || \\result == start -1;"
        },
        {
          "limitHit": false,
          "lineNumber": 21,
          "offsetAndLengths": [
            [
              1,
              12
            ]
          ],
          "preview": "\t//@ ensures a != null;"
        }
      ],
      "repository": {
        "name": "github.com/bdqnghi/bi-tbcnn",
        "url": "/github.com/bdqnghi/bi-tbcnn"
      }
    },
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "309f5f16c3211f922fa04eed32fa7d6c58978faf"
        },
        "content": "public class Quicksort {\n\n    // Write formal pre- and post-conditions for this method.\n\t/*@ requires a != null; \n      @ requires ulimit == (\\max int i; i \u003e= 0 \u0026\u0026 i \u003c a.length; a[i]);\n      @ requires llimit == (\\min int i; i \u003e= 0 \u0026\u0026 i \u003c a.length; a[i]);\n\t  @ modifies a[*];\n\t  @ ensures a.length == \\old(a.length);\n\t  @ ensures (\\forall int i; (i \u003e 0 \u0026\u0026 i \u003c a.length) ==\u003e a[i-1] \u003c= a[i]);\n\t  @*/\n    public static void sort(int[] a, int ulimit, int llimit)\n    {\n        quicksort(a, 0, a.length, ulimit, llimit);\n    }\n\n    // Write pre-conditions for this method.\n    //@ requires a != null;\n    //@ requires start \u003e= 0;\n    //@ requires stop \u003c= a.length;\n    //@ modifies a[*];\n    // Write post-conditions for this method.\n\t//@ ensures a != null;\n    //@ ensures start \u003e= 0 \u0026\u0026 stop \u003c= a.length;\n    private static void quicksort(int[] a, int start, int stop, int ulimit, int llimit)\n    {\n        if (stop - start \u003e 1) {\n            int p = pivot(a, start, stop, ulimit, llimit);\n            quicksort(a, start, p, a[p], llimit);\n            quicksort(a, p+1, stop, ulimit, a[p]);\n        }\n    }\n\n    // Write pre-conditions for this method.\n    //@ requires a != null;\n    //@ requires start \u003c stop;\n    //@ requires start \u003e= 0;\n    //@ requires stop \u003c= a.length;\n    //@ modifies a[*];\n    // Write post-conditions for this method.\n    //@ ensures \\result \u003e= 0 \u0026\u0026 \\result \u003c a.length;\n    private static int pivot(int[] a, int start, int stop, int ulimit, int llimit)\n    {\n        int p = partition(a, a[start], start+1, stop, ulimit, llimit);\n        if (start \u003c p)\n            swap(a, start, p);\n        return p;\n    }\n\n    // Write pre-conditions for this method.\n    //@ requires a != null;\n    //@ requires start \u003e= 0 \u0026\u0026 start \u003c= a.length;\n    //@ requires stop \u003e= 0 \u0026\u0026 stop \u003c= a.length;\n    //@ modifies a[*];\n    // Write post-conditions for this method.\n    //@ ensures (\\result \u003e= 0 \u0026\u0026 \\result \u003c a.length) || \\result == start -1;\n    private static int partition(int[] a, int pivot, int start, int stop, int ulimit, int llimit)\n    {\n        if (start \u003e= stop) \n            return start - 1;\n        if (a[start] \u003c pivot)\n            return partition(a, pivot, start + 1, stop, ulimit, llimit);\n        if (a[--stop] \u003e pivot)\n            return partition(a, pivot, start, stop, ulimit, llimit);\n        if (start \u003c stop) {\n            swap(a, start, stop);\n            return partition(a, pivot, start+1, stop, ulimit, llimit);\n        } else\n            return start;\n    }\n\n    /*@ requires a != null;\n      @ requires 0 \u003c= i \u0026\u0026 i \u003c a.length;\n      @ requires 0 \u003c= j \u0026\u0026 j \u003c a.length;\n      @ modifies a[i], a[j];\n      @ ensures a[i] == \\old(a[j]) \u0026\u0026 a[j] == \\old(a[i]);\n      @*/\n    public static void swap(int[] a, int i, int j)\n    {\n        int temp = a[i];\n        a[i] = a[j];\n        a[j] = temp;\n    }\n}\n",
        "name": "2457.java",
        "path": "code/quicksort/java/2457.java",
        "url": "/github.com/bdqnghi/bi-tbcnn/-/blob/code/quicksort/java/2457.java"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 16,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires a != null;"
        },
        {
          "limitHit": false,
          "lineNumber": 17,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires start \u003e= 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 18,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires stop \u003c= a.length;"
        },
        {
          "limitHit": false,
          "lineNumber": 22,
          "offsetAndLengths": [
            [
              4,
              12
            ]
          ],
          "preview": "    //@ ensures start \u003e= 0 \u0026\u0026 stop \u003c= a.length;"
        },
        {
          "limitHit": false,
          "lineNumber": 33,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires a != null;"
        },
        {
          "limitHit": false,
          "lineNumber": 34,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires start \u003c stop;"
        },
        {
          "limitHit": false,
          "lineNumber": 35,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires start \u003e= 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 36,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires stop \u003c= a.length;"
        },
        {
          "limitHit": false,
          "lineNumber": 39,
          "offsetAndLengths": [
            [
              4,
              12
            ]
          ],
          "preview": "    //@ ensures \\result \u003e= 0 \u0026\u0026 \\result \u003c a.length;"
        },
        {
          "limitHit": false,
          "lineNumber": 49,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires a != null;"
        },
        {
          "limitHit": false,
          "lineNumber": 50,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires start \u003e= 0 \u0026\u0026 start \u003c= a.length;"
        },
        {
          "limitHit": false,
          "lineNumber": 51,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires stop \u003e= 0 \u0026\u0026 stop \u003c= a.length;"
        },
        {
          "limitHit": false,
          "lineNumber": 54,
          "offsetAndLengths": [
            [
              4,
              12
            ]
          ],
          "preview": "    //@ ensures (\\result \u003e= 0 \u0026\u0026 \\result \u003c a.length) || \\result == start -1;"
        },
        {
          "limitHit": false,
          "lineNumber": 21,
          "offsetAndLengths": [
            [
              1,
              12
            ]
          ],
          "preview": "\t//@ ensures a != null;"
        }
      ],
      "repository": {
        "name": "github.com/bdqnghi/bi-tbcnn",
        "url": "/github.com/bdqnghi/bi-tbcnn"
      }
    },
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "309f5f16c3211f922fa04eed32fa7d6c58978faf"
        },
        "content": "public class Quicksort {\n\n    // Write formal pre- and post-conditions for this method.\n\t/*@ requires a != null; \n      @ requires ulimit == (\\max int i; i \u003e= 0 \u0026\u0026 i \u003c a.length; a[i]);\n      @ requires llimit == (\\min int i; i \u003e= 0 \u0026\u0026 i \u003c a.length; a[i]);\n\t  @ modifies a[*];\n\t  @ ensures a.length == \\old(a.length);\n\t  @ ensures (\\forall int i; (i \u003e 0 \u0026\u0026 i \u003c a.length) ==\u003e a[i-1] \u003c= a[i]);\n\t  @*/\n    public static void sort(int[] a, int ulimit, int llimit)\n    {\n        quicksort(a, 0, a.length, ulimit, llimit);\n    }\n\n    // Write pre-conditions for this method.\n    //@ requires a != null;\n    //@ requires start \u003e= 0;\n    //@ requires stop \u003c= a.length;\n    //@ modifies a[*];\n    // Write post-conditions for this method.\n\t//@ ensures a != null;\n    //@ ensures start \u003e= 0 \u0026\u0026 stop \u003c= a.length;\n    private static void quicksort(int[] a, int start, int stop, int ulimit, int llimit)\n    {\n        if (stop - start \u003e 1) {\n            int p = pivot(a, start, stop, ulimit, llimit);\n            quicksort(a, start, p, a[p], llimit);\n            quicksort(a, p+1, stop, ulimit, a[p]);\n        }\n    }\n\n    // Write pre-conditions for this method.\n    //@ requires a != null;\n    //@ requires start \u003c stop;\n    //@ requires start \u003e= 0;\n    //@ requires stop \u003c= a.length;\n    //@ modifies a[*];\n    // Write post-conditions for this method.\n    //@ ensures \\result \u003e= 0 \u0026\u0026 \\result \u003c a.length;\n    private static int pivot(int[] a, int start, int stop, int ulimit, int llimit)\n    {\n        int p = partition(a, a[start], start+1, stop, ulimit, llimit);\n        if (start \u003c p)\n            swap(a, start, p);\n        return p;\n    }\n\n    // Write pre-conditions for this method.\n    //@ requires a != null;\n    //@ requires start \u003e= 0 \u0026\u0026 start \u003c= a.length;\n    //@ requires stop \u003e= 0 \u0026\u0026 stop \u003c= a.length;\n    //@ modifies a[*];\n    // Write post-conditions for this method.\n    //@ ensures (\\result \u003e= 0 \u0026\u0026 \\result \u003c a.length) || \\result == start -1;\n    private static int partition(int[] a, int pivot, int start, int stop, int ulimit, int llimit)\n    {\n        if (start \u003e= stop) \n            return start - 1;\n        if (a[start] \u003c pivot)\n            return partition(a, pivot, start + 1, stop, ulimit, llimit);\n        if (a[--stop] \u003e pivot)\n            return partition(a, pivot, start, stop, ulimit, llimit);\n        if (start \u003c stop) {\n            swap(a, start, stop);\n            return partition(a, pivot, start+1, stop, ulimit, llimit);\n        } else\n            return start;\n    }\n\n    /*@ requires a != null;\n      @ requires 0 \u003c= i \u0026\u0026 i \u003c a.length;\n      @ requires 0 \u003c= j \u0026\u0026 j \u003c a.length;\n      @ modifies a[i], a[j];\n      @ ensures a[i] == \\old(a[j]) \u0026\u0026 a[j] == \\old(a[i]);\n      @*/\n    public static void swap(int[] a, int i, int j)\n    {\n        int temp = a[i];\n        a[i] = a[j];\n        a[j] = temp;\n    }\n}\n",
        "name": "2487.java",
        "path": "code/quicksort/java/2487.java",
        "url": "/github.com/bdqnghi/bi-tbcnn/-/blob/code/quicksort/java/2487.java"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 16,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires a != null;"
        },
        {
          "limitHit": false,
          "lineNumber": 17,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires start \u003e= 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 18,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires stop \u003c= a.length;"
        },
        {
          "limitHit": false,
          "lineNumber": 22,
          "offsetAndLengths": [
            [
              4,
              12
            ]
          ],
          "preview": "    //@ ensures start \u003e= 0 \u0026\u0026 stop \u003c= a.length;"
        },
        {
          "limitHit": false,
          "lineNumber": 33,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires a != null;"
        },
        {
          "limitHit": false,
          "lineNumber": 34,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires start \u003c stop;"
        },
        {
          "limitHit": false,
          "lineNumber": 35,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires start \u003e= 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 36,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires stop \u003c= a.length;"
        },
        {
          "limitHit": false,
          "lineNumber": 39,
          "offsetAndLengths": [
            [
              4,
              12
            ]
          ],
          "preview": "    //@ ensures \\result \u003e= 0 \u0026\u0026 \\result \u003c a.length;"
        },
        {
          "limitHit": false,
          "lineNumber": 49,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires a != null;"
        },
        {
          "limitHit": false,
          "lineNumber": 50,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires start \u003e= 0 \u0026\u0026 start \u003c= a.length;"
        },
        {
          "limitHit": false,
          "lineNumber": 51,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires stop \u003e= 0 \u0026\u0026 stop \u003c= a.length;"
        },
        {
          "limitHit": false,
          "lineNumber": 54,
          "offsetAndLengths": [
            [
              4,
              12
            ]
          ],
          "preview": "    //@ ensures (\\result \u003e= 0 \u0026\u0026 \\result \u003c a.length) || \\result == start -1;"
        },
        {
          "limitHit": false,
          "lineNumber": 21,
          "offsetAndLengths": [
            [
              1,
              12
            ]
          ],
          "preview": "\t//@ ensures a != null;"
        }
      ],
      "repository": {
        "name": "github.com/bdqnghi/bi-tbcnn",
        "url": "/github.com/bdqnghi/bi-tbcnn"
      }
    },
    {
      "__typename": "FileMatch",
      "file": {
        "commit": {
          "oid": "309f5f16c3211f922fa04eed32fa7d6c58978faf"
        },
        "content": "public class Quicksort {\n\n    // Write formal pre- and post-conditions for this method.\n\t/*@ requires a != null; \n      @ requires ulimit == (\\max int i; i \u003e= 0 \u0026\u0026 i \u003c a.length; a[i]);\n      @ requires llimit == (\\min int i; i \u003e= 0 \u0026\u0026 i \u003c a.length; a[i]);\n\t  @ modifies a[*];\n\t  @ ensures a.length == \\old(a.length);\n\t  @ ensures (\\forall int i; (i \u003e 0 \u0026\u0026 i \u003c a.length) ==\u003e a[i-1] \u003c= a[i]);\n\t  @*/\n    public static void sort(int[] a, int ulimit, int llimit)\n    {\n        quicksort(a, 0, a.length, ulimit, llimit);\n    }\n\n    // Write pre-conditions for this method.\n    //@ requires a != null;\n    //@ requires start \u003e= 0;\n    //@ requires stop \u003c= a.length;\n    //@ modifies a[*];\n    // Write post-conditions for this method.\n\t//@ ensures a != null;\n    //@ ensures start \u003e= 0 \u0026\u0026 stop \u003c= a.length;\n    private static void quicksort(int[] a, int start, int stop, int ulimit, int llimit)\n    {\n        if (stop - start \u003e 1) {\n            int p = pivot(a, start, stop, ulimit, llimit);\n            quicksort(a, start, p, a[p], llimit);\n            quicksort(a, p+1, stop, ulimit, a[p]);\n        }\n    }\n\n    // Write pre-conditions for this method.\n    //@ requires a != null;\n    //@ requires start \u003c stop;\n    //@ requires start \u003e= 0;\n    //@ requires stop \u003c= a.length;\n    //@ modifies a[*];\n    // Write post-conditions for this method.\n    //@ ensures \\result \u003e= 0 \u0026\u0026 \\result \u003c a.length;\n    private static int pivot(int[] a, int start, int stop, int ulimit, int llimit)\n    {\n        int p = partition(a, a[start], start+1, stop, ulimit, llimit);\n        if (start \u003c p)\n            swap(a, start, p);\n        return p;\n    }\n\n    // Write pre-conditions for this method.\n    //@ requires a != null;\n    //@ requires start \u003e= 0 \u0026\u0026 start \u003c= a.length;\n    //@ requires stop \u003e= 0 \u0026\u0026 stop \u003c= a.length;\n    //@ modifies a[*];\n    // Write post-conditions for this method.\n    //@ ensures (\\result \u003e= 0 \u0026\u0026 \\result \u003c a.length) || \\result == start -1;\n    private static int partition(int[] a, int pivot, int start, int stop, int ulimit, int llimit)\n    {\n        if (start \u003e= stop) \n            return start - 1;\n        if (a[start] \u003c pivot)\n            return partition(a, pivot, start + 1, stop, ulimit, llimit);\n        if (a[--stop] \u003e pivot)\n            return partition(a, pivot, start, stop, ulimit, llimit);\n        if (start \u003c stop) {\n            swap(a, start, stop);\n            return partition(a, pivot, start+1, stop, ulimit, llimit);\n        } else\n            return start;\n    }\n\n    /*@ requires a != null;\n      @ requires 0 \u003c= i \u0026\u0026 i \u003c a.length;\n      @ requires 0 \u003c= j \u0026\u0026 j \u003c a.length;\n      @ modifies a[i], a[j];\n      @ ensures a[i] == \\old(a[j]) \u0026\u0026 a[j] == \\old(a[i]);\n      @*/\n    public static void swap(int[] a, int i, int j)\n    {\n        int temp = a[i];\n        a[i] = a[j];\n        a[j] = temp;\n    }\n}\n",
        "name": "2517.java",
        "path": "code/quicksort/java/2517.java",
        "url": "/github.com/bdqnghi/bi-tbcnn/-/blob/code/quicksort/java/2517.java"
      },
      "lineMatches": [
        {
          "limitHit": false,
          "lineNumber": 16,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires a != null;"
        },
        {
          "limitHit": false,
          "lineNumber": 17,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires start \u003e= 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 18,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires stop \u003c= a.length;"
        },
        {
          "limitHit": false,
          "lineNumber": 22,
          "offsetAndLengths": [
            [
              4,
              12
            ]
          ],
          "preview": "    //@ ensures start \u003e= 0 \u0026\u0026 stop \u003c= a.length;"
        },
        {
          "limitHit": false,
          "lineNumber": 33,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires a != null;"
        },
        {
          "limitHit": false,
          "lineNumber": 34,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires start \u003c stop;"
        },
        {
          "limitHit": false,
          "lineNumber": 35,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires start \u003e= 0;"
        },
        {
          "limitHit": false,
          "lineNumber": 36,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires stop \u003c= a.length;"
        },
        {
          "limitHit": false,
          "lineNumber": 39,
          "offsetAndLengths": [
            [
              4,
              12
            ]
          ],
          "preview": "    //@ ensures \\result \u003e= 0 \u0026\u0026 \\result \u003c a.length;"
        },
        {
          "limitHit": false,
          "lineNumber": 49,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires a != null;"
        },
        {
          "limitHit": false,
          "lineNumber": 50,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires start \u003e= 0 \u0026\u0026 start \u003c= a.length;"
        },
        {
          "limitHit": false,
          "lineNumber": 51,
          "offsetAndLengths": [
            [
              4,
              13
            ]
          ],
          "preview": "    //@ requires stop \u003e= 0 \u0026\u0026 stop \u003c= a.length;"
        },
        {
          "limitHit": false,
          "lineNumber": 54,
          "offsetAndLengths": [
            [
              4,
              12
            ]
          ],
          "preview": "    //@ ensures (\\result \u003e= 0 \u0026\u0026 \\result \u003c a.length) || \\result == start -1;"
        },
        {
          "limitHit": false,
          "lineNumber": 21,
          "offsetAndLengths": [
            [
              1,
              12
            ]
          ],
          "preview": "\t//@ ensures a != null;"
        }
      ],
      "repository": {
        "name": "github.com/bdqnghi/bi-tbcnn",
        "url": "/github.com/bdqnghi/bi-tbcnn"
      }
    }
  ],
  "LimitHit": false,
  "Cloning": [],
  "Missing": [],
  "Timedout": [],
  "ResultCount": 294,
  "ElapsedMilliseconds": 1596,
  "Alert": {
    "Title": "",
    "Description": "",
    "ProposedQueries": null
  }
}
