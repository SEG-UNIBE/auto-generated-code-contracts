[
    {
        "repository": "github.com/sdujicun/FastShapeletSelection",
        "file": "src/weka/core/Utils.java",
        "code": "  private static void quickSort(/*@non_null@*/ double[] array, /*@non_null@*/ int[] index, \n                               int left, int right) {\n\n    int diff = right - left;\n\n    switch (diff) {\n    case 0 :\n      \n      // No need to do anything\n      return;\n    case 1 :\n      \n      // Swap two elements if necessary\n      conditionalSwap(array, index, left, right);\n      return;\n    case 2 :\n\n      // Just need to sort three elements\n      conditionalSwap(array, index, left, left + 1);\n      conditionalSwap(array, index, left, right);\n      conditionalSwap(array, index, left + 1, right);\n      return;\n    default :\n      \n      // Establish pivot\n      int pivotLocation = sortLeftRightAndCenter(array, index, left, right);\n      \n      // Move pivot to the right, partition, and restore pivot\n      swap(index, pivotLocation, right - 1); \n      int center = partition(array, index, left, right, array[index[right - 1]]);\n      swap(index, center, right - 1);\n      \n      // Sort recursively\n      quickSort(array, index, left, center - 1);\n      quickSort(array, index, center + 1, right);\n    }\n  }\n",
        "methodStartingLine": 1806,
        "methodEndingLine": 1842,
        "jml": "//@ requires 0 <= first && first <= right && right < array.length;\n//@ requires (\\forall int i; 0 <= i && i < index.length; 0 <= index[i] && index[i] < array.length);\n//@ requires array != index;"
    },
    {
        "repository": "github.com/sdujicun/FastShapeletSelection",
        "file": "src/weka/core/Utils.java",
        "code": "  private static void quickSort(/*@non_null@*/ int[] array, /*@non_null@*/  int[] index, \n                                int left, int right) {\n\n    if (left < right) {\n      int middle = partition(array, index, left, right);\n      quickSort(array, index, left, middle);\n      quickSort(array, index, middle + 1, right);\n    }\n  }\n",
        "methodStartingLine": 1857,
        "methodEndingLine": 1865,
        "jml": "//@ requires 0 <= first && first <= right && right < array.length;\n//@ requires (\\forall int i; 0 <= i && i < index.length; 0 <= index[i] && index[i] < array.length);\n//@ requires array != index;"
    },
    {
        "repository": "github.com/sdujicun/FastShapeletSelection",
        "file": "src/weka/core/Utils.java",
        "code": "  private static int select(/*@non_null@*/ double[] array, /*@non_null@*/ int[] index, \n                            int left, int right, int k) {\n\n    int diff = right - left;\n    switch (diff) {\n    case 0 :\n\n      // Nothing to be done\n      return left;\n    case 1 :\n\n      // Swap two elements if necessary\n      conditionalSwap(array, index, left, right);\n      return left + k - 1;\n    case 2 :\n\n      // Just need to sort three elements\n      conditionalSwap(array, index, left, left + 1);\n      conditionalSwap(array, index, left, right);\n      conditionalSwap(array, index, left + 1, right);\n      return left + k - 1;\n    default :\n    \n      // Establish pivot\n      int pivotLocation = sortLeftRightAndCenter(array, index, left, right);\n      \n      // Move pivot to the right, partition, and restore pivot\n      swap(index, pivotLocation, right - 1); \n      int center = partition(array, index, left, right, array[index[right - 1]]);\n      swap(index, center, right - 1);\n      \n      // Proceed recursively\n      if ((center - left + 1) >= k) {\n        return select(array, index, left, center, k);\n      } else {\n        return select(array, index, center + 1, right, k - (center - left + 1));\n      }\n    }\n  }\n",
        "methodStartingLine": 1880,
        "methodEndingLine": 1918,
        "jml": "//@ requires 0 <= first && first <= right && right < array.length;"
    },
    {
        "repository": "github.com/sdujicun/FastShapeletSelection",
        "file": "src/weka/core/Utils.java",
        "code": "  private static int select(/*@non_null@*/ int[] array, /*@non_null@*/ int[] index, \n                            int left, int right, int k) {\n    \n    if (left == right) {\n      return left;\n    } else {\n      int middle = partition(array, index, left, right);\n      if ((middle - left + 1) >= k) {\n        return select(array, index, left, middle, k);\n      } else {\n        return select(array, index, middle + 1, right, k - (middle - left + 1));\n      }\n    }\n  }\n",
        "methodStartingLine": 2041,
        "methodEndingLine": 2054,
        "jml": "//@ requires 0 <= first && first <= right && right < array.length;"
    },
    {
        "repository": "github.com/sdujicun/FastShapeletSelection",
        "file": "src/weka/core/Queue.java",
        "code": "    public QueueNode next(QueueNode next) {\n      return m_Next = next;\n    } //@ nowarn Invariant; // Because it stupidly checks the Queue invariant!\n",
        "methodStartingLine": 78,
        "methodEndingLine": 80,
        "jml": "//@ requires contents != null;\n//@ ensures m_Contents == contents;\n//@ ensures m_Next == null;\n//@ requires next != this ;\n//@ ensures m_Next==next && \\result==next;"
    },
    {
        "repository": "github.com/sdujicun/FastShapeletSelection",
        "file": "src/weka/core/Queue.java",
        "code": "    public /*@ pure @*/ QueueNode next() {\n      return m_Next;\n    }\n",
        "methodStartingLine": 86,
        "methodEndingLine": 88,
        "jml": "//@ ensures \\result == m_Next;"
    },
    {
        "repository": "github.com/sdujicun/FastShapeletSelection",
        "file": "src/weka/core/Queue.java",
        "code": "    public Object contents(Object contents) {\n      return m_Contents = contents;\n    }\n",
        "methodStartingLine": 96,
        "methodEndingLine": 98,
        "jml": "//@ requires contents != null;\n//@ ensures  m_Contents == contents && \\result == contents;"
    },
    {
        "repository": "github.com/sdujicun/FastShapeletSelection",
        "file": "src/weka/core/Queue.java",
        "code": "    public /*@ pure @*/ Object contents() {\n      return m_Contents;\n    }\n",
        "methodStartingLine": 104,
        "methodEndingLine": 106,
        "jml": "//@ ensures \\result == m_Contents;"
    },
    {
        "repository": "github.com/sdujicun/FastShapeletSelection",
        "file": "src/weka/core/Queue.java",
        "code": "  public final synchronized void removeAllElements() {\n    m_Size = 0;\n    m_Head = null;\n    m_Tail = null;\n  }\n",
        "methodStartingLine": 144,
        "methodEndingLine": 148,
        "jml": "//@ ensures m_Size == 0;\n//@ ensures m_Head == null;\n//@ ensures m_Tail == null;"
    },
    {
        "repository": "github.com/sdujicun/FastShapeletSelection",
        "file": "src/weka/core/Queue.java",
        "code": "  public synchronized Object push(Object item) {\n    QueueNode newNode = new QueueNode(item);\n    \n    if (m_Head == null) {\n      m_Head = m_Tail = newNode;\n    } else {\n      m_Tail = m_Tail.next(newNode);\n    }\n    m_Size++;\n    return item;\n  }\n",
        "methodStartingLine": 165,
        "methodEndingLine": 175,
        "jml": "//@ requires item != null;\n//@ ensures m_Head != null;\n//@ ensures m_Tail != \\old(m_Tail);\n//@ ensures m_Size == \\old(m_Size) + 1;\n//@ ensures \\old(m_Size) == 0 ==> m_Head == m_Tail; \n//@ ensures \\old(m_Size) != 0 ==> m_Head == \\old(m_Head);\n//@ ensures m_Tail.contents() == \\old(item);\n//@ ensures \\result == item;"
    },
    {
        "repository": "github.com/sdujicun/FastShapeletSelection",
        "file": "src/weka/core/Queue.java",
        "code": "  public synchronized Object pop() \n      throws RuntimeException   // REDUNDANT, BUT ESCJAVA REQUIRES THIS\n  {\n    if (m_Head == null) {\n\tthrow new RuntimeException(\"Queue is empty\");\n    }\n    Object retval = m_Head.contents();\n    m_Size--;\n    m_Head = m_Head.next();\n    // Here we need to either tell ESC/Java some facts about\n    // the contents of the list after popping off the head,\n    // or turn off the 'invariant' warnings.\n    //\n    //@ assume m_Size == 0 <==> m_Head == null;\n    //@ assume m_Size == 1 <==> m_Head == m_Tail;\n    if (m_Head == null) {\n      m_Tail = null;\n    }\n    return retval;\n  }\n",
        "methodStartingLine": 189,
        "methodEndingLine": 208,
        "jml": "//@ ensures m_Size == \\old(m_Size) - 1;\n//@ ensures m_Head == \\old(m_Head.m_Next);\n//@ ensures m_Head != null ==> m_Tail == \\old(m_Tail);\n//@ ensures \\result == \\old(m_Head.m_Contents);"
    },
    {
        "repository": "github.com/sdujicun/FastShapeletSelection",
        "file": "src/weka/core/Queue.java",
        "code": "  public /*@ pure @*/ synchronized Object peek() \n    throws RuntimeException\n  { \n    if (m_Head == null) {\n      throw new RuntimeException(\"Queue is empty\");\n    }\n    return m_Head.contents();\n  }\n",
        "methodStartingLine": 218,
        "methodEndingLine": 225,
        "jml": "//@ ensures \\result == \\old(m_Head.m_Contents);"
    },
    {
        "repository": "github.com/sdujicun/FastShapeletSelection",
        "file": "src/weka/core/Queue.java",
        "code": "  public /*@ pure @*/ boolean empty() {\n    return m_Head == null;\n  }\n",
        "methodStartingLine": 233,
        "methodEndingLine": 235,
        "jml": "//@ ensures \\result <==> m_Head == null;"
    },
    {
        "repository": "github.com/sdujicun/FastShapeletSelection",
        "file": "src/weka/core/Queue.java",
        "code": "  public /*@ pure @*/ int size() {\n    return m_Size;\n  }\n",
        "methodStartingLine": 243,
        "methodEndingLine": 245,
        "jml": "//@ ensures \\result == m_Size;"
    },
    {
        "repository": "github.com/sdujicun/FastShapeletSelection",
        "file": "src/weka/core/Queue.java",
        "code": "  public  /*@ pure @*/ String toString() {\n\n    String retval = \"Queue Contents \"+m_Size+\" elements\\n\";\n    QueueNode current = m_Head;\n    if (current == null) {\n      return retval + \"Empty\\n\";\n    } else {\n      while (current != null) {\n        retval += current.contents().toString()+\"\\n\"; //@nowarn Modifies;\n\tcurrent = current.next();\n      }\n    }\n    return retval;\n  } //@ nowarn Post;\n",
        "methodStartingLine": 255,
        "methodEndingLine": 268,
        "jml": "//@ ensures \\result != null;\n//@ ensures (* \\result == textual description of the queue *);"
    },
    {
        "repository": "github.com/sdujicun/FastShapeletSelection",
        "file": "src/weka/core/Queue.java",
        "code": "  public static void main(String [] argv) {\n\n    try {\n      Queue queue = new Queue();\n      for(int i = 0; i < argv.length; i++) {\n\tqueue.push(argv[i]);\n      }\n      System.out.println(\"After pushing command line arguments\");\n      System.out.println(queue.toString());\n      while (!queue.empty()) {\n\tSystem.out.println(\"Pop: \" + queue.pop().toString());\n      }\n      // try one more pop, to make sure we get an exception\n      try \n\t{\n\t  queue.pop();\n\t  System.out.println(\"ERROR: pop did not throw exception!\");\n\t}\n      catch (RuntimeException ex)\n        {\n\t  System.out.println(\"Pop on empty queue correctly gave exception.\");\n\t}\n    } catch (Exception ex) {\n      System.out.println(ex.getMessage());\n    }\n  }\n",
        "methodStartingLine": 287,
        "methodEndingLine": 312,
        "jml": "//@ requires argv.length >= 0;\n//@ requires argv != null;\n//@ requires (\\forall int i; 0 <= i && i < argv.length; argv[i] != null);"
    },
    {
        "repository": "github.com/sdujicun/FastShapeletSelection",
        "file": "src/weka/core/Attribute.java",
        "code": "  public /*@ pure non_null @*/ Object copy() {\n\n    Attribute copy = new Attribute(m_Name);\n\n    copy.m_Index = m_Index;\n    copy.m_Type = m_Type;\n    copy.m_Values = m_Values;\n    copy.m_Hashtable = m_Hashtable;\n    copy.m_DateFormat = m_DateFormat;\n    copy.m_Header = m_Header;\n    copy.setMetadata(m_Metadata);\n \n    return copy;\n  }\n",
        "methodStartingLine": 411,
        "methodEndingLine": 424,
        "jml": "//@ requires attributeName != null;\n//@ ensures  m_Name == attributeName;\n//@ requires attributeName != null;\n//@ requires metadata != null;\n//@ ensures  m_Name == attributeName;\n//@ requires attributeName != null;\n//@ requires dateFormat != null;\n//@ ensures  m_Name == attributeName;\n//@ requires attributeName != null;\n//@ requires dateFormat != null;\n//@ requires metadata != null;\n//@ ensures  m_Name == attributeName;\n//@ requires attributeName != null;\n//@ ensures  m_Name == attributeName;\n//@ requires attributeName != null;\n//@ requires metadata != null;"
    },
    {
        "repository": "github.com/sdujicun/FastShapeletSelection",
        "file": "src/weka/core/Attribute.java",
        "code": "  public final /*@ pure @*/ int index() {\n\n    return m_Index;\n  }\n",
        "methodStartingLine": 603,
        "methodEndingLine": 606,
        "jml": "//@ ensures \\result == m_Index;"
    },
    {
        "repository": "github.com/sdujicun/FastShapeletSelection",
        "file": "src/weka/core/Attribute.java",
        "code": "  public final /*@ pure @*/ boolean isNominal() {\n\n    return (m_Type == NOMINAL);\n  }\n",
        "methodStartingLine": 641,
        "methodEndingLine": 644,
        "jml": "//@ ensures \\result <==> (m_Type == NOMINAL);"
    },
    {
        "repository": "github.com/sdujicun/FastShapeletSelection",
        "file": "src/weka/core/Attribute.java",
        "code": "  public final /*@ pure @*/ boolean isNumeric() {\n\n    return ((m_Type == NUMERIC) || (m_Type == DATE));\n  }\n",
        "methodStartingLine": 652,
        "methodEndingLine": 655,
        "jml": "//@ ensures \\result <==> ((m_Type == NUMERIC) || (m_Type == DATE));"
    },
    {
        "repository": "github.com/sdujicun/FastShapeletSelection",
        "file": "src/weka/core/Attribute.java",
        "code": "  public final /*@ pure @*/ boolean isRelationValued() {\n\n    return (m_Type == RELATIONAL);\n  }\n",
        "methodStartingLine": 663,
        "methodEndingLine": 666,
        "jml": "//@ ensures \\result <==> (m_Type == RELATIONAL);"
    },
    {
        "repository": "github.com/sdujicun/FastShapeletSelection",
        "file": "src/weka/core/Attribute.java",
        "code": "  public final /*@ pure @*/ boolean isString() {\n\n    return (m_Type == STRING);\n  }\n",
        "methodStartingLine": 674,
        "methodEndingLine": 677,
        "jml": "//@ ensures \\result <==> (m_Type == STRING);"
    },
    {
        "repository": "github.com/sdujicun/FastShapeletSelection",
        "file": "src/weka/core/Attribute.java",
        "code": "  public final /*@ pure @*/ boolean isDate() {\n\n    return (m_Type == DATE);\n  }\n",
        "methodStartingLine": 685,
        "methodEndingLine": 688,
        "jml": "//@ ensures \\result <==> (m_Type == DATE);"
    },
    {
        "repository": "github.com/sdujicun/FastShapeletSelection",
        "file": "src/weka/core/Attribute.java",
        "code": "  public final /*@ pure @*/ String name() {\n\n    return m_Name;\n  }\n",
        "methodStartingLine": 696,
        "methodEndingLine": 699,
        "jml": "//@ ensures \\result == m_Name;"
    },
    {
        "repository": "github.com/sdujicun/FastShapeletSelection",
        "file": "src/weka/core/Attribute.java",
        "code": "  public final /*@ pure @*/ int type() {\n\n    return m_Type;\n  }\n",
        "methodStartingLine": 770,
        "methodEndingLine": 773,
        "jml": "//@ ensures \\result == m_Type;"
    },
    {
        "repository": "github.com/sdujicun/FastShapeletSelection",
        "file": "src/weka/core/Attribute.java",
        "code": "  public int addStringValue(String value) {\n\n    if (!isString()) {\n      return -1;\n    }\n    Object store = value;\n\n    if (value.length() > STRING_COMPRESS_THRESHOLD) {\n      try {\n        store = new SerializedObject(value, true);\n      } catch (Exception ex) {\n        System.err.println(\"Couldn't compress string attribute value -\"\n                           + \" storing uncompressed.\");\n      }\n    }\n    Integer index = (Integer)m_Hashtable.get(store);\n    if (index != null) {\n      return index.intValue();\n    } else {\n      int intIndex = m_Values.size();\n      m_Values.add(store);\n      m_Hashtable.put(store, new Integer(intIndex));\n      return intIndex;\n    }\n  }\n",
        "methodStartingLine": 931,
        "methodEndingLine": 955,
        "jml": "//@ requires attributeName != null;\n//@ requires index >= 0;\n//@ ensures  m_Name == attributeName;\n//@ ensures  m_Index == index;\n//@ requires attributeName != null;\n//@ requires index >= 0;\n//@ ensures  m_Name == attributeName;\n//@ ensures  m_Index == index;\n//@ requires attributeName != null;\n//@ requires index >= 0;\n//@ ensures  m_Name == attributeName;\n//@ ensures  m_Index == index;\n//@ requires attributeName != null;\n//@ requires index >= 0;\n//@ ensures  m_Name == attributeName;\n//@ ensures  m_Index == index;"
    },
    {
        "repository": "github.com/sdujicun/FastShapeletSelection",
        "file": "src/weka/core/Attribute.java",
        "code": "  public final /*@ pure non_null @*/ Attribute copy(String newName) {\n\n    Attribute copy = new Attribute(newName);\n\n    copy.m_Index = m_Index;\n    copy.m_DateFormat = m_DateFormat;\n    copy.m_Type = m_Type;\n    copy.m_Values = m_Values;\n    copy.m_Hashtable = m_Hashtable;\n    copy.m_Header = m_Header;\n    copy.setMetadata(m_Metadata);\n \n    return copy;\n  }\n",
        "methodStartingLine": 1056,
        "methodEndingLine": 1069,
        "jml": "//@ requires newName != null;\n//@ ensures \\result.m_Name  == newName;\n//@ ensures \\result.m_Index == m_Index;\n//@ ensures \\result.m_Type  == m_Type;"
    },
    {
        "repository": "github.com/sdujicun/FastShapeletSelection",
        "file": "src/weka/core/Attribute.java",
        "code": "  final void delete(int index) {\n    \n    if (!isNominal() && !isString() && !isRelationValued()) \n      throw new IllegalArgumentException(\"Can only remove value of \" +\n                                         \"nominal, string or relation-\" +\n                                         \" valued attribute!\");\n    else {\n      m_Values = Utils.cast(m_Values.clone());\n      m_Values.remove(index);\n      if (!isRelationValued()) {\n        Hashtable<Object,Integer> hash = new Hashtable<Object,Integer>(m_Hashtable.size());\n        Enumeration enu = m_Hashtable.keys();\n        while (enu.hasMoreElements()) {\n          Object string = enu.nextElement();\n          Integer valIndexObject = (Integer)m_Hashtable.get(string);\n          int valIndex = valIndexObject.intValue();\n          if (valIndex > index) {\n            hash.put(string, new Integer(valIndex - 1));\n          } else if (valIndex < index) {\n            hash.put(string, valIndexObject);\n          }\n        }\n        m_Hashtable = hash;\n      }\n    }\n  }\n",
        "methodStartingLine": 1082,
        "methodEndingLine": 1107,
        "jml": "//@ requires isNominal() || isString() || isRelationValued();\n//@ requires 0 <= index && index < m_Values.size();"
    },
    {
        "repository": "github.com/sdujicun/FastShapeletSelection",
        "file": "src/weka/core/Attribute.java",
        "code": "  final void forceAddValue(String value) {\n\n    Object store = value;\n    if (value.length() > STRING_COMPRESS_THRESHOLD) {\n      try {\n        store = new SerializedObject(value, true);\n      } catch (Exception ex) {\n        System.err.println(\"Couldn't compress string attribute value -\"\n                           + \" storing uncompressed.\");\n      }\n    }\n    m_Values.add(store);\n    m_Hashtable.put(store, new Integer(m_Values.size() - 1));\n  }\n",
        "methodStartingLine": 1116,
        "methodEndingLine": 1129,
        "jml": "//@ requires value != null;\n//@ ensures  m_Values.size() == \\old(m_Values.size()) + 1;"
    },
    {
        "repository": "github.com/sdujicun/FastShapeletSelection",
        "file": "src/weka/core/Attribute.java",
        "code": "  final void setIndex(int index) {\n\n    m_Index = index;\n  }\n",
        "methodStartingLine": 1139,
        "methodEndingLine": 1142,
        "jml": "//@ requires 0 <= index;\n//@ ensures m_Index == index;"
    },
    {
        "repository": "github.com/sdujicun/FastShapeletSelection",
        "file": "src/weka/core/Attribute.java",
        "code": "  final void setValue(int index, String string) {\n    \n    switch (m_Type) {\n    case NOMINAL:\n    case STRING:\n      m_Values = Utils.cast(m_Values.clone());\n      m_Hashtable = Utils.cast(m_Hashtable.clone());\n      Object store = string;\n      if (string.length() > STRING_COMPRESS_THRESHOLD) {\n        try {\n          store = new SerializedObject(string, true);\n        } catch (Exception ex) {\n          System.err.println(\"Couldn't compress string attribute value -\"\n                             + \" storing uncompressed.\");\n        }\n      }\n      m_Hashtable.remove(m_Values.get(index));\n      m_Values.set(index, store);\n      m_Hashtable.put(store, new Integer(index));\n      break;\n    default:\n      throw new IllegalArgumentException(\"Can only set values for nominal\"\n                                         + \" or string attributes!\");\n    }\n  }\n",
        "methodStartingLine": 1156,
        "methodEndingLine": 1180,
        "jml": "//@ requires string != null;\n//@ requires isNominal() || isString();\n//@ requires 0 <= index && index < m_Values.size();"
    },
    {
        "repository": "github.com/sdujicun/FastShapeletSelection",
        "file": "src/weka/core/Attribute.java",
        "code": "  public /*@pure@*/ String formatDate(double date) {\n    switch (m_Type) {\n    case DATE:\n      return m_DateFormat.format(new Date((long)date));\n    default:\n      throw new IllegalArgumentException(\"Can only format date values for date\"\n                                         + \" attributes!\");\n    }\n  }\n",
        "methodStartingLine": 1216,
        "methodEndingLine": 1224,
        "jml": "//@ requires isDate();"
    },
    {
        "repository": "github.com/sdujicun/FastShapeletSelection",
        "file": "src/weka/core/Attribute.java",
        "code": "  public double parseDate(String string) throws ParseException {\n    switch (m_Type) {\n    case DATE:\n      long time = m_DateFormat.parse(string).getTime();\n      // TODO put in a safety check here if we can't store the value in a double.\n      return (double)time;\n    default:\n      throw new IllegalArgumentException(\"Can only parse date values for date\"\n                                         + \" attributes!\");\n    }\n  }\n",
        "methodStartingLine": 1236,
        "methodEndingLine": 1246,
        "jml": "//@ requires isDate();\n//@ requires string != null;"
    },
    {
        "repository": "github.com/sdujicun/FastShapeletSelection",
        "file": "src/weka/core/Attribute.java",
        "code": "  private void setMetadata(ProtectedProperties metadata) {\n    \n    m_Metadata = metadata;\n\n    if (m_Type == DATE) {\n      m_Ordering = ORDERING_ORDERED;\n      m_IsRegular = true;\n      m_IsAveragable = false;\n      m_HasZeropoint = false;\n    } else {\n\n      // get ordering\n      String orderString = m_Metadata.getProperty(\"ordering\",\"\");\n      \n      // numeric ordered attributes are averagable and zeropoint by default\n      String def;\n      if (m_Type == NUMERIC\n\t  && orderString.compareTo(\"modulo\") != 0\n\t  && orderString.compareTo(\"symbolic\") != 0)\n\tdef = \"true\";\n      else def = \"false\";\n      \n      // determine boolean states\n      m_IsAveragable =\n\t(m_Metadata.getProperty(\"averageable\",def).compareTo(\"true\") == 0);\n      m_HasZeropoint =\n\t(m_Metadata.getProperty(\"zeropoint\",def).compareTo(\"true\") == 0);\n      // averagable or zeropoint implies regular\n      if (m_IsAveragable || m_HasZeropoint) def = \"true\";\n      m_IsRegular =\n\t(m_Metadata.getProperty(\"regular\",def).compareTo(\"true\") == 0);\n      \n      // determine ordering\n      if (orderString.compareTo(\"symbolic\") == 0)\n\tm_Ordering = ORDERING_SYMBOLIC;\n      else if (orderString.compareTo(\"ordered\") == 0)\n\tm_Ordering = ORDERING_ORDERED;\n      else if (orderString.compareTo(\"modulo\") == 0)\n\tm_Ordering = ORDERING_MODULO;\n      else {\n\tif (m_Type == NUMERIC || m_IsAveragable || m_HasZeropoint)\n\t  m_Ordering = ORDERING_ORDERED;\n\telse m_Ordering = ORDERING_SYMBOLIC;\n      }\n    }\n\n    // consistency checks\n    if (m_IsAveragable && !m_IsRegular)\n      throw new IllegalArgumentException(\"An averagable attribute must be\"\n\t\t\t\t\t + \" regular\");\n    if (m_HasZeropoint && !m_IsRegular)\n      throw new IllegalArgumentException(\"A zeropoint attribute must be\"\n\t\t\t\t\t + \" regular\");\n    if (m_IsRegular && m_Ordering == ORDERING_SYMBOLIC)\n      throw new IllegalArgumentException(\"A symbolic attribute cannot be\"\n\t\t\t\t\t + \" regular\");\n    if (m_IsAveragable && m_Ordering != ORDERING_ORDERED)\n      throw new IllegalArgumentException(\"An averagable attribute must be\"\n\t\t\t\t\t + \" ordered\");\n    if (m_HasZeropoint && m_Ordering != ORDERING_ORDERED)\n      throw new IllegalArgumentException(\"A zeropoint attribute must be\"\n\t\t\t\t\t + \" ordered\");\n\n    // determine weight\n    m_Weight = 1.0;\n    String weightString = m_Metadata.getProperty(\"weight\");\n    if (weightString != null) {\n      try{\n\tm_Weight = Double.valueOf(weightString).doubleValue();\n      } catch (NumberFormatException e) {\n\t// Check if value is really a number\n\tthrow new IllegalArgumentException(\"Not a valid attribute weight: '\" \n\t\t\t\t\t   + weightString + \"'\");\n      }\n    }\n\n    // determine numeric range\n    if (m_Type == NUMERIC) setNumericRange(m_Metadata.getProperty(\"range\"));\n  }\n",
        "methodStartingLine": 1423,
        "methodEndingLine": 1501,
        "jml": "//@ requires metadata != null;"
    },
    {
        "repository": "github.com/sdujicun/FastShapeletSelection",
        "file": "src/weka/core/Attribute.java",
        "code": "  private void setNumericRange(String rangeString)\n  {\n    // set defaults\n    m_LowerBound = Double.NEGATIVE_INFINITY;\n    m_LowerBoundIsOpen = false;\n    m_UpperBound = Double.POSITIVE_INFINITY;\n    m_UpperBoundIsOpen = false;\n\n    if (rangeString == null) return;\n\n    // set up a tokenzier to parse the string\n    StreamTokenizer tokenizer =\n      new StreamTokenizer(new StringReader(rangeString));\n    tokenizer.resetSyntax();         \n    tokenizer.whitespaceChars(0, ' ');    \n    tokenizer.wordChars(' '+1,'\\u00FF');\n    tokenizer.ordinaryChar('[');\n    tokenizer.ordinaryChar('(');\n    tokenizer.ordinaryChar(',');\n    tokenizer.ordinaryChar(']');\n    tokenizer.ordinaryChar(')');\n\n    try {\n\n      // get opening brace\n      tokenizer.nextToken();\n    \n      if (tokenizer.ttype == '[') m_LowerBoundIsOpen = false;\n      else if (tokenizer.ttype == '(') m_LowerBoundIsOpen = true;\n      else throw new IllegalArgumentException(\"Expected opening brace on range,\"\n\t\t\t\t\t      + \" found: \"\n\t\t\t\t\t      + tokenizer.toString());\n\n      // get lower bound\n      tokenizer.nextToken();\n      if (tokenizer.ttype != tokenizer.TT_WORD)\n\tthrow new IllegalArgumentException(\"Expected lower bound in range,\"\n\t\t\t\t\t   + \" found: \"\n\t\t\t\t\t   + tokenizer.toString());\n      if (tokenizer.sval.compareToIgnoreCase(\"-inf\") == 0)\n\tm_LowerBound = Double.NEGATIVE_INFINITY;\n      else if (tokenizer.sval.compareToIgnoreCase(\"+inf\") == 0)\n\tm_LowerBound = Double.POSITIVE_INFINITY;\n      else if (tokenizer.sval.compareToIgnoreCase(\"inf\") == 0)\n\tm_LowerBound = Double.NEGATIVE_INFINITY;\n      else try {\n\tm_LowerBound = Double.valueOf(tokenizer.sval).doubleValue();\n      } catch (NumberFormatException e) {\n\tthrow new IllegalArgumentException(\"Expected lower bound in range,\"\n\t\t\t\t\t   + \" found: '\" + tokenizer.sval + \"'\");\n      }\n\n      // get separating comma\n      if (tokenizer.nextToken() != ',')\n\tthrow new IllegalArgumentException(\"Expected comma in range,\"\n\t\t\t\t\t   + \" found: \"\n\t\t\t\t\t   + tokenizer.toString());\n\n      // get upper bound\n      tokenizer.nextToken();\n      if (tokenizer.ttype != tokenizer.TT_WORD)\n\tthrow new IllegalArgumentException(\"Expected upper bound in range,\"\n\t\t\t\t\t   + \" found: \"\n\t\t\t\t\t   + tokenizer.toString());\n      if (tokenizer.sval.compareToIgnoreCase(\"-inf\") == 0)\n\tm_UpperBound = Double.NEGATIVE_INFINITY;\n      else if (tokenizer.sval.compareToIgnoreCase(\"+inf\") == 0)\n\tm_UpperBound = Double.POSITIVE_INFINITY;\n      else if (tokenizer.sval.compareToIgnoreCase(\"inf\") == 0)\n\tm_UpperBound = Double.POSITIVE_INFINITY;\n      else try {\n\tm_UpperBound = Double.valueOf(tokenizer.sval).doubleValue();\n      } catch (NumberFormatException e) {\n\tthrow new IllegalArgumentException(\"Expected upper bound in range,\"\n\t\t\t\t\t   + \" found: '\" + tokenizer.sval + \"'\");\n      }\n\n      // get closing brace\n      tokenizer.nextToken();\n    \n      if (tokenizer.ttype == ']') m_UpperBoundIsOpen = false;\n      else if (tokenizer.ttype == ')') m_UpperBoundIsOpen = true;\n      else throw new IllegalArgumentException(\"Expected closing brace on range,\"\n\t\t\t\t\t      + \" found: \"\n\t\t\t\t\t      + tokenizer.toString());\n\n      // check for rubbish on end\n      if (tokenizer.nextToken() != tokenizer.TT_EOF)\n\tthrow new IllegalArgumentException(\"Expected end of range string,\"\n\t\t\t\t\t   + \" found: \"\n\t\t\t\t\t   + tokenizer.toString());\n\n    } catch (IOException e) {\n      throw new IllegalArgumentException(\"IOException reading attribute range\"\n\t\t\t\t\t + \" string: \" + e.getMessage());\n    }\n\n    if (m_UpperBound < m_LowerBound)\n      throw new IllegalArgumentException(\"Upper bound (\" + m_UpperBound\n\t\t\t\t\t + \") on numeric range is\"\n\t\t\t\t\t + \" less than lower bound (\"\n\t\t\t\t\t + m_LowerBound + \")!\");\n  }\n",
        "methodStartingLine": 1513,
        "methodEndingLine": 1615,
        "jml": "//@ requires rangeString != null;"
    },
    {
        "repository": "github.com/sdujicun/FastShapeletSelection",
        "file": "src/weka/core/Attribute.java",
        "code": "  public static void main(String[] ops) {\n\n    try {\n      \n      // Create numeric attributes \"length\" and \"weight\"\n      Attribute length = new Attribute(\"length\");\n      Attribute weight = new Attribute(\"weight\");\n\n      // Create date attribute \"date\"\n      Attribute date = new Attribute(\"date\", \"yyyy-MM-dd HH:mm:ss\");\n\n      System.out.println(date);\n      double dd = date.parseDate(\"2001-04-04 14:13:55\");\n      System.out.println(\"Test date = \" + dd);\n      System.out.println(date.formatDate(dd));\n\n      dd = new Date().getTime();\n      System.out.println(\"Date now = \" + dd);\n      System.out.println(date.formatDate(dd));\n      \n      // Create vector to hold nominal values \"first\", \"second\", \"third\" \n      List<String> my_nominal_values = new ArrayList<String>(3); \n      my_nominal_values.add(\"first\"); \n      my_nominal_values.add(\"second\"); \n      my_nominal_values.add(\"third\"); \n      \n      // Create nominal attribute \"position\" \n      Attribute position = new Attribute(\"position\", my_nominal_values);\n\n      // Print the name of \"position\"\n      System.out.println(\"Name of \\\"position\\\": \" + position.name());\n\n      // Print the values of \"position\"\n      Enumeration attValues = position.enumerateValues();\n      while (attValues.hasMoreElements()) {\n\tString string = (String)attValues.nextElement();\n\tSystem.out.println(\"Value of \\\"position\\\": \" + string);\n      }\n\n      // Shallow copy attribute \"position\"\n      Attribute copy = (Attribute) position.copy();\n\n      // Test if attributes are the same\n      System.out.println(\"Copy is the same as original: \" + copy.equals(position));\n\n      // Print index of attribute \"weight\" (should be unset: -1)\n      System.out.println(\"Index of attribute \\\"weight\\\" (should be -1): \" + \n\t\t\t weight.index());\n\n      // Print index of value \"first\" of attribute \"position\"\n      System.out.println(\"Index of value \\\"first\\\" of \\\"position\\\" (should be 0): \" +\n\t\t\t position.indexOfValue(\"first\"));\n\n      // Tests type of attribute \"position\"\n      System.out.println(\"\\\"position\\\" is numeric: \" + position.isNumeric());\n      System.out.println(\"\\\"position\\\" is nominal: \" + position.isNominal());\n      System.out.println(\"\\\"position\\\" is string: \" + position.isString());\n\n      // Prints name of attribute \"position\"\n      System.out.println(\"Name of \\\"position\\\": \" + position.name());\n    \n      // Prints number of values of attribute \"position\"\n      System.out.println(\"Number of values for \\\"position\\\": \" + position.numValues());\n\n      // Prints the values (againg)\n      for (int i = 0; i < position.numValues(); i++) {\n\tSystem.out.println(\"Value \" + i + \": \" + position.value(i));\n      }\n\n      // Prints the attribute \"position\" in ARFF format\n      System.out.println(position);\n\n      // Checks type of attribute \"position\" using constants\n      switch (position.type()) {\n      case Attribute.NUMERIC:\n\tSystem.out.println(\"\\\"position\\\" is numeric\");\n\tbreak;\n      case Attribute.NOMINAL:\n\tSystem.out.println(\"\\\"position\\\" is nominal\");\n\tbreak;\n      case Attribute.STRING:\n\tSystem.out.println(\"\\\"position\\\" is string\");\n\tbreak;\n      case Attribute.DATE:\n\tSystem.out.println(\"\\\"position\\\" is date\");\n\tbreak;\n      case Attribute.RELATIONAL:\n\tSystem.out.println(\"\\\"position\\\" is relation-valued\");\n\tbreak;\n      default:\n\tSystem.out.println(\"\\\"position\\\" has unknown type\");\n      }\n\n      ArrayList<Attribute> atts = new ArrayList<Attribute>(1);\n      atts.add(position);\n      Instances relation = new Instances(\"Test\", atts, 0);\n      Attribute relationValuedAtt = new Attribute(\"test\", relation);\n      System.out.println(relationValuedAtt);\n    } catch (Exception e) {\n      e.printStackTrace();\n    }\n  }\n",
        "methodStartingLine": 1633,
        "methodEndingLine": 1734,
        "jml": "//@ requires ops != null;\n//@ requires \\nonnullelements(ops);"
    },
    {
        "repository": "github.com/sdujicun/FastShapeletSelection",
        "file": "src/weka/core/SingleIndex.java",
        "code": "  public void setUpper(int newUpper) {\n\n    if (newUpper >= 0) {\n      m_Upper = newUpper;\n      setValue();\n    }\n  }\n",
        "methodStartingLine": 91,
        "methodEndingLine": 97,
        "jml": "//@ ensures m_SelectedIndex == -1;\n//@ ensures m_Upper == -1;\n//@ ensures m_IndexString == index;\n//@ ensures m_SelectedIndex == -1;\n//@ ensures m_Upper == -1;\n//@ ensures newUpper < 0 ==> m_Upper == \\old(m_Upper);\n//@ ensures newUpper >= 0 ==> m_Upper == newUpper;"
    },
    {
        "repository": "github.com/sdujicun/FastShapeletSelection",
        "file": "src/weka/core/SingleIndex.java",
        "code": "  public /*@pure@*/ String getSingleIndex() {\n\n    return m_IndexString;\n  }\n",
        "methodStartingLine": 105,
        "methodEndingLine": 108,
        "jml": "//@ ensures \\result == m_IndexString;"
    },
    {
        "repository": "github.com/sdujicun/FastShapeletSelection",
        "file": "src/weka/core/SingleIndex.java",
        "code": "  public void setSingleIndex(/*@non_null@*/ String index) {\n\n    m_IndexString = index;\n    m_SelectedIndex = -1;\n  }\n",
        "methodStartingLine": 120,
        "methodEndingLine": 124,
        "jml": "//@ ensures m_IndexString == index;\n//@ ensures m_SelectedIndex == -1;"
    },
    {
        "repository": "github.com/sdujicun/FastShapeletSelection",
        "file": "src/weka/core/SingleIndex.java",
        "code": "  public /*@pure@*/ String toString() {\n\n    if (m_IndexString.equals(\"\")) {\n      return \"No index set\";\n    }\n    if (m_Upper == -1) {\n      throw new RuntimeException(\"Upper limit has not been specified\");\n    }\n    return m_IndexString;\n  }\n",
        "methodStartingLine": 134,
        "methodEndingLine": 143,
        "jml": "//@ ensures \\result != null;"
    },
    {
        "repository": "github.com/sdujicun/FastShapeletSelection",
        "file": "src/weka/core/SingleIndex.java",
        "code": "  public /*@pure@*/ int getIndex() {\n\n    if (m_IndexString.equals(\"\")) {\n      throw new RuntimeException(\"No index set\");\n    }\n    if (m_Upper == -1) {\n      throw new RuntimeException(\"No upper limit has been specified for index\");\n    }\n    return m_SelectedIndex;\n  }\n",
        "methodStartingLine": 154,
        "methodEndingLine": 163,
        "jml": "//@ requires m_Upper >= 0;\n//@ requires m_IndexString.length() > 0;\n//@ ensures \\result == m_SelectedIndex;"
    },
    {
        "repository": "github.com/sdujicun/FastShapeletSelection",
        "file": "src/weka/core/SingleIndex.java",
        "code": "  public static /*@pure non_null@*/ String indexToString(int index) {\n\n    return \"\" + (index + 1);\n  }\n",
        "methodStartingLine": 174,
        "methodEndingLine": 177,
        "jml": "//@ requires index >= 0;"
    },
    {
        "repository": "github.com/sdujicun/FastShapeletSelection",
        "file": "src/weka/core/SingleIndex.java",
        "code": "  public static void main(/*@non_null@*/ String [] argv) {\n\n    try {\n      if (argv.length == 0) {\n\tthrow new Exception(\"Usage: SingleIndex <indexspec>\");\n      }\n      SingleIndex singleIndex = new SingleIndex();\n      singleIndex.setSingleIndex(argv[0]);\n      singleIndex.setUpper(9);\n      System.out.println(\"Input: \" + argv[0] + \"\\n\"\n\t\t\t + singleIndex.toString());\n      int selectedIndex = singleIndex.getIndex();\n      System.out.println(selectedIndex + \"\");\n    } catch (Exception ex) {\n      ex.printStackTrace();\n      System.out.println(ex.getMessage());\n    }\n  }\n",
        "methodStartingLine": 229,
        "methodEndingLine": 246,
        "jml": "//@ requires \\nonnullelements(argv);"
    },
    {
        "repository": "github.com/sdujicun/FastShapeletSelection",
        "file": "src/weka/core/WekaEnumeration.java",
        "code": "  public final /*@pure@*/ boolean hasMoreElements() {\n    \n    if (m_Counter < m_Vector.size()) {\n      return true;\n    }\n    return false;\n  }\n",
        "methodStartingLine": 85,
        "methodEndingLine": 91,
        "jml": "//@ requires 0 <= special && special < vector.size();"
    }
]