[
    {
        "repository": "github.com/utwente-fmt/vercors",
        "file": "examples/technical/enums/Enums.java",
        "code": "    void bar(AB ab) {\n        //@ assert ab == AB.A || ab == AB.B;\n        AB[] abs = new AB[2];\n        abs[0] = ab;\n        abs[1] = AB.A;\n    }\n",
        "methodStartingLine": 11,
        "methodEndingLine": 16,
        "jml": "//@ requires ab != null;"
    },
    {
        "repository": "github.com/utwente-fmt/vercors",
        "file": "examples/archive/chalice/WandDemo.java",
        "code": "  public /*@ pure */ int get(){\n    //@ unfold r:readonly();\n    return x;\n  }\n",
        "methodStartingLine": 22,
        "methodEndingLine": 25,
        "jml": "//@ requires r:readonly();"
    },
    {
        "repository": "github.com/utwente-fmt/vercors",
        "file": "examples/archive/chalice/WandDemo.java",
        "code": "  void set(int v){\n    //@ unfold w:writeonly();\n    x=v;\n    //@ fold r:readonly();\n    /*@\n      create {\n        unfold r:readonly();\n        use    Perm(this.x,75);\n        fold   w:writeonly();\n        qed    wand:((r:readonly())-*(w:writeonly()));\n      }\n    @*/\n  }\n",
        "methodStartingLine": 37,
        "methodEndingLine": 49,
        "jml": "//@ ensures w:writeonly();"
    },
    {
        "repository": "github.com/utwente-fmt/vercors",
        "file": "examples/archive/chalice/TreeWand.java",
        "code": "  public Tree del_min(Tree top){\n    //@ seq<int> orig_contents=contents(top);\n    //@ seq<int> target_contents=tail(contents(top));\n    //@ unfold top.state();\n    if (top.left == null) {\n      return top.right;\n    } else {\n      Tree cur, left;\n      cur = top;\n      left = top.left;\n      //@ seq<int> cur_contents=orig_contents;\n      //@ assert cur_contents == contents(left) + seq<int>{top.data} + contents(top.right);\n      //@ unfold left.state();\n      /*@\n      loop_invariant Perm(cur.left,100) ** Perm(cur.data,100) ** Perm(cur.right,100);\n      loop_invariant cur.left==left ** cur.right->state() ;\n      loop_invariant Perm(left.left,100) ** Perm(left.data,100) ** Perm(left.right,100);\n      loop_invariant left.left->state() ** left.right->state();\n      loop_invariant cur_contents == (contents(left.left) + seq<int>{left.data} + contents(left.right))\n                                      + seq<int>{cur.data} + contents(cur.right);\n      loop_invariant wand:(contains(cur,tail(cur_contents)) -* contains(top,target_contents)); @*/\n      while (left.left != null) /*@ with {\n        create {} wand:(contains(top,target_contents) -* contains(top,target_contents));#\\label{proof 1}#\n      } @*/\n      { /*@ Tree prev = cur;\n            seq<int> prev_contents = cur_contents; */\n        cur = left;\n        left = cur.left;\n        /*@\n        unfold left.state();\n        cur_contents = contents(left.left) + seq<int>{left.data} + contents(left.right);\n        cur_contents = cur_contents + seq<int>{cur.data} + contents(cur.right);\n        assert prev_contents.length > 0 ;\n        assert cur_contents.length > 0 ;\n        assert prev_contents == cur_contents + seq<int>{prev.data} + contents(prev.right);\n        create  {#\\label{proof 2 begin}#\n          use    prev_contents.length > 0 ;\n          use    cur_contents.length > 0 ;\n          use    Perm(prev.left,100)**Perm(prev.data,100);\n          use    Perm(prev.right,100)**prev.right->state();\n          use    prev.left==cur;\n          use    prev_contents == cur_contents + seq<int>{prev.data} + contents(prev.right);\n          fold   prev.state();\n          apply  wand:(contains(prev,tail(prev_contents)) -* contains(top,target_contents));#\\label{apply 1}#\n          qed    wand:(contains(cur,tail(cur_contents)) -* contains(top,target_contents));\n        } #\\label{proof 2 end}#\n        @*/\n      }\n      cur.left = left.right;\n      //@ fold cur.state();\n      //@ assert contents(cur)==tail(cur_contents);\n      //@ apply wand:(contains(cur,tail(cur_contents)) -* contains(top,target_contents));#\\label{apply 2}#\n\n      return top;\n    }\n  }\n",
        "methodStartingLine": 61,
        "methodEndingLine": 116,
        "jml": "//@ requires top!=null ** top.state();\n//@ ensures  contains(\\result,tail(\\old(contents(top))));\n//@ ensures  \\old(sorted(top)) ==> sorted(\\result);"
    },
    {
        "repository": "github.com/utwente-fmt/vercors",
        "file": "examples/concepts/abrupt/OnlyCatch.java",
        "code": "    final void bar() {\n        try {\n            x = 20;\n            //@ assert x == 20;\n            throw new MyException();\n            assert false;\n        } catch (MyException e) {\n            //@ assert x == 20;\n            x = 40;\n            //@ assert x == 40;\n        }\n        //@ assert x == 40 ;\n    }\n",
        "methodStartingLine": 21,
        "methodEndingLine": 33,
        "jml": "//@ requires Perm(x, 1);\n//@ ensures Perm(x, 1) ** x == 40;"
    },
    {
        "repository": "github.com/utwente-fmt/vercors",
        "file": "examples/concepts/goto/LabeledWhile.java",
        "code": "    void m1() {\n        i = 0;\n        //@ loop_invariant Perm(i, write) ** 0 <= i ** i <= 5;\n        l: while (i < 5) {\n            i += 1;\n        }\n        //@ assert i == 5;\n        //@ assert Perm(i, write);\n    }\n",
        "methodStartingLine": 10,
        "methodEndingLine": 18,
        "jml": "//@ requires Perm(i, write);"
    },
    {
        "repository": "github.com/utwente-fmt/vercors",
        "file": "examples/concepts/goto/LabeledWhile.java",
        "code": "    void m2() {\n        i = 100;\n        //@ loop_invariant Perm(i, write) ** 100 <= i ** i <=110;\n        l1: l2: while (i < 110) {\n            i += 1;\n        }\n        //@ assert i == 110;\n        //@ assert Perm(i, write);\n    }\n",
        "methodStartingLine": 21,
        "methodEndingLine": 29,
        "jml": "//@ requires Perm(i, write);"
    },
    {
        "repository": "github.com/utwente-fmt/vercors",
        "file": "examples/concepts/goto/LabeledWhile.java",
        "code": "    void m3() {\n        i = 200;\n        //@ loop_invariant Perm(i, write);\n        l1: l2:\n        //@ loop_invariant i <= 230;\n        while (i < 230) {\n            i += 1;\n        }\n        //@ assert i == 230;\n        //@ assert Perm(i, write);\n    }\n",
        "methodStartingLine": 32,
        "methodEndingLine": 42,
        "jml": "//@ requires Perm(i, write);"
    },
    {
        "repository": "github.com/utwente-fmt/vercors",
        "file": "examples/concepts/goto/LabeledWhile.java",
        "code": "    void m4() {\n        i = -7;\n        //@ loop_invariant Perm(i, 1\\2);\n        l1:\n        //@ loop_invariant Perm(i, 1\\2);\n        l2:\n        //@ loop_invariant i <= 7;\n        while (i < 7) {\n            i += 1;\n        }\n        //@ assert i == 7;\n        //@ assert Perm(i, write);\n    }\n",
        "methodStartingLine": 45,
        "methodEndingLine": 57,
        "jml": "//@ requires Perm(i, write);"
    },
    {
        "repository": "github.com/utwente-fmt/vercors",
        "file": "examples/concepts/abrupt/OnlyReturn.java",
        "code": "    final boolean foo() {\n        return false;\n    }\n",
        "methodStartingLine": 8,
        "methodEndingLine": 10,
        "jml": "//@ ensures !\\result;"
    },
    {
        "repository": "github.com/utwente-fmt/vercors",
        "file": "examples/concepts/abrupt/OnlyReturn.java",
        "code": "    final boolean bar() {\n        return true;\n    }\n",
        "methodStartingLine": 13,
        "methodEndingLine": 15,
        "jml": "//@ ensures \\result;"
    },
    {
        "repository": "github.com/utwente-fmt/vercors",
        "file": "examples/concepts/abrupt/OnlyReturn.java",
        "code": "    final int baz() {\n        return 5;\n    }\n",
        "methodStartingLine": 18,
        "methodEndingLine": 20,
        "jml": "//@ ensures \\result == 5;"
    },
    {
        "repository": "github.com/utwente-fmt/vercors",
        "file": "examples/archive/chalice/WitnessDemo.java",
        "code": "  public /*@ pure */ int get(){\n    //@ unfold ro:readonly(p);\n    return x;\n  }\n",
        "methodStartingLine": 22,
        "methodEndingLine": 25,
        "jml": "//@ requires ro:readonly(p);"
    },
    {
        "repository": "github.com/utwente-fmt/vercors",
        "file": "examples/archive/chalice/WitnessDemo.java",
        "code": "  void set(int v){\n    //@ unfold rw:writeonly();\n    x=v;\n    //@ fold ro:readonly(100);\n    /*@\n      create {\n        unfold rdp:readonly(100);\n        use    Perm(this.x,50);\n        fold   wrp:writeonly();\n        qed    wand:((rdp:readonly(100))-*wrp:writeonly());\n      }\n    @*/\n  }\n",
        "methodStartingLine": 37,
        "methodEndingLine": 49,
        "jml": "//@ ensures rw:writeonly();"
    },
    {
        "repository": "github.com/utwente-fmt/vercors",
        "file": "examples/archive/chalice/TreeWand-e1.java",
        "code": "  public Tree del_min(Tree top){\n    //@ seq<int> orig_contents=top.contents();\n    //@ seq<int> target_contents=tail(top.contents());\n    //@ unfold top.state();\n    if (top.left == null) {\n      return top.right;\n    } else {\n      Tree cur, left;\n      cur = top;\n      left = top.left;\n      //@ seq<int> cur_contents=orig_contents;\n      //@ assert cur_contents == left.contents() + seq<int>{top.data} + tolist(top.right);\n      //@ unfold left.state();\n      /*@\n      loop_invariant Perm(cur.left,100) ** Perm(cur.data,100) ** Perm(cur.right,100);\n      loop_invariant cur.left==left ** cur.right->state() ;\n      loop_invariant Perm(left.left,100) ** Perm(left.data,100) ** Perm(left.right,100);\n      loop_invariant left.left->state() ** left.right->state();\n      loop_invariant cur_contents == (tolist(left.left) + seq<int>{left.data} + tolist(left.right))\n                                      + seq<int>{cur.data} + tolist(cur.right);\n      loop_invariant wand:(cur.state_contains(tail(cur_contents)) -* top.state_contains(target_contents)); @*/\n      while (left.left != null) /*@ with {\n        create {} wand:(top.state_contains(target_contents) -* top.state_contains(target_contents));#\\label{proof 1}#\n      } @*/\n      { /*@ Tree prev = cur;\n            seq<int> prev_contents = cur_contents; */\n        cur = left;\n        left = cur.left;\n        //@ assert left != null;\n        /*@\n        unfold left.state();\n        assert left.left != null;\n        cur_contents = tolist(left.left) + seq<int>{left.data} + tolist(left.right);\n        cur_contents = cur_contents + seq<int>{cur.data} + tolist(cur.right);\n        assert prev_contents.length > 0 ;\n        assert cur_contents.length > 0 ;\n        assert prev_contents == cur_contents + seq<int>{prev.data} + tolist(prev.right);\n        create  {#\\label{proof 2 begin}#\n          use    prev_contents.length > 0 ;\n          use    cur_contents.length > 0 ;\n          use    Perm(prev.left,100)**Perm(prev.data,100);\n          use    Perm(prev.right,100)**prev.right->state();\n          use    prev.left==cur;\n          use    prev_contents == cur_contents + seq<int>{prev.data} + tolist(prev.right);\n          fold   prev.state();\n          apply  wand:(prev.state_contains(tail(prev_contents)) -* top.state_contains(target_contents));\n          qed    wand:(cur.state_contains(tail(cur_contents)) -* top.state_contains(target_contents));\n        } #\\label{proof 2 end}#\n        @*/\n        \n        //@ assert left.left != null;\n      }\n      //@ assert false;\n      cur.left = left.left;\n      //@ fold cur.state();\n      //@ assert cur.contents()==tail(cur_contents);\n      //@ apply wand:(cur.state_contains(tail(cur_contents)) -* top.state_contains(target_contents));\n      return top;\n    }\n  }\n",
        "methodStartingLine": 74,
        "methodEndingLine": 133,
        "jml": "//@ requires top!=null ** top.state();\n//@ ensures  contains(\\result,tail(\\old(top.contents())));\n//@ ensures  \\old(sorted(top)) ==> sorted(\\result);"
    },
    {
        "repository": "github.com/utwente-fmt/vercors",
        "file": "examples/concepts/abrupt/Synchronized.java",
        "code": "    void increment() {\n        synchronized (this) {\n            x += 1;\n        }\n    }\n",
        "methodStartingLine": 18,
        "methodEndingLine": 22,
        "jml": "//@ ensures committed(this);\n//@ requires committed(this);"
    },
    {
        "repository": "github.com/utwente-fmt/vercors",
        "file": "examples/concepts/abrupt/Synchronized.java",
        "code": "    synchronized void other_increment() {\n        x += 1;\n    }\n",
        "methodStartingLine": 25,
        "methodEndingLine": 27,
        "jml": "//@ requires committed(this);"
    },
    {
        "repository": "github.com/utwente-fmt/vercors",
        "file": "examples/concepts/wand/WandDemoSilver.java",
        "code": "    void set(int v) {\n        //@ unfold writeonly();\n        x = v;\n        //@ fold readonly();\n        /*@\n        package readonly() -* writeonly() {\n        unfold readonly();\n        fold writeonly();\n        }\n        @*/\n    }\n",
        "methodStartingLine": 35,
        "methodEndingLine": 45,
        "jml": "//@ ensures writeonly();"
    },
    {
        "repository": "github.com/utwente-fmt/vercors",
        "file": "examples/concepts/wand/TreeWandSilver.java",
        "code": "  public Tree del_min(Tree top){\n    //@ ghost seq<int> orig_contents=tolist(top);\n    //@ ghost seq<int> target_contents=(tolist(top)).tail;\n    //@ unfold top.state();\n    if (top.left == null) {\n      //@ assert orig_contents == tolist(top.left) + seq<int>{top.data} + tolist(top.right);\n      //@ assert tolist(top.left) == seq<int>{};\n      return top.right;\n    } else {\n      Tree cur, left;\n      cur = top;\n      left = top.left;\n      //@ ghost seq<int> cur_contents=orig_contents;\n      //@ assert cur_contents == tolist(left) + seq<int>{top.data} + tolist(top.right);\n      //@ unfold left.state();\n      //@ package top.state_contains(target_contents) -* top.state_contains(target_contents) {}\n\n      /*@\n      loop_invariant Perm(cur.left,write) ** Perm(cur.data,write) ** Perm(cur.right,write);\n      loop_invariant cur.left==left ** cur.right->state() ;\n      loop_invariant Perm(left.left,write) ** Perm(left.data,write) ** Perm(left.right,write);\n      loop_invariant left.left->state() ** left.right->state();\n      loop_invariant cur_contents == (tolist(left.left) + seq<int>{left.data} + tolist(left.right))\n                                      + seq<int>{cur.data} + tolist(cur.right);\n      loop_invariant (cur.state_contains((cur_contents).tail) -* top.state_contains(target_contents));\n      @*/\n      while (left.left != null)\n      {\n        //@ ghost Tree prev = cur;\n        //@ ghost seq<int> prev_contents = cur_contents;\n        cur = left;\n        left = cur.left;\n        /*@\n        unfold left.state();\n        ghost cur_contents = tolist(left.left) + seq<int>{left.data} + tolist(left.right);\n        ghost cur_contents = cur_contents + seq<int>{cur.data} + tolist(cur.right);\n        assert |prev_contents| > 0 ;\n        assert |cur_contents| > 0 ;\n        assert prev_contents == cur_contents + seq<int>{prev.data} + tolist(prev.right);\n        package cur.state_contains((cur_contents).tail) -* top.state_contains(target_contents) {\n          fold prev.state();\n          apply prev.state_contains(prev_contents.tail) -* top.state_contains(target_contents);\n        }\n        @*/\n      }\n      cur.left = left.right;\n      //@ fold cur.state();\n      //@ assert tolist(cur)==(cur_contents).tail;\n      //@ assert cur.state_contains(tolist(cur));\n      //@ assert cur.state_contains((cur_contents).tail);\n      //@ apply (cur.state_contains((cur_contents).tail) -* top.state_contains(target_contents));\n      return top;\n    }\n  }\n",
        "methodStartingLine": 44,
        "methodEndingLine": 97,
        "jml": "//@ requires top!=null ** top.state();\n//@ ensures  contains(\\result,\\old(tolist(top)).tail);\n//@ ensures  \\old(sorted(top)) ==> sorted(\\result);"
    },
    {
        "repository": "github.com/utwente-fmt/vercors",
        "file": "examples/archive/chalice/TreeWand-err.java",
        "code": "  public Tree del_min(Tree top){\n    //@ seq<int> orig_contents=contents(top);\n    //@ seq<int> target_contents=tail(contents(top));\n    //@ unfold top.state();\n    if (top.left == null) {\n      return top.right;\n    } else {\n      Tree cur, left;\n      cur = top;\n      left = top.left;\n      //@ seq<int> cur_contents=orig_contents;\n      //@ assert cur_contents == contents(left) + seq<int>{top.data} + contents(top.right);\n      //@ unfold left.state();\n      /*@\n      loop_invariant Perm(cur.left,100) ** Perm(cur.data,100) ** Perm(cur.right,100);\n      loop_invariant cur.left==left ** cur.right->state() ;\n      loop_invariant Perm(left.left,100) ** Perm(left.data,100) ** Perm(left.right,100);\n      loop_invariant left.left->state() ** left.right->state();\n      loop_invariant cur_contents == (contents(left.left) + seq<int>{left.data} + contents(left.right))\n                                      + seq<int>{cur.data} + contents(cur.right);\n      loop_invariant wand:(contains(cur,tail(cur_contents)) -* contains(top,target_contents)); @*/\n      while (left.left != null) /*@ with {\n        create {} wand:(contains(top,target_contents) -* contains(top,target_contents));#\\label{proof 1}#\n      } @*/\n      { /*@ Tree prev = cur;\n            seq<int> prev_contents = cur_contents; */\n        cur = left;\n        left = cur.left;\n        /*@\n        unfold left.state();\n        cur_contents = contents(left.left) + seq<int>{left.data} + contents(left.right);\n        cur_contents = cur_contents + seq<int>{cur.data} + contents(cur.right);\n        assert prev_contents.length > 0 ;\n        assert cur_contents.length > 0 ;\n        assert prev_contents == cur_contents + seq<int>{prev.data} + contents(prev.right);\n        create  {#\\label{proof 2 begin}#\n          use    prev_contents.length > 0 ;\n          use    cur_contents.length > 0 ;\n          use    Perm(prev.left,100)**Perm(prev.data,100);\n          use    Perm(prev.right,100)**prev.right->state();\n          use    prev.left==cur;\n          use    prev_contents == cur_contents + seq<int>{prev.data} + contents(prev.right);\n          fold   prev.state();\n          apply  wand:(contains(prev,tail(prev_contents)) -* contains(top,target_contents));#\\label{apply 1}#\n          qed    wand:(contains(cur,tail(cur_contents)) -* contains(top,target_contents));\n        } #\\label{proof 2 end}#\n        @*/\n      }\n      cur.left = left.left;\n      //@ fold cur.state();\n      //@ assert contents(cur)==tail(cur_contents);\n      //@ apply wand:(contains(cur,tail(cur_contents)) -* contains(top,target_contents));#\\label{apply 2}#\n\n      return top;\n    }\n  }\n",
        "methodStartingLine": 62,
        "methodEndingLine": 117,
        "jml": "//@ requires top!=null ** top.state();\n//@ ensures  contains(\\result,tail(\\old(contents(top))));\n//@ ensures  \\old(sorted(top)) ==> sorted(\\result);"
    },
    {
        "repository": "github.com/utwente-fmt/vercors",
        "file": "examples/concepts/basic/MultiDimArray.java",
        "code": "    public static void method(int[] x) {\n\n    }\n",
        "methodStartingLine": 7,
        "methodEndingLine": 9,
        "jml": "//@ requires x == null || x.length == 5;"
    },
    {
        "repository": "github.com/utwente-fmt/vercors",
        "file": "examples/technical/java/JavaAnnotation.java",
        "code": "    int x(MyAnnotation ma) {\n       return ma.foo();\n    }\n",
        "methodStartingLine": 36,
        "methodEndingLine": 38,
        "jml": "//@ requires ma != null ** ma instanceof MyAnnotation;"
    },
    {
        "repository": "github.com/utwente-fmt/vercors",
        "file": "examples/concepts/abrupt/SwitchVarious.java",
        "code": "    void m6() {\n        int x = -1;\n        switch (pickBetween1And5()) {\n            case 0:\n                x = 11;\n                break;\n            case 1:\n            case 2:\n            case 3:\n            case 4:\n            case 5:\n                x = 22;\n                break;\n            case 6:\n                x = 33;\n                break;\n        }\n        //@ assert x == 22;\n    }\n",
        "methodStartingLine": 78,
        "methodEndingLine": 96,
        "jml": "//@ ensures 1 <= \\result && \\result <= 5;"
    },
    {
        "repository": "github.com/utwente-fmt/vercors",
        "file": "res/universal/res/jdk/java/lang/System.java",
        "code": "    public static void setIn(InputStream in) {\n        //@ assume false;\n    }\n",
        "methodStartingLine": 20,
        "methodEndingLine": 22,
        "jml": "//@ requires in != null;"
    },
    {
        "repository": "github.com/utwente-fmt/vercors",
        "file": "res/universal/res/jdk/java/lang/System.java",
        "code": "    public static void setOut(PrintStream out) {\n        //@ assume false;\n    }\n",
        "methodStartingLine": 25,
        "methodEndingLine": 27,
        "jml": "//@ requires out != null;"
    },
    {
        "repository": "github.com/utwente-fmt/vercors",
        "file": "res/universal/res/jdk/java/lang/System.java",
        "code": "    public static void setErr(PrintStream err) {\n        //@ assume false;\n    }\n",
        "methodStartingLine": 30,
        "methodEndingLine": 32,
        "jml": "//@ requires err != null;"
    },
    {
        "repository": "github.com/utwente-fmt/vercors",
        "file": "examples/concepts/abrupt/KnuthTabulate.java",
        "code": "    void foo() {\n        //@ ghost int old_i = i;\n        int SLASH = 900;\n        int DOT = 100;\n        int x = read_char();\n        //@ assert old_i + 1 == i;\n        //@ ghost boolean saw_slash = false;\n        char_processed: {\n            if (x == SLASH) {\n                //@ ghost saw_slash = true;\n                x = read_char();\n                if (x == SLASH) {\n                    return_the_carriage();\n                    break char_processed;\n                } else {\n                    tabulate();\n                }\n            }\n            write_char(x);\n            if (x == DOT) {\n                write_char(DOT);\n            }\n        }\n        //@ assert saw_slash ? old_i + 2 == i : old_i + 1 == i;\n    }\n",
        "methodStartingLine": 19,
        "methodEndingLine": 43,
        "jml": "//@ ensures i == \\old(i) + 1;"
    },
    {
        "repository": "github.com/utwente-fmt/vercors",
        "file": "examples/concepts/abrupt/ReturnFinally.java",
        "code": "    public int m() {\n        i = 0;\n        try {\n            return i;\n        } finally {\n            i = 1;\n        }\n    }\n",
        "methodStartingLine": 15,
        "methodEndingLine": 22,
        "jml": "//@ requires Perm(i, write);\n//@ ensures Perm(i, write) ** \\result == 0 ** i == 1;"
    },
    {
        "repository": "github.com/utwente-fmt/vercors",
        "file": "res/universal/res/jdk/java/lang/Integer.java",
        "code": "    public String toString() {\n       //@ assume false;\n        return null;\n    }\n",
        "methodStartingLine": 22,
        "methodEndingLine": 25,
        "jml": "//@ ensures intValue() == x;\n//@ ensures \\result != null;"
    },
    {
        "repository": "github.com/utwente-fmt/vercors",
        "file": "examples/concepts/abrupt/WhileInFinally.java",
        "code": "    void m() throws IOException {\n        try {\n            throw new IOException();\n        } finally {\n            //@ loop_invariant Perm(x, write);\n            //@ loop_invariant 0 <= x && x <= 5;\n            while (x < 5) {\n                x += 1;\n            }\n        }\n        x = 0;\n    }\n",
        "methodStartingLine": 14,
        "methodEndingLine": 25,
        "jml": "//@ requires Perm(x, write) ** x == 0;\n//@ ensures false;"
    },
    {
        "repository": "github.com/utwente-fmt/vercors",
        "file": "examples/concepts/typevalues/CastExample.java",
        "code": "  int find(Object tt,int key){\n    Object t=tt;\n    //@ loop_invariant state(t);\n    while(t instanceof Node){\n      Node n=(Node)t;\n      //@ unfold state_rec(n);\n      if (key < n.key) {\n        t=n.left;\n      } else {\n        t=n.right;\n      }\n    }\n    //@ unfold state_rec(t);\n    Leaf l=(Leaf)t;\n    return l.other;\n  }\n",
        "methodStartingLine": 47,
        "methodEndingLine": 62,
        "jml": "//@ requires state(tt);"
    },
    {
        "repository": "github.com/utwente-fmt/vercors",
        "file": "examples/concepts/wand/TreeWandSilver-e1.java",
        "code": "  public Tree del_min(Tree top){\n    //@ ghost seq<int> orig_contents=tolist(top);\n    //@ ghost seq<int> target_contents=(tolist(top)).tail;\n    //@ unfold top.state();\n    if (top.left == null) {\n      //@ assert orig_contents == tolist(top.left) + seq<int>{top.data} + tolist(top.right);\n      //@ assert tolist(top.left) == seq<int>{};\n      return top.left;\n    } else {\n      Tree cur, left;\n      cur = top;\n      left = top.left;\n      //@ ghost seq<int> cur_contents = orig_contents;\n      //@ assert cur_contents == tolist(left) + seq<int>{top.data} + tolist(top.right);\n      //@ unfold left.state();\n      //@ package top.state_contains(target_contents) -* top.state_contains(target_contents) {}\n\n      /*@\n      loop_invariant Perm(cur.left,write) ** Perm(cur.data,write) ** Perm(cur.right,write);\n      loop_invariant cur.left==left ** cur.right->state() ;\n      loop_invariant Perm(left.left,write) ** Perm(left.data,write) ** Perm(left.right,write);\n      loop_invariant left.left->state() ** left.right->state();\n      loop_invariant cur_contents == (tolist(left.left) + seq<int>{left.data} + tolist(left.right))\n                                      + seq<int>{cur.data} + tolist(cur.right);\n      loop_invariant (cur.state_contains((cur_contents).tail) -* top.state_contains(target_contents));\n      @*/\n      while (left.left != null)\n      {\n        //@ ghost Tree prev = cur;\n        //@ ghost seq<int> prev_contents = cur_contents;\n        cur = left;\n        left = cur.left;\n        /*@\n        unfold left.state();\n        ghost cur_contents = tolist(left.left) + seq<int>{left.data} + tolist(left.right);\n        ghost cur_contents = cur_contents + seq<int>{cur.data} + tolist(cur.right);\n        assert |prev_contents| > 0 ;\n        assert |cur_contents| > 0 ;\n        assert prev_contents == cur_contents + seq<int>{prev.data} + tolist(prev.right);\n        [/expect packageFailed:perm]\n        package (cur.state_contains((cur_contents).tail) -* top.state_contains(target_contents)) {}\n        [/end]\n        @*/\n      }\n      cur.left = left.right;\n      //@ fold cur.state();\n      //@ assert tolist(cur)==(cur_contents).tail;\n      //@ assert cur.state_contains(tolist(cur));\n      //@ assert cur.state_contains((cur_contents).tail);\n      //@ apply (cur.state_contains((cur_contents).tail) -* top.state_contains(target_contents));\n      return top;\n    }\n  }\n",
        "methodStartingLine": 47,
        "methodEndingLine": 99,
        "jml": "//@ requires top!=null ** top.state();\n//@ ensures  contains(\\result,\\old(tolist(top)).tail);\n//@ ensures  \\old(sorted(top)) ==> sorted(\\result);"
    },
    {
        "repository": "github.com/utwente-fmt/vercors",
        "file": "examples/concepts/wand/TreeWandSilver-e2.java",
        "code": "  public Tree del_min(Tree top){\n    //@ ghost seq<int> orig_contents=tolist(top);\n    //@ ghost seq<int> target_contents=(tolist(top)).tail;\n    //@ unfold top.state();\n    if (top.left == null) {\n      //@ assert orig_contents == tolist(top.left) + seq<int>{top.data} + tolist(top.right);\n      //@ assert tolist(top.left) == seq<int>{};\n      return top.right;\n    } else {\n      Tree cur, left;\n      cur = top;\n      left = top.left;\n      //@ ghost seq<int> cur_contents = orig_contents;\n      //@ assert cur_contents == tolist(left) + seq<int>{top.data} + tolist(top.right);\n      //@ unfold left.state();\n      //@ package (top.state_contains(target_contents) -* top.state_contains(target_contents)) {}\n\n      /*@\n      loop_invariant Perm(cur.left, write) ** Perm(cur.data, write) ** Perm(cur.right, write);\n      loop_invariant cur.left == left ** cur.right->state();\n      loop_invariant Perm(left.left, write) ** Perm(left.data, write) ** Perm(left.right, write);\n      loop_invariant left.left->state() ** left.right->state();\n      loop_invariant cur_contents == (tolist(left.left) + seq<int>{left.data} + tolist(left.right))\n                                      + seq<int>{cur.data} + tolist(cur.right);\n      loop_invariant (cur.state_contains((cur_contents).tail) -* top.state_contains(target_contents));\n      @*/\n      while (left.left != null)\n      {\n        //@ ghost Tree prev = cur;\n        //@ ghost seq<int> prev_contents = cur_contents;\n        cur = left;\n        left = cur.left;\n        /*@\n        unfold left.state();\n        ghost cur_contents = tolist(left.left) + seq<int>{left.data} + tolist(left.right);\n        ghost cur_contents = cur_contents + seq<int>{cur.data} + tolist(cur.right);\n        assert |prev_contents| > 0 ;\n        assert |cur_contents| > 0 ;\n        assert prev_contents == cur_contents + seq<int>{prev.data} + tolist(prev.right);\n        package (cur.state_contains(cur_contents.tail) -* top.state_contains(target_contents)) {\n          fold prev.state();\n          apply prev.state_contains(prev_contents.tail) -* top.state_contains(target_contents);\n        }\n        @*/\n      }\n      cur.left = left.left;\n      //@ fold cur.state();\n      /*@\n      [/expect assertFailed:false]\n      assert tolist(cur)==(cur_contents).tail;\n      [/end]\n      @*/\n      //@ assert cur.state_contains(tolist(cur));\n      //@ assert cur.state_contains((cur_contents).tail);\n      //@ apply cur.state_contains((cur_contents).tail) -* top.state_contains(target_contents);\n      return top;\n    }\n  }\n",
        "methodStartingLine": 50,
        "methodEndingLine": 107,
        "jml": "//@ requires top!=null ** top.state();\n//@ ensures  contains(\\result,\\old(tolist(top)).tail);\n//@ ensures  \\old(sorted(top)) ==> sorted(\\result);"
    },
    {
        "repository": "github.com/utwente-fmt/vercors",
        "file": "examples/concepts/permissions/RosterFixed.java",
        "code": "  void updateGrade(int id, int grade) {\n    /*@\n      unfold state();\n      unfold ids_and_links();\n      unfold grades_and_links();\n    @*/\n    if (this.id == id) {\n      this.grade = grade;\n    } else if (next != null) {\n      //@ fold next.state();\n      next.updateGrade(id,grade);\n      //@ unfold next.state();\n    }\n    /*@\n      fold ids_and_links();\n      fold grades_and_links();\n      fold state();\n    @*/\n  }\n",
        "methodStartingLine": 37,
        "methodEndingLine": 55,
        "jml": "//@ requires n->state();\n//@ ensures this.state();\n//@ requires state();\n//@ ensures state();"
    },
    {
        "repository": "github.com/utwente-fmt/vercors",
        "file": "examples/concepts/permissions/RosterFixed.java",
        "code": "  boolean contains(int id) {\n    //@ unfold ids_and_links();\n    boolean b = this.id==id;\n    if(!b && next!=null){\n      b=next.contains(id);\n    }\n    //@ fold ids_and_links();\n    return b;\n  }\n",
        "methodStartingLine": 59,
        "methodEndingLine": 67,
        "jml": "//@ requires ids_and_links();\n//@ ensures ids_and_links();"
    },
    {
        "repository": "github.com/utwente-fmt/vercors",
        "file": "examples/concepts/abrupt/OverloadedReturn.java",
        "code": "    int m(int x) {\n        try {\n            return x + 2;\n        } finally {\n\n        }\n    }\n",
        "methodStartingLine": 8,
        "methodEndingLine": 14,
        "jml": "//@ ensures \\result == x + 2;"
    },
    {
        "repository": "github.com/utwente-fmt/vercors",
        "file": "examples/concepts/abrupt/OverloadedReturn.java",
        "code": "    int m(int x, int y) {\n        try {\n            return x + y + 10;\n        } finally {\n\n        }\n    }\n",
        "methodStartingLine": 17,
        "methodEndingLine": 23,
        "jml": "//@ ensures \\result == x + y + 10;"
    },
    {
        "repository": "github.com/utwente-fmt/vercors",
        "file": "examples/concepts/typevalues/TypeExample1.java",
        "code": "  void m1(){\n    //@ assert this instanceof C;\n    //@ assert \\typeof(this) == \\type(C);\n  }\n",
        "methodStartingLine": 16,
        "methodEndingLine": 19,
        "jml": "//@ requires \\typeof(this) == \\type(C);"
    },
    {
        "repository": "github.com/utwente-fmt/vercors",
        "file": "examples/concepts/typevalues/TypeExample1.java",
        "code": "  void m2(){\n    //@ assert this instanceof C;\n  }\n",
        "methodStartingLine": 22,
        "methodEndingLine": 24,
        "jml": "//@ requires this instanceof C;"
    },
    {
        "repository": "github.com/utwente-fmt/vercors",
        "file": "examples/concepts/import/src/separate/Util.java",
        "code": "    public static int incr(int x){\n      return x+2;\n    }\n",
        "methodStartingLine": 15,
        "methodEndingLine": 17,
        "jml": "//@ ensures \\result==x+1;"
    },
    {
        "repository": "github.com/utwente-fmt/vercors",
        "file": "examples/concepts/abrupt/SynchronizedReturn.java",
        "code": "    synchronized void m() {\n        n();\n        return;\n    }\n",
        "methodStartingLine": 25,
        "methodEndingLine": 28,
        "jml": "//@ ensures committed(this);\n//@ requires committed(this);"
    },
    {
        "repository": "github.com/utwente-fmt/vercors",
        "file": "examples/concepts/abrupt/ExceptionsAndAbrupt.java",
        "code": "    public int foo(int input_i) {\n        int i = input_i;\n        l1: {\n            try{\n                if (i==0) {\n                    break l1;\n                }\n                i = i + 1;\n            } catch (Exception e) {\n                // Nothing\n                //@ assert false; // Is not executed\n            } finally{\n                i = i + 1;\n            }\n        }\n\n        i = i + 1;\n\n        return i;\n    }\n",
        "methodStartingLine": 13,
        "methodEndingLine": 32,
        "jml": "//@ ensures \\old(input_i) == 0 ==> \\result == \\old(input_i) + 2;\n//@ ensures \\old(input_i) != 0 ==> \\result == \\old(input_i) + 3;"
    },
    {
        "repository": "github.com/utwente-fmt/vercors",
        "file": "examples/concepts/abrupt/ExceptionsAndAbrupt.java",
        "code": "    public int bar() {\n        IllegalArgumentException e = new IllegalArgumentException();\n        int i = 0;\n        try {\n            throw e;\n        } catch (IllegalStateException e0) {\n            //@ assert false; // Should never happen\n            return 0;\n        } catch (RuntimeException e1) {\n            i = 10;\n            return 1;\n        } finally {\n            //@ assert i == 10; // Went through the RunTimeException first\n            return 2;\n        }\n    }\n",
        "methodStartingLine": 35,
        "methodEndingLine": 50,
        "jml": "//@ ensures \\result == 2;"
    },
    {
        "repository": "github.com/utwente-fmt/vercors",
        "file": "examples/concepts/javabip/casinoBroken/Player.java",
        "code": "    @Transition(name = PREPARE_BET, source = GAME_AVAILABLE, target = BET_PREPARED)\n    public void prepareBet() {\n        bet = (int) (Math.random() * purse);\n        guess = Math.random() < 0.5 ? HEADS : TAILS;\n        purse = purse - bet;\n        //@ ghost System.staticInvariant();\n        System.out.println(\"PLAYER\" + id.toString()\n                + \": bet \" + new Integer(bet).toString()\n                + \" prepared, purse: \" + new Integer(purse).toString());\n    }\n",
        "methodStartingLine": 30,
        "methodEndingLine": 39,
        "jml": "//@ requires purse >= 0;"
    },
    {
        "repository": "github.com/utwente-fmt/vercors",
        "file": "examples/concepts/abrupt/SignalsThrowNoThrows.java",
        "code": "    final void foo() {\n        x = x + 1;\n    }\n",
        "methodStartingLine": 16,
        "methodEndingLine": 18,
        "jml": "//@ requires Perm(x, 1);\n//@ ensures Perm(x, 1) ** x == (\\old(x) + 1);"
    },
    {
        "repository": "github.com/utwente-fmt/vercors",
        "file": "examples/concepts/abrupt/SignalsThrowNoThrows.java",
        "code": "    final void bar() {\n        try {\n            foo();\n            x = 20;\n            //@ assert x == 20;\n            throw new MyException();\n            //@ assert false;\n            x = 30;\n        } catch (MyException e) {\n            //@ assert x == 20;\n            x = 40;\n            //@ assert x == 40;\n        } catch (FooException f) {\n            //@ assert x == 10;\n            x = 50;\n            //@ assert x == 50;\n        }\n        //@ assert x == 40 || x == 50;\n    }\n",
        "methodStartingLine": 22,
        "methodEndingLine": 40,
        "jml": "//@ requires Perm(x, 1);\n//@ ensures Perm(x, 1) ** (x == 40 || x == 50);"
    },
    {
        "repository": "github.com/utwente-fmt/vercors",
        "file": "examples/concepts/abrupt/NestedTryCatchFinally.java",
        "code": "    void m() throws IOException {\n        try {\n            throw new IOException();\n        } finally {\n            try {\n                throw new ArithmeticException();\n            } catch (ArithmeticException e) {\n\n            }\n        }\n    }\n",
        "methodStartingLine": 11,
        "methodEndingLine": 21,
        "jml": "//@ ensures false;"
    },
    {
        "repository": "github.com/utwente-fmt/vercors",
        "file": "examples/concepts/javabip/casinoBroken/Operator.java",
        "code": "    @Transition(name = CREATE_GAME, source = WORKING, target = WORKING, requires = \"newPot >= 0\")\n    @Transition(name = CREATE_GAME, source = PUT_FUNDS, target = PUT_FUNDS, requires = \"newPot >= 0\")\n    @Transition(name = CREATE_GAME, source = WITHDRAW_FUNDS, target = WITHDRAW_FUNDS, requires = \"newPot >= 0\")\n    @Transition(name = DECIDE_BET, source = WORKING, target = WORKING, requires = \"newPot >= 0\")\n    @Transition(name = DECIDE_BET, source = PUT_FUNDS, target = PUT_FUNDS, requires = \"newPot >= 0\")\n    @Transition(name = DECIDE_BET, source = WITHDRAW_FUNDS, target = WITHDRAW_FUNDS, requires = \"newPot >= 0\")\n    public void gameStep(@Data(name = AVAILABLE_FUNDS) int newPot) {\n        this.pot = newPot;\n        //@ ghost System.staticInvariant();\n        System.out.println(\"OPERATOR\" + id.toString() + \": making one step in the game\");\n    }\n",
        "methodStartingLine": 35,
        "methodEndingLine": 45,
        "jml": "//@ requires id != null;"
    },
    {
        "repository": "github.com/utwente-fmt/vercors",
        "file": "examples/concepts/javabip/casinoAdjusted/Player.java",
        "code": "    @Transition(name = PREPARE_BET, source = GAME_AVAILABLE, target = BET_PREPARED)\n    public void prepareBet() {\n        bet = (int) (Math.random() * purse);\n        guess = Math.random() < 0.5 ? HEADS : TAILS;\n        purse = purse - bet;\n        //@ ghost System.staticInvariant();\n        System.out.println(\"PLAYER\" + id.toString()\n                + \": bet \" + new Integer(bet).toString()\n                + \" prepared, purse: \" + new Integer(purse).toString());\n    }\n",
        "methodStartingLine": 30,
        "methodEndingLine": 39,
        "jml": "//@ requires purse >= 0;"
    },
    {
        "repository": "github.com/utwente-fmt/vercors",
        "file": "examples/archive/chalice/synchronizers/Semaphore.java",
        "code": "    private boolean tryAcquire(){\n        boolean r = false;\n        //@ witness tcri:inv(*);\n        //@ witness tcepi:inv(*);\n        //@ witness tceni:inv(*);\n        int c = get();\n        if( c > 0 ){\n            int nextc = c-1;\n            //@ assume c <= permits;\n\n            //@    fold tcri: inv(part(0,nextc,permits)-part(0,c,permits));\n            r = compareAndSet(c,nextc) /*@ with { max=permits; cri = tcri; } then { tcepi = cepi; tceni = ceni; } @*/;\n            //@    assert (c*100)/permits-(nextc*100)/permits == 100/permits;\n\n            /*@\n             if(r){\n                tae = tcepi;\n             }else{\n                unfold tceni: inv(part(0,nextc,permits)-part(0,c,permits));\n             }\n             @*/\n\n        }\n        return r;\n    }\n",
        "methodStartingLine": 49,
        "methodEndingLine": 73,
        "jml": "//@ requires true;\n//@ ensures true;\n//@ requires max >0 && x <=max && n<=max && 100%max==0;\n//@ requires cri:inv(part(0,n,max)-part(0,x,max));\n//@ ensures  \\result ==> cepi:inv(part(0,x,max)-part(0,n,max));\n//@ ensures !\\result ==> ceni:inv(part(0,n,max)-part(0,x,max));\n//@ requires Value(permits) ** permits>0 ** permits <=100 ** 100%permits==0;\n//@ ensures !\\result ==> Value(permits) ** permits>0 ** permits <=100 ** 100%permits==0;\n//@ ensures \\result ==> Value(permits) ** permits <=100 ** permits>0  ** tae: inv(100/permits);"
    },
    {
        "repository": "github.com/utwente-fmt/vercors",
        "file": "examples/archive/chalice/synchronizers/Semaphore.java",
        "code": "    public void doAcquire(){\n        //@ witness tri:inv(*);\n        boolean stop = tryAcquire() /*@ with{} then{ tri = tae; } @*/;\n        /*\n         if(stop)\n            dae = tri;\n         */\n\n        //@ loop_invariant stop ==> Value(permits)** permits>0 ** permits<=100 ** 100%permits==0 ** lri:inv(100/permits);\n        //@ loop_invariant !stop ==> Value(permits)** permits>0 ** permits<=100 ** 100%permits==0;\n        while(!stop) /*@ with { lri=tri; } then { dae =lri ;} @*/{\n            stop = tryAcquire() /*@ with {} then { lri=tae; } @*/;\n        }\n    }\n",
        "methodStartingLine": 77,
        "methodEndingLine": 90,
        "jml": "//@ requires Value(permits)**permits>0** permits<=100 ** 100%permits==0;\n//@ ensures Value(permits)**permits>0** permits<=100 ** 100%permits==0 ** dae:inv(100/permits);"
    },
    {
        "repository": "github.com/utwente-fmt/vercors",
        "file": "examples/archive/chalice/synchronizers/Semaphore.java",
        "code": "    private boolean tryRelease(){\n        boolean r = false;\n        //@ witness tcri:inv(*);\n        //@ witness tcepi:inv(*);\n        //@ witness tceni:inv(*);\n        int c = get();\n        //@ assume c<permits && c>=0;\n        int nextc = c+1;\n        //@    assert (nextc*100)/permits-(c*100)/permits == 100/permits;\n        // fold tcri: inv(part(0,nextc,permits)-part(0,c,permits));\n        r = compareAndSet(c,nextc) /*@ with { max = permits; cri = trr; } then { tcepi = cepi; tceni = ceni; } @*/;\n        /*@ if(r){\n            unfold tcepi:inv(part(0,c,permits)-part(0,nextc,permits));\n         }else{\n             tre=tceni;\n         }@*/\n        return r;\n    }\n",
        "methodStartingLine": 95,
        "methodEndingLine": 112,
        "jml": "//@ requires Value(permits) ** permits>0 ** permits<=100 ** 100%permits==0 ** trr:inv(100/permits);\n//@ ensures \\result ==> Value(permits) ** permits>0 ** permits<=100;\n//@ ensures !\\result ==> Value(permits) ** permits>0 ** permits<=100 ** tre:inv(100/permits);"
    },
    {
        "repository": "github.com/utwente-fmt/vercors",
        "file": "examples/archive/chalice/synchronizers/Semaphore.java",
        "code": "    public void doRelease(){\n        //@ witness tri:inv(*);\n        boolean stop = tryRelease() /*@ with { trr = dar; } then { tri=tre; } @*/;\n        /*\n         if(!stop)\n            dae = tri;\n         */\n\n        //@ loop_invariant (!stop) ==> Value(permits)**permits>0**permits<=100**100%permits==0**lri:inv(100/permits);\n        //@ loop_invariant (stop) ==> Value(permits)**permits>0**permits<=100**100%permits==0;\n        while(!stop) /*@ with { lri = tri; } then {} @*/{\n            stop = tryRelease() /*@ with { trr=lri; } then { lri=tre; } @*/;\n        }\n    }\n",
        "methodStartingLine": 116,
        "methodEndingLine": 129,
        "jml": "//@ requires Value(permits)**permits>0 ** permits<=100 ** 100%permits==0 ** dar:inv(100/permits);\n//@ ensures Value(permits)**permits>0 ** permits<=100 ** 100%permits==0;"
    },
    {
        "repository": "github.com/utwente-fmt/vercors",
        "file": "examples/technical/exception-patterns/CatchWhile.java",
        "code": "    void m (int n) {\n        boolean[] xs = new boolean[n];\n        boolean throwB = randomBoolean();\n\n        try {\n            if (throwB) {\n                throw new Exception();\n            }\n        } catch (Exception e) {\n            int i = 0;\n            //@ loop_invariant 0 <= i && i <= n;\n            //@ loop_invariant xs != null ** xs.length == n;\n            //@ loop_invariant (\\forall* int j = 0 .. n; Perm(xs[j], write));\n            //@ loop_invariant (\\forall int j = 0 .. i; xs[j]);\n            while (i < n) {\n                xs[i] = true;\n                i++;\n            }\n        }\n\n        //@ assert xs != null ** xs.length == n;\n        //@ assert (\\forall* int j = 0 .. n; Perm(xs[j], write));\n\n        if (throwB) {\n            //@ assert (\\forall int j = 0 .. n; xs[j]);\n        } else {\n            //@ assert (\\forall int j = 0 .. n; !xs[j]);\n        }\n    }\n",
        "methodStartingLine": 9,
        "methodEndingLine": 37,
        "jml": "//@ requires n >= 0;"
    },
    {
        "repository": "github.com/utwente-fmt/vercors",
        "file": "examples/concepts/javabip/casinoAdjusted/Operator.java",
        "code": "    @Transition(name = CREATE_GAME, source = WORKING, target = WORKING, requires = \"newPot >= 0\")\n    @Transition(name = CREATE_GAME, source = PUT_FUNDS, target = PUT_FUNDS, requires = \"newPot >= 0\")\n    @Transition(name = CREATE_GAME, source = WITHDRAW_FUNDS, target = WITHDRAW_FUNDS, requires = \"newPot >= 0\", guard = SAFE_GAME_STEP)\n    @Transition(name = DECIDE_BET, source = WORKING, target = WORKING, requires = \"newPot >= 0\")\n    @Transition(name = DECIDE_BET, source = PUT_FUNDS, target = PUT_FUNDS, requires = \"newPot >= 0\")\n    @Transition(name = DECIDE_BET, source = WITHDRAW_FUNDS, target = WITHDRAW_FUNDS, requires = \"newPot >= 0\", guard = SAFE_GAME_STEP)\n    public void gameStep(@Data(name = AVAILABLE_FUNDS) int newPot) {\n        this.pot = newPot;\n        //@ ghost System.staticInvariant();\n        System.out.println(\"OPERATOR\" + id.toString() + \": making one step in the game\");\n    }\n",
        "methodStartingLine": 35,
        "methodEndingLine": 45,
        "jml": "//@ requires id != null;"
    },
    {
        "repository": "github.com/utwente-fmt/vercors",
        "file": "examples/technical/exception-patterns/CatchThrowE.java",
        "code": "    void  m() throws Exception {\n        boolean throwB = randomBoolean();\n\n        try {\n            x = 3;\n            chosenE = new Exception();\n\n            if (throwB) {\n                throw chosenE;\n            }\n        } catch (Exception e) {\n            x += 2;\n            throw e;\n            //@ assert false;\n        }\n\n        //@ assert x == 3;\n    }\n",
        "methodStartingLine": 15,
        "methodEndingLine": 32,
        "jml": "//@ ensures x == 3;"
    },
    {
        "repository": "github.com/utwente-fmt/vercors",
        "file": "examples/technical/exception-patterns/CatchSwitch.java",
        "code": "    void m () {\n        boolean throwB = randomBoolean();\n        int picked = pickBetween(0, 3);\n        int switchResult = 0;\n\n        try {\n            if (throwB) {\n                throw new Exception();\n            }\n        } catch (Exception e) {\n            switch (picked) {\n                case 0:\n                    switchResult = 10;\n                    break;\n                case 1:\n                    switchResult = 11;\n                    break;\n                case 2:\n                    switchResult = 12;\n                    break;\n                default:\n                    //@ assert false;\n                    break;\n            }\n        }\n\n        if (throwB) {\n            //@ assert picked == 0 ==> switchResult == 10;\n            //@ assert picked == 1 ==> switchResult == 11;\n            //@ assert picked == 2 ==> switchResult == 12;\n        } else {\n            //@ assert switchResult == 0;\n        }\n    }\n",
        "methodStartingLine": 11,
        "methodEndingLine": 44,
        "jml": "//@ ensures start <= \\result && \\result < end;"
    },
    {
        "repository": "github.com/utwente-fmt/vercors",
        "file": "examples/technical/exception-patterns/CatchReturn.java",
        "code": "    int[]  m(int[] xs) {\n        int i = 0;\n\n        //@ loop_invariant 0 <= i && i <= xs.length;\n        //@ loop_invariant (\\forall int j = 0 .. i; xs[j] == 1);\n        //@ loop_invariant (\\forall int j = i .. xs.length; xs[j] == \\old(xs[j]));\n        while (i < xs.length) {\n            try {\n                if (xs[i] != 0) {\n                    xs[i] = xs[i] / xs[i];\n                } else {\n                    throw new ArithmeticException();\n                }\n            } catch (ArithmeticException e) {\n                return null;\n            }\n            i++;\n        }\n\n        return xs;\n    }\n",
        "methodStartingLine": 10,
        "methodEndingLine": 30,
        "jml": "//@ ensures \\result != null ==> \\result == xs;\n//@ ensures \\result != null ==> (\\forall int j = 0 .. \\result.length; xs[j] == 1);\n//@ ensures \\result == null ==> (\\exists int j = 0 .. xs.length; xs[j] == 0);"
    },
    {
        "repository": "github.com/utwente-fmt/vercors",
        "file": "examples/concepts/abrupt/ExceptionAbortsAssignment.java",
        "code": "    void m1() {\n        int x = 0;\n        try {\n            x = e();\n            //@ assert false; // Cannot be triggered, as exception is guaranteed\n        } catch (RuntimeException e) {\n\n        }\n        //@ assert x == 0;\n    }\n",
        "methodStartingLine": 10,
        "methodEndingLine": 19,
        "jml": "//@ ensures false;"
    },
    {
        "repository": "github.com/utwente-fmt/vercors",
        "file": "examples/technical/exception-patterns/FinallyReturn.java",
        "code": "    int  m() {\n        int x = 0;\n\n        try {\n            x += 1;   \n        } finally {\n            x += 2;\n            return x;\n        }\n\n        //@ assert false;\n    }\n",
        "methodStartingLine": 7,
        "methodEndingLine": 18,
        "jml": "//@ ensures \\result == 3;"
    },
    {
        "repository": "github.com/utwente-fmt/vercors",
        "file": "examples/technical/exception-patterns/CatchContinue.java",
        "code": "    void m (int n) {\n        int i = 0;\n        int[] xs = new int[n];\n\n        //@ loop_invariant 0 <= i && i <= n;\n        //@ loop_invariant xs != null && xs.length == n;\n        //@ loop_invariant (\\forall* int j = 0 .. n; Perm(xs[j], write));\n        //@ loop_invariant (\\forall int j = 0 .. i; j % 2 == 0 ==> xs[j] == 0);\n        while (i < n) {\n            try {\n                int currentI = i;\n                i++;\n                if (currentI % 2 != 0) {\n                    throw new Exception();\n                } \n                xs[currentI] = 0;\n            } catch (Exception e) {\n                continue;\n            }\n        }\n\n        //@ assert (\\forall int j = 0 .. n; j % 2 == 0 ==> xs[j] == 0);\n    }\n",
        "methodStartingLine": 7,
        "methodEndingLine": 29,
        "jml": "//@ requires n >= 0;"
    },
    {
        "repository": "github.com/utwente-fmt/vercors",
        "file": "examples/archive/chalice/synchronizers/ReentrantLock.java",
        "code": "    public void dolock(int tid){\n        boolean res = false;\n\n        //@ int role = 1, S=0, M=1;\n\n        /*@ witness tgrp:inv(*);\n            fold tgrp:inv(part(role,last,M));\n\n            witness tgep:inv(*);\n            witness tgeh:handle(*,*);\n         */\n\n        int curr = get() /*@ with { max = M; r=role; l = last; grh = lrh;  grp = tgrp; } then { tgeh = geh; tgep = gep; } */;\n        // check re-entrant\n        if ( tid == curr ) {\n            //@ assume (held > 0);\n            //@ unfold lrs:state(tid,held);\n            //@ assume (held == count);\n\n            count = count+1;\n\n            //@ leh=tgeh;\n        }\n        // check first-entrant\n        if( tid != curr){\n            //@ assume (held == 0);\n\n            boolean succ = false;\n            //@ witness tcra:trans(*,*,*);\n            //@ witness tcrs:inv(*);\n            //@ witness tces:inv(*);\n            //@ witness tcepp:inv(*);\n            //@ fold tcrs:inv(part(S,tid,M)-part(S,0,M));\n            //@ loop_invariant  !succ    ==> (invhn:handle(role,curr)) ** (invpn: inv(part(role,curr,M))) ** invsn: inv(part(S,tid,M)-part(S,0,M));\n            //@ loop_invariant  succ    ==>    (invhp:handle(role,tid)) ** (invpp: inv(part(role,tid,M))) ** invsp: inv(part(S,0,M)-part(S,tid,M));\n            while (!succ) /*@ with{ invhn = tgeh; invpn = tgep; invpp = tgep;  invsn = tcrs; }\n                           then { tces = invsp; tcepp = invpp; leh = invhp;   } @*/ {\n\n               //@     fold tcra:trans(role,0,tid);\n                succ = compareAndSet(0,tid) /*@ with{ max = 1; r = role; l = curr; crh = invhn; crp = invpn; cra = tcra; crs = invsn; }\n                                        then{ invhn = cehn; invpn = cepn; invsn = cesn; invhp = cehp; invpp = cepp; invsp = cesp;  } @*/ ;\n            }\n            //@ unfold tces: inv(part(S,0,1)-part(S,tid,1));\n            //@ assume (held == count);\n            count = count+1;\n        }\n        //@ fold les:state(tid,held+1);\n        return;\n    }\n",
        "methodStartingLine": 75,
        "methodEndingLine": 123,
        "jml": "//@ requires tid > 0;\n//@ requires lrs: state(tid,held);\n//@ requires lrh: handle(1,last);\n//@ ensures les: state(tid,held+1);\n//@ ensures (held == 0) ==> Perm(data,100) ;\n//@ ensures leh: handle(1,tid);"
    },
    {
        "repository": "github.com/utwente-fmt/vercors",
        "file": "examples/archive/chalice/synchronizers/ReentrantLock.java",
        "code": "    public void unlock(int tid){\n        //@ int role = 1, S=0, M=1;\n        //@ int last = tid;\n\n        //@ witness tgrp:inv(*);\n        //@ fold tgrp:inv(part(role,last,M));\n        //@ witness tgep:inv(*);\n        //@ witness tgeh:handle(*,*);\n        int curr = get() /*@ with { max = M; r=role; l=last; grh=urh;  grp=tgrp; } then { tgeh=geh; tgep=gep; } @*/;\n\n        // this should be a global invariant\n        //@ assume( curr==tid );\n\n        if ( curr == tid) {\n\n            //@ unfold urs:state(tid,held);\n            //@ assume (count == held);\n            if (count == 1) {\n                count = count-1;\n                //@ fold ues:state(tid,count);\n                //@ witness tsrp:inv(*);\n                //@ witness tsrs:inv(*);\n                //@ fold tsrp:inv(part(role,curr,M));\n                //@ fold tsrs:inv(part(S,0,M));\n                //@ witness tsra:trans(*,*,*);\n                //@ fold tsra:trans(role,curr,0);\n                set(0) /*@ with{ max = M; r = role; l = curr; srh = tgeh; srp = tsrp; sra = tsra; srs = tsrs; } then { ueuh = seh; } @*/;\n            }\n            else{\n                if (count > 1) {\n                    count = count-1;\n                    //@ fold ues:state(tid,held-1);\n                    //@ uelh = tgeh;\n                }\n            }\n        }\n    }\n",
        "methodStartingLine": 135,
        "methodEndingLine": 171,
        "jml": "//@ requires tid > 0;\n//@ requires held > 0;\n//@ requires urs: state(tid,held);\n//@ requires urh:handle(1,tid);\n//@ requires held > 0 ==> Perm(data,100);\n//@ ensures held == 1 ==> ueuh: handle(1,0);\n//@ ensures held > 1 ==> (uelh: handle(1,tid)) ** Perm(data,100);\n//@ ensures ues:state(tid,held-1);"
    },
    {
        "repository": "github.com/utwente-fmt/vercors",
        "file": "examples/technical/exception-patterns/CatchThrowNewE.java",
        "code": "    int  m() {\n        try {\n            x = 3;\n\n            if (randomBoolean()) {\n                throw new Exception();\n            }\n        } catch (Exception e) {\n            x += 2;\n            throw new RuntimeException();\n            //@ assert false;\n        }\n\n        //@ assert x == 3;\n    }\n",
        "methodStartingLine": 13,
        "methodEndingLine": 27,
        "jml": "//@ ensures x == 3;"
    },
    {
        "repository": "github.com/utwente-fmt/vercors",
        "file": "examples/archive/chalice/synchronizers/CountDownLatch.java",
        "code": "    public boolean tryCountDown(){\n    // Decrement count; signal when transition to zero\n        boolean r = false;\n        //int res = -1;\n        //@ int AT=1;\n\n        //@ witness tgrp:inv(*);\n        //@ witness tgep:inv(*);\n        //@ witness tce:inv(*);\n        //@ fold tgrp: inv(part(AT,count,count));\n\n        int c = get() /*@ with{ max=count; r = AT; l = count; grp = tgrp; } then { tgep = gep; } @*/ ;\n\n        if (c > 0){\n            //@ assume c<=count;\n            int nextc = c-1;\n            //@ witness tcesp:inv(*);\n            //@ witness tcesn:inv(*);\n            //@ witness tcepp:inv(*);\n            //@ witness tcepn:inv(*);\n            //@ assert ((count-nextc)*100)/count-((count-c)*100)/count == 100/count;\n            //@ assert part(AT,c,count)==0;\n\n            r = compareAndSet(c, nextc)/*@ with{ max=count; r=AT; l=c; crp = tgep; crs = crri; } then { tcesp = cesp; tcesn = cesn; tcepp = cepp; tcepn=cepn;} @*/;\n\n        /*@    if(r){\n                unfold tcesp: inv(part(0,c,count)-part(0,nextc,count));\n                unfold tcepp: inv(part(AT,nextc,count));\n            }else{\n                ceri = tcesn;\n                unfold tcepn: inv(part(AT,c,count));\n            }\n         @*/\n        }\n        /*@\n         if(c<=0)\n            ceri = crri;\n         @*/\n        return r;\n    }\n",
        "methodStartingLine": 52,
        "methodEndingLine": 91,
        "jml": "//@ requires Value(count) ** count>0 ** count<=100 ** 100%count==0 ** crri:inv(100/count);\n//@ ensures \\result ==> Value(count) ** count>0 ** count<=100 ** 100%count==0;\n//@ ensures !\\result ==> Value(count) ** count>0 ** count<=100 ** 100%count==0 ** ceri:inv(100/count);"
    },
    {
        "repository": "github.com/utwente-fmt/vercors",
        "file": "examples/archive/chalice/synchronizers/CountDownLatch.java",
        "code": "    public void countDown(){\n\n        boolean stop = false;\n        //@ loop_invariant (!stop) ==> Value(count)**count>0**count<=100 ** count%100==0 **linv:inv(100/count);\n        //@ loop_invariant (stop) ==> Value(count)**count>0**count<=100 ** count%100==0;\n        while(!stop) /*@ with { linv = crri; } @*/{\n            stop = tryCountDown() /*@ with { crri = linv; } then { linv = ceri; } @*/;\n        }\n\n    }\n",
        "methodStartingLine": 96,
        "methodEndingLine": 105,
        "jml": "//@ requires Value(count) ** count>0 ** count<=100 ** count%100==0 ** crri:inv(100/count);\n//@ ensures Value(count) ** count>0 ** count<=100 ** count%100==0;"
    },
    {
        "repository": "github.com/utwente-fmt/vercors",
        "file": "examples/archive/chalice/synchronizers/CountDownLatch.java",
        "code": "    public void await(){\n        //@ int last = count;\n        //@ int max = count;\n        //@ int PT = 2;\n        //@ witness tgrp:inv(*);\n        //@ witness tgep:inv(*);\n        //@ fold tgrp:inv(part(PT,last,max));\n        int s = get() /*@ with{ max = max; r = PT; l=last; grp = tgrp; } then { tgep=gep; } @*/;\n\n        //@ loop_invariant linv:inv(part(PT,s,max));\n        while(s!=0) /*@ with { linv = tgep; } then { aeri = linv; } @*/ {\n          s = get() /*@ with { max = max; r=PT; l=s; grp=linv; } then { linv=gep; } @*/;\n        }\n    }  \n",
        "methodStartingLine": 110,
        "methodEndingLine": 123,
        "jml": "//@ requires Value(count) ** count>0 ** count<=100 ** count%100==0;\n//@ ensures  Value(count) ** count>0 ** count<=100 ** count%100==0 ** aeri:inv(100/count);"
    },
    {
        "repository": "github.com/utwente-fmt/vercors",
        "file": "examples/technical/exception-patterns/FinallyContinue.java",
        "code": "    void  m(int n) {\n        int i = 0;\n        boolean[] xs = new boolean[n];\n\n        //@ loop_invariant 0 <= i && i <= n;\n        //@ loop_invariant xs != null ** xs.length == n;\n        //@ loop_invariant (\\forall* int j = 0 .. n; Perm(xs[j], write));\n        //@ loop_invariant (\\forall int j = 0 .. i; xs[j]);\n        while (i < n) {\n            try {\n                try {\n                    xs[i] = true;\n                    throw new Exception();\n                    //@ assert false;\n                } finally {\n                    i++;\n                    continue;\n                    //@ assert false;\n                }\n            } catch (Exception e) {\n                //@ assert false;\n            }\n        }\n\n        //@ assert (\\forall int j = 0 .. n; xs[j]);\n    }\n",
        "methodStartingLine": 7,
        "methodEndingLine": 32,
        "jml": "//@ requires n >= 0;"
    },
    {
        "repository": "github.com/utwente-fmt/vercors",
        "file": "examples/technical/exception-patterns/FinallyThrowNewE.java",
        "code": "    int  m() throws Exception {\n        boolean throwB = randomBoolean();\n\n        try {\n            x = 3;\n\n            if (throwB) {\n                throw new Exception();\n            }\n        } finally {\n            x += 2;\n            throw new Exception();\n            //@ assert false;\n        }\n\n        //@ assert false;\n    }\n",
        "methodStartingLine": 13,
        "methodEndingLine": 29,
        "jml": "//@ ensures false;"
    },
    {
        "repository": "github.com/utwente-fmt/vercors",
        "file": "examples/technical/exception-patterns/FinallyNestedTry.java",
        "code": "    int  m() {\n        x = 0;\n\n        boolean throwB1 = randomBoolean();\n        boolean throwB2 = randomBoolean();\n\n        try {\n            if (throwB1) {\n                x += 1;\n                throw new ArithmeticException();\n            }\n\n            x += 2;\n        } finally {\n            try {\n                x += 10;\n\n                if (throwB2) {\n                    throw new Exception();\n                }\n                \n                x += 20;\n            } catch (Exception e) {\n                x += 100;\n                throw new ArrayStoreException();\n            }\n        }\n    }\n",
        "methodStartingLine": 17,
        "methodEndingLine": 44,
        "jml": "//@ ensures x == 32;"
    },
    {
        "repository": "github.com/utwente-fmt/vercors",
        "file": "examples/technical/exception-patterns/CatchThrowNewEWrap.java",
        "code": "    int  m() throws Exception {\n        boolean throwB = randomBoolean();\n\n        try {\n            x = 3;\n\n            if (throwB) {\n                throw new Exception();\n            }\n        } catch (Exception e) {\n            x += 2;\n            throw new RuntimeException(e);\n            //@ assert false;\n        }\n\n        //@ assert x == 3;\n    }\n",
        "methodStartingLine": 13,
        "methodEndingLine": 29,
        "jml": "//@ ensures x == 3;"
    },
    {
        "repository": "github.com/utwente-fmt/vercors",
        "file": "examples/technical/staticResolve/subPackage/StaticImport.java",
        "code": "    public void test() {\n        int val = x;\n        int val2 = five();\n    }\n",
        "methodStartingLine": 7,
        "methodEndingLine": 10,
        "jml": "//@ requires Perm(x, write);"
    },
    {
        "repository": "github.com/utwente-fmt/vercors",
        "file": "examples/concepts/basic/ContractUnsatisfiableIntentional.java",
        "code": "  void foo() {\n    // Should therefore not be triggered.\n    //@ assert 5 == 6;\n  }\n",
        "methodStartingLine": 8,
        "methodEndingLine": 11,
        "jml": "//@ requires false;"
    },
    {
        "repository": "github.com/utwente-fmt/vercors",
        "file": "examples/concepts/basic/ContractUnsatisfiableUnintentional.java",
        "code": "  void bar() {\n    //@ assert 5 == 6;\n  }\n",
        "methodStartingLine": 9,
        "methodEndingLine": 11,
        "jml": "//@ requires 3 == 4;"
    },
    {
        "repository": "github.com/utwente-fmt/vercors",
        "file": "examples/concepts/abrupt/KeYAbruptTerminationChallengeCarbon.java",
        "code": "    void negatefirst() {\n        /*@\n            loop_invariant 0 <= i && i <= ia.length;\n            loop_invariant (\\forall int j; 0<=j && j<i; ia[j] >= 0 && ia[j] == \\old(ia[j]));\n            loop_invariant (\\forall int j; i<=j && j<ia.length; ia[j] == \\old(ia[j])); // Extra invariant needed\n         */\n        for (int i = 0 ; i < ia.length; i++) {\n            //@ assert ia == \\old(ia);\n            if (ia[i] < 0) {\n                ia[i] = -ia[i] ;\n                break ;\n            }\n        }\n        //@ assert ia == \\old(ia);\n    }\n",
        "methodStartingLine": 23,
        "methodEndingLine": 37,
        "jml": "//@ ensures ia.length == \\old(ia.length); // Extra contract needed for VerCors"
    },
    {
        "repository": "github.com/utwente-fmt/vercors",
        "file": "examples/concepts/abrupt/KeYAbruptTerminationChallengeSilicon.java",
        "code": "    void negatefirst() {\n        /*@\n            loop_invariant 0 <= i && i <= ia.length;\n            // See: https://github.com/utwente-fmt/vercors/issues/511\n            // loop_invariant ia == \\old(ia); // Extra invariant needed for Pass with silicon.\n            loop_invariant (\\forall int j; 0<=j && j<i; ia[j] >= 0 && ia[j] == \\old([/expect arrayBounds] ia[j] [/end]));\n            loop_invariant (\\forall int j; i<=j && j<ia.length; ia[j] == \\old(ia[j])); // Extra invariant needed\n         */\n        for (int i = 0 ; i < ia.length; i++) {\n            //@ assert ia == \\old(ia);\n            if (ia[i] < 0) {\n                ia[i] = -ia[i] ;\n                break ;\n            }\n        }\n        //@ assert ia == \\old(ia);\n    }\n",
        "methodStartingLine": 23,
        "methodEndingLine": 39,
        "jml": "//@ ensures ia.length == \\old(ia.length); // Extra contract needed for VerCors"
    },
    {
        "repository": "github.com/utwente-fmt/vercors",
        "file": "examples/technical/staticResolve/subPackage/DidNotForgetImport.java",
        "code": "    public void test() {\n        int val = Test.x;\n        int val2 = Test.five();\n    }\n",
        "methodStartingLine": 7,
        "methodEndingLine": 10,
        "jml": "//@ requires Perm(Test.x, write);"
    },
    {
        "repository": "github.com/utwente-fmt/vercors",
        "file": "examples/archive/known-problems/no-issue/quickselect/QuickSelect.java",
        "code": "    public static void swap(int[] a, int l, int h) {\n        int t = a[l];\n        a[l] = a[h];\n        a[h] = t;\n    }\n",
        "methodStartingLine": 30,
        "methodEndingLine": 34,
        "jml": "//@ requires low<=high;\n//@ ensures low<=\\result && \\result<=high;\n//@ requires 0 <= l ** l < a.length;\n//@ ensures a[l] == \\old(a[h]);\n//@ ensures a[h] == \\old(a[l]);"
    },
    {
        "repository": "github.com/utwente-fmt/vercors",
        "file": "examples/archive/known-problems/no-issue/quickselect/QuickSelect.java",
        "code": "    public static int partition(int[] a, int low, int high, int pivot) {\n        int l = low;\n        int h = high;\n        //@ loop_invariant low<=l && l<=high;\n        //@ loop_invariant low<=h && h<=high;\n        //@ loop_invariant (\\forall int i; low<=i && i<l; a[i]<pivot);\n        //@ loop_invariant (\\forall int i; l<=i && h<i && i<=high; pivot <= a[i]);\n        //@ loop_invariant l<=h;\n        //@ loop_invariant (\\exists int i; l<=i && i<=h; a[i] == pivot);\n        //@ loop_invariant (\\forall int i; 0<=i && i<low; (\\forall int j; low<=j && j<a.length; \\old(a[i]) <= \\old(a[j]))) ==> (\\forall int k; 0<=k && k<low; (\\forall int m; low<=m && m<a.length; a[k] <= a[m]));\n        //@ loop_invariant (\\forall int i; 0<=i && i<=high; (\\forall int j; high<j && j<a.length; \\old(a[i]) <= \\old(a[j]))) ==> (\\forall int k; 0<=k && k<=high; (\\forall int m; high<m && m<a.length; a[k] <= a[m]));\n        while(true){\n            //@ loop_invariant low<=l && l<=high;\n            //@ loop_invariant low<=h && h<=high;\n            //@ loop_invariant (\\forall int i; low<=i && i<l; a[i]<pivot);\n            //@ loop_invariant (\\forall int i; l<=i && h<i && i<=high; pivot <= a[i]);\n            //@ loop_invariant l<=h;\n            //@ loop_invariant (\\exists int i; l<=i && i<=h; a[i] == pivot);\n            //@ loop_invariant (\\forall int i; 0<=i && i<low; (\\forall int j; low<=j && j<a.length; \\old(a[i]) <= \\old(a[j]))) ==> (\\forall int k; 0<=k && k<low; (\\forall int m; low<=m && m<a.length; a[k] <= a[m]));\n            //@ loop_invariant (\\forall int i = 0 ..high, int j = high ..a.length; \\old(a[i]) <= \\old(a[j]) ) ==> (\\forall int k = 0 ..high, int m = high ..a.length; a[k] <= a[m]);\n            while(a[l] < pivot && l<h){\n                l = l+1;\n            }\n            //@ loop_invariant low<=l && l<=high;\n            //@ loop_invariant a[l]>=pivot || l>=h;\n            //@ loop_invariant low<=h && h<=high;\n            //@ loop_invariant (\\forall int i; low<=i && i<l; a[i]<pivot);\n            //@ loop_invariant (\\forall int i; l<=i && h<i && i<=high; pivot <= a[i]);\n            //@ loop_invariant l<=h;\n            //@ loop_invariant a[l] >= pivot;\n            //@ loop_invariant (\\exists int i; l<=i && i<=h; a[i] == pivot);\n            //@ loop_invariant (\\forall int i; 0<=i && i<low; (\\forall int j; low<=j && j<a.length; \\old(a[i]) <= \\old(a[j]))) ==> (\\forall int k; 0<=k && k<low; (\\forall int m; low<=m && m<a.length; a[k] <= a[m]));\n            //@ loop_invariant (\\forall int i; 0<=i && i<=high; (\\forall int j; high<j && j<a.length; \\old(a[i]) <= \\old(a[j]))) ==> (\\forall int k; 0<=k && k<=high; (\\forall int m; high<m && m<a.length; a[k] <= a[m]));\n            while(a[h] > pivot && h>l){\n                h = h-1;\n            }\n            if(l>=h) {\n                return l;\n            }else{\n                swap(a, l, h);\n                if(a[l] < pivot) {\n                    l = l+1;\n                } else {\n                    h = h-1;\n                }\n            }\n        }\n    }\n",
        "methodStartingLine": 49,
        "methodEndingLine": 96,
        "jml": "//@ requires (\\exists int i; low<=i && i<=high; a[i] == pivot);\n//@ ensures low<=\\result && \\result<=high;\n//@ ensures (\\forall int i; low<=i && i<\\result; a[i] < pivot);\n//@ ensures (\\forall int i; \\result<=i && i<=high; pivot <= a[i]);\n//@ ensures a[\\result] == pivot;\n//@ ensures (\\forall int i; low<=i && i<\\result; (\\forall int j; \\result<=j && j<=high; a[i] < a[j]));\n//@ ensures (\\forall int i; low<=i && i<=\\result; (\\forall int j; \\result<=j && j<=high; a[i] <= a[j]));\n//@ ensures (\\forall int i; 0<=i && i<low; (\\forall int j; low<=j && j<a.length; \\old(a[i]) <= \\old(a[j]))) ==> (\\forall int k; 0<=k && k<low; (\\forall int l; low<=l && l<a.length; a[k] <= a[l]));\n//@ ensures (\\forall int i; 0<=i && i<=high; (\\forall int j; high<j && j<a.length; \\old(a[i]) <= \\old(a[j]))) ==> (\\forall int k; 0<=k && k<=high; (\\forall int m; high<m && m<a.length; a[k] <= a[m]));"
    },
    {
        "repository": "github.com/utwente-fmt/vercors",
        "file": "examples/archive/known-problems/no-issue/quickselect/QuickSelect.java",
        "code": "    public static int select(int[] list, int k){\n        int left = 0;\n        int right = list.length-1;\n        int pivotIndex = k;\n        int pivot = list[pivotIndex];\n        //@ loop_invariant 0<=left && left<list.length;\n        //@ loop_invariant 0<=right && right<list.length;\n        //@ loop_invariant left<=pivotIndex && pivotIndex<=right;\n        //@ loop_invariant left <= k && right >= k;\n        //@ loop_invariant (\\forall int i; 0<=i && i<left; (\\forall int j; left<=j && j<list.length; list[i] <= list[j]));\n        //@ loop_invariant (\\forall int i; 0<=i && i<=right; (\\forall int j; right<j && j<list.length; list[i] <= list[j]));\n        while (left < right) {\n            pivot = list[pivotIndex];\n            pivotIndex = partition(list, left, right, pivot);\n            if (k == pivotIndex) {\n                return list[k];\n            }           else  {\n                if (k < pivotIndex) {\n                    right = pivotIndex - 1;\n                }else{\n                    left = pivotIndex + 1;\n                }\n            }\n            printArray(list, left, right);\n            pivotIndex = random_between(left, right);\n        }\n        return list[left];\n    } \n",
        "methodStartingLine": 105,
        "methodEndingLine": 132,
        "jml": "//@ ensures (\\exists int i; 0<=i && i<list.length; list[i] == \\result);\n//@ ensures (\\forall int i; 0<=i && i<=k; list[i] <= \\result);\n//@ ensures (\\forall int i; k<= i && i<list.length; \\result <= list[i]);"
    },
    {
        "repository": "github.com/utwente-fmt/vercors",
        "file": "examples/archive/known-problems/no-issue/quickselect/QuickSelect.java",
        "code": "    public static void main(String[] args) {\n        int[] nums = new int[20];\n        for(int i=0; i<nums.length; i++){\n            nums[i] = (int)(100*Math.random());\n        }\n        int k = (int)(nums.length*Math.random());\n        String ks = \"th\";\n        if(k==0) ks = \"st\";\n        if(k==1) ks = \"nd\";\n        System.out.println(String.format(\"Find the %d%s smallest number in\", k+1, ks));\n        printArray(nums, 0, nums.length-1);\n        System.out.println(\"...\");\n        int kth = select(nums, k);\n        printArray(nums, k, k);\n    }\n",
        "methodStartingLine": 135,
        "methodEndingLine": 149,
        "jml": "//@ requires false;"
    },
    {
        "repository": "github.com/utwente-fmt/vercors",
        "file": "examples/archive/known-problems/no-issue/quickselect/ArrayPrinter.java",
        "code": "    public static void printArray(int[] a, int l, int h){\n        for(int i=0; i < a.length; i++){\n            if(i==l || i==h+1) {\n                System.out.print(\"|\");\n            } else {\n                System.out.print(\" \");\n            }\n            System.out.print(String.format(\"%2d\", a[i]));\n        }\n        if(h==a.length-1) {\n            System.out.print(\"|\");\n        }\n        System.out.println();\n    }\n",
        "methodStartingLine": 14,
        "methodEndingLine": 27,
        "jml": "//@ requires false;"
    },
    {
        "repository": "github.com/utwente-fmt/vercors",
        "file": "examples/archive/known-problems/no-issue/quickselect/RandomBetween.java",
        "code": "    public static int random_between(int low, int high) {\n        return ((int)Math.random()*(high+1-low))+low;\n    }\n",
        "methodStartingLine": 14,
        "methodEndingLine": 16,
        "jml": "//@ requires low<=high;\n//@ ensures low<=\\result && \\result<=high;"
    },
    {
        "repository": "github.com/utwente-fmt/vercors",
        "file": "examples/technical/staticResolve/Test.java",
        "code": "    public static int five() {\n        return x;\n    }\n",
        "methodStartingLine": 8,
        "methodEndingLine": 10,
        "jml": "//@ requires Perm(x, write);"
    },
    {
        "repository": "github.com/utwente-fmt/vercors",
        "file": "examples/technical/staticResolve/TestImport.java",
        "code": "    public void test() {\n\n        int val = Test.x;\n\n        int val = Test.five();\n\n    }\n",
        "methodStartingLine": 5,
        "methodEndingLine": 11,
        "jml": "//@ requires Perm(Test.x, write);"
    }
]